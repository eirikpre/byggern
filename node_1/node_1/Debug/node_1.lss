
node_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  000017ae  00001842  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800234  00800234  00001976  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001976  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000250  00000000  00000000  000019d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000020b3  00000000  00000000  00001c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000da1  00000000  00000000  00003cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bf5  00000000  00000000  00004a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000548  00000000  00000000  0000566c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000654  00000000  00000000  00005bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e99  00000000  00000000  00006208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  000070a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <joy_calibrate+0x4>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ee ea       	ldi	r30, 0xAE	; 174
     37c:	f7 e1       	ldi	r31, 0x17	; 23
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a4 33       	cpi	r26, 0x34	; 52
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a4 e3       	ldi	r26, 0x34	; 52
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a7 34       	cpi	r26, 0x47	; 71
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 b4 04 	call	0x968	; 0x968 <main>
     39e:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_read>:
#include "ADC.h"


char ADC_read(int channel)
{
	*ADC_START = 0x04 + channel;
     3a6:	8c 5f       	subi	r24, 0xFC	; 252
     3a8:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ac:	81 e4       	ldi	r24, 0x41	; 65
     3ae:	8a 95       	dec	r24
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <ADC_read+0x8>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <ADC_read+0xe>
	_delay_us(40);
	return *ADC_START;
     3b4:	80 91 00 14 	lds	r24, 0x1400
}
     3b8:	08 95       	ret

000003ba <mcp2515_read>:
	{
		printf("MCP2515 is not in config mode!\n");
	}
	
}
char mcp2515_read (char addr){
     3ba:	cf 93       	push	r28
     3bc:	c8 2f       	mov	r28, r24
	char result;
	
	spi_select();
     3be:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_select>
	
	spi_transmit(MCP_READ);
     3c2:	83 e0       	ldi	r24, 0x03	; 3
     3c4:	0e 94 cb 02 	call	0x596	; 0x596 <spi_transmit>
	spi_transmit(addr);
     3c8:	8c 2f       	mov	r24, r28
     3ca:	0e 94 cb 02 	call	0x596	; 0x596 <spi_transmit>
	result = spi_receive();
     3ce:	0e 94 cf 02 	call	0x59e	; 0x59e <spi_receive>
     3d2:	c8 2f       	mov	r28, r24
	
	spi_deselect();
     3d4:	0e 94 c9 02 	call	0x592	; 0x592 <spi_deselect>
	
	return result;
}
     3d8:	8c 2f       	mov	r24, r28
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <mcp2515_write>:

void mcp2515_write(char addr, char data)
{
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	d8 2f       	mov	r29, r24
     3e4:	c6 2f       	mov	r28, r22
	spi_select();
     3e6:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_select>
	
	spi_transmit(MCP_WRITE);
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	0e 94 cb 02 	call	0x596	; 0x596 <spi_transmit>
	spi_transmit(addr);
     3f0:	8d 2f       	mov	r24, r29
     3f2:	0e 94 cb 02 	call	0x596	; 0x596 <spi_transmit>
	spi_transmit(data);
     3f6:	8c 2f       	mov	r24, r28
     3f8:	0e 94 cb 02 	call	0x596	; 0x596 <spi_transmit>
	
	spi_deselect();
     3fc:	0e 94 c9 02 	call	0x592	; 0x592 <spi_deselect>
	
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <mcp2515_request_to_send>:

void mcp2515_request_to_send(int reg)
{
     406:	cf 93       	push	r28
     408:	c8 2f       	mov	r28, r24
	spi_select();
     40a:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_select>
	
	spi_transmit(reg);
     40e:	8c 2f       	mov	r24, r28
     410:	0e 94 cb 02 	call	0x596	; 0x596 <spi_transmit>
	
	spi_deselect();
     414:	0e 94 c9 02 	call	0x592	; 0x592 <spi_deselect>
}
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <mcp2515_bit_modify>:

void mcp2515_bit_modify(char addr, char mask_byte, char data)
{
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	18 2f       	mov	r17, r24
     424:	d6 2f       	mov	r29, r22
     426:	c4 2f       	mov	r28, r20
	spi_select();
     428:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_select>
	
	spi_transmit(MCP_BITMOD);
     42c:	85 e0       	ldi	r24, 0x05	; 5
     42e:	0e 94 cb 02 	call	0x596	; 0x596 <spi_transmit>
	spi_transmit(addr);
     432:	81 2f       	mov	r24, r17
     434:	0e 94 cb 02 	call	0x596	; 0x596 <spi_transmit>
	spi_transmit(mask_byte);
     438:	8d 2f       	mov	r24, r29
     43a:	0e 94 cb 02 	call	0x596	; 0x596 <spi_transmit>
	spi_transmit(data);
     43e:	8c 2f       	mov	r24, r28
     440:	0e 94 cb 02 	call	0x596	; 0x596 <spi_transmit>
	
	spi_deselect();
     444:	0e 94 c9 02 	call	0x592	; 0x592 <spi_deselect>
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	08 95       	ret

00000450 <mcp2515_reset>:

void mcp2515_reset()
{
	spi_select();
     450:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_select>
	
	spi_transmit(MCP_RESET);
     454:	80 ec       	ldi	r24, 0xC0	; 192
     456:	0e 94 cb 02 	call	0x596	; 0x596 <spi_transmit>
	
	spi_deselect();
     45a:	0e 94 c9 02 	call	0x592	; 0x592 <spi_deselect>
     45e:	08 95       	ret

00000460 <mcp2515_read_status>:
}

char mcp2515_read_status()
{
     460:	cf 93       	push	r28
	char output;
	spi_select();
     462:	0e 94 c7 02 	call	0x58e	; 0x58e <spi_select>
	spi_transmit(MCP_READ);
     466:	83 e0       	ldi	r24, 0x03	; 3
     468:	0e 94 cb 02 	call	0x596	; 0x596 <spi_transmit>
	spi_transmit(MCP_CANSTAT);
     46c:	8e e0       	ldi	r24, 0x0E	; 14
     46e:	0e 94 cb 02 	call	0x596	; 0x596 <spi_transmit>
	output = spi_receive();
     472:	0e 94 cf 02 	call	0x59e	; 0x59e <spi_receive>
     476:	c8 2f       	mov	r28, r24
	
	spi_deselect();
     478:	0e 94 c9 02 	call	0x592	; 0x592 <spi_deselect>
	return output;
}
     47c:	8c 2f       	mov	r24, r28
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <mcp2515_init>:
#include "spi_control.h"
#include <stdio.h>

void mcp2515_init(){
	char status;
	spi_init();
     482:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <spi_init>
	mcp2515_reset();
     486:	0e 94 28 02 	call	0x450	; 0x450 <mcp2515_reset>
	
	status = mcp2515_read_status();
     48a:	0e 94 30 02 	call	0x460	; 0x460 <mcp2515_read_status>
	if ((status & MODE_MASK) != MODE_CONFIG)
     48e:	80 7e       	andi	r24, 0xE0	; 224
     490:	80 38       	cpi	r24, 0x80	; 128
     492:	21 f0       	breq	.+8      	; 0x49c <mcp2515_init+0x1a>
	{
		printf("MCP2515 is not in config mode!\n");
     494:	8c ec       	ldi	r24, 0xCC	; 204
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	0e 94 65 07 	call	0xeca	; 0xeca <puts>
     49c:	08 95       	ret

0000049e <oled_init>:
	}
}

void write_c(unsigned char out_data)
{
	*OLED_START_C = out_data;
     49e:	e0 e0       	ldi	r30, 0x00	; 0
     4a0:	f0 e1       	ldi	r31, 0x10	; 16
     4a2:	8e ea       	ldi	r24, 0xAE	; 174
     4a4:	80 83       	st	Z, r24
     4a6:	81 ea       	ldi	r24, 0xA1	; 161
     4a8:	80 83       	st	Z, r24
     4aa:	8a ed       	ldi	r24, 0xDA	; 218
     4ac:	80 83       	st	Z, r24
     4ae:	82 e1       	ldi	r24, 0x12	; 18
     4b0:	80 83       	st	Z, r24
     4b2:	88 ec       	ldi	r24, 0xC8	; 200
     4b4:	80 83       	st	Z, r24
     4b6:	88 ea       	ldi	r24, 0xA8	; 168
     4b8:	80 83       	st	Z, r24
     4ba:	8f e3       	ldi	r24, 0x3F	; 63
     4bc:	80 83       	st	Z, r24
     4be:	85 ed       	ldi	r24, 0xD5	; 213
     4c0:	80 83       	st	Z, r24
     4c2:	80 e8       	ldi	r24, 0x80	; 128
     4c4:	80 83       	st	Z, r24
     4c6:	81 e8       	ldi	r24, 0x81	; 129
     4c8:	80 83       	st	Z, r24
     4ca:	80 e5       	ldi	r24, 0x50	; 80
     4cc:	80 83       	st	Z, r24
     4ce:	89 ed       	ldi	r24, 0xD9	; 217
     4d0:	80 83       	st	Z, r24
     4d2:	81 e2       	ldi	r24, 0x21	; 33
     4d4:	80 83       	st	Z, r24
     4d6:	80 e2       	ldi	r24, 0x20	; 32
     4d8:	80 83       	st	Z, r24
     4da:	10 82       	st	Z, r1
     4dc:	8b ed       	ldi	r24, 0xDB	; 219
     4de:	80 83       	st	Z, r24
     4e0:	80 e3       	ldi	r24, 0x30	; 48
     4e2:	80 83       	st	Z, r24
     4e4:	8d ea       	ldi	r24, 0xAD	; 173
     4e6:	80 83       	st	Z, r24
     4e8:	10 82       	st	Z, r1
     4ea:	84 ea       	ldi	r24, 0xA4	; 164
     4ec:	80 83       	st	Z, r24
     4ee:	86 ea       	ldi	r24, 0xA6	; 166
     4f0:	80 83       	st	Z, r24
     4f2:	8f ea       	ldi	r24, 0xAF	; 175
     4f4:	80 83       	st	Z, r24
     4f6:	08 95       	ret

000004f8 <oled_print_char>:
	write_c(0xa4);    //out follows RAM content
	write_c(0xa6);    //set normal display
	write_c(0xaf);    // display on
}

void oled_print_char(char* input){
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	ec 01       	movw	r28, r24
	int i;
	for(i = 0; i<8 ;i++)
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
	*OLED_START_C = out_data;
}

void write_d(unsigned char out_data)
{
	*OLED_START_D = out_data;
     502:	a0 e0       	ldi	r26, 0x00	; 0
     504:	b2 e1       	ldi	r27, 0x12	; 18

void oled_print_char(char* input){
	int i;
	for(i = 0; i<8 ;i++)
	{
		write_d(pgm_read_byte(&font[*input - ' '][i]));
     506:	e8 81       	ld	r30, Y
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	b0 97       	sbiw	r30, 0x20	; 32
     50c:	ee 0f       	add	r30, r30
     50e:	ff 1f       	adc	r31, r31
     510:	ee 0f       	add	r30, r30
     512:	ff 1f       	adc	r31, r31
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	e2 0f       	add	r30, r18
     51a:	f3 1f       	adc	r31, r19
     51c:	e0 59       	subi	r30, 0x90	; 144
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	e4 91       	lpm	r30, Z
	*OLED_START_C = out_data;
}

void write_d(unsigned char out_data)
{
	*OLED_START_D = out_data;
     522:	ec 93       	st	X, r30
	write_c(0xaf);    // display on
}

void oled_print_char(char* input){
	int i;
	for(i = 0; i<8 ;i++)
     524:	2f 5f       	subi	r18, 0xFF	; 255
     526:	3f 4f       	sbci	r19, 0xFF	; 255
     528:	28 30       	cpi	r18, 0x08	; 8
     52a:	31 05       	cpc	r19, r1
     52c:	61 f7       	brne	.-40     	; 0x506 <__stack+0x7>
	{
		write_d(pgm_read_byte(&font[*input - ' '][i]));
	}
}
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <oled_print>:

void oled_print(char* input){
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
	int i=0;
	
	while(input[i] != '\0'){
     538:	fc 01       	movw	r30, r24
     53a:	20 81       	ld	r18, Z
     53c:	22 23       	and	r18, r18
     53e:	51 f0       	breq	.+20     	; 0x554 <oled_print+0x20>
     540:	ec 01       	movw	r28, r24
     542:	21 96       	adiw	r28, 0x01	; 1
			oled_print_char(&input[i]);
     544:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <oled_print_char>
}

void oled_print(char* input){
	int i=0;
	
	while(input[i] != '\0'){
     548:	ce 01       	movw	r24, r28
     54a:	21 96       	adiw	r28, 0x01	; 1
     54c:	fc 01       	movw	r30, r24
     54e:	20 81       	ld	r18, Z
     550:	21 11       	cpse	r18, r1
     552:	f8 cf       	rjmp	.-16     	; 0x544 <oled_print+0x10>
			oled_print_char(&input[i]);
			i++;
			
	}
}
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <oled_goto>:
	}
}

void write_c(unsigned char out_data)
{
	*OLED_START_C = out_data;
     55a:	e0 e0       	ldi	r30, 0x00	; 0
     55c:	f0 e1       	ldi	r31, 0x10	; 16
     55e:	91 e2       	ldi	r25, 0x21	; 33
     560:	90 83       	st	Z, r25
     562:	60 83       	st	Z, r22
     564:	9f e7       	ldi	r25, 0x7F	; 127
     566:	90 83       	st	Z, r25
     568:	92 e2       	ldi	r25, 0x22	; 34
     56a:	90 83       	st	Z, r25
     56c:	80 83       	st	Z, r24
     56e:	87 e0       	ldi	r24, 0x07	; 7
     570:	80 83       	st	Z, r24
     572:	08 95       	ret

00000574 <oled_clear_all>:
		*OLED_START_D= 0x00;
	}
}

void oled_clear_all(){
	oled_goto(0,0);
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_goto>
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	94 e0       	ldi	r25, 0x04	; 4
	for (int i = 0; i<1024; i++){
		*OLED_START_D= 0x00;
     580:	e0 e0       	ldi	r30, 0x00	; 0
     582:	f2 e1       	ldi	r31, 0x12	; 18
     584:	10 82       	st	Z, r1
     586:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void oled_clear_all(){
	oled_goto(0,0);
	for (int i = 0; i<1024; i++){
     588:	00 97       	sbiw	r24, 0x00	; 0
     58a:	e1 f7       	brne	.-8      	; 0x584 <oled_clear_all+0x10>
		*OLED_START_D= 0x00;
	}
}
     58c:	08 95       	ret

0000058e <spi_select>:
#include "spi_control.h"
#include <stdio.h>

void spi_select()
{
	PORTB &= ~(1<<PB4);
     58e:	c4 98       	cbi	0x18, 4	; 24
     590:	08 95       	ret

00000592 <spi_deselect>:
}

void spi_deselect()
{
	PORTB |= (1<<PB4);
     592:	c4 9a       	sbi	0x18, 4	; 24
     594:	08 95       	ret

00000596 <spi_transmit>:


void spi_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     596:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     598:	77 9b       	sbis	0x0e, 7	; 14
     59a:	fe cf       	rjmp	.-4      	; 0x598 <spi_transmit+0x2>
	;
}
     59c:	08 95       	ret

0000059e <spi_receive>:
	PORTB |= (1<<PB4);
}

char spi_receive()
{
	spi_transmit(0);
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	0e 94 cb 02 	call	0x596	; 0x596 <spi_transmit>
	return SPDR;
     5a4:	8f b1       	in	r24, 0x0f	; 15
}
     5a6:	08 95       	ret

000005a8 <spi_init>:
}


void spi_init(){
	/* Set MOSI,SCK and SS output, all others input */
	DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<DD_SS);    
     5a8:	87 b3       	in	r24, 0x17	; 23
     5aa:	80 6b       	ori	r24, 0xB0	; 176
     5ac:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     5ae:	81 e5       	ldi	r24, 0x51	; 81
     5b0:	8d b9       	out	0x0d, r24	; 13
     5b2:	08 95       	ret

000005b4 <USART_transmit>:
	fdevopen(USART_transmit,USART_receive);
}

int USART_transmit(unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)))
     5b4:	5d 9b       	sbis	0x0b, 5	; 11
     5b6:	fe cf       	rjmp	.-4      	; 0x5b4 <USART_transmit>
		;
	UDR0 = data;
     5b8:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	08 95       	ret

000005c0 <USART_receive>:

unsigned char USART_receive (void){
	
	while( !(UCSR0A & (1<<RXC0)))
     5c0:	5f 9b       	sbis	0x0b, 7	; 11
     5c2:	fe cf       	rjmp	.-4      	; 0x5c0 <USART_receive>
		;
	return UDR0;
     5c4:	8c b1       	in	r24, 0x0c	; 12
	
     5c6:	08 95       	ret

000005c8 <USART_init>:
#include <avr/io.h>
#include <stdio.h>

void USART_init(unsigned int ubrr){

	UBRR0H = (unsigned char)(ubrr>>8);
     5c8:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;	
     5ca:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     5cc:	88 e1       	ldi	r24, 0x18	; 24
     5ce:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     5d0:	8e e8       	ldi	r24, 0x8E	; 142
     5d2:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(USART_transmit,USART_receive);
     5d4:	60 ee       	ldi	r22, 0xE0	; 224
     5d6:	72 e0       	ldi	r23, 0x02	; 2
     5d8:	8a ed       	ldi	r24, 0xDA	; 218
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	0e 94 1a 07 	call	0xe34	; 0xe34 <fdevopen>
     5e0:	08 95       	ret

000005e2 <check_and_report_shot>:
	update_highscore(score,highscore);
	return;
}
		
void check_and_report_shot( void )
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	2a 97       	sbiw	r28, 0x0a	; 10
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
	can_message_t shot_msg = {'s',1};
     5f6:	fe 01       	movw	r30, r28
     5f8:	31 96       	adiw	r30, 0x01	; 1
     5fa:	8a e0       	ldi	r24, 0x0A	; 10
     5fc:	df 01       	movw	r26, r30
     5fe:	1d 92       	st	X+, r1
     600:	8a 95       	dec	r24
     602:	e9 f7       	brne	.-6      	; 0x5fe <check_and_report_shot+0x1c>
     604:	83 e7       	ldi	r24, 0x73	; 115
     606:	89 83       	std	Y+1, r24	; 0x01
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	8a 83       	std	Y+2, r24	; 0x02
	static int recent_shot = 0;
	if (recent_shot == 0)
     60c:	80 91 34 02 	lds	r24, 0x0234
     610:	90 91 35 02 	lds	r25, 0x0235
     614:	89 2b       	or	r24, r25
     616:	89 f4       	brne	.+34     	; 0x63a <check_and_report_shot+0x58>
	{
		if(ADC_read(3) > 100) //read input from multifunction card
     618:	83 e0       	ldi	r24, 0x03	; 3
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
     620:	85 36       	cpi	r24, 0x65	; 101
     622:	a8 f0       	brcs	.+42     	; 0x64e <check_and_report_shot+0x6c>
		{
			can_message_send(&shot_msg);
     624:	ce 01       	movw	r24, r28
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	0e 94 de 04 	call	0x9bc	; 0x9bc <can_message_send>
			recent_shot = 1;
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	90 93 35 02 	sts	0x0235, r25
     634:	80 93 34 02 	sts	0x0234, r24
     638:	0a c0       	rjmp	.+20     	; 0x64e <check_and_report_shot+0x6c>
		}
	}
	else
	{
		if (ADC_read(3) < 100){
     63a:	83 e0       	ldi	r24, 0x03	; 3
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
     642:	84 36       	cpi	r24, 0x64	; 100
     644:	20 f4       	brcc	.+8      	; 0x64e <check_and_report_shot+0x6c>
			recent_shot = 0;
     646:	10 92 35 02 	sts	0x0235, r1
     64a:	10 92 34 02 	sts	0x0234, r1
		}
	}
}
     64e:	2a 96       	adiw	r28, 0x0a	; 10
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <print_highscore>:

void print_highscore( void )
{
     660:	ef 92       	push	r14
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
	int i;
	char* temp = "000000000000000";

	oled_clear_all();
     66c:	0e 94 ba 02 	call	0x574	; 0x574 <oled_clear_all>
	oled_goto(0,0);
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_goto>
	oled_print("Highscores");
     678:	8b ee       	ldi	r24, 0xEB	; 235
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	0e 94 9a 02 	call	0x534	; 0x534 <oled_print>
	for (i=0; i<3 ;i++)
     680:	c0 e0       	ldi	r28, 0x00	; 0
     682:	d0 e0       	ldi	r29, 0x00	; 0
	{
		oled_goto(i+2,8);
		sprintf(temp,"%d. %d    ",i+1,eeprom_read_word((uint16_t*)(i*2)));
     684:	0f 2e       	mov	r0, r31
     686:	f6 ef       	ldi	r31, 0xF6	; 246
     688:	ef 2e       	mov	r14, r31
     68a:	f1 e0       	ldi	r31, 0x01	; 1
     68c:	ff 2e       	mov	r15, r31
     68e:	f0 2d       	mov	r31, r0
     690:	01 e0       	ldi	r16, 0x01	; 1
     692:	12 e0       	ldi	r17, 0x02	; 2
	oled_clear_all();
	oled_goto(0,0);
	oled_print("Highscores");
	for (i=0; i<3 ;i++)
	{
		oled_goto(i+2,8);
     694:	68 e0       	ldi	r22, 0x08	; 8
     696:	8c 2f       	mov	r24, r28
     698:	8e 5f       	subi	r24, 0xFE	; 254
     69a:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_goto>
		sprintf(temp,"%d. %d    ",i+1,eeprom_read_word((uint16_t*)(i*2)));
     69e:	ce 01       	movw	r24, r28
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	0e 94 86 09 	call	0x130c	; 0x130c <__eerd_word_m162>
     6a8:	21 96       	adiw	r28, 0x01	; 1
     6aa:	9f 93       	push	r25
     6ac:	8f 93       	push	r24
     6ae:	df 93       	push	r29
     6b0:	cf 93       	push	r28
     6b2:	ff 92       	push	r15
     6b4:	ef 92       	push	r14
     6b6:	1f 93       	push	r17
     6b8:	0f 93       	push	r16
     6ba:	0e 94 92 07 	call	0xf24	; 0xf24 <sprintf>
		oled_print(temp);
     6be:	c8 01       	movw	r24, r16
     6c0:	0e 94 9a 02 	call	0x534	; 0x534 <oled_print>
	char* temp = "000000000000000";

	oled_clear_all();
	oled_goto(0,0);
	oled_print("Highscores");
	for (i=0; i<3 ;i++)
     6c4:	8d b7       	in	r24, 0x3d	; 61
     6c6:	9e b7       	in	r25, 0x3e	; 62
     6c8:	08 96       	adiw	r24, 0x08	; 8
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	f8 94       	cli
     6ce:	9e bf       	out	0x3e, r25	; 62
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	8d bf       	out	0x3d, r24	; 61
     6d4:	c3 30       	cpi	r28, 0x03	; 3
     6d6:	d1 05       	cpc	r29, r1
     6d8:	e9 f6       	brne	.-70     	; 0x694 <print_highscore+0x34>
		oled_goto(i+2,8);
		sprintf(temp,"%d. %d    ",i+1,eeprom_read_word((uint16_t*)(i*2)));
		oled_print(temp);
	}
	return;
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	08 95       	ret

000006e8 <update_highscore>:

void update_highscore( int score, uint16_t* highscore )
{
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	08 2f       	mov	r16, r24
     6f2:	19 2f       	mov	r17, r25
     6f4:	eb 01       	movw	r28, r22
	if (score > highscore[0])
     6f6:	28 2f       	mov	r18, r24
     6f8:	39 2f       	mov	r19, r25
     6fa:	48 81       	ld	r20, Y
     6fc:	59 81       	ldd	r21, Y+1	; 0x01
     6fe:	42 17       	cp	r20, r18
     700:	53 07       	cpc	r21, r19
     702:	98 f4       	brcc	.+38     	; 0x72a <update_highscore+0x42>
	{
		eeprom_write_word((uint16_t*)4, highscore[1]);
     704:	6a 81       	ldd	r22, Y+2	; 0x02
     706:	7b 81       	ldd	r23, Y+3	; 0x03
     708:	84 e0       	ldi	r24, 0x04	; 4
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 8c 09 	call	0x1318	; 0x1318 <__eewr_word_m162>
		eeprom_write_word((uint16_t*)2, highscore[0]);
     710:	68 81       	ld	r22, Y
     712:	79 81       	ldd	r23, Y+1	; 0x01
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 8c 09 	call	0x1318	; 0x1318 <__eewr_word_m162>
		eeprom_write_word((uint16_t*)0, score );
     71c:	60 2f       	mov	r22, r16
     71e:	71 2f       	mov	r23, r17
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 8c 09 	call	0x1318	; 0x1318 <__eewr_word_m162>
     728:	1b c0       	rjmp	.+54     	; 0x760 <update_highscore+0x78>
	}
	else if(score > highscore[1])
     72a:	6a 81       	ldd	r22, Y+2	; 0x02
     72c:	7b 81       	ldd	r23, Y+3	; 0x03
     72e:	62 17       	cp	r22, r18
     730:	73 07       	cpc	r23, r19
     732:	58 f4       	brcc	.+22     	; 0x74a <update_highscore+0x62>
	{
		eeprom_write_word((uint16_t*)4, highscore[1]);
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 8c 09 	call	0x1318	; 0x1318 <__eewr_word_m162>
		eeprom_write_word((uint16_t*)2, score );
     73c:	60 2f       	mov	r22, r16
     73e:	71 2f       	mov	r23, r17
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 8c 09 	call	0x1318	; 0x1318 <__eewr_word_m162>
     748:	0b c0       	rjmp	.+22     	; 0x760 <update_highscore+0x78>
	}
	else if(score > highscore[2])
     74a:	4c 81       	ldd	r20, Y+4	; 0x04
     74c:	5d 81       	ldd	r21, Y+5	; 0x05
     74e:	42 17       	cp	r20, r18
     750:	53 07       	cpc	r21, r19
     752:	30 f4       	brcc	.+12     	; 0x760 <update_highscore+0x78>
	{
		eeprom_write_word((uint16_t*)4, score );
     754:	68 2f       	mov	r22, r24
     756:	79 2f       	mov	r23, r25
     758:	84 e0       	ldi	r24, 0x04	; 4
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 8c 09 	call	0x1318	; 0x1318 <__eewr_word_m162>
	}
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	1f 91       	pop	r17
     766:	0f 91       	pop	r16
     768:	08 95       	ret

0000076a <play_game>:
	
void check_and_report_shot( void );
void update_highscore( int score, uint16_t* highscore );

void play_game( void )
{
     76a:	4f 92       	push	r4
     76c:	5f 92       	push	r5
     76e:	6f 92       	push	r6
     770:	7f 92       	push	r7
     772:	8f 92       	push	r8
     774:	9f 92       	push	r9
     776:	af 92       	push	r10
     778:	bf 92       	push	r11
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	60 97       	sbiw	r28, 0x10	; 16
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
	int score = 0;
	int score_sub = 0;
	char* score_print = "0000000000";
	joy_position_t joystick;
	
	can_message_t message = {'m',1,"00"};
     79a:	8a e0       	ldi	r24, 0x0A	; 10
     79c:	e2 ec       	ldi	r30, 0xC2	; 194
     79e:	f1 e0       	ldi	r31, 0x01	; 1
     7a0:	de 01       	movw	r26, r28
     7a2:	17 96       	adiw	r26, 0x07	; 7
     7a4:	01 90       	ld	r0, Z+
     7a6:	0d 92       	st	X+, r0
     7a8:	8a 95       	dec	r24
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <play_game+0x3a>
	
	// Get highscores
	for(i=0; i<3; i++)
	{
		highscore[i] = eeprom_read_word((uint16_t*)(i*2));
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 86 09 	call	0x130c	; 0x130c <__eerd_word_m162>
     7b4:	9a 83       	std	Y+2, r25	; 0x02
     7b6:	89 83       	std	Y+1, r24	; 0x01
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 86 09 	call	0x130c	; 0x130c <__eerd_word_m162>
     7c0:	9c 83       	std	Y+4, r25	; 0x04
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	84 e0       	ldi	r24, 0x04	; 4
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 86 09 	call	0x130c	; 0x130c <__eerd_word_m162>
     7cc:	9e 83       	std	Y+6, r25	; 0x06
     7ce:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	//Setup OLED Screen
	oled_clear_all();
     7d0:	0e 94 ba 02 	call	0x574	; 0x574 <oled_clear_all>
	oled_goto(0,0);
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_goto>
	oled_print("     GAME");
     7dc:	81 e1       	ldi	r24, 0x11	; 17
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	0e 94 9a 02 	call	0x534	; 0x534 <oled_print>
	oled_goto(3,0);
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_goto>
	oled_print("    Score: ");
     7ec:	8b e1       	ldi	r24, 0x1B	; 27
     7ee:	92 e0       	ldi	r25, 0x02	; 2
     7f0:	0e 94 9a 02 	call	0x534	; 0x534 <oled_print>
	
	// Sending game mode to node 2
	message.data[0] = TOUCH_JOY_MODE;
     7f4:	80 91 1a 01 	lds	r24, 0x011A
     7f8:	89 87       	std	Y+9, r24	; 0x09
	can_message_send(&message);
     7fa:	ce 01       	movw	r24, r28
     7fc:	07 96       	adiw	r24, 0x07	; 7
     7fe:	0e 94 de 04 	call	0x9bc	; 0x9bc <can_message_send>
void play_game( void )
{
	uint16_t highscore[3];
	int i;
	int score = 0;
	int score_sub = 0;
     802:	c1 2c       	mov	r12, r1
     804:	d1 2c       	mov	r13, r1

void play_game( void )
{
	uint16_t highscore[3];
	int i;
	int score = 0;
     806:	00 e0       	ldi	r16, 0x00	; 0
     808:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{
		//Read input from multifunction card
		joystick =  joy_read();
		joystick_msg.data[0] = joystick.x_pos;
     80a:	0f 2e       	mov	r0, r31
     80c:	f2 e1       	ldi	r31, 0x12	; 18
     80e:	8f 2e       	mov	r8, r31
     810:	f1 e0       	ldi	r31, 0x01	; 1
     812:	9f 2e       	mov	r9, r31
     814:	f0 2d       	mov	r31, r0
		joystick_msg.data[1] = joystick.y_pos;
     816:	0f 2e       	mov	r0, r31
     818:	f3 e1       	ldi	r31, 0x13	; 19
     81a:	6f 2e       	mov	r6, r31
     81c:	f1 e0       	ldi	r31, 0x01	; 1
     81e:	7f 2e       	mov	r7, r31
     820:	f0 2d       	mov	r31, r0
		can_message_send(&joystick_msg);
		if (TOUCH_JOY_MODE == 1){
			touch_msg.data[0] = ADC_read(2);
     822:	0f 2e       	mov	r0, r31
     824:	f8 e0       	ldi	r31, 0x08	; 8
     826:	4f 2e       	mov	r4, r31
     828:	f1 e0       	ldi	r31, 0x01	; 1
     82a:	5f 2e       	mov	r5, r31
     82c:	f0 2d       	mov	r31, r0
		// Check for quit
		if ( (ADC_read(2) > 180 && TOUCH_JOY_MODE == 0) || (ADC_read(0) > 200 && TOUCH_JOY_MODE == 1) ) break;
		
		// Print Score on oled
		oled_goto(4, 0);
		sprintf(score_print,"       %d",score);
     82e:	0f 2e       	mov	r0, r31
     830:	f7 e2       	ldi	r31, 0x27	; 39
     832:	af 2e       	mov	r10, r31
     834:	f2 e0       	ldi	r31, 0x02	; 2
     836:	bf 2e       	mov	r11, r31
     838:	f0 2d       	mov	r31, r0
     83a:	0f 2e       	mov	r0, r31
     83c:	f6 e0       	ldi	r31, 0x06	; 6
     83e:	ef 2e       	mov	r14, r31
     840:	f2 e0       	ldi	r31, 0x02	; 2
     842:	ff 2e       	mov	r15, r31
     844:	f0 2d       	mov	r31, r0
     846:	03 c0       	rjmp	.+6      	; 0x84e <play_game+0xe4>
		oled_print(score_print);
		
		// Increment score
		if(score_sub++ > 700)
     848:	8f ef       	ldi	r24, 0xFF	; 255
     84a:	c8 1a       	sub	r12, r24
     84c:	d8 0a       	sbc	r13, r24
	can_message_send(&message);
	
	while(1)
	{
		//Read input from multifunction card
		joystick =  joy_read();
     84e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <joy_read>
		joystick_msg.data[0] = joystick.x_pos;
     852:	f4 01       	movw	r30, r8
     854:	60 83       	st	Z, r22
		joystick_msg.data[1] = joystick.y_pos;
     856:	f3 01       	movw	r30, r6
     858:	80 83       	st	Z, r24
		can_message_send(&joystick_msg);
     85a:	80 e1       	ldi	r24, 0x10	; 16
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	0e 94 de 04 	call	0x9bc	; 0x9bc <can_message_send>
		if (TOUCH_JOY_MODE == 1){
     862:	80 91 1a 01 	lds	r24, 0x011A
     866:	90 91 1b 01 	lds	r25, 0x011B
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	51 f4       	brne	.+20     	; 0x882 <play_game+0x118>
			touch_msg.data[0] = ADC_read(2);
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
     876:	f2 01       	movw	r30, r4
     878:	80 83       	st	Z, r24
			can_message_send(&touch_msg);	
     87a:	86 e0       	ldi	r24, 0x06	; 6
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	0e 94 de 04 	call	0x9bc	; 0x9bc <can_message_send>
		}
		// Check for pressed shot button
		check_and_report_shot();
     882:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <check_and_report_shot>
		
		// Handle game over
		if (can_get_message(&message) == 1)
     886:	ce 01       	movw	r24, r28
     888:	07 96       	adiw	r24, 0x07	; 7
     88a:	0e 94 36 05 	call	0xa6c	; 0xa6c <can_get_message>
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	19 f4       	brne	.+6      	; 0x898 <play_game+0x12e>
		{
			if(message.id == 'g') break;	// Goal
     892:	8f 81       	ldd	r24, Y+7	; 0x07
     894:	87 36       	cpi	r24, 0x67	; 103
     896:	c1 f1       	breq	.+112    	; 0x908 <play_game+0x19e>
		}
		
		// Check for quit
		if ( (ADC_read(2) > 180 && TOUCH_JOY_MODE == 0) || (ADC_read(0) > 200 && TOUCH_JOY_MODE == 1) ) break;
     898:	82 e0       	ldi	r24, 0x02	; 2
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
     8a0:	85 3b       	cpi	r24, 0xB5	; 181
     8a2:	30 f0       	brcs	.+12     	; 0x8b0 <play_game+0x146>
     8a4:	80 91 1a 01 	lds	r24, 0x011A
     8a8:	90 91 1b 01 	lds	r25, 0x011B
     8ac:	89 2b       	or	r24, r25
     8ae:	61 f1       	breq	.+88     	; 0x908 <play_game+0x19e>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
     8b8:	89 3c       	cpi	r24, 0xC9	; 201
     8ba:	30 f0       	brcs	.+12     	; 0x8c8 <play_game+0x15e>
     8bc:	80 91 1a 01 	lds	r24, 0x011A
     8c0:	90 91 1b 01 	lds	r25, 0x011B
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	01 f1       	breq	.+64     	; 0x908 <play_game+0x19e>
		
		// Print Score on oled
		oled_goto(4, 0);
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	84 e0       	ldi	r24, 0x04	; 4
     8cc:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_goto>
		sprintf(score_print,"       %d",score);
     8d0:	1f 93       	push	r17
     8d2:	0f 93       	push	r16
     8d4:	bf 92       	push	r11
     8d6:	af 92       	push	r10
     8d8:	ff 92       	push	r15
     8da:	ef 92       	push	r14
     8dc:	0e 94 92 07 	call	0xf24	; 0xf24 <sprintf>
		oled_print(score_print);
     8e0:	c7 01       	movw	r24, r14
     8e2:	0e 94 9a 02 	call	0x534	; 0x534 <oled_print>
		
		// Increment score
		if(score_sub++ > 700)
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	fd eb       	ldi	r31, 0xBD	; 189
     8f4:	cf 16       	cp	r12, r31
     8f6:	f2 e0       	ldi	r31, 0x02	; 2
     8f8:	df 06       	cpc	r13, r31
     8fa:	0c f4       	brge	.+2      	; 0x8fe <play_game+0x194>
     8fc:	a5 cf       	rjmp	.-182    	; 0x848 <play_game+0xde>
		{
			score_sub = 0;
			score++;
     8fe:	0f 5f       	subi	r16, 0xFF	; 255
     900:	1f 4f       	sbci	r17, 0xFF	; 255
		oled_print(score_print);
		
		// Increment score
		if(score_sub++ > 700)
		{
			score_sub = 0;
     902:	c1 2c       	mov	r12, r1
     904:	d1 2c       	mov	r13, r1
     906:	a3 cf       	rjmp	.-186    	; 0x84e <play_game+0xe4>
			score++;
		}
	}
	update_highscore(score,highscore);
     908:	be 01       	movw	r22, r28
     90a:	6f 5f       	subi	r22, 0xFF	; 255
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	c8 01       	movw	r24, r16
     910:	0e 94 74 03 	call	0x6e8	; 0x6e8 <update_highscore>
	return;
}
     914:	60 96       	adiw	r28, 0x10	; 16
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	bf 90       	pop	r11
     932:	af 90       	pop	r10
     934:	9f 90       	pop	r9
     936:	8f 90       	pop	r8
     938:	7f 90       	pop	r7
     93a:	6f 90       	pop	r6
     93c:	5f 90       	pop	r5
     93e:	4f 90       	pop	r4
     940:	08 95       	ret

00000942 <reset_highscore>:
	}
}

void reset_highscore ( void )
{
	eeprom_write_word((uint16_t*)0, 0 );	//	Reset the highscores
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 8c 09 	call	0x1318	; 0x1318 <__eewr_word_m162>
	eeprom_write_word((uint16_t*)2, 0 );
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	82 e0       	ldi	r24, 0x02	; 2
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 8c 09 	call	0x1318	; 0x1318 <__eewr_word_m162>
	eeprom_write_word((uint16_t*)4, 0 );
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	84 e0       	ldi	r24, 0x04	; 4
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 8c 09 	call	0x1318	; 0x1318 <__eewr_word_m162>
     966:	08 95       	ret

00000968 <main>:
#include "joystick.h"

int main(void)
{	
	// Activate external memory
	MCUCR |= (1 << SRE);
     968:	85 b7       	in	r24, 0x35	; 53
     96a:	80 68       	ori	r24, 0x80	; 128
     96c:	85 bf       	out	0x35, r24	; 53
		
	// Initialize	
	USART_init(MYUBRR);
     96e:	8f e1       	ldi	r24, 0x1F	; 31
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <USART_init>
	joy_init();
     976:	0e 94 cf 05 	call	0xb9e	; 0xb9e <joy_init>
	oled_init();
     97a:	0e 94 4f 02 	call	0x49e	; 0x49e <oled_init>
	can_init();
     97e:	0e 94 cc 04 	call	0x998	; 0x998 <can_init>
	menu_init();
     982:	0e 94 5f 06 	call	0xcbe	; 0xcbe <menu_init>
	
	// Starts the FSM
	while(1)
	{
		menu_fsm();
     986:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <menu_fsm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     98a:	8f ef       	ldi	r24, 0xFF	; 255
     98c:	9f e5       	ldi	r25, 0x5F	; 95
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	f1 f7       	brne	.-4      	; 0x98e <main+0x26>
     992:	00 c0       	rjmp	.+0      	; 0x994 <main+0x2c>
     994:	00 00       	nop
     996:	f7 cf       	rjmp	.-18     	; 0x986 <main+0x1e>

00000998 <can_init>:
#include "driver/MCP2515.h"

void can_init()
{
	
	mcp2515_init();
     998:	0e 94 41 02 	call	0x482	; 0x482 <mcp2515_init>
	
	mcp2515_bit_modify(MCP_RXF0SIDH, 0xff , 0x00);
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	6f ef       	ldi	r22, 0xFF	; 255
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	0e 94 0e 02 	call	0x41c	; 0x41c <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXF0SIDL, 0xE0 , 0x00);
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	60 ee       	ldi	r22, 0xE0	; 224
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	0e 94 0e 02 	call	0x41c	; 0x41c <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, 0xE0 , MODE_NORMAL);
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	60 ee       	ldi	r22, 0xE0	; 224
     9b4:	8f e0       	ldi	r24, 0x0F	; 15
     9b6:	0e 94 0e 02 	call	0x41c	; 0x41c <mcp2515_bit_modify>
     9ba:	08 95       	ret

000009bc <can_message_send>:
	
}


void can_message_send(can_message_t *message)
{
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	ec 01       	movw	r28, r24
	char i;
	
	// ID
	mcp2515_write(MCP_TXB0CTRL + 1,message->id);
     9c4:	68 81       	ld	r22, Y
     9c6:	81 e3       	ldi	r24, 0x31	; 49
     9c8:	0e 94 ef 01 	call	0x3de	; 0x3de <mcp2515_write>
	mcp2515_write(0x32,0x00);
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	82 e3       	ldi	r24, 0x32	; 50
     9d0:	0e 94 ef 01 	call	0x3de	; 0x3de <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
     9d4:	69 81       	ldd	r22, Y+1	; 0x01
     9d6:	85 e3       	ldi	r24, 0x35	; 53
     9d8:	0e 94 ef 01 	call	0x3de	; 0x3de <mcp2515_write>
	
	// Data
	for (i = 0; i< message->length; i++){
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	88 23       	and	r24, r24
     9e0:	69 f0       	breq	.+26     	; 0x9fc <can_message_send+0x40>
     9e2:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0CTRL + 6 + i, *((message->data)+i) );
     9e4:	fe 01       	movw	r30, r28
     9e6:	e1 0f       	add	r30, r17
     9e8:	f1 1d       	adc	r31, r1
     9ea:	62 81       	ldd	r22, Z+2	; 0x02
     9ec:	86 e3       	ldi	r24, 0x36	; 54
     9ee:	81 0f       	add	r24, r17
     9f0:	0e 94 ef 01 	call	0x3de	; 0x3de <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
	
	// Data
	for (i = 0; i< message->length; i++){
     9f4:	1f 5f       	subi	r17, 0xFF	; 255
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	18 17       	cp	r17, r24
     9fa:	a0 f3       	brcs	.-24     	; 0x9e4 <can_message_send+0x28>
		mcp2515_write(MCP_TXB0CTRL + 6 + i, *((message->data)+i) );
	}
	mcp2515_request_to_send(MCP_RTS_TX0);
     9fc:	81 e8       	ldi	r24, 0x81	; 129
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 03 02 	call	0x406	; 0x406 <mcp2515_request_to_send>
}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	08 95       	ret

00000a0c <can_message_receive>:

void can_message_receive(can_message_t* message, int buffer)
{
     a0c:	ef 92       	push	r14
     a0e:	ff 92       	push	r15
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	8c 01       	movw	r16, r24
     a1a:	e6 2e       	mov	r14, r22
	char i;
	
	// ID
	message->id = mcp2515_read(MCP_RXB0CTRL+buffer + 1);
     a1c:	81 e6       	ldi	r24, 0x61	; 97
     a1e:	86 0f       	add	r24, r22
     a20:	0e 94 dd 01 	call	0x3ba	; 0x3ba <mcp2515_read>
     a24:	f8 01       	movw	r30, r16
     a26:	80 83       	st	Z, r24
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
     a28:	85 e6       	ldi	r24, 0x65	; 101
     a2a:	8e 0d       	add	r24, r14
     a2c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <mcp2515_read>
     a30:	f8 01       	movw	r30, r16
     a32:	81 83       	std	Z+1, r24	; 0x01
	
	// Data
	for(i=0;i<message->length;i++)
     a34:	88 23       	and	r24, r24
     a36:	99 f0       	breq	.+38     	; 0xa5e <can_message_receive+0x52>
     a38:	c0 e0       	ldi	r28, 0x00	; 0
     a3a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
     a3c:	f6 e6       	ldi	r31, 0x66	; 102
     a3e:	ef 0e       	add	r14, r31
     a40:	fc 2e       	mov	r15, r28
     a42:	8c 2f       	mov	r24, r28
     a44:	8e 0d       	add	r24, r14
     a46:	0e 94 dd 01 	call	0x3ba	; 0x3ba <mcp2515_read>
     a4a:	f8 01       	movw	r30, r16
     a4c:	ec 0f       	add	r30, r28
     a4e:	f1 1d       	adc	r31, r1
     a50:	82 83       	std	Z+2, r24	; 0x02
     a52:	f3 94       	inc	r15
     a54:	21 96       	adiw	r28, 0x01	; 1
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
	
	// Data
	for(i=0;i<message->length;i++)
     a56:	f8 01       	movw	r30, r16
     a58:	81 81       	ldd	r24, Z+1	; 0x01
     a5a:	f8 16       	cp	r15, r24
     a5c:	88 f3       	brcs	.-30     	; 0xa40 <can_message_receive+0x34>
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
	}
}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	08 95       	ret

00000a6c <can_get_message>:

int can_get_message(can_message_t* message)
{
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	ec 01       	movw	r28, r24
	
	if ((mcp2515_read(MCP_CANINTF) & 0x01) == 0x01)
     a72:	8c e2       	ldi	r24, 0x2C	; 44
     a74:	0e 94 dd 01 	call	0x3ba	; 0x3ba <mcp2515_read>
     a78:	80 ff       	sbrs	r24, 0
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <can_get_message+0x2a>
	{
		can_message_receive(message,0);
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	ce 01       	movw	r24, r28
     a82:	0e 94 06 05 	call	0xa0c	; 0xa0c <can_message_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x01,0x00);
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	61 e0       	ldi	r22, 0x01	; 1
     a8a:	8c e2       	ldi	r24, 0x2C	; 44
     a8c:	0e 94 0e 02 	call	0x41c	; 0x41c <mcp2515_bit_modify>
		return 1;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <can_get_message+0x2e>
	}
	else
	{
		return 0;
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	08 95       	ret

00000aa0 <joy_read>:

void joy_init(){
	joy_calibrate();
}

joy_position_t joy_read(){
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
	joy_position_t position;
	position.x_pos = (ADC_read(1) - x_ref)*100/128;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	20 91 37 02 	lds	r18, 0x0237
     ab2:	82 1b       	sub	r24, r18
     ab4:	91 09       	sbc	r25, r1
     ab6:	44 e6       	ldi	r20, 0x64	; 100
     ab8:	48 9f       	mul	r20, r24
     aba:	90 01       	movw	r18, r0
     abc:	49 9f       	mul	r20, r25
     abe:	30 0d       	add	r19, r0
     ac0:	11 24       	eor	r1, r1
     ac2:	33 23       	and	r19, r19
     ac4:	14 f4       	brge	.+4      	; 0xaca <joy_read+0x2a>
     ac6:	21 58       	subi	r18, 0x81	; 129
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	e9 01       	movw	r28, r18
     acc:	cc 0f       	add	r28, r28
     ace:	cd 2f       	mov	r28, r29
     ad0:	cc 1f       	adc	r28, r28
     ad2:	dd 0b       	sbc	r29, r29
	position.y_pos = (ADC_read(0) - y_ref)*100/128;
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	20 91 36 02 	lds	r18, 0x0236
     ae2:	82 1b       	sub	r24, r18
     ae4:	91 09       	sbc	r25, r1
     ae6:	44 e6       	ldi	r20, 0x64	; 100
     ae8:	48 9f       	mul	r20, r24
     aea:	90 01       	movw	r18, r0
     aec:	49 9f       	mul	r20, r25
     aee:	30 0d       	add	r19, r0
     af0:	11 24       	eor	r1, r1
     af2:	33 23       	and	r19, r19
     af4:	14 f4       	brge	.+4      	; 0xafa <joy_read+0x5a>
     af6:	21 58       	subi	r18, 0x81	; 129
     af8:	3f 4f       	sbci	r19, 0xFF	; 255
	return position;
     afa:	be 01       	movw	r22, r28
     afc:	c9 01       	movw	r24, r18
     afe:	88 0f       	add	r24, r24
     b00:	89 2f       	mov	r24, r25
     b02:	88 1f       	adc	r24, r24
     b04:	99 0b       	sbc	r25, r25
}
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	08 95       	ret

00000b0c <joy_get_direction>:

direction joy_get_direction(){
	joy_position_t position = joy_read();
     b0c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <joy_read>
	
	if (position.x_pos > 70)		return RIGHT;
     b10:	67 34       	cpi	r22, 0x47	; 71
     b12:	71 05       	cpc	r23, r1
     b14:	64 f4       	brge	.+24     	; 0xb2e <joy_get_direction+0x22>
	else if (position.x_pos < -70)	return LEFT;
     b16:	6a 3b       	cpi	r22, 0xBA	; 186
     b18:	4f ef       	ldi	r20, 0xFF	; 255
     b1a:	74 07       	cpc	r23, r20
     b1c:	54 f0       	brlt	.+20     	; 0xb32 <joy_get_direction+0x26>
	else if (position.y_pos > 70)	return UP;
     b1e:	87 34       	cpi	r24, 0x47	; 71
     b20:	91 05       	cpc	r25, r1
     b22:	4c f4       	brge	.+18     	; 0xb36 <joy_get_direction+0x2a>
	else if (position.y_pos < -70)	return DOWN;
     b24:	8a 3b       	cpi	r24, 0xBA	; 186
     b26:	9f 4f       	sbci	r25, 0xFF	; 255
     b28:	44 f4       	brge	.+16     	; 0xb3a <joy_get_direction+0x2e>
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	08 95       	ret
}

direction joy_get_direction(){
	joy_position_t position = joy_read();
	
	if (position.x_pos > 70)		return RIGHT;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	08 95       	ret
	else if (position.x_pos < -70)	return LEFT;
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	08 95       	ret
	else if (position.y_pos > 70)	return UP;
     b36:	82 e0       	ldi	r24, 0x02	; 2
     b38:	08 95       	ret
	else if (position.y_pos < -70)	return DOWN;
	else							return NEUTRAL;
     b3a:	84 e0       	ldi	r24, 0x04	; 4
}
     b3c:	08 95       	ret

00000b3e <joy_calibrate>:

void joy_calibrate(){
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	ca e0       	ldi	r28, 0x0A	; 10
     b4c:	d0 e0       	ldi	r29, 0x00	; 0
	int sum_x=0;
	int sum_y=0;
     b4e:	00 e0       	ldi	r16, 0x00	; 0
     b50:	10 e0       	ldi	r17, 0x00	; 0
	else if (position.y_pos < -70)	return DOWN;
	else							return NEUTRAL;
}

void joy_calibrate(){
	int sum_x=0;
     b52:	e1 2c       	mov	r14, r1
     b54:	f1 2c       	mov	r15, r1
	int sum_y=0;
	int i;
	for(i=0;i<10;i++){
		sum_x += ADC_read(1);
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
     b5e:	e8 0e       	add	r14, r24
     b60:	f1 1c       	adc	r15, r1
		sum_y += ADC_read(0);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
     b6a:	08 0f       	add	r16, r24
     b6c:	11 1d       	adc	r17, r1
     b6e:	21 97       	sbiw	r28, 0x01	; 1

void joy_calibrate(){
	int sum_x=0;
	int sum_y=0;
	int i;
	for(i=0;i<10;i++){
     b70:	20 97       	sbiw	r28, 0x00	; 0
     b72:	89 f7       	brne	.-30     	; 0xb56 <joy_calibrate+0x18>
		sum_x += ADC_read(1);
		sum_y += ADC_read(0);
	}
	x_ref = sum_x/10;
     b74:	2a e0       	ldi	r18, 0x0A	; 10
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	c7 01       	movw	r24, r14
     b7a:	b9 01       	movw	r22, r18
     b7c:	0e 94 f2 06 	call	0xde4	; 0xde4 <__divmodhi4>
     b80:	60 93 37 02 	sts	0x0237, r22
	y_ref = sum_y/10;
     b84:	c8 01       	movw	r24, r16
     b86:	b9 01       	movw	r22, r18
     b88:	0e 94 f2 06 	call	0xde4	; 0xde4 <__divmodhi4>
     b8c:	60 93 36 02 	sts	0x0236, r22
}
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <joy_init>:

char x_ref = 0;
char y_ref = 0;

void joy_init(){
	joy_calibrate();
     b9e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <joy_calibrate>
     ba2:	08 95       	ret

00000ba4 <update_next>:
	last_dir = curr_dir;
}


void update_next(direction dir){
	if (dir == DOWN)
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	41 f5       	brne	.+80     	; 0xbf8 <update_next+0x54>
	{
		if (next+1 <= current->number_children)
     ba8:	80 91 3b 02 	lds	r24, 0x023B
     bac:	90 91 3c 02 	lds	r25, 0x023C
     bb0:	ac 01       	movw	r20, r24
     bb2:	4f 5f       	subi	r20, 0xFF	; 255
     bb4:	5f 4f       	sbci	r21, 0xFF	; 255
     bb6:	e0 91 39 02 	lds	r30, 0x0239
     bba:	f0 91 3a 02 	lds	r31, 0x023A
     bbe:	27 85       	ldd	r18, Z+15	; 0x0f
     bc0:	30 89       	ldd	r19, Z+16	; 0x10
     bc2:	24 17       	cp	r18, r20
     bc4:	35 07       	cpc	r19, r21
     bc6:	b4 f1       	brlt	.+108    	; 0xc34 <update_next+0x90>
		{
			oled_goto(next,0);
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_goto>
			oled_print(" ");
     bce:	8f ef       	ldi	r24, 0xFF	; 255
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	0e 94 9a 02 	call	0x534	; 0x534 <oled_print>
			next++;
     bd6:	80 91 3b 02 	lds	r24, 0x023B
     bda:	90 91 3c 02 	lds	r25, 0x023C
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	90 93 3c 02 	sts	0x023C, r25
     be4:	80 93 3b 02 	sts	0x023B, r24
			oled_goto(next,0);
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_goto>
			oled_print("-");
     bee:	81 e3       	ldi	r24, 0x31	; 49
     bf0:	92 e0       	ldi	r25, 0x02	; 2
     bf2:	0e 94 9a 02 	call	0x534	; 0x534 <oled_print>
     bf6:	08 95       	ret
		}
	}
	else
	{
		if (next > 1)
     bf8:	80 91 3b 02 	lds	r24, 0x023B
     bfc:	90 91 3c 02 	lds	r25, 0x023C
     c00:	82 30       	cpi	r24, 0x02	; 2
     c02:	91 05       	cpc	r25, r1
     c04:	bc f0       	brlt	.+46     	; 0xc34 <update_next+0x90>
		{
			oled_goto(next,0);
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_goto>
			oled_print(" ");
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 9a 02 	call	0x534	; 0x534 <oled_print>
			next--;
     c14:	80 91 3b 02 	lds	r24, 0x023B
     c18:	90 91 3c 02 	lds	r25, 0x023C
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	90 93 3c 02 	sts	0x023C, r25
     c22:	80 93 3b 02 	sts	0x023B, r24
			oled_goto(next,0);
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_goto>
			oled_print("-");
     c2c:	81 e3       	ldi	r24, 0x31	; 49
     c2e:	92 e0       	ldi	r25, 0x02	; 2
     c30:	0e 94 9a 02 	call	0x534	; 0x534 <oled_print>
     c34:	08 95       	ret

00000c36 <menu_print>:
		}
	}
}

void menu_print(menu_t* object){
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	7c 01       	movw	r14, r24
	next = 1;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	90 93 3c 02 	sts	0x023C, r25
     c4c:	80 93 3b 02 	sts	0x023B, r24
	oled_clear_all();
     c50:	0e 94 ba 02 	call	0x574	; 0x574 <oled_clear_all>
	oled_goto(0,0);
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_goto>
	oled_print(object->name);
     c5c:	c7 01       	movw	r24, r14
     c5e:	0e 94 9a 02 	call	0x534	; 0x534 <oled_print>
	oled_goto(next,0);
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	80 91 3b 02 	lds	r24, 0x023B
     c68:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_goto>
	oled_print("-");
     c6c:	81 e3       	ldi	r24, 0x31	; 49
     c6e:	92 e0       	ldi	r25, 0x02	; 2
     c70:	0e 94 9a 02 	call	0x534	; 0x534 <oled_print>
	
	int i;
	for (i=1;i<object->number_children+1;i++)
     c74:	f7 01       	movw	r30, r14
     c76:	87 85       	ldd	r24, Z+15	; 0x0f
     c78:	90 89       	ldd	r25, Z+16	; 0x10
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	02 97       	sbiw	r24, 0x02	; 2
     c7e:	c4 f0       	brlt	.+48     	; 0xcb0 <menu_print+0x7a>
     c80:	87 01       	movw	r16, r14
     c82:	0d 5e       	subi	r16, 0xED	; 237
     c84:	1f 4f       	sbci	r17, 0xFF	; 255
     c86:	c1 e0       	ldi	r28, 0x01	; 1
     c88:	d0 e0       	ldi	r29, 0x00	; 0
	{
		oled_goto(i,8);
     c8a:	68 e0       	ldi	r22, 0x08	; 8
     c8c:	8c 2f       	mov	r24, r28
     c8e:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_goto>
		oled_print((object->children[i-1])->name);
     c92:	f8 01       	movw	r30, r16
     c94:	81 91       	ld	r24, Z+
     c96:	91 91       	ld	r25, Z+
     c98:	8f 01       	movw	r16, r30
     c9a:	0e 94 9a 02 	call	0x534	; 0x534 <oled_print>
	oled_print(object->name);
	oled_goto(next,0);
	oled_print("-");
	
	int i;
	for (i=1;i<object->number_children+1;i++)
     c9e:	21 96       	adiw	r28, 0x01	; 1
     ca0:	f7 01       	movw	r30, r14
     ca2:	27 85       	ldd	r18, Z+15	; 0x0f
     ca4:	30 89       	ldd	r19, Z+16	; 0x10
     ca6:	2f 5f       	subi	r18, 0xFF	; 255
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	c2 17       	cp	r28, r18
     cac:	d3 07       	cpc	r29, r19
     cae:	6c f3       	brlt	.-38     	; 0xc8a <menu_print+0x54>
	{
		oled_goto(i,8);
		oled_print((object->children[i-1])->name);
	}
}
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	08 95       	ret

00000cbe <menu_init>:
menu_t menu = {"Main Menu",3,NULL,{&sub1,&sub2,&sub3}};

void menu_init()
{
	// Setup the hierarchy
	sub3sub1.parent= &sub3;
     cbe:	8e e3       	ldi	r24, 0x3E	; 62
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	90 93 b3 01 	sts	0x01B3, r25
     cc6:	80 93 b2 01 	sts	0x01B2, r24
	sub1.parent = &menu;	
     cca:	8d e1       	ldi	r24, 0x1D	; 29
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	90 93 92 01 	sts	0x0192, r25
     cd2:	80 93 91 01 	sts	0x0191, r24
	sub2.parent = &menu;
     cd6:	90 93 71 01 	sts	0x0171, r25
     cda:	80 93 70 01 	sts	0x0170, r24
	sub3.parent = &menu;
     cde:	90 93 50 01 	sts	0x0150, r25
     ce2:	80 93 4f 01 	sts	0x014F, r24
	current = &menu;
     ce6:	90 93 3a 02 	sts	0x023A, r25
     cea:	80 93 39 02 	sts	0x0239, r24
	menu_print(current);
     cee:	0e 94 1b 06 	call	0xc36	; 0xc36 <menu_print>
     cf2:	08 95       	ret

00000cf4 <menu_fsm>:
void menu_fsm()
{
	static direction curr_dir;
	static direction last_dir = NEUTRAL; 
	
	curr_dir = joy_get_direction();
     cf4:	0e 94 86 05 	call	0xb0c	; 0xb0c <joy_get_direction>
     cf8:	80 93 38 02 	sts	0x0238, r24
	if (curr_dir != last_dir)
     cfc:	90 91 1c 01 	lds	r25, 0x011C
     d00:	89 17       	cp	r24, r25
     d02:	09 f4       	brne	.+2      	; 0xd06 <menu_fsm+0x12>
     d04:	6a c0       	rjmp	.+212    	; 0xdda <menu_fsm+0xe6>
	{
		switch (curr_dir){
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	49 f0       	breq	.+18     	; 0xd1c <menu_fsm+0x28>
     d0a:	08 f4       	brcc	.+2      	; 0xd0e <menu_fsm+0x1a>
     d0c:	50 c0       	rjmp	.+160    	; 0xdae <menu_fsm+0xba>
     d0e:	82 30       	cpi	r24, 0x02	; 2
     d10:	09 f4       	brne	.+2      	; 0xd14 <menu_fsm+0x20>
     d12:	5c c0       	rjmp	.+184    	; 0xdcc <menu_fsm+0xd8>
     d14:	83 30       	cpi	r24, 0x03	; 3
     d16:	09 f4       	brne	.+2      	; 0xd1a <menu_fsm+0x26>
     d18:	5d c0       	rjmp	.+186    	; 0xdd4 <menu_fsm+0xe0>
     d1a:	5f c0       	rjmp	.+190    	; 0xdda <menu_fsm+0xe6>
		case RIGHT:
			switch(current->children[next-1]->name[0])
     d1c:	80 91 39 02 	lds	r24, 0x0239
     d20:	90 91 3a 02 	lds	r25, 0x023A
     d24:	e0 91 3b 02 	lds	r30, 0x023B
     d28:	f0 91 3c 02 	lds	r31, 0x023C
     d2c:	31 97       	sbiw	r30, 0x01	; 1
     d2e:	ee 0f       	add	r30, r30
     d30:	ff 1f       	adc	r31, r31
     d32:	e8 0f       	add	r30, r24
     d34:	f9 1f       	adc	r31, r25
     d36:	03 88       	ldd	r0, Z+19	; 0x13
     d38:	f4 89       	ldd	r31, Z+20	; 0x14
     d3a:	e0 2d       	mov	r30, r0
     d3c:	80 81       	ld	r24, Z
     d3e:	80 35       	cpi	r24, 0x50	; 80
     d40:	49 f0       	breq	.+18     	; 0xd54 <menu_fsm+0x60>
     d42:	18 f4       	brcc	.+6      	; 0xd4a <menu_fsm+0x56>
     d44:	88 34       	cpi	r24, 0x48	; 72
     d46:	c9 f0       	breq	.+50     	; 0xd7a <menu_fsm+0x86>
     d48:	48 c0       	rjmp	.+144    	; 0xdda <menu_fsm+0xe6>
     d4a:	82 35       	cpi	r24, 0x52	; 82
     d4c:	29 f1       	breq	.+74     	; 0xd98 <menu_fsm+0xa4>
     d4e:	83 35       	cpi	r24, 0x53	; 83
     d50:	d9 f0       	breq	.+54     	; 0xd88 <menu_fsm+0x94>
     d52:	43 c0       	rjmp	.+134    	; 0xdda <menu_fsm+0xe6>
			{
					
				case 'P':       // [P]lay Game
					current = current->children[next-1];
     d54:	f0 93 3a 02 	sts	0x023A, r31
     d58:	e0 93 39 02 	sts	0x0239, r30
					play_game();
     d5c:	0e 94 b5 03 	call	0x76a	; 0x76a <play_game>
					current = current->parent;
     d60:	e0 91 39 02 	lds	r30, 0x0239
     d64:	f0 91 3a 02 	lds	r31, 0x023A
     d68:	81 89       	ldd	r24, Z+17	; 0x11
     d6a:	92 89       	ldd	r25, Z+18	; 0x12
     d6c:	90 93 3a 02 	sts	0x023A, r25
     d70:	80 93 39 02 	sts	0x0239, r24
					menu_print(current);
     d74:	0e 94 1b 06 	call	0xc36	; 0xc36 <menu_print>
					break;
     d78:	30 c0       	rjmp	.+96     	; 0xdda <menu_fsm+0xe6>
				case 'H':		// [H]ighscores
					current = current->children[next-1];
     d7a:	f0 93 3a 02 	sts	0x023A, r31
     d7e:	e0 93 39 02 	sts	0x0239, r30
					print_highscore();
     d82:	0e 94 30 03 	call	0x660	; 0x660 <print_highscore>
					break;
     d86:	29 c0       	rjmp	.+82     	; 0xdda <menu_fsm+0xe6>
				case 'S':		// [S]ettings
					current = current->children[next-1];
     d88:	f0 93 3a 02 	sts	0x023A, r31
     d8c:	e0 93 39 02 	sts	0x0239, r30
					menu_print(current);
     d90:	cf 01       	movw	r24, r30
     d92:	0e 94 1b 06 	call	0xc36	; 0xc36 <menu_print>
					break;
     d96:	21 c0       	rjmp	.+66     	; 0xdda <menu_fsm+0xe6>
				case 'R' :		// [R]eset Scores
					reset_highscore();
     d98:	0e 94 a1 04 	call	0x942	; 0x942 <reset_highscore>
					current = &menu;
     d9c:	8d e1       	ldi	r24, 0x1D	; 29
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	90 93 3a 02 	sts	0x023A, r25
     da4:	80 93 39 02 	sts	0x0239, r24
					menu_print(current);
     da8:	0e 94 1b 06 	call	0xc36	; 0xc36 <menu_print>
					break;				
     dac:	16 c0       	rjmp	.+44     	; 0xdda <menu_fsm+0xe6>
			}
			break;
				
		case LEFT:
			if (current->parent != NULL){
     dae:	e0 91 39 02 	lds	r30, 0x0239
     db2:	f0 91 3a 02 	lds	r31, 0x023A
     db6:	81 89       	ldd	r24, Z+17	; 0x11
     db8:	92 89       	ldd	r25, Z+18	; 0x12
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	71 f0       	breq	.+28     	; 0xdda <menu_fsm+0xe6>
				current = current->parent;
     dbe:	90 93 3a 02 	sts	0x023A, r25
     dc2:	80 93 39 02 	sts	0x0239, r24
				menu_print(current);
     dc6:	0e 94 1b 06 	call	0xc36	; 0xc36 <menu_print>
     dca:	07 c0       	rjmp	.+14     	; 0xdda <menu_fsm+0xe6>
			}
			break;
		case UP:
			update_next(curr_dir);
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	0e 94 d2 05 	call	0xba4	; 0xba4 <update_next>
			break;
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <menu_fsm+0xe6>
		case DOWN:
			update_next(curr_dir);
     dd4:	83 e0       	ldi	r24, 0x03	; 3
     dd6:	0e 94 d2 05 	call	0xba4	; 0xba4 <update_next>
			break;
			default:
			break;
		}
	}
	last_dir = curr_dir;
     dda:	80 91 38 02 	lds	r24, 0x0238
     dde:	80 93 1c 01 	sts	0x011C, r24
     de2:	08 95       	ret

00000de4 <__divmodhi4>:
     de4:	97 fb       	bst	r25, 7
     de6:	07 2e       	mov	r0, r23
     de8:	16 f4       	brtc	.+4      	; 0xdee <__divmodhi4+0xa>
     dea:	00 94       	com	r0
     dec:	07 d0       	rcall	.+14     	; 0xdfc <__divmodhi4_neg1>
     dee:	77 fd       	sbrc	r23, 7
     df0:	09 d0       	rcall	.+18     	; 0xe04 <__divmodhi4_neg2>
     df2:	0e 94 06 07 	call	0xe0c	; 0xe0c <__udivmodhi4>
     df6:	07 fc       	sbrc	r0, 7
     df8:	05 d0       	rcall	.+10     	; 0xe04 <__divmodhi4_neg2>
     dfa:	3e f4       	brtc	.+14     	; 0xe0a <__divmodhi4_exit>

00000dfc <__divmodhi4_neg1>:
     dfc:	90 95       	com	r25
     dfe:	81 95       	neg	r24
     e00:	9f 4f       	sbci	r25, 0xFF	; 255
     e02:	08 95       	ret

00000e04 <__divmodhi4_neg2>:
     e04:	70 95       	com	r23
     e06:	61 95       	neg	r22
     e08:	7f 4f       	sbci	r23, 0xFF	; 255

00000e0a <__divmodhi4_exit>:
     e0a:	08 95       	ret

00000e0c <__udivmodhi4>:
     e0c:	aa 1b       	sub	r26, r26
     e0e:	bb 1b       	sub	r27, r27
     e10:	51 e1       	ldi	r21, 0x11	; 17
     e12:	07 c0       	rjmp	.+14     	; 0xe22 <__udivmodhi4_ep>

00000e14 <__udivmodhi4_loop>:
     e14:	aa 1f       	adc	r26, r26
     e16:	bb 1f       	adc	r27, r27
     e18:	a6 17       	cp	r26, r22
     e1a:	b7 07       	cpc	r27, r23
     e1c:	10 f0       	brcs	.+4      	; 0xe22 <__udivmodhi4_ep>
     e1e:	a6 1b       	sub	r26, r22
     e20:	b7 0b       	sbc	r27, r23

00000e22 <__udivmodhi4_ep>:
     e22:	88 1f       	adc	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	5a 95       	dec	r21
     e28:	a9 f7       	brne	.-22     	; 0xe14 <__udivmodhi4_loop>
     e2a:	80 95       	com	r24
     e2c:	90 95       	com	r25
     e2e:	bc 01       	movw	r22, r24
     e30:	cd 01       	movw	r24, r26
     e32:	08 95       	ret

00000e34 <fdevopen>:
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	ec 01       	movw	r28, r24
     e3e:	8b 01       	movw	r16, r22
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	31 f4       	brne	.+12     	; 0xe50 <fdevopen+0x1c>
     e44:	61 15       	cp	r22, r1
     e46:	71 05       	cpc	r23, r1
     e48:	19 f4       	brne	.+6      	; 0xe50 <fdevopen+0x1c>
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	38 c0       	rjmp	.+112    	; 0xec0 <fdevopen+0x8c>
     e50:	6e e0       	ldi	r22, 0x0E	; 14
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 91 09 	call	0x1322	; 0x1322 <calloc>
     e5c:	fc 01       	movw	r30, r24
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	a1 f3       	breq	.-24     	; 0xe4a <fdevopen+0x16>
     e62:	80 e8       	ldi	r24, 0x80	; 128
     e64:	83 83       	std	Z+3, r24	; 0x03
     e66:	01 15       	cp	r16, r1
     e68:	11 05       	cpc	r17, r1
     e6a:	71 f0       	breq	.+28     	; 0xe88 <fdevopen+0x54>
     e6c:	13 87       	std	Z+11, r17	; 0x0b
     e6e:	02 87       	std	Z+10, r16	; 0x0a
     e70:	81 e8       	ldi	r24, 0x81	; 129
     e72:	83 83       	std	Z+3, r24	; 0x03
     e74:	80 91 3d 02 	lds	r24, 0x023D
     e78:	90 91 3e 02 	lds	r25, 0x023E
     e7c:	89 2b       	or	r24, r25
     e7e:	21 f4       	brne	.+8      	; 0xe88 <fdevopen+0x54>
     e80:	f0 93 3e 02 	sts	0x023E, r31
     e84:	e0 93 3d 02 	sts	0x023D, r30
     e88:	20 97       	sbiw	r28, 0x00	; 0
     e8a:	c9 f0       	breq	.+50     	; 0xebe <fdevopen+0x8a>
     e8c:	d1 87       	std	Z+9, r29	; 0x09
     e8e:	c0 87       	std	Z+8, r28	; 0x08
     e90:	83 81       	ldd	r24, Z+3	; 0x03
     e92:	82 60       	ori	r24, 0x02	; 2
     e94:	83 83       	std	Z+3, r24	; 0x03
     e96:	80 91 3f 02 	lds	r24, 0x023F
     e9a:	90 91 40 02 	lds	r25, 0x0240
     e9e:	89 2b       	or	r24, r25
     ea0:	71 f4       	brne	.+28     	; 0xebe <fdevopen+0x8a>
     ea2:	f0 93 40 02 	sts	0x0240, r31
     ea6:	e0 93 3f 02 	sts	0x023F, r30
     eaa:	80 91 41 02 	lds	r24, 0x0241
     eae:	90 91 42 02 	lds	r25, 0x0242
     eb2:	89 2b       	or	r24, r25
     eb4:	21 f4       	brne	.+8      	; 0xebe <fdevopen+0x8a>
     eb6:	f0 93 42 02 	sts	0x0242, r31
     eba:	e0 93 41 02 	sts	0x0241, r30
     ebe:	cf 01       	movw	r24, r30
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	08 95       	ret

00000eca <puts>:
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	e0 91 3f 02 	lds	r30, 0x023F
     ed6:	f0 91 40 02 	lds	r31, 0x0240
     eda:	23 81       	ldd	r18, Z+3	; 0x03
     edc:	21 ff       	sbrs	r18, 1
     ede:	1b c0       	rjmp	.+54     	; 0xf16 <puts+0x4c>
     ee0:	ec 01       	movw	r28, r24
     ee2:	00 e0       	ldi	r16, 0x00	; 0
     ee4:	10 e0       	ldi	r17, 0x00	; 0
     ee6:	89 91       	ld	r24, Y+
     ee8:	60 91 3f 02 	lds	r22, 0x023F
     eec:	70 91 40 02 	lds	r23, 0x0240
     ef0:	db 01       	movw	r26, r22
     ef2:	18 96       	adiw	r26, 0x08	; 8
     ef4:	ed 91       	ld	r30, X+
     ef6:	fc 91       	ld	r31, X
     ef8:	19 97       	sbiw	r26, 0x09	; 9
     efa:	88 23       	and	r24, r24
     efc:	31 f0       	breq	.+12     	; 0xf0a <puts+0x40>
     efe:	09 95       	icall
     f00:	89 2b       	or	r24, r25
     f02:	89 f3       	breq	.-30     	; 0xee6 <puts+0x1c>
     f04:	0f ef       	ldi	r16, 0xFF	; 255
     f06:	1f ef       	ldi	r17, 0xFF	; 255
     f08:	ee cf       	rjmp	.-36     	; 0xee6 <puts+0x1c>
     f0a:	8a e0       	ldi	r24, 0x0A	; 10
     f0c:	09 95       	icall
     f0e:	89 2b       	or	r24, r25
     f10:	11 f4       	brne	.+4      	; 0xf16 <puts+0x4c>
     f12:	c8 01       	movw	r24, r16
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <puts+0x50>
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	9f ef       	ldi	r25, 0xFF	; 255
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	08 95       	ret

00000f24 <sprintf>:
     f24:	ae e0       	ldi	r26, 0x0E	; 14
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e9       	ldi	r30, 0x98	; 152
     f2a:	f7 e0       	ldi	r31, 0x07	; 7
     f2c:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__prologue_saves__+0x1c>
     f30:	0d 89       	ldd	r16, Y+21	; 0x15
     f32:	1e 89       	ldd	r17, Y+22	; 0x16
     f34:	86 e0       	ldi	r24, 0x06	; 6
     f36:	8c 83       	std	Y+4, r24	; 0x04
     f38:	1a 83       	std	Y+2, r17	; 0x02
     f3a:	09 83       	std	Y+1, r16	; 0x01
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	9f e7       	ldi	r25, 0x7F	; 127
     f40:	9e 83       	std	Y+6, r25	; 0x06
     f42:	8d 83       	std	Y+5, r24	; 0x05
     f44:	ae 01       	movw	r20, r28
     f46:	47 5e       	subi	r20, 0xE7	; 231
     f48:	5f 4f       	sbci	r21, 0xFF	; 255
     f4a:	6f 89       	ldd	r22, Y+23	; 0x17
     f4c:	78 8d       	ldd	r23, Y+24	; 0x18
     f4e:	ce 01       	movw	r24, r28
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	0e 94 b4 07 	call	0xf68	; 0xf68 <vfprintf>
     f56:	ef 81       	ldd	r30, Y+7	; 0x07
     f58:	f8 85       	ldd	r31, Y+8	; 0x08
     f5a:	e0 0f       	add	r30, r16
     f5c:	f1 1f       	adc	r31, r17
     f5e:	10 82       	st	Z, r1
     f60:	2e 96       	adiw	r28, 0x0e	; 14
     f62:	e4 e0       	ldi	r30, 0x04	; 4
     f64:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__epilogue_restores__+0x1c>

00000f68 <vfprintf>:
     f68:	ac e0       	ldi	r26, 0x0C	; 12
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	ea eb       	ldi	r30, 0xBA	; 186
     f6e:	f7 e0       	ldi	r31, 0x07	; 7
     f70:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__prologue_saves__>
     f74:	7c 01       	movw	r14, r24
     f76:	6b 01       	movw	r12, r22
     f78:	8a 01       	movw	r16, r20
     f7a:	fc 01       	movw	r30, r24
     f7c:	17 82       	std	Z+7, r1	; 0x07
     f7e:	16 82       	std	Z+6, r1	; 0x06
     f80:	83 81       	ldd	r24, Z+3	; 0x03
     f82:	81 ff       	sbrs	r24, 1
     f84:	bd c1       	rjmp	.+890    	; 0x1300 <vfprintf+0x398>
     f86:	ce 01       	movw	r24, r28
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	4c 01       	movw	r8, r24
     f8c:	f7 01       	movw	r30, r14
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	f6 01       	movw	r30, r12
     f92:	93 fd       	sbrc	r25, 3
     f94:	85 91       	lpm	r24, Z+
     f96:	93 ff       	sbrs	r25, 3
     f98:	81 91       	ld	r24, Z+
     f9a:	6f 01       	movw	r12, r30
     f9c:	88 23       	and	r24, r24
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <vfprintf+0x3a>
     fa0:	ab c1       	rjmp	.+854    	; 0x12f8 <vfprintf+0x390>
     fa2:	85 32       	cpi	r24, 0x25	; 37
     fa4:	39 f4       	brne	.+14     	; 0xfb4 <vfprintf+0x4c>
     fa6:	93 fd       	sbrc	r25, 3
     fa8:	85 91       	lpm	r24, Z+
     faa:	93 ff       	sbrs	r25, 3
     fac:	81 91       	ld	r24, Z+
     fae:	6f 01       	movw	r12, r30
     fb0:	85 32       	cpi	r24, 0x25	; 37
     fb2:	29 f4       	brne	.+10     	; 0xfbe <vfprintf+0x56>
     fb4:	b7 01       	movw	r22, r14
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <fputc>
     fbc:	e7 cf       	rjmp	.-50     	; 0xf8c <vfprintf+0x24>
     fbe:	51 2c       	mov	r5, r1
     fc0:	31 2c       	mov	r3, r1
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	20 32       	cpi	r18, 0x20	; 32
     fc6:	a0 f4       	brcc	.+40     	; 0xff0 <vfprintf+0x88>
     fc8:	8b 32       	cpi	r24, 0x2B	; 43
     fca:	69 f0       	breq	.+26     	; 0xfe6 <vfprintf+0x7e>
     fcc:	30 f4       	brcc	.+12     	; 0xfda <vfprintf+0x72>
     fce:	80 32       	cpi	r24, 0x20	; 32
     fd0:	59 f0       	breq	.+22     	; 0xfe8 <vfprintf+0x80>
     fd2:	83 32       	cpi	r24, 0x23	; 35
     fd4:	69 f4       	brne	.+26     	; 0xff0 <vfprintf+0x88>
     fd6:	20 61       	ori	r18, 0x10	; 16
     fd8:	2c c0       	rjmp	.+88     	; 0x1032 <vfprintf+0xca>
     fda:	8d 32       	cpi	r24, 0x2D	; 45
     fdc:	39 f0       	breq	.+14     	; 0xfec <vfprintf+0x84>
     fde:	80 33       	cpi	r24, 0x30	; 48
     fe0:	39 f4       	brne	.+14     	; 0xff0 <vfprintf+0x88>
     fe2:	21 60       	ori	r18, 0x01	; 1
     fe4:	26 c0       	rjmp	.+76     	; 0x1032 <vfprintf+0xca>
     fe6:	22 60       	ori	r18, 0x02	; 2
     fe8:	24 60       	ori	r18, 0x04	; 4
     fea:	23 c0       	rjmp	.+70     	; 0x1032 <vfprintf+0xca>
     fec:	28 60       	ori	r18, 0x08	; 8
     fee:	21 c0       	rjmp	.+66     	; 0x1032 <vfprintf+0xca>
     ff0:	27 fd       	sbrc	r18, 7
     ff2:	27 c0       	rjmp	.+78     	; 0x1042 <vfprintf+0xda>
     ff4:	30 ed       	ldi	r19, 0xD0	; 208
     ff6:	38 0f       	add	r19, r24
     ff8:	3a 30       	cpi	r19, 0x0A	; 10
     ffa:	78 f4       	brcc	.+30     	; 0x101a <vfprintf+0xb2>
     ffc:	26 ff       	sbrs	r18, 6
     ffe:	06 c0       	rjmp	.+12     	; 0x100c <vfprintf+0xa4>
    1000:	fa e0       	ldi	r31, 0x0A	; 10
    1002:	5f 9e       	mul	r5, r31
    1004:	30 0d       	add	r19, r0
    1006:	11 24       	eor	r1, r1
    1008:	53 2e       	mov	r5, r19
    100a:	13 c0       	rjmp	.+38     	; 0x1032 <vfprintf+0xca>
    100c:	8a e0       	ldi	r24, 0x0A	; 10
    100e:	38 9e       	mul	r3, r24
    1010:	30 0d       	add	r19, r0
    1012:	11 24       	eor	r1, r1
    1014:	33 2e       	mov	r3, r19
    1016:	20 62       	ori	r18, 0x20	; 32
    1018:	0c c0       	rjmp	.+24     	; 0x1032 <vfprintf+0xca>
    101a:	8e 32       	cpi	r24, 0x2E	; 46
    101c:	21 f4       	brne	.+8      	; 0x1026 <vfprintf+0xbe>
    101e:	26 fd       	sbrc	r18, 6
    1020:	6b c1       	rjmp	.+726    	; 0x12f8 <vfprintf+0x390>
    1022:	20 64       	ori	r18, 0x40	; 64
    1024:	06 c0       	rjmp	.+12     	; 0x1032 <vfprintf+0xca>
    1026:	8c 36       	cpi	r24, 0x6C	; 108
    1028:	11 f4       	brne	.+4      	; 0x102e <vfprintf+0xc6>
    102a:	20 68       	ori	r18, 0x80	; 128
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <vfprintf+0xca>
    102e:	88 36       	cpi	r24, 0x68	; 104
    1030:	41 f4       	brne	.+16     	; 0x1042 <vfprintf+0xda>
    1032:	f6 01       	movw	r30, r12
    1034:	93 fd       	sbrc	r25, 3
    1036:	85 91       	lpm	r24, Z+
    1038:	93 ff       	sbrs	r25, 3
    103a:	81 91       	ld	r24, Z+
    103c:	6f 01       	movw	r12, r30
    103e:	81 11       	cpse	r24, r1
    1040:	c1 cf       	rjmp	.-126    	; 0xfc4 <vfprintf+0x5c>
    1042:	98 2f       	mov	r25, r24
    1044:	9f 7d       	andi	r25, 0xDF	; 223
    1046:	95 54       	subi	r25, 0x45	; 69
    1048:	93 30       	cpi	r25, 0x03	; 3
    104a:	28 f4       	brcc	.+10     	; 0x1056 <vfprintf+0xee>
    104c:	0c 5f       	subi	r16, 0xFC	; 252
    104e:	1f 4f       	sbci	r17, 0xFF	; 255
    1050:	ff e3       	ldi	r31, 0x3F	; 63
    1052:	f9 83       	std	Y+1, r31	; 0x01
    1054:	0d c0       	rjmp	.+26     	; 0x1070 <vfprintf+0x108>
    1056:	83 36       	cpi	r24, 0x63	; 99
    1058:	31 f0       	breq	.+12     	; 0x1066 <vfprintf+0xfe>
    105a:	83 37       	cpi	r24, 0x73	; 115
    105c:	71 f0       	breq	.+28     	; 0x107a <vfprintf+0x112>
    105e:	83 35       	cpi	r24, 0x53	; 83
    1060:	09 f0       	breq	.+2      	; 0x1064 <vfprintf+0xfc>
    1062:	5b c0       	rjmp	.+182    	; 0x111a <vfprintf+0x1b2>
    1064:	22 c0       	rjmp	.+68     	; 0x10aa <vfprintf+0x142>
    1066:	f8 01       	movw	r30, r16
    1068:	80 81       	ld	r24, Z
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	0e 5f       	subi	r16, 0xFE	; 254
    106e:	1f 4f       	sbci	r17, 0xFF	; 255
    1070:	44 24       	eor	r4, r4
    1072:	43 94       	inc	r4
    1074:	51 2c       	mov	r5, r1
    1076:	54 01       	movw	r10, r8
    1078:	15 c0       	rjmp	.+42     	; 0x10a4 <vfprintf+0x13c>
    107a:	38 01       	movw	r6, r16
    107c:	f2 e0       	ldi	r31, 0x02	; 2
    107e:	6f 0e       	add	r6, r31
    1080:	71 1c       	adc	r7, r1
    1082:	f8 01       	movw	r30, r16
    1084:	a0 80       	ld	r10, Z
    1086:	b1 80       	ldd	r11, Z+1	; 0x01
    1088:	26 ff       	sbrs	r18, 6
    108a:	03 c0       	rjmp	.+6      	; 0x1092 <vfprintf+0x12a>
    108c:	65 2d       	mov	r22, r5
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <vfprintf+0x12e>
    1092:	6f ef       	ldi	r22, 0xFF	; 255
    1094:	7f ef       	ldi	r23, 0xFF	; 255
    1096:	c5 01       	movw	r24, r10
    1098:	2c 87       	std	Y+12, r18	; 0x0c
    109a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <strnlen>
    109e:	2c 01       	movw	r4, r24
    10a0:	83 01       	movw	r16, r6
    10a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10a4:	2f 77       	andi	r18, 0x7F	; 127
    10a6:	22 2e       	mov	r2, r18
    10a8:	17 c0       	rjmp	.+46     	; 0x10d8 <vfprintf+0x170>
    10aa:	38 01       	movw	r6, r16
    10ac:	f2 e0       	ldi	r31, 0x02	; 2
    10ae:	6f 0e       	add	r6, r31
    10b0:	71 1c       	adc	r7, r1
    10b2:	f8 01       	movw	r30, r16
    10b4:	a0 80       	ld	r10, Z
    10b6:	b1 80       	ldd	r11, Z+1	; 0x01
    10b8:	26 ff       	sbrs	r18, 6
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <vfprintf+0x15a>
    10bc:	65 2d       	mov	r22, r5
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <vfprintf+0x15e>
    10c2:	6f ef       	ldi	r22, 0xFF	; 255
    10c4:	7f ef       	ldi	r23, 0xFF	; 255
    10c6:	c5 01       	movw	r24, r10
    10c8:	2c 87       	std	Y+12, r18	; 0x0c
    10ca:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <strnlen_P>
    10ce:	2c 01       	movw	r4, r24
    10d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    10d2:	20 68       	ori	r18, 0x80	; 128
    10d4:	22 2e       	mov	r2, r18
    10d6:	83 01       	movw	r16, r6
    10d8:	23 fc       	sbrc	r2, 3
    10da:	1b c0       	rjmp	.+54     	; 0x1112 <vfprintf+0x1aa>
    10dc:	83 2d       	mov	r24, r3
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	48 16       	cp	r4, r24
    10e2:	59 06       	cpc	r5, r25
    10e4:	b0 f4       	brcc	.+44     	; 0x1112 <vfprintf+0x1aa>
    10e6:	b7 01       	movw	r22, r14
    10e8:	80 e2       	ldi	r24, 0x20	; 32
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <fputc>
    10f0:	3a 94       	dec	r3
    10f2:	f4 cf       	rjmp	.-24     	; 0x10dc <vfprintf+0x174>
    10f4:	f5 01       	movw	r30, r10
    10f6:	27 fc       	sbrc	r2, 7
    10f8:	85 91       	lpm	r24, Z+
    10fa:	27 fe       	sbrs	r2, 7
    10fc:	81 91       	ld	r24, Z+
    10fe:	5f 01       	movw	r10, r30
    1100:	b7 01       	movw	r22, r14
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <fputc>
    1108:	31 10       	cpse	r3, r1
    110a:	3a 94       	dec	r3
    110c:	f1 e0       	ldi	r31, 0x01	; 1
    110e:	4f 1a       	sub	r4, r31
    1110:	51 08       	sbc	r5, r1
    1112:	41 14       	cp	r4, r1
    1114:	51 04       	cpc	r5, r1
    1116:	71 f7       	brne	.-36     	; 0x10f4 <vfprintf+0x18c>
    1118:	e5 c0       	rjmp	.+458    	; 0x12e4 <vfprintf+0x37c>
    111a:	84 36       	cpi	r24, 0x64	; 100
    111c:	11 f0       	breq	.+4      	; 0x1122 <vfprintf+0x1ba>
    111e:	89 36       	cpi	r24, 0x69	; 105
    1120:	39 f5       	brne	.+78     	; 0x1170 <vfprintf+0x208>
    1122:	f8 01       	movw	r30, r16
    1124:	27 ff       	sbrs	r18, 7
    1126:	07 c0       	rjmp	.+14     	; 0x1136 <vfprintf+0x1ce>
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	0c 5f       	subi	r16, 0xFC	; 252
    1132:	1f 4f       	sbci	r17, 0xFF	; 255
    1134:	08 c0       	rjmp	.+16     	; 0x1146 <vfprintf+0x1de>
    1136:	60 81       	ld	r22, Z
    1138:	71 81       	ldd	r23, Z+1	; 0x01
    113a:	88 27       	eor	r24, r24
    113c:	77 fd       	sbrc	r23, 7
    113e:	80 95       	com	r24
    1140:	98 2f       	mov	r25, r24
    1142:	0e 5f       	subi	r16, 0xFE	; 254
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	2f 76       	andi	r18, 0x6F	; 111
    1148:	b2 2e       	mov	r11, r18
    114a:	97 ff       	sbrs	r25, 7
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <vfprintf+0x1f8>
    114e:	90 95       	com	r25
    1150:	80 95       	com	r24
    1152:	70 95       	com	r23
    1154:	61 95       	neg	r22
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	8f 4f       	sbci	r24, 0xFF	; 255
    115a:	9f 4f       	sbci	r25, 0xFF	; 255
    115c:	20 68       	ori	r18, 0x80	; 128
    115e:	b2 2e       	mov	r11, r18
    1160:	2a e0       	ldi	r18, 0x0A	; 10
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	a4 01       	movw	r20, r8
    1166:	0e 94 23 0b 	call	0x1646	; 0x1646 <__ultoa_invert>
    116a:	a8 2e       	mov	r10, r24
    116c:	a8 18       	sub	r10, r8
    116e:	44 c0       	rjmp	.+136    	; 0x11f8 <vfprintf+0x290>
    1170:	85 37       	cpi	r24, 0x75	; 117
    1172:	29 f4       	brne	.+10     	; 0x117e <vfprintf+0x216>
    1174:	2f 7e       	andi	r18, 0xEF	; 239
    1176:	b2 2e       	mov	r11, r18
    1178:	2a e0       	ldi	r18, 0x0A	; 10
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	25 c0       	rjmp	.+74     	; 0x11c8 <vfprintf+0x260>
    117e:	f2 2f       	mov	r31, r18
    1180:	f9 7f       	andi	r31, 0xF9	; 249
    1182:	bf 2e       	mov	r11, r31
    1184:	8f 36       	cpi	r24, 0x6F	; 111
    1186:	c1 f0       	breq	.+48     	; 0x11b8 <vfprintf+0x250>
    1188:	18 f4       	brcc	.+6      	; 0x1190 <vfprintf+0x228>
    118a:	88 35       	cpi	r24, 0x58	; 88
    118c:	79 f0       	breq	.+30     	; 0x11ac <vfprintf+0x244>
    118e:	b4 c0       	rjmp	.+360    	; 0x12f8 <vfprintf+0x390>
    1190:	80 37       	cpi	r24, 0x70	; 112
    1192:	19 f0       	breq	.+6      	; 0x119a <vfprintf+0x232>
    1194:	88 37       	cpi	r24, 0x78	; 120
    1196:	21 f0       	breq	.+8      	; 0x11a0 <vfprintf+0x238>
    1198:	af c0       	rjmp	.+350    	; 0x12f8 <vfprintf+0x390>
    119a:	2f 2f       	mov	r18, r31
    119c:	20 61       	ori	r18, 0x10	; 16
    119e:	b2 2e       	mov	r11, r18
    11a0:	b4 fe       	sbrs	r11, 4
    11a2:	0d c0       	rjmp	.+26     	; 0x11be <vfprintf+0x256>
    11a4:	8b 2d       	mov	r24, r11
    11a6:	84 60       	ori	r24, 0x04	; 4
    11a8:	b8 2e       	mov	r11, r24
    11aa:	09 c0       	rjmp	.+18     	; 0x11be <vfprintf+0x256>
    11ac:	24 ff       	sbrs	r18, 4
    11ae:	0a c0       	rjmp	.+20     	; 0x11c4 <vfprintf+0x25c>
    11b0:	9f 2f       	mov	r25, r31
    11b2:	96 60       	ori	r25, 0x06	; 6
    11b4:	b9 2e       	mov	r11, r25
    11b6:	06 c0       	rjmp	.+12     	; 0x11c4 <vfprintf+0x25c>
    11b8:	28 e0       	ldi	r18, 0x08	; 8
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	05 c0       	rjmp	.+10     	; 0x11c8 <vfprintf+0x260>
    11be:	20 e1       	ldi	r18, 0x10	; 16
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <vfprintf+0x260>
    11c4:	20 e1       	ldi	r18, 0x10	; 16
    11c6:	32 e0       	ldi	r19, 0x02	; 2
    11c8:	f8 01       	movw	r30, r16
    11ca:	b7 fe       	sbrs	r11, 7
    11cc:	07 c0       	rjmp	.+14     	; 0x11dc <vfprintf+0x274>
    11ce:	60 81       	ld	r22, Z
    11d0:	71 81       	ldd	r23, Z+1	; 0x01
    11d2:	82 81       	ldd	r24, Z+2	; 0x02
    11d4:	93 81       	ldd	r25, Z+3	; 0x03
    11d6:	0c 5f       	subi	r16, 0xFC	; 252
    11d8:	1f 4f       	sbci	r17, 0xFF	; 255
    11da:	06 c0       	rjmp	.+12     	; 0x11e8 <vfprintf+0x280>
    11dc:	60 81       	ld	r22, Z
    11de:	71 81       	ldd	r23, Z+1	; 0x01
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 5f       	subi	r16, 0xFE	; 254
    11e6:	1f 4f       	sbci	r17, 0xFF	; 255
    11e8:	a4 01       	movw	r20, r8
    11ea:	0e 94 23 0b 	call	0x1646	; 0x1646 <__ultoa_invert>
    11ee:	a8 2e       	mov	r10, r24
    11f0:	a8 18       	sub	r10, r8
    11f2:	fb 2d       	mov	r31, r11
    11f4:	ff 77       	andi	r31, 0x7F	; 127
    11f6:	bf 2e       	mov	r11, r31
    11f8:	b6 fe       	sbrs	r11, 6
    11fa:	0b c0       	rjmp	.+22     	; 0x1212 <vfprintf+0x2aa>
    11fc:	2b 2d       	mov	r18, r11
    11fe:	2e 7f       	andi	r18, 0xFE	; 254
    1200:	a5 14       	cp	r10, r5
    1202:	50 f4       	brcc	.+20     	; 0x1218 <vfprintf+0x2b0>
    1204:	b4 fe       	sbrs	r11, 4
    1206:	0a c0       	rjmp	.+20     	; 0x121c <vfprintf+0x2b4>
    1208:	b2 fc       	sbrc	r11, 2
    120a:	08 c0       	rjmp	.+16     	; 0x121c <vfprintf+0x2b4>
    120c:	2b 2d       	mov	r18, r11
    120e:	2e 7e       	andi	r18, 0xEE	; 238
    1210:	05 c0       	rjmp	.+10     	; 0x121c <vfprintf+0x2b4>
    1212:	7a 2c       	mov	r7, r10
    1214:	2b 2d       	mov	r18, r11
    1216:	03 c0       	rjmp	.+6      	; 0x121e <vfprintf+0x2b6>
    1218:	7a 2c       	mov	r7, r10
    121a:	01 c0       	rjmp	.+2      	; 0x121e <vfprintf+0x2b6>
    121c:	75 2c       	mov	r7, r5
    121e:	24 ff       	sbrs	r18, 4
    1220:	0d c0       	rjmp	.+26     	; 0x123c <vfprintf+0x2d4>
    1222:	fe 01       	movw	r30, r28
    1224:	ea 0d       	add	r30, r10
    1226:	f1 1d       	adc	r31, r1
    1228:	80 81       	ld	r24, Z
    122a:	80 33       	cpi	r24, 0x30	; 48
    122c:	11 f4       	brne	.+4      	; 0x1232 <vfprintf+0x2ca>
    122e:	29 7e       	andi	r18, 0xE9	; 233
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <vfprintf+0x2dc>
    1232:	22 ff       	sbrs	r18, 2
    1234:	06 c0       	rjmp	.+12     	; 0x1242 <vfprintf+0x2da>
    1236:	73 94       	inc	r7
    1238:	73 94       	inc	r7
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <vfprintf+0x2dc>
    123c:	82 2f       	mov	r24, r18
    123e:	86 78       	andi	r24, 0x86	; 134
    1240:	09 f0       	breq	.+2      	; 0x1244 <vfprintf+0x2dc>
    1242:	73 94       	inc	r7
    1244:	23 fd       	sbrc	r18, 3
    1246:	13 c0       	rjmp	.+38     	; 0x126e <vfprintf+0x306>
    1248:	20 ff       	sbrs	r18, 0
    124a:	06 c0       	rjmp	.+12     	; 0x1258 <vfprintf+0x2f0>
    124c:	5a 2c       	mov	r5, r10
    124e:	73 14       	cp	r7, r3
    1250:	18 f4       	brcc	.+6      	; 0x1258 <vfprintf+0x2f0>
    1252:	53 0c       	add	r5, r3
    1254:	57 18       	sub	r5, r7
    1256:	73 2c       	mov	r7, r3
    1258:	73 14       	cp	r7, r3
    125a:	68 f4       	brcc	.+26     	; 0x1276 <vfprintf+0x30e>
    125c:	b7 01       	movw	r22, r14
    125e:	80 e2       	ldi	r24, 0x20	; 32
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	2c 87       	std	Y+12, r18	; 0x0c
    1264:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <fputc>
    1268:	73 94       	inc	r7
    126a:	2c 85       	ldd	r18, Y+12	; 0x0c
    126c:	f5 cf       	rjmp	.-22     	; 0x1258 <vfprintf+0x2f0>
    126e:	73 14       	cp	r7, r3
    1270:	10 f4       	brcc	.+4      	; 0x1276 <vfprintf+0x30e>
    1272:	37 18       	sub	r3, r7
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <vfprintf+0x310>
    1276:	31 2c       	mov	r3, r1
    1278:	24 ff       	sbrs	r18, 4
    127a:	12 c0       	rjmp	.+36     	; 0x12a0 <vfprintf+0x338>
    127c:	b7 01       	movw	r22, r14
    127e:	80 e3       	ldi	r24, 0x30	; 48
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	2c 87       	std	Y+12, r18	; 0x0c
    1284:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <fputc>
    1288:	2c 85       	ldd	r18, Y+12	; 0x0c
    128a:	22 ff       	sbrs	r18, 2
    128c:	17 c0       	rjmp	.+46     	; 0x12bc <vfprintf+0x354>
    128e:	21 ff       	sbrs	r18, 1
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <vfprintf+0x330>
    1292:	88 e5       	ldi	r24, 0x58	; 88
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 c0       	rjmp	.+4      	; 0x129c <vfprintf+0x334>
    1298:	88 e7       	ldi	r24, 0x78	; 120
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	b7 01       	movw	r22, r14
    129e:	0c c0       	rjmp	.+24     	; 0x12b8 <vfprintf+0x350>
    12a0:	82 2f       	mov	r24, r18
    12a2:	86 78       	andi	r24, 0x86	; 134
    12a4:	59 f0       	breq	.+22     	; 0x12bc <vfprintf+0x354>
    12a6:	21 fd       	sbrc	r18, 1
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <vfprintf+0x346>
    12aa:	80 e2       	ldi	r24, 0x20	; 32
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <vfprintf+0x348>
    12ae:	8b e2       	ldi	r24, 0x2B	; 43
    12b0:	27 fd       	sbrc	r18, 7
    12b2:	8d e2       	ldi	r24, 0x2D	; 45
    12b4:	b7 01       	movw	r22, r14
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <fputc>
    12bc:	a5 14       	cp	r10, r5
    12be:	38 f4       	brcc	.+14     	; 0x12ce <vfprintf+0x366>
    12c0:	b7 01       	movw	r22, r14
    12c2:	80 e3       	ldi	r24, 0x30	; 48
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <fputc>
    12ca:	5a 94       	dec	r5
    12cc:	f7 cf       	rjmp	.-18     	; 0x12bc <vfprintf+0x354>
    12ce:	aa 94       	dec	r10
    12d0:	f4 01       	movw	r30, r8
    12d2:	ea 0d       	add	r30, r10
    12d4:	f1 1d       	adc	r31, r1
    12d6:	80 81       	ld	r24, Z
    12d8:	b7 01       	movw	r22, r14
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <fputc>
    12e0:	a1 10       	cpse	r10, r1
    12e2:	f5 cf       	rjmp	.-22     	; 0x12ce <vfprintf+0x366>
    12e4:	33 20       	and	r3, r3
    12e6:	09 f4       	brne	.+2      	; 0x12ea <vfprintf+0x382>
    12e8:	51 ce       	rjmp	.-862    	; 0xf8c <vfprintf+0x24>
    12ea:	b7 01       	movw	r22, r14
    12ec:	80 e2       	ldi	r24, 0x20	; 32
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <fputc>
    12f4:	3a 94       	dec	r3
    12f6:	f6 cf       	rjmp	.-20     	; 0x12e4 <vfprintf+0x37c>
    12f8:	f7 01       	movw	r30, r14
    12fa:	86 81       	ldd	r24, Z+6	; 0x06
    12fc:	97 81       	ldd	r25, Z+7	; 0x07
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <vfprintf+0x39c>
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	9f ef       	ldi	r25, 0xFF	; 255
    1304:	2c 96       	adiw	r28, 0x0c	; 12
    1306:	e2 e1       	ldi	r30, 0x12	; 18
    1308:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__epilogue_restores__>

0000130c <__eerd_word_m162>:
    130c:	a8 e1       	ldi	r26, 0x18	; 24
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	42 e0       	ldi	r20, 0x02	; 2
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__eerd_blraw_m162>

00001318 <__eewr_word_m162>:
    1318:	0e 94 91 0b 	call	0x1722	; 0x1722 <__eewr_byte_m162>
    131c:	27 2f       	mov	r18, r23
    131e:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__eewr_r18_m162>

00001322 <calloc>:
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	86 9f       	mul	r24, r22
    132c:	80 01       	movw	r16, r0
    132e:	87 9f       	mul	r24, r23
    1330:	10 0d       	add	r17, r0
    1332:	96 9f       	mul	r25, r22
    1334:	10 0d       	add	r17, r0
    1336:	11 24       	eor	r1, r1
    1338:	c8 01       	movw	r24, r16
    133a:	0e 94 ad 09 	call	0x135a	; 0x135a <malloc>
    133e:	ec 01       	movw	r28, r24
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	29 f0       	breq	.+10     	; 0x134e <calloc+0x2c>
    1344:	a8 01       	movw	r20, r16
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	0e 94 df 0a 	call	0x15be	; 0x15be <memset>
    134e:	ce 01       	movw	r24, r28
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	08 95       	ret

0000135a <malloc>:
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	82 30       	cpi	r24, 0x02	; 2
    1360:	91 05       	cpc	r25, r1
    1362:	10 f4       	brcc	.+4      	; 0x1368 <malloc+0xe>
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	e0 91 45 02 	lds	r30, 0x0245
    136c:	f0 91 46 02 	lds	r31, 0x0246
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	a0 e0       	ldi	r26, 0x00	; 0
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	30 97       	sbiw	r30, 0x00	; 0
    137a:	39 f1       	breq	.+78     	; 0x13ca <malloc+0x70>
    137c:	40 81       	ld	r20, Z
    137e:	51 81       	ldd	r21, Z+1	; 0x01
    1380:	48 17       	cp	r20, r24
    1382:	59 07       	cpc	r21, r25
    1384:	b8 f0       	brcs	.+46     	; 0x13b4 <malloc+0x5a>
    1386:	48 17       	cp	r20, r24
    1388:	59 07       	cpc	r21, r25
    138a:	71 f4       	brne	.+28     	; 0x13a8 <malloc+0x4e>
    138c:	82 81       	ldd	r24, Z+2	; 0x02
    138e:	93 81       	ldd	r25, Z+3	; 0x03
    1390:	10 97       	sbiw	r26, 0x00	; 0
    1392:	29 f0       	breq	.+10     	; 0x139e <malloc+0x44>
    1394:	13 96       	adiw	r26, 0x03	; 3
    1396:	9c 93       	st	X, r25
    1398:	8e 93       	st	-X, r24
    139a:	12 97       	sbiw	r26, 0x02	; 2
    139c:	2c c0       	rjmp	.+88     	; 0x13f6 <malloc+0x9c>
    139e:	90 93 46 02 	sts	0x0246, r25
    13a2:	80 93 45 02 	sts	0x0245, r24
    13a6:	27 c0       	rjmp	.+78     	; 0x13f6 <malloc+0x9c>
    13a8:	21 15       	cp	r18, r1
    13aa:	31 05       	cpc	r19, r1
    13ac:	31 f0       	breq	.+12     	; 0x13ba <malloc+0x60>
    13ae:	42 17       	cp	r20, r18
    13b0:	53 07       	cpc	r21, r19
    13b2:	18 f0       	brcs	.+6      	; 0x13ba <malloc+0x60>
    13b4:	a9 01       	movw	r20, r18
    13b6:	db 01       	movw	r26, r22
    13b8:	01 c0       	rjmp	.+2      	; 0x13bc <malloc+0x62>
    13ba:	ef 01       	movw	r28, r30
    13bc:	9a 01       	movw	r18, r20
    13be:	bd 01       	movw	r22, r26
    13c0:	df 01       	movw	r26, r30
    13c2:	02 80       	ldd	r0, Z+2	; 0x02
    13c4:	f3 81       	ldd	r31, Z+3	; 0x03
    13c6:	e0 2d       	mov	r30, r0
    13c8:	d7 cf       	rjmp	.-82     	; 0x1378 <malloc+0x1e>
    13ca:	21 15       	cp	r18, r1
    13cc:	31 05       	cpc	r19, r1
    13ce:	f9 f0       	breq	.+62     	; 0x140e <malloc+0xb4>
    13d0:	28 1b       	sub	r18, r24
    13d2:	39 0b       	sbc	r19, r25
    13d4:	24 30       	cpi	r18, 0x04	; 4
    13d6:	31 05       	cpc	r19, r1
    13d8:	80 f4       	brcc	.+32     	; 0x13fa <malloc+0xa0>
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	9b 81       	ldd	r25, Y+3	; 0x03
    13de:	61 15       	cp	r22, r1
    13e0:	71 05       	cpc	r23, r1
    13e2:	21 f0       	breq	.+8      	; 0x13ec <malloc+0x92>
    13e4:	fb 01       	movw	r30, r22
    13e6:	93 83       	std	Z+3, r25	; 0x03
    13e8:	82 83       	std	Z+2, r24	; 0x02
    13ea:	04 c0       	rjmp	.+8      	; 0x13f4 <malloc+0x9a>
    13ec:	90 93 46 02 	sts	0x0246, r25
    13f0:	80 93 45 02 	sts	0x0245, r24
    13f4:	fe 01       	movw	r30, r28
    13f6:	32 96       	adiw	r30, 0x02	; 2
    13f8:	44 c0       	rjmp	.+136    	; 0x1482 <malloc+0x128>
    13fa:	fe 01       	movw	r30, r28
    13fc:	e2 0f       	add	r30, r18
    13fe:	f3 1f       	adc	r31, r19
    1400:	81 93       	st	Z+, r24
    1402:	91 93       	st	Z+, r25
    1404:	22 50       	subi	r18, 0x02	; 2
    1406:	31 09       	sbc	r19, r1
    1408:	39 83       	std	Y+1, r19	; 0x01
    140a:	28 83       	st	Y, r18
    140c:	3a c0       	rjmp	.+116    	; 0x1482 <malloc+0x128>
    140e:	20 91 43 02 	lds	r18, 0x0243
    1412:	30 91 44 02 	lds	r19, 0x0244
    1416:	23 2b       	or	r18, r19
    1418:	41 f4       	brne	.+16     	; 0x142a <malloc+0xd0>
    141a:	20 91 02 01 	lds	r18, 0x0102
    141e:	30 91 03 01 	lds	r19, 0x0103
    1422:	30 93 44 02 	sts	0x0244, r19
    1426:	20 93 43 02 	sts	0x0243, r18
    142a:	20 91 00 01 	lds	r18, 0x0100
    142e:	30 91 01 01 	lds	r19, 0x0101
    1432:	21 15       	cp	r18, r1
    1434:	31 05       	cpc	r19, r1
    1436:	41 f4       	brne	.+16     	; 0x1448 <malloc+0xee>
    1438:	2d b7       	in	r18, 0x3d	; 61
    143a:	3e b7       	in	r19, 0x3e	; 62
    143c:	40 91 04 01 	lds	r20, 0x0104
    1440:	50 91 05 01 	lds	r21, 0x0105
    1444:	24 1b       	sub	r18, r20
    1446:	35 0b       	sbc	r19, r21
    1448:	e0 91 43 02 	lds	r30, 0x0243
    144c:	f0 91 44 02 	lds	r31, 0x0244
    1450:	e2 17       	cp	r30, r18
    1452:	f3 07       	cpc	r31, r19
    1454:	a0 f4       	brcc	.+40     	; 0x147e <malloc+0x124>
    1456:	2e 1b       	sub	r18, r30
    1458:	3f 0b       	sbc	r19, r31
    145a:	28 17       	cp	r18, r24
    145c:	39 07       	cpc	r19, r25
    145e:	78 f0       	brcs	.+30     	; 0x147e <malloc+0x124>
    1460:	ac 01       	movw	r20, r24
    1462:	4e 5f       	subi	r20, 0xFE	; 254
    1464:	5f 4f       	sbci	r21, 0xFF	; 255
    1466:	24 17       	cp	r18, r20
    1468:	35 07       	cpc	r19, r21
    146a:	48 f0       	brcs	.+18     	; 0x147e <malloc+0x124>
    146c:	4e 0f       	add	r20, r30
    146e:	5f 1f       	adc	r21, r31
    1470:	50 93 44 02 	sts	0x0244, r21
    1474:	40 93 43 02 	sts	0x0243, r20
    1478:	81 93       	st	Z+, r24
    147a:	91 93       	st	Z+, r25
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <malloc+0x128>
    147e:	e0 e0       	ldi	r30, 0x00	; 0
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	cf 01       	movw	r24, r30
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	08 95       	ret

0000148a <free>:
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	09 f4       	brne	.+2      	; 0x1494 <free+0xa>
    1492:	87 c0       	rjmp	.+270    	; 0x15a2 <free+0x118>
    1494:	fc 01       	movw	r30, r24
    1496:	32 97       	sbiw	r30, 0x02	; 2
    1498:	13 82       	std	Z+3, r1	; 0x03
    149a:	12 82       	std	Z+2, r1	; 0x02
    149c:	c0 91 45 02 	lds	r28, 0x0245
    14a0:	d0 91 46 02 	lds	r29, 0x0246
    14a4:	20 97       	sbiw	r28, 0x00	; 0
    14a6:	81 f4       	brne	.+32     	; 0x14c8 <free+0x3e>
    14a8:	20 81       	ld	r18, Z
    14aa:	31 81       	ldd	r19, Z+1	; 0x01
    14ac:	28 0f       	add	r18, r24
    14ae:	39 1f       	adc	r19, r25
    14b0:	80 91 43 02 	lds	r24, 0x0243
    14b4:	90 91 44 02 	lds	r25, 0x0244
    14b8:	82 17       	cp	r24, r18
    14ba:	93 07       	cpc	r25, r19
    14bc:	79 f5       	brne	.+94     	; 0x151c <free+0x92>
    14be:	f0 93 44 02 	sts	0x0244, r31
    14c2:	e0 93 43 02 	sts	0x0243, r30
    14c6:	6d c0       	rjmp	.+218    	; 0x15a2 <free+0x118>
    14c8:	de 01       	movw	r26, r28
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	ae 17       	cp	r26, r30
    14d0:	bf 07       	cpc	r27, r31
    14d2:	50 f4       	brcc	.+20     	; 0x14e8 <free+0x5e>
    14d4:	12 96       	adiw	r26, 0x02	; 2
    14d6:	4d 91       	ld	r20, X+
    14d8:	5c 91       	ld	r21, X
    14da:	13 97       	sbiw	r26, 0x03	; 3
    14dc:	9d 01       	movw	r18, r26
    14de:	41 15       	cp	r20, r1
    14e0:	51 05       	cpc	r21, r1
    14e2:	09 f1       	breq	.+66     	; 0x1526 <free+0x9c>
    14e4:	da 01       	movw	r26, r20
    14e6:	f3 cf       	rjmp	.-26     	; 0x14ce <free+0x44>
    14e8:	b3 83       	std	Z+3, r27	; 0x03
    14ea:	a2 83       	std	Z+2, r26	; 0x02
    14ec:	40 81       	ld	r20, Z
    14ee:	51 81       	ldd	r21, Z+1	; 0x01
    14f0:	84 0f       	add	r24, r20
    14f2:	95 1f       	adc	r25, r21
    14f4:	8a 17       	cp	r24, r26
    14f6:	9b 07       	cpc	r25, r27
    14f8:	71 f4       	brne	.+28     	; 0x1516 <free+0x8c>
    14fa:	8d 91       	ld	r24, X+
    14fc:	9c 91       	ld	r25, X
    14fe:	11 97       	sbiw	r26, 0x01	; 1
    1500:	84 0f       	add	r24, r20
    1502:	95 1f       	adc	r25, r21
    1504:	02 96       	adiw	r24, 0x02	; 2
    1506:	91 83       	std	Z+1, r25	; 0x01
    1508:	80 83       	st	Z, r24
    150a:	12 96       	adiw	r26, 0x02	; 2
    150c:	8d 91       	ld	r24, X+
    150e:	9c 91       	ld	r25, X
    1510:	13 97       	sbiw	r26, 0x03	; 3
    1512:	93 83       	std	Z+3, r25	; 0x03
    1514:	82 83       	std	Z+2, r24	; 0x02
    1516:	21 15       	cp	r18, r1
    1518:	31 05       	cpc	r19, r1
    151a:	29 f4       	brne	.+10     	; 0x1526 <free+0x9c>
    151c:	f0 93 46 02 	sts	0x0246, r31
    1520:	e0 93 45 02 	sts	0x0245, r30
    1524:	3e c0       	rjmp	.+124    	; 0x15a2 <free+0x118>
    1526:	d9 01       	movw	r26, r18
    1528:	13 96       	adiw	r26, 0x03	; 3
    152a:	fc 93       	st	X, r31
    152c:	ee 93       	st	-X, r30
    152e:	12 97       	sbiw	r26, 0x02	; 2
    1530:	4d 91       	ld	r20, X+
    1532:	5d 91       	ld	r21, X+
    1534:	a4 0f       	add	r26, r20
    1536:	b5 1f       	adc	r27, r21
    1538:	ea 17       	cp	r30, r26
    153a:	fb 07       	cpc	r31, r27
    153c:	79 f4       	brne	.+30     	; 0x155c <free+0xd2>
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	84 0f       	add	r24, r20
    1544:	95 1f       	adc	r25, r21
    1546:	02 96       	adiw	r24, 0x02	; 2
    1548:	d9 01       	movw	r26, r18
    154a:	11 96       	adiw	r26, 0x01	; 1
    154c:	9c 93       	st	X, r25
    154e:	8e 93       	st	-X, r24
    1550:	82 81       	ldd	r24, Z+2	; 0x02
    1552:	93 81       	ldd	r25, Z+3	; 0x03
    1554:	13 96       	adiw	r26, 0x03	; 3
    1556:	9c 93       	st	X, r25
    1558:	8e 93       	st	-X, r24
    155a:	12 97       	sbiw	r26, 0x02	; 2
    155c:	e0 e0       	ldi	r30, 0x00	; 0
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	9b 81       	ldd	r25, Y+3	; 0x03
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	19 f0       	breq	.+6      	; 0x156e <free+0xe4>
    1568:	fe 01       	movw	r30, r28
    156a:	ec 01       	movw	r28, r24
    156c:	f9 cf       	rjmp	.-14     	; 0x1560 <free+0xd6>
    156e:	ce 01       	movw	r24, r28
    1570:	02 96       	adiw	r24, 0x02	; 2
    1572:	28 81       	ld	r18, Y
    1574:	39 81       	ldd	r19, Y+1	; 0x01
    1576:	82 0f       	add	r24, r18
    1578:	93 1f       	adc	r25, r19
    157a:	20 91 43 02 	lds	r18, 0x0243
    157e:	30 91 44 02 	lds	r19, 0x0244
    1582:	28 17       	cp	r18, r24
    1584:	39 07       	cpc	r19, r25
    1586:	69 f4       	brne	.+26     	; 0x15a2 <free+0x118>
    1588:	30 97       	sbiw	r30, 0x00	; 0
    158a:	29 f4       	brne	.+10     	; 0x1596 <free+0x10c>
    158c:	10 92 46 02 	sts	0x0246, r1
    1590:	10 92 45 02 	sts	0x0245, r1
    1594:	02 c0       	rjmp	.+4      	; 0x159a <free+0x110>
    1596:	13 82       	std	Z+3, r1	; 0x03
    1598:	12 82       	std	Z+2, r1	; 0x02
    159a:	d0 93 44 02 	sts	0x0244, r29
    159e:	c0 93 43 02 	sts	0x0243, r28
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	08 95       	ret

000015a8 <strnlen_P>:
    15a8:	fc 01       	movw	r30, r24
    15aa:	05 90       	lpm	r0, Z+
    15ac:	61 50       	subi	r22, 0x01	; 1
    15ae:	70 40       	sbci	r23, 0x00	; 0
    15b0:	01 10       	cpse	r0, r1
    15b2:	d8 f7       	brcc	.-10     	; 0x15aa <strnlen_P+0x2>
    15b4:	80 95       	com	r24
    15b6:	90 95       	com	r25
    15b8:	8e 0f       	add	r24, r30
    15ba:	9f 1f       	adc	r25, r31
    15bc:	08 95       	ret

000015be <memset>:
    15be:	dc 01       	movw	r26, r24
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <memset+0x6>
    15c2:	6d 93       	st	X+, r22
    15c4:	41 50       	subi	r20, 0x01	; 1
    15c6:	50 40       	sbci	r21, 0x00	; 0
    15c8:	e0 f7       	brcc	.-8      	; 0x15c2 <memset+0x4>
    15ca:	08 95       	ret

000015cc <strnlen>:
    15cc:	fc 01       	movw	r30, r24
    15ce:	61 50       	subi	r22, 0x01	; 1
    15d0:	70 40       	sbci	r23, 0x00	; 0
    15d2:	01 90       	ld	r0, Z+
    15d4:	01 10       	cpse	r0, r1
    15d6:	d8 f7       	brcc	.-10     	; 0x15ce <strnlen+0x2>
    15d8:	80 95       	com	r24
    15da:	90 95       	com	r25
    15dc:	8e 0f       	add	r24, r30
    15de:	9f 1f       	adc	r25, r31
    15e0:	08 95       	ret

000015e2 <fputc>:
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	18 2f       	mov	r17, r24
    15ec:	09 2f       	mov	r16, r25
    15ee:	eb 01       	movw	r28, r22
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	81 fd       	sbrc	r24, 1
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <fputc+0x1a>
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	9f ef       	ldi	r25, 0xFF	; 255
    15fa:	20 c0       	rjmp	.+64     	; 0x163c <fputc+0x5a>
    15fc:	82 ff       	sbrs	r24, 2
    15fe:	10 c0       	rjmp	.+32     	; 0x1620 <fputc+0x3e>
    1600:	4e 81       	ldd	r20, Y+6	; 0x06
    1602:	5f 81       	ldd	r21, Y+7	; 0x07
    1604:	2c 81       	ldd	r18, Y+4	; 0x04
    1606:	3d 81       	ldd	r19, Y+5	; 0x05
    1608:	42 17       	cp	r20, r18
    160a:	53 07       	cpc	r21, r19
    160c:	7c f4       	brge	.+30     	; 0x162c <fputc+0x4a>
    160e:	e8 81       	ld	r30, Y
    1610:	f9 81       	ldd	r31, Y+1	; 0x01
    1612:	9f 01       	movw	r18, r30
    1614:	2f 5f       	subi	r18, 0xFF	; 255
    1616:	3f 4f       	sbci	r19, 0xFF	; 255
    1618:	39 83       	std	Y+1, r19	; 0x01
    161a:	28 83       	st	Y, r18
    161c:	10 83       	st	Z, r17
    161e:	06 c0       	rjmp	.+12     	; 0x162c <fputc+0x4a>
    1620:	e8 85       	ldd	r30, Y+8	; 0x08
    1622:	f9 85       	ldd	r31, Y+9	; 0x09
    1624:	81 2f       	mov	r24, r17
    1626:	09 95       	icall
    1628:	89 2b       	or	r24, r25
    162a:	29 f7       	brne	.-54     	; 0x15f6 <fputc+0x14>
    162c:	2e 81       	ldd	r18, Y+6	; 0x06
    162e:	3f 81       	ldd	r19, Y+7	; 0x07
    1630:	2f 5f       	subi	r18, 0xFF	; 255
    1632:	3f 4f       	sbci	r19, 0xFF	; 255
    1634:	3f 83       	std	Y+7, r19	; 0x07
    1636:	2e 83       	std	Y+6, r18	; 0x06
    1638:	81 2f       	mov	r24, r17
    163a:	90 2f       	mov	r25, r16
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	08 95       	ret

00001646 <__ultoa_invert>:
    1646:	fa 01       	movw	r30, r20
    1648:	aa 27       	eor	r26, r26
    164a:	28 30       	cpi	r18, 0x08	; 8
    164c:	51 f1       	breq	.+84     	; 0x16a2 <__ultoa_invert+0x5c>
    164e:	20 31       	cpi	r18, 0x10	; 16
    1650:	81 f1       	breq	.+96     	; 0x16b2 <__ultoa_invert+0x6c>
    1652:	e8 94       	clt
    1654:	6f 93       	push	r22
    1656:	6e 7f       	andi	r22, 0xFE	; 254
    1658:	6e 5f       	subi	r22, 0xFE	; 254
    165a:	7f 4f       	sbci	r23, 0xFF	; 255
    165c:	8f 4f       	sbci	r24, 0xFF	; 255
    165e:	9f 4f       	sbci	r25, 0xFF	; 255
    1660:	af 4f       	sbci	r26, 0xFF	; 255
    1662:	b1 e0       	ldi	r27, 0x01	; 1
    1664:	3e d0       	rcall	.+124    	; 0x16e2 <__ultoa_invert+0x9c>
    1666:	b4 e0       	ldi	r27, 0x04	; 4
    1668:	3c d0       	rcall	.+120    	; 0x16e2 <__ultoa_invert+0x9c>
    166a:	67 0f       	add	r22, r23
    166c:	78 1f       	adc	r23, r24
    166e:	89 1f       	adc	r24, r25
    1670:	9a 1f       	adc	r25, r26
    1672:	a1 1d       	adc	r26, r1
    1674:	68 0f       	add	r22, r24
    1676:	79 1f       	adc	r23, r25
    1678:	8a 1f       	adc	r24, r26
    167a:	91 1d       	adc	r25, r1
    167c:	a1 1d       	adc	r26, r1
    167e:	6a 0f       	add	r22, r26
    1680:	71 1d       	adc	r23, r1
    1682:	81 1d       	adc	r24, r1
    1684:	91 1d       	adc	r25, r1
    1686:	a1 1d       	adc	r26, r1
    1688:	20 d0       	rcall	.+64     	; 0x16ca <__ultoa_invert+0x84>
    168a:	09 f4       	brne	.+2      	; 0x168e <__ultoa_invert+0x48>
    168c:	68 94       	set
    168e:	3f 91       	pop	r19
    1690:	2a e0       	ldi	r18, 0x0A	; 10
    1692:	26 9f       	mul	r18, r22
    1694:	11 24       	eor	r1, r1
    1696:	30 19       	sub	r19, r0
    1698:	30 5d       	subi	r19, 0xD0	; 208
    169a:	31 93       	st	Z+, r19
    169c:	de f6       	brtc	.-74     	; 0x1654 <__ultoa_invert+0xe>
    169e:	cf 01       	movw	r24, r30
    16a0:	08 95       	ret
    16a2:	46 2f       	mov	r20, r22
    16a4:	47 70       	andi	r20, 0x07	; 7
    16a6:	40 5d       	subi	r20, 0xD0	; 208
    16a8:	41 93       	st	Z+, r20
    16aa:	b3 e0       	ldi	r27, 0x03	; 3
    16ac:	0f d0       	rcall	.+30     	; 0x16cc <__ultoa_invert+0x86>
    16ae:	c9 f7       	brne	.-14     	; 0x16a2 <__ultoa_invert+0x5c>
    16b0:	f6 cf       	rjmp	.-20     	; 0x169e <__ultoa_invert+0x58>
    16b2:	46 2f       	mov	r20, r22
    16b4:	4f 70       	andi	r20, 0x0F	; 15
    16b6:	40 5d       	subi	r20, 0xD0	; 208
    16b8:	4a 33       	cpi	r20, 0x3A	; 58
    16ba:	18 f0       	brcs	.+6      	; 0x16c2 <__ultoa_invert+0x7c>
    16bc:	49 5d       	subi	r20, 0xD9	; 217
    16be:	31 fd       	sbrc	r19, 1
    16c0:	40 52       	subi	r20, 0x20	; 32
    16c2:	41 93       	st	Z+, r20
    16c4:	02 d0       	rcall	.+4      	; 0x16ca <__ultoa_invert+0x84>
    16c6:	a9 f7       	brne	.-22     	; 0x16b2 <__ultoa_invert+0x6c>
    16c8:	ea cf       	rjmp	.-44     	; 0x169e <__ultoa_invert+0x58>
    16ca:	b4 e0       	ldi	r27, 0x04	; 4
    16cc:	a6 95       	lsr	r26
    16ce:	97 95       	ror	r25
    16d0:	87 95       	ror	r24
    16d2:	77 95       	ror	r23
    16d4:	67 95       	ror	r22
    16d6:	ba 95       	dec	r27
    16d8:	c9 f7       	brne	.-14     	; 0x16cc <__ultoa_invert+0x86>
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	61 05       	cpc	r22, r1
    16de:	71 05       	cpc	r23, r1
    16e0:	08 95       	ret
    16e2:	9b 01       	movw	r18, r22
    16e4:	ac 01       	movw	r20, r24
    16e6:	0a 2e       	mov	r0, r26
    16e8:	06 94       	lsr	r0
    16ea:	57 95       	ror	r21
    16ec:	47 95       	ror	r20
    16ee:	37 95       	ror	r19
    16f0:	27 95       	ror	r18
    16f2:	ba 95       	dec	r27
    16f4:	c9 f7       	brne	.-14     	; 0x16e8 <__ultoa_invert+0xa2>
    16f6:	62 0f       	add	r22, r18
    16f8:	73 1f       	adc	r23, r19
    16fa:	84 1f       	adc	r24, r20
    16fc:	95 1f       	adc	r25, r21
    16fe:	a0 1d       	adc	r26, r0
    1700:	08 95       	ret

00001702 <__eerd_block_m162>:
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22

00001706 <__eerd_blraw_m162>:
    1706:	fc 01       	movw	r30, r24
    1708:	e1 99       	sbic	0x1c, 1	; 28
    170a:	fe cf       	rjmp	.-4      	; 0x1708 <__eerd_blraw_m162+0x2>
    170c:	06 c0       	rjmp	.+12     	; 0x171a <__eerd_blraw_m162+0x14>
    170e:	ff bb       	out	0x1f, r31	; 31
    1710:	ee bb       	out	0x1e, r30	; 30
    1712:	e0 9a       	sbi	0x1c, 0	; 28
    1714:	31 96       	adiw	r30, 0x01	; 1
    1716:	0d b2       	in	r0, 0x1d	; 29
    1718:	0d 92       	st	X+, r0
    171a:	41 50       	subi	r20, 0x01	; 1
    171c:	50 40       	sbci	r21, 0x00	; 0
    171e:	b8 f7       	brcc	.-18     	; 0x170e <__eerd_blraw_m162+0x8>
    1720:	08 95       	ret

00001722 <__eewr_byte_m162>:
    1722:	26 2f       	mov	r18, r22

00001724 <__eewr_r18_m162>:
    1724:	e1 99       	sbic	0x1c, 1	; 28
    1726:	fe cf       	rjmp	.-4      	; 0x1724 <__eewr_r18_m162>
    1728:	9f bb       	out	0x1f, r25	; 31
    172a:	8e bb       	out	0x1e, r24	; 30
    172c:	2d bb       	out	0x1d, r18	; 29
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	e2 9a       	sbi	0x1c, 2	; 28
    1734:	e1 9a       	sbi	0x1c, 1	; 28
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	08 95       	ret

0000173c <__prologue_saves__>:
    173c:	2f 92       	push	r2
    173e:	3f 92       	push	r3
    1740:	4f 92       	push	r4
    1742:	5f 92       	push	r5
    1744:	6f 92       	push	r6
    1746:	7f 92       	push	r7
    1748:	8f 92       	push	r8
    174a:	9f 92       	push	r9
    174c:	af 92       	push	r10
    174e:	bf 92       	push	r11
    1750:	cf 92       	push	r12
    1752:	df 92       	push	r13
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	ca 1b       	sub	r28, r26
    1766:	db 0b       	sbc	r29, r27
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	09 94       	ijmp

00001774 <__epilogue_restores__>:
    1774:	2a 88       	ldd	r2, Y+18	; 0x12
    1776:	39 88       	ldd	r3, Y+17	; 0x11
    1778:	48 88       	ldd	r4, Y+16	; 0x10
    177a:	5f 84       	ldd	r5, Y+15	; 0x0f
    177c:	6e 84       	ldd	r6, Y+14	; 0x0e
    177e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1780:	8c 84       	ldd	r8, Y+12	; 0x0c
    1782:	9b 84       	ldd	r9, Y+11	; 0x0b
    1784:	aa 84       	ldd	r10, Y+10	; 0x0a
    1786:	b9 84       	ldd	r11, Y+9	; 0x09
    1788:	c8 84       	ldd	r12, Y+8	; 0x08
    178a:	df 80       	ldd	r13, Y+7	; 0x07
    178c:	ee 80       	ldd	r14, Y+6	; 0x06
    178e:	fd 80       	ldd	r15, Y+5	; 0x05
    1790:	0c 81       	ldd	r16, Y+4	; 0x04
    1792:	1b 81       	ldd	r17, Y+3	; 0x03
    1794:	aa 81       	ldd	r26, Y+2	; 0x02
    1796:	b9 81       	ldd	r27, Y+1	; 0x01
    1798:	ce 0f       	add	r28, r30
    179a:	d1 1d       	adc	r29, r1
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	cd bf       	out	0x3d, r28	; 61
    17a6:	ed 01       	movw	r28, r26
    17a8:	08 95       	ret

000017aa <_exit>:
    17aa:	f8 94       	cli

000017ac <__stop_program>:
    17ac:	ff cf       	rjmp	.-2      	; 0x17ac <__stop_program>
