
node_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020e  00800100  0000191c  000019b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000191c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080030e  0080030e  00001bbe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bbe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000268  00000000  00000000  00001c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000023ee  00000000  00000000  00001e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000de7  00000000  00000000  00004270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c4a  00000000  00000000  00005057  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000584  00000000  00000000  00005ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e0  00000000  00000000  00006228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000efe  00000000  00000000  00006908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  00007806  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__ctors_end>
       4:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
       8:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
       c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      10:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      14:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      18:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      1c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      20:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      24:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      28:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      2c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      30:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      34:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      38:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      3c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      40:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      44:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      48:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      4c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      50:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      54:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      58:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      5c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      60:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      64:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      68:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      6c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
      70:	7b 07       	cpc	r23, r27
      72:	41 07       	cpc	r20, r17
      74:	41 07       	cpc	r20, r17
      76:	3a 07       	cpc	r19, r26
      78:	41 07       	cpc	r20, r17
      7a:	61 07       	cpc	r22, r17
      7c:	41 07       	cpc	r20, r17
      7e:	41 07       	cpc	r20, r17
      80:	6e 07       	cpc	r22, r30
      82:	41 07       	cpc	r20, r17
      84:	41 07       	cpc	r20, r17
      86:	27 07       	cpc	r18, r23
      88:	41 07       	cpc	r20, r17
      8a:	49 07       	cpc	r20, r25
      8c:	41 07       	cpc	r20, r17
      8e:	54 07       	cpc	r21, r20

00000090 <__trampolines_end>:
	...
      98:	00 06       	cpc	r0, r16
      9a:	5f 5f       	subi	r21, 0xFF	; 255
      9c:	06 00       	.word	0x0006	; ????
      9e:	00 00       	nop
      a0:	00 07       	cpc	r16, r16
      a2:	07 00       	.word	0x0007	; ????
      a4:	07 07       	cpc	r16, r23
      a6:	00 00       	nop
      a8:	14 7f       	andi	r17, 0xF4	; 244
      aa:	7f 14       	cp	r7, r15
      ac:	7f 7f       	andi	r23, 0xFF	; 255
      ae:	14 00       	.word	0x0014	; ????
      b0:	24 2e       	mov	r2, r20
      b2:	6b 6b       	ori	r22, 0xBB	; 187
      b4:	3a 12       	cpse	r3, r26
      b6:	00 00       	nop
      b8:	46 66       	ori	r20, 0x66	; 102
      ba:	30 18       	sub	r3, r0
      bc:	0c 66       	ori	r16, 0x6C	; 108
      be:	62 00       	.word	0x0062	; ????
      c0:	30 7a       	andi	r19, 0xA0	; 160
      c2:	4f 5d       	subi	r20, 0xDF	; 223
      c4:	37 7a       	andi	r19, 0xA7	; 167
      c6:	48 00       	.word	0x0048	; ????
      c8:	04 07       	cpc	r16, r20
      ca:	03 00       	.word	0x0003	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 1c       	adc	r0, r0
      d2:	3e 63       	ori	r19, 0x3E	; 62
      d4:	41 00       	.word	0x0041	; ????
      d6:	00 00       	nop
      d8:	00 41       	sbci	r16, 0x10	; 16
      da:	63 3e       	cpi	r22, 0xE3	; 227
      dc:	1c 00       	.word	0x001c	; ????
      de:	00 00       	nop
      e0:	08 2a       	or	r0, r24
      e2:	3e 1c       	adc	r3, r14
      e4:	1c 3e       	cpi	r17, 0xEC	; 236
      e6:	2a 08       	sbc	r2, r10
      e8:	08 08       	sbc	r0, r8
      ea:	3e 3e       	cpi	r19, 0xEE	; 238
      ec:	08 08       	sbc	r0, r8
      ee:	00 00       	nop
      f0:	00 a0       	ldd	r0, Z+32	; 0x20
      f2:	e0 60       	ori	r30, 0x00	; 0
      f4:	00 00       	nop
      f6:	00 00       	nop
      f8:	08 08       	sbc	r0, r8
      fa:	08 08       	sbc	r0, r8
      fc:	08 08       	sbc	r0, r8
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	60 60       	ori	r22, 0x00	; 0
     104:	00 00       	nop
     106:	00 00       	nop
     108:	60 30       	cpi	r22, 0x00	; 0
     10a:	18 0c       	add	r1, r8
     10c:	06 03       	mulsu	r16, r22
     10e:	01 00       	.word	0x0001	; ????
     110:	3e 7f       	andi	r19, 0xFE	; 254
     112:	59 4d       	sbci	r21, 0xD9	; 217
     114:	7f 3e       	cpi	r23, 0xEF	; 239
     116:	00 00       	nop
     118:	42 42       	sbci	r20, 0x22	; 34
     11a:	7f 7f       	andi	r23, 0xFF	; 255
     11c:	40 40       	sbci	r20, 0x00	; 0
     11e:	00 00       	nop
     120:	62 73       	andi	r22, 0x32	; 50
     122:	59 49       	sbci	r21, 0x99	; 153
     124:	6f 66       	ori	r22, 0x6F	; 111
     126:	00 00       	nop
     128:	22 63       	ori	r18, 0x32	; 50
     12a:	49 49       	sbci	r20, 0x99	; 153
     12c:	7f 36       	cpi	r23, 0x6F	; 111
     12e:	00 00       	nop
     130:	18 1c       	adc	r1, r8
     132:	16 13       	cpse	r17, r22
     134:	7f 7f       	andi	r23, 0xFF	; 255
     136:	10 00       	.word	0x0010	; ????
     138:	27 67       	ori	r18, 0x77	; 119
     13a:	45 45       	sbci	r20, 0x55	; 85
     13c:	7d 39       	cpi	r23, 0x9D	; 157
     13e:	00 00       	nop
     140:	3c 7e       	andi	r19, 0xEC	; 236
     142:	4b 49       	sbci	r20, 0x9B	; 155
     144:	79 30       	cpi	r23, 0x09	; 9
     146:	00 00       	nop
     148:	03 63       	ori	r16, 0x33	; 51
     14a:	71 19       	sub	r23, r1
     14c:	0f 07       	cpc	r16, r31
     14e:	00 00       	nop
     150:	36 7f       	andi	r19, 0xF6	; 246
     152:	49 49       	sbci	r20, 0x99	; 153
     154:	7f 36       	cpi	r23, 0x6F	; 111
     156:	00 00       	nop
     158:	06 4f       	sbci	r16, 0xF6	; 246
     15a:	49 69       	ori	r20, 0x99	; 153
     15c:	3f 1e       	adc	r3, r31
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	6c 6c       	ori	r22, 0xCC	; 204
     164:	00 00       	nop
     166:	00 00       	nop
     168:	00 a0       	ldd	r0, Z+32	; 0x20
     16a:	ec 6c       	ori	r30, 0xCC	; 204
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	08 1c       	adc	r0, r8
     172:	36 63       	ori	r19, 0x36	; 54
     174:	41 00       	.word	0x0041	; ????
     176:	00 00       	nop
     178:	14 14       	cp	r1, r4
     17a:	14 14       	cp	r1, r4
     17c:	14 14       	cp	r1, r4
     17e:	00 00       	nop
     180:	00 41       	sbci	r16, 0x10	; 16
     182:	63 36       	cpi	r22, 0x63	; 99
     184:	1c 08       	sbc	r1, r12
     186:	00 00       	nop
     188:	02 03       	mulsu	r16, r18
     18a:	51 59       	subi	r21, 0x91	; 145
     18c:	0f 06       	cpc	r0, r31
     18e:	00 00       	nop
     190:	3e 7f       	andi	r19, 0xFE	; 254
     192:	41 5d       	subi	r20, 0xD1	; 209
     194:	5d 1f       	adc	r21, r29
     196:	1e 00       	.word	0x001e	; ????
     198:	7c 7e       	andi	r23, 0xEC	; 236
     19a:	13 13       	cpse	r17, r19
     19c:	7e 7c       	andi	r23, 0xCE	; 206
     19e:	00 00       	nop
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	49 7f       	andi	r20, 0xF9	; 249
     1a6:	36 00       	.word	0x0036	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	41 63       	ori	r20, 0x31	; 49
     1ae:	22 00       	.word	0x0022	; ????
     1b0:	41 7f       	andi	r20, 0xF1	; 241
     1b2:	7f 41       	sbci	r23, 0x1F	; 31
     1b4:	63 7f       	andi	r22, 0xF3	; 243
     1b6:	1c 00       	.word	0x001c	; ????
     1b8:	41 7f       	andi	r20, 0xF1	; 241
     1ba:	7f 49       	sbci	r23, 0x9F	; 159
     1bc:	5d 41       	sbci	r21, 0x1D	; 29
     1be:	63 00       	.word	0x0063	; ????
     1c0:	41 7f       	andi	r20, 0xF1	; 241
     1c2:	7f 49       	sbci	r23, 0x9F	; 159
     1c4:	1d 01       	movw	r2, r26
     1c6:	03 00       	.word	0x0003	; ????
     1c8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ca:	63 41       	sbci	r22, 0x13	; 19
     1cc:	51 73       	andi	r21, 0x31	; 49
     1ce:	72 00       	.word	0x0072	; ????
     1d0:	7f 7f       	andi	r23, 0xFF	; 255
     1d2:	08 08       	sbc	r0, r8
     1d4:	7f 7f       	andi	r23, 0xFF	; 255
     1d6:	00 00       	nop
     1d8:	00 41       	sbci	r16, 0x10	; 16
     1da:	7f 7f       	andi	r23, 0xFF	; 255
     1dc:	41 00       	.word	0x0041	; ????
     1de:	00 00       	nop
     1e0:	30 70       	andi	r19, 0x00	; 0
     1e2:	40 41       	sbci	r20, 0x10	; 16
     1e4:	7f 3f       	cpi	r23, 0xFF	; 255
     1e6:	01 00       	.word	0x0001	; ????
     1e8:	41 7f       	andi	r20, 0xF1	; 241
     1ea:	7f 08       	sbc	r7, r15
     1ec:	1c 77       	andi	r17, 0x7C	; 124
     1ee:	63 00       	.word	0x0063	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 41       	sbci	r23, 0x1F	; 31
     1f4:	40 60       	ori	r20, 0x00	; 0
     1f6:	70 00       	.word	0x0070	; ????
     1f8:	7f 7f       	andi	r23, 0xFF	; 255
     1fa:	06 0c       	add	r0, r6
     1fc:	06 7f       	andi	r16, 0xF6	; 246
     1fe:	7f 00       	.word	0x007f	; ????
     200:	7f 7f       	andi	r23, 0xFF	; 255
     202:	06 0c       	add	r0, r6
     204:	18 7f       	andi	r17, 0xF8	; 248
     206:	7f 00       	.word	0x007f	; ????
     208:	1c 3e       	cpi	r17, 0xEC	; 236
     20a:	63 41       	sbci	r22, 0x13	; 19
     20c:	63 3e       	cpi	r22, 0xE3	; 227
     20e:	1c 00       	.word	0x001c	; ????
     210:	41 7f       	andi	r20, 0xF1	; 241
     212:	7f 49       	sbci	r23, 0x9F	; 159
     214:	09 0f       	add	r16, r25
     216:	06 00       	.word	0x0006	; ????
     218:	1e 3f       	cpi	r17, 0xFE	; 254
     21a:	21 71       	andi	r18, 0x11	; 17
     21c:	7f 5e       	subi	r23, 0xEF	; 239
     21e:	00 00       	nop
     220:	41 7f       	andi	r20, 0xF1	; 241
     222:	7f 19       	sub	r23, r15
     224:	39 6f       	ori	r19, 0xF9	; 249
     226:	46 00       	.word	0x0046	; ????
     228:	26 67       	ori	r18, 0x76	; 118
     22a:	4d 59       	subi	r20, 0x9D	; 157
     22c:	7b 32       	cpi	r23, 0x2B	; 43
     22e:	00 00       	nop
     230:	03 41       	sbci	r16, 0x13	; 19
     232:	7f 7f       	andi	r23, 0xFF	; 255
     234:	41 03       	mulsu	r20, r17
     236:	00 00       	nop
     238:	7f 7f       	andi	r23, 0xFF	; 255
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	7f 7f       	andi	r23, 0xFF	; 255
     23e:	00 00       	nop
     240:	1f 3f       	cpi	r17, 0xFF	; 255
     242:	60 60       	ori	r22, 0x00	; 0
     244:	3f 1f       	adc	r19, r31
     246:	00 00       	nop
     248:	7f 7f       	andi	r23, 0xFF	; 255
     24a:	30 18       	sub	r3, r0
     24c:	30 7f       	andi	r19, 0xF0	; 240
     24e:	7f 00       	.word	0x007f	; ????
     250:	63 77       	andi	r22, 0x73	; 115
     252:	1c 08       	sbc	r1, r12
     254:	1c 77       	andi	r17, 0x7C	; 124
     256:	63 00       	.word	0x0063	; ????
     258:	07 4f       	sbci	r16, 0xF7	; 247
     25a:	78 78       	andi	r23, 0x88	; 136
     25c:	4f 07       	cpc	r20, r31
     25e:	00 00       	nop
     260:	67 73       	andi	r22, 0x37	; 55
     262:	59 4d       	sbci	r21, 0xD9	; 217
     264:	47 63       	ori	r20, 0x37	; 55
     266:	71 00       	.word	0x0071	; ????
     268:	00 7f       	andi	r16, 0xF0	; 240
     26a:	7f 41       	sbci	r23, 0x1F	; 31
     26c:	41 00       	.word	0x0041	; ????
     26e:	00 00       	nop
     270:	01 03       	mulsu	r16, r17
     272:	06 0c       	add	r0, r6
     274:	18 30       	cpi	r17, 0x08	; 8
     276:	60 00       	.word	0x0060	; ????
     278:	00 41       	sbci	r16, 0x10	; 16
     27a:	41 7f       	andi	r20, 0xF1	; 241
     27c:	7f 00       	.word	0x007f	; ????
     27e:	00 00       	nop
     280:	08 0c       	add	r0, r8
     282:	06 03       	mulsu	r16, r22
     284:	06 0c       	add	r0, r6
     286:	08 00       	.word	0x0008	; ????
     288:	80 80       	ld	r8, Z
     28a:	80 80       	ld	r8, Z
     28c:	80 80       	ld	r8, Z
     28e:	80 80       	ld	r8, Z
     290:	00 00       	nop
     292:	03 07       	cpc	r16, r19
     294:	04 00       	.word	0x0004	; ????
     296:	00 00       	nop
     298:	20 74       	andi	r18, 0x40	; 64
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	3c 78       	andi	r19, 0x8C	; 140
     29e:	40 00       	.word	0x0040	; ????
     2a0:	41 3f       	cpi	r20, 0xF1	; 241
     2a2:	7f 44       	sbci	r23, 0x4F	; 79
     2a4:	44 7c       	andi	r20, 0xC4	; 196
     2a6:	38 00       	.word	0x0038	; ????
     2a8:	38 7c       	andi	r19, 0xC8	; 200
     2aa:	44 44       	sbci	r20, 0x44	; 68
     2ac:	6c 28       	or	r6, r12
     2ae:	00 00       	nop
     2b0:	30 78       	andi	r19, 0x80	; 128
     2b2:	48 49       	sbci	r20, 0x98	; 152
     2b4:	3f 7f       	andi	r19, 0xFF	; 255
     2b6:	40 00       	.word	0x0040	; ????
     2b8:	38 7c       	andi	r19, 0xC8	; 200
     2ba:	54 54       	subi	r21, 0x44	; 68
     2bc:	5c 18       	sub	r5, r12
     2be:	00 00       	nop
     2c0:	48 7e       	andi	r20, 0xE8	; 232
     2c2:	7f 49       	sbci	r23, 0x9F	; 159
     2c4:	03 02       	muls	r16, r19
     2c6:	00 00       	nop
     2c8:	98 bc       	out	0x28, r9	; 40
     2ca:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2cc:	f8 7c       	andi	r31, 0xC8	; 200
     2ce:	04 00       	.word	0x0004	; ????
     2d0:	41 7f       	andi	r20, 0xF1	; 241
     2d2:	7f 08       	sbc	r7, r15
     2d4:	04 7c       	andi	r16, 0xC4	; 196
     2d6:	78 00       	.word	0x0078	; ????
     2d8:	00 44       	sbci	r16, 0x40	; 64
     2da:	7d 7d       	andi	r23, 0xDD	; 221
     2dc:	40 00       	.word	0x0040	; ????
     2de:	00 00       	nop
     2e0:	40 c4       	rjmp	.+2176   	; 0xb62 <main+0x2e>
     2e2:	84 fd       	sbrc	r24, 4
     2e4:	7d 00       	.word	0x007d	; ????
     2e6:	00 00       	nop
     2e8:	41 7f       	andi	r20, 0xF1	; 241
     2ea:	7f 10       	cpse	r7, r15
     2ec:	38 6c       	ori	r19, 0xC8	; 200
     2ee:	44 00       	.word	0x0044	; ????
     2f0:	00 41       	sbci	r16, 0x10	; 16
     2f2:	7f 7f       	andi	r23, 0xFF	; 255
     2f4:	40 00       	.word	0x0040	; ????
     2f6:	00 00       	nop
     2f8:	7c 7c       	andi	r23, 0xCC	; 204
     2fa:	0c 18       	sub	r0, r12
     2fc:	0c 7c       	andi	r16, 0xCC	; 204
     2fe:	78 00       	.word	0x0078	; ????
     300:	7c 7c       	andi	r23, 0xCC	; 204
     302:	04 04       	cpc	r0, r4
     304:	7c 78       	andi	r23, 0x8C	; 140
     306:	00 00       	nop
     308:	38 7c       	andi	r19, 0xC8	; 200
     30a:	44 44       	sbci	r20, 0x44	; 68
     30c:	7c 38       	cpi	r23, 0x8C	; 140
     30e:	00 00       	nop
     310:	84 fc       	sbrc	r8, 4
     312:	f8 a4       	ldd	r15, Y+40	; 0x28
     314:	24 3c       	cpi	r18, 0xC4	; 196
     316:	18 00       	.word	0x0018	; ????
     318:	18 3c       	cpi	r17, 0xC8	; 200
     31a:	24 a4       	ldd	r2, Z+44	; 0x2c
     31c:	f8 fc       	.word	0xfcf8	; ????
     31e:	84 00       	.word	0x0084	; ????
     320:	44 7c       	andi	r20, 0xC4	; 196
     322:	78 44       	sbci	r23, 0x48	; 72
     324:	1c 18       	sub	r1, r12
     326:	00 00       	nop
     328:	48 5c       	subi	r20, 0xC8	; 200
     32a:	54 54       	subi	r21, 0x44	; 68
     32c:	74 24       	eor	r7, r4
     32e:	00 00       	nop
     330:	00 04       	cpc	r0, r0
     332:	3e 7f       	andi	r19, 0xFE	; 254
     334:	44 24       	eor	r4, r4
     336:	00 00       	nop
     338:	3c 7c       	andi	r19, 0xCC	; 204
     33a:	40 40       	sbci	r20, 0x00	; 0
     33c:	3c 7c       	andi	r19, 0xCC	; 204
     33e:	40 00       	.word	0x0040	; ????
     340:	1c 3c       	cpi	r17, 0xCC	; 204
     342:	60 60       	ori	r22, 0x00	; 0
     344:	3c 1c       	adc	r3, r12
     346:	00 00       	nop
     348:	3c 7c       	andi	r19, 0xCC	; 204
     34a:	60 30       	cpi	r22, 0x00	; 0
     34c:	60 7c       	andi	r22, 0xC0	; 192
     34e:	3c 00       	.word	0x003c	; ????
     350:	44 6c       	ori	r20, 0xC4	; 196
     352:	38 10       	cpse	r3, r8
     354:	38 6c       	ori	r19, 0xC8	; 200
     356:	44 00       	.word	0x0044	; ????
     358:	9c bc       	out	0x2c, r9	; 44
     35a:	a0 a0       	ldd	r10, Z+32	; 0x20
     35c:	fc 7c       	andi	r31, 0xCC	; 204
     35e:	00 00       	nop
     360:	4c 64       	ori	r20, 0x4C	; 76
     362:	74 5c       	subi	r23, 0xC4	; 196
     364:	4c 64       	ori	r20, 0x4C	; 76
     366:	00 00       	nop
     368:	08 08       	sbc	r0, r8
     36a:	3e 77       	andi	r19, 0x7E	; 126
     36c:	41 41       	sbci	r20, 0x11	; 17
     36e:	00 00       	nop
     370:	00 00       	nop
     372:	00 77       	andi	r16, 0x70	; 112
     374:	77 00       	.word	0x0077	; ????
     376:	00 00       	nop
     378:	41 41       	sbci	r20, 0x11	; 17
     37a:	77 3e       	cpi	r23, 0xE7	; 231
     37c:	08 08       	sbc	r0, r8
     37e:	00 00       	nop
     380:	02 03       	mulsu	r16, r18
     382:	01 03       	mulsu	r16, r17
     384:	02 03       	mulsu	r16, r18
     386:	01 00       	.word	0x0001	; ????

00000388 <__ctors_end>:
     388:	11 24       	eor	r1, r1
     38a:	1f be       	out	0x3f, r1	; 63
     38c:	cf ef       	ldi	r28, 0xFF	; 255
     38e:	d4 e0       	ldi	r29, 0x04	; 4
     390:	de bf       	out	0x3e, r29	; 62
     392:	cd bf       	out	0x3d, r28	; 61

00000394 <__do_copy_data>:
     394:	13 e0       	ldi	r17, 0x03	; 3
     396:	a0 e0       	ldi	r26, 0x00	; 0
     398:	b1 e0       	ldi	r27, 0x01	; 1
     39a:	ec e1       	ldi	r30, 0x1C	; 28
     39c:	f9 e1       	ldi	r31, 0x19	; 25
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <__do_copy_data+0x10>
     3a0:	05 90       	lpm	r0, Z+
     3a2:	0d 92       	st	X+, r0
     3a4:	ae 30       	cpi	r26, 0x0E	; 14
     3a6:	b1 07       	cpc	r27, r17
     3a8:	d9 f7       	brne	.-10     	; 0x3a0 <__do_copy_data+0xc>

000003aa <__do_clear_bss>:
     3aa:	23 e0       	ldi	r18, 0x03	; 3
     3ac:	ae e0       	ldi	r26, 0x0E	; 14
     3ae:	b3 e0       	ldi	r27, 0x03	; 3
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <.do_clear_bss_start>

000003b2 <.do_clear_bss_loop>:
     3b2:	1d 92       	st	X+, r1

000003b4 <.do_clear_bss_start>:
     3b4:	a3 32       	cpi	r26, 0x23	; 35
     3b6:	b2 07       	cpc	r27, r18
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <.do_clear_bss_loop>
     3ba:	0e 94 9a 05 	call	0xb34	; 0xb34 <main>
     3be:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <_exit>

000003c2 <__bad_interrupt>:
     3c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c6 <ADC_read>:
#include "ADC.h"


char ADC_read(int channel)
{
	*ADC_START = 0x04 + channel;
     3c6:	8c 5f       	subi	r24, 0xFC	; 252
     3c8:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3cc:	81 e4       	ldi	r24, 0x41	; 65
     3ce:	8a 95       	dec	r24
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <ADC_read+0x8>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <ADC_read+0xe>
	_delay_us(40);
	return *ADC_START;
     3d4:	80 91 00 14 	lds	r24, 0x1400
}
     3d8:	08 95       	ret

000003da <can_init>:
#include "MCP2515.h"

void can_init()
{
	
	mcp2515_init();
     3da:	0e 94 d5 02 	call	0x5aa	; 0x5aa <mcp2515_init>
	
	mcp2515_bit_modify(MCP_RXF0SIDH, 0xff , 0x00);
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	6f ef       	ldi	r22, 0xFF	; 255
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	0e 94 a2 02 	call	0x544	; 0x544 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXF0SIDL, 0xE0 , 0x00);
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	60 ee       	ldi	r22, 0xE0	; 224
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 a2 02 	call	0x544	; 0x544 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, 0xE0 , MODE_NORMAL);
     3f2:	40 e0       	ldi	r20, 0x00	; 0
     3f4:	60 ee       	ldi	r22, 0xE0	; 224
     3f6:	8f e0       	ldi	r24, 0x0F	; 15
     3f8:	0e 94 a2 02 	call	0x544	; 0x544 <mcp2515_bit_modify>
     3fc:	08 95       	ret

000003fe <can_message_send>:
	
}


void can_message_send(can_message_t *message)
{
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	ec 01       	movw	r28, r24
	char i;
	
	// ID
	mcp2515_write(MCP_TXB0CTRL + 1,message->id);
     406:	68 81       	ld	r22, Y
     408:	81 e3       	ldi	r24, 0x31	; 49
     40a:	0e 94 83 02 	call	0x506	; 0x506 <mcp2515_write>
	mcp2515_write(0x32,0x00);
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	82 e3       	ldi	r24, 0x32	; 50
     412:	0e 94 83 02 	call	0x506	; 0x506 <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
     416:	69 81       	ldd	r22, Y+1	; 0x01
     418:	85 e3       	ldi	r24, 0x35	; 53
     41a:	0e 94 83 02 	call	0x506	; 0x506 <mcp2515_write>
	
	// Data
	for (i = 0; i< message->length; i++){
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	88 23       	and	r24, r24
     422:	69 f0       	breq	.+26     	; 0x43e <can_message_send+0x40>
     424:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0CTRL + 6 + i, *((message->data)+i) );
     426:	fe 01       	movw	r30, r28
     428:	e1 0f       	add	r30, r17
     42a:	f1 1d       	adc	r31, r1
     42c:	62 81       	ldd	r22, Z+2	; 0x02
     42e:	86 e3       	ldi	r24, 0x36	; 54
     430:	81 0f       	add	r24, r17
     432:	0e 94 83 02 	call	0x506	; 0x506 <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
	
	// Data
	for (i = 0; i< message->length; i++){
     436:	1f 5f       	subi	r17, 0xFF	; 255
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	18 17       	cp	r17, r24
     43c:	a0 f3       	brcs	.-24     	; 0x426 <can_message_send+0x28>
		mcp2515_write(MCP_TXB0CTRL + 6 + i, *((message->data)+i) );
	}
	mcp2515_request_to_send(MCP_RTS_TX0);
     43e:	81 e8       	ldi	r24, 0x81	; 129
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 97 02 	call	0x52e	; 0x52e <mcp2515_request_to_send>
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	08 95       	ret

0000044e <can_message_receive>:

void can_message_receive(can_message_t* message, int buffer)
{
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	8c 01       	movw	r16, r24
     45c:	e6 2e       	mov	r14, r22
	char i;
	
	// ID
	message->id = mcp2515_read(MCP_RXB0CTRL+buffer + 1);
     45e:	81 e6       	ldi	r24, 0x61	; 97
     460:	86 0f       	add	r24, r22
     462:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcp2515_read>
     466:	f8 01       	movw	r30, r16
     468:	80 83       	st	Z, r24
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
     46a:	85 e6       	ldi	r24, 0x65	; 101
     46c:	8e 0d       	add	r24, r14
     46e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcp2515_read>
     472:	f8 01       	movw	r30, r16
     474:	81 83       	std	Z+1, r24	; 0x01
	
	// Data
	for(i=0;i<message->length;i++)
     476:	88 23       	and	r24, r24
     478:	99 f0       	breq	.+38     	; 0x4a0 <can_message_receive+0x52>
     47a:	c0 e0       	ldi	r28, 0x00	; 0
     47c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
     47e:	f6 e6       	ldi	r31, 0x66	; 102
     480:	ef 0e       	add	r14, r31
     482:	fc 2e       	mov	r15, r28
     484:	8c 2f       	mov	r24, r28
     486:	8e 0d       	add	r24, r14
     488:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcp2515_read>
     48c:	f8 01       	movw	r30, r16
     48e:	ec 0f       	add	r30, r28
     490:	f1 1d       	adc	r31, r1
     492:	82 83       	std	Z+2, r24	; 0x02
     494:	f3 94       	inc	r15
     496:	21 96       	adiw	r28, 0x01	; 1
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
	
	// Data
	for(i=0;i<message->length;i++)
     498:	f8 01       	movw	r30, r16
     49a:	81 81       	ldd	r24, Z+1	; 0x01
     49c:	f8 16       	cp	r15, r24
     49e:	88 f3       	brcs	.-30     	; 0x482 <can_message_receive+0x34>
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
	}
}
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	ff 90       	pop	r15
     4aa:	ef 90       	pop	r14
     4ac:	08 95       	ret

000004ae <can_get_message>:

int can_get_message(can_message_t* message)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	ec 01       	movw	r28, r24
	
	if ((mcp2515_read(MCP_CANINTF) & 0x01) == 0x01)
     4b4:	8c e2       	ldi	r24, 0x2C	; 44
     4b6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcp2515_read>
     4ba:	80 ff       	sbrs	r24, 0
     4bc:	0d c0       	rjmp	.+26     	; 0x4d8 <can_get_message+0x2a>
	{
		can_message_receive(message,0);
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	ce 01       	movw	r24, r28
     4c4:	0e 94 27 02 	call	0x44e	; 0x44e <can_message_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x01,0x00);
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	8c e2       	ldi	r24, 0x2C	; 44
     4ce:	0e 94 a2 02 	call	0x544	; 0x544 <mcp2515_bit_modify>
		return 1;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <can_get_message+0x2e>
	}
	else
	{
		return 0;
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <mcp2515_read>:
	{
		printf("MCP2515 is not in config mode!\n");
	}
	
}
char mcp2515_read (char addr){
     4e2:	cf 93       	push	r28
     4e4:	c8 2f       	mov	r28, r24
	char result;
	
	spi_select();
     4e6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <spi_select>
	
	spi_transmit(MCP_READ);
     4ea:	83 e0       	ldi	r24, 0x03	; 3
     4ec:	0e 94 5f 03 	call	0x6be	; 0x6be <spi_transmit>
	spi_transmit(addr);
     4f0:	8c 2f       	mov	r24, r28
     4f2:	0e 94 5f 03 	call	0x6be	; 0x6be <spi_transmit>
	result = spi_receive();
     4f6:	0e 94 63 03 	call	0x6c6	; 0x6c6 <spi_receive>
     4fa:	c8 2f       	mov	r28, r24
	
	spi_deselect();
     4fc:	0e 94 5d 03 	call	0x6ba	; 0x6ba <spi_deselect>
	
	return result;
}
     500:	8c 2f       	mov	r24, r28
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <mcp2515_write>:

void mcp2515_write(char addr, char data)
{
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	d8 2f       	mov	r29, r24
     50c:	c6 2f       	mov	r28, r22
	spi_select();
     50e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <spi_select>
	
	spi_transmit(MCP_WRITE);
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	0e 94 5f 03 	call	0x6be	; 0x6be <spi_transmit>
	spi_transmit(addr);
     518:	8d 2f       	mov	r24, r29
     51a:	0e 94 5f 03 	call	0x6be	; 0x6be <spi_transmit>
	spi_transmit(data);
     51e:	8c 2f       	mov	r24, r28
     520:	0e 94 5f 03 	call	0x6be	; 0x6be <spi_transmit>
	
	spi_deselect();
     524:	0e 94 5d 03 	call	0x6ba	; 0x6ba <spi_deselect>
	
}
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <mcp2515_request_to_send>:

void mcp2515_request_to_send(int reg)
{
     52e:	cf 93       	push	r28
     530:	c8 2f       	mov	r28, r24
	spi_select();
     532:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <spi_select>
	
	spi_transmit(reg);
     536:	8c 2f       	mov	r24, r28
     538:	0e 94 5f 03 	call	0x6be	; 0x6be <spi_transmit>
	
	spi_deselect();
     53c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <spi_deselect>
}
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <mcp2515_bit_modify>:

void mcp2515_bit_modify(char addr, char mask_byte, char data)
{
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	18 2f       	mov	r17, r24
     54c:	d6 2f       	mov	r29, r22
     54e:	c4 2f       	mov	r28, r20
	spi_select();
     550:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <spi_select>
	
	spi_transmit(MCP_BITMOD);
     554:	85 e0       	ldi	r24, 0x05	; 5
     556:	0e 94 5f 03 	call	0x6be	; 0x6be <spi_transmit>
	spi_transmit(addr);
     55a:	81 2f       	mov	r24, r17
     55c:	0e 94 5f 03 	call	0x6be	; 0x6be <spi_transmit>
	spi_transmit(mask_byte);
     560:	8d 2f       	mov	r24, r29
     562:	0e 94 5f 03 	call	0x6be	; 0x6be <spi_transmit>
	spi_transmit(data);
     566:	8c 2f       	mov	r24, r28
     568:	0e 94 5f 03 	call	0x6be	; 0x6be <spi_transmit>
	
	spi_deselect();
     56c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <spi_deselect>
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	08 95       	ret

00000578 <mcp2515_reset>:

void mcp2515_reset()
{
	spi_select();
     578:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <spi_select>
	
	spi_transmit(MCP_RESET);
     57c:	80 ec       	ldi	r24, 0xC0	; 192
     57e:	0e 94 5f 03 	call	0x6be	; 0x6be <spi_transmit>
	
	spi_deselect();
     582:	0e 94 5d 03 	call	0x6ba	; 0x6ba <spi_deselect>
     586:	08 95       	ret

00000588 <mcp2515_read_status>:
}

char mcp2515_read_status()
{
     588:	cf 93       	push	r28
	char output;
	spi_select();
     58a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <spi_select>
	spi_transmit(MCP_READ);
     58e:	83 e0       	ldi	r24, 0x03	; 3
     590:	0e 94 5f 03 	call	0x6be	; 0x6be <spi_transmit>
	spi_transmit(MCP_CANSTAT);
     594:	8e e0       	ldi	r24, 0x0E	; 14
     596:	0e 94 5f 03 	call	0x6be	; 0x6be <spi_transmit>
	output = spi_receive();
     59a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <spi_receive>
     59e:	c8 2f       	mov	r28, r24
	
	spi_deselect();
     5a0:	0e 94 5d 03 	call	0x6ba	; 0x6ba <spi_deselect>
	return output;
}
     5a4:	8c 2f       	mov	r24, r28
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <mcp2515_init>:
#include "spi_control.h"
#include <stdio.h>

void mcp2515_init(){
	char status;
	spi_init();
     5aa:	0e 94 68 03 	call	0x6d0	; 0x6d0 <spi_init>
	mcp2515_reset();
     5ae:	0e 94 bc 02 	call	0x578	; 0x578 <mcp2515_reset>
	
	status = mcp2515_read_status();
     5b2:	0e 94 c4 02 	call	0x588	; 0x588 <mcp2515_read_status>
	if ((status & MODE_MASK) != MODE_CONFIG)
     5b6:	80 7e       	andi	r24, 0xE0	; 224
     5b8:	80 38       	cpi	r24, 0x80	; 128
     5ba:	21 f0       	breq	.+8      	; 0x5c4 <mcp2515_init+0x1a>
	{
		printf("MCP2515 is not in config mode!\n");
     5bc:	82 e9       	ldi	r24, 0x92	; 146
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	0e 94 1c 08 	call	0x1038	; 0x1038 <puts>
     5c4:	08 95       	ret

000005c6 <oled_init>:
	}
}

void write_c(unsigned char out_data)
{
	*OLED_START_C = out_data;
     5c6:	e0 e0       	ldi	r30, 0x00	; 0
     5c8:	f0 e1       	ldi	r31, 0x10	; 16
     5ca:	8e ea       	ldi	r24, 0xAE	; 174
     5cc:	80 83       	st	Z, r24
     5ce:	81 ea       	ldi	r24, 0xA1	; 161
     5d0:	80 83       	st	Z, r24
     5d2:	8a ed       	ldi	r24, 0xDA	; 218
     5d4:	80 83       	st	Z, r24
     5d6:	82 e1       	ldi	r24, 0x12	; 18
     5d8:	80 83       	st	Z, r24
     5da:	88 ec       	ldi	r24, 0xC8	; 200
     5dc:	80 83       	st	Z, r24
     5de:	88 ea       	ldi	r24, 0xA8	; 168
     5e0:	80 83       	st	Z, r24
     5e2:	8f e3       	ldi	r24, 0x3F	; 63
     5e4:	80 83       	st	Z, r24
     5e6:	85 ed       	ldi	r24, 0xD5	; 213
     5e8:	80 83       	st	Z, r24
     5ea:	80 e8       	ldi	r24, 0x80	; 128
     5ec:	80 83       	st	Z, r24
     5ee:	81 e8       	ldi	r24, 0x81	; 129
     5f0:	80 83       	st	Z, r24
     5f2:	80 e5       	ldi	r24, 0x50	; 80
     5f4:	80 83       	st	Z, r24
     5f6:	89 ed       	ldi	r24, 0xD9	; 217
     5f8:	80 83       	st	Z, r24
     5fa:	81 e2       	ldi	r24, 0x21	; 33
     5fc:	80 83       	st	Z, r24
     5fe:	80 e2       	ldi	r24, 0x20	; 32
     600:	80 83       	st	Z, r24
     602:	10 82       	st	Z, r1
     604:	8b ed       	ldi	r24, 0xDB	; 219
     606:	80 83       	st	Z, r24
     608:	80 e3       	ldi	r24, 0x30	; 48
     60a:	80 83       	st	Z, r24
     60c:	8d ea       	ldi	r24, 0xAD	; 173
     60e:	80 83       	st	Z, r24
     610:	10 82       	st	Z, r1
     612:	84 ea       	ldi	r24, 0xA4	; 164
     614:	80 83       	st	Z, r24
     616:	86 ea       	ldi	r24, 0xA6	; 166
     618:	80 83       	st	Z, r24
     61a:	8f ea       	ldi	r24, 0xAF	; 175
     61c:	80 83       	st	Z, r24
     61e:	08 95       	ret

00000620 <oled_print_char>:
	write_c(0xa4);    //out follows RAM content
	write_c(0xa6);    //set normal display
	write_c(0xaf);    // display on
}

void oled_print_char(char* input){
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ec 01       	movw	r28, r24
	int i;
	for(i = 0; i<8 ;i++)
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
	*OLED_START_C = out_data;
}

void write_d(unsigned char out_data)
{
	*OLED_START_D = out_data;
     62a:	a0 e0       	ldi	r26, 0x00	; 0
     62c:	b2 e1       	ldi	r27, 0x12	; 18

void oled_print_char(char* input){
	int i;
	for(i = 0; i<8 ;i++)
	{
		write_d(pgm_read_byte(&font[*input - ' '][i]));
     62e:	e8 81       	ld	r30, Y
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	b0 97       	sbiw	r30, 0x20	; 32
     634:	ee 0f       	add	r30, r30
     636:	ff 1f       	adc	r31, r31
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	e2 0f       	add	r30, r18
     642:	f3 1f       	adc	r31, r19
     644:	e0 57       	subi	r30, 0x70	; 112
     646:	ff 4f       	sbci	r31, 0xFF	; 255
     648:	e4 91       	lpm	r30, Z
	*OLED_START_C = out_data;
}

void write_d(unsigned char out_data)
{
	*OLED_START_D = out_data;
     64a:	ec 93       	st	X, r30
	write_c(0xaf);    // display on
}

void oled_print_char(char* input){
	int i;
	for(i = 0; i<8 ;i++)
     64c:	2f 5f       	subi	r18, 0xFF	; 255
     64e:	3f 4f       	sbci	r19, 0xFF	; 255
     650:	28 30       	cpi	r18, 0x08	; 8
     652:	31 05       	cpc	r19, r1
     654:	61 f7       	brne	.-40     	; 0x62e <oled_print_char+0xe>
	{
		write_d(pgm_read_byte(&font[*input - ' '][i]));
	}
}
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <oled_print>:

void oled_print(char* input){
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
	int i=0;
	
	while(input[i] != '\0'){
     660:	fc 01       	movw	r30, r24
     662:	20 81       	ld	r18, Z
     664:	22 23       	and	r18, r18
     666:	51 f0       	breq	.+20     	; 0x67c <oled_print+0x20>
     668:	ec 01       	movw	r28, r24
     66a:	21 96       	adiw	r28, 0x01	; 1
			oled_print_char(&input[i]);
     66c:	0e 94 10 03 	call	0x620	; 0x620 <oled_print_char>
}

void oled_print(char* input){
	int i=0;
	
	while(input[i] != '\0'){
     670:	ce 01       	movw	r24, r28
     672:	21 96       	adiw	r28, 0x01	; 1
     674:	fc 01       	movw	r30, r24
     676:	20 81       	ld	r18, Z
     678:	21 11       	cpse	r18, r1
     67a:	f8 cf       	rjmp	.-16     	; 0x66c <oled_print+0x10>
			oled_print_char(&input[i]);
			i++;
			
	}
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <oled_goto>:
	}
}

void write_c(unsigned char out_data)
{
	*OLED_START_C = out_data;
     682:	e0 e0       	ldi	r30, 0x00	; 0
     684:	f0 e1       	ldi	r31, 0x10	; 16
     686:	91 e2       	ldi	r25, 0x21	; 33
     688:	90 83       	st	Z, r25
     68a:	60 83       	st	Z, r22
     68c:	9f e7       	ldi	r25, 0x7F	; 127
     68e:	90 83       	st	Z, r25
     690:	92 e2       	ldi	r25, 0x22	; 34
     692:	90 83       	st	Z, r25
     694:	80 83       	st	Z, r24
     696:	87 e0       	ldi	r24, 0x07	; 7
     698:	80 83       	st	Z, r24
     69a:	08 95       	ret

0000069c <oled_clear_all>:
		*OLED_START_D= 0x00;
	}
}

void oled_clear_all(){
	oled_goto(0,0);
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	94 e0       	ldi	r25, 0x04	; 4
	for (int i = 0; i<1024; i++){
		*OLED_START_D= 0x00;
     6a8:	e0 e0       	ldi	r30, 0x00	; 0
     6aa:	f2 e1       	ldi	r31, 0x12	; 18
     6ac:	10 82       	st	Z, r1
     6ae:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void oled_clear_all(){
	oled_goto(0,0);
	for (int i = 0; i<1024; i++){
     6b0:	00 97       	sbiw	r24, 0x00	; 0
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <oled_clear_all+0x10>
		*OLED_START_D= 0x00;
	}
}
     6b4:	08 95       	ret

000006b6 <spi_select>:
#include "spi_control.h"
#include <stdio.h>

void spi_select()
{
	PORTB &= ~(1<<PB4);
     6b6:	c4 98       	cbi	0x18, 4	; 24
     6b8:	08 95       	ret

000006ba <spi_deselect>:
}

void spi_deselect()
{
	PORTB |= (1<<PB4);
     6ba:	c4 9a       	sbi	0x18, 4	; 24
     6bc:	08 95       	ret

000006be <spi_transmit>:


void spi_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     6be:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     6c0:	77 9b       	sbis	0x0e, 7	; 14
     6c2:	fe cf       	rjmp	.-4      	; 0x6c0 <spi_transmit+0x2>
	;
}
     6c4:	08 95       	ret

000006c6 <spi_receive>:
	PORTB |= (1<<PB4);
}

char spi_receive()
{
	spi_transmit(0);
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	0e 94 5f 03 	call	0x6be	; 0x6be <spi_transmit>
	return SPDR;
     6cc:	8f b1       	in	r24, 0x0f	; 15
}
     6ce:	08 95       	ret

000006d0 <spi_init>:
}


void spi_init(){
	/* Set MOSI,SCK and SS output, all others input */
	DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<DD_SS);    
     6d0:	87 b3       	in	r24, 0x17	; 23
     6d2:	80 6b       	ori	r24, 0xB0	; 176
     6d4:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     6d6:	81 e5       	ldi	r24, 0x51	; 81
     6d8:	8d b9       	out	0x0d, r24	; 13
     6da:	08 95       	ret

000006dc <USART_transmit>:
	fdevopen(USART_transmit,USART_receive);
}

int USART_transmit(unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)))
     6dc:	5d 9b       	sbis	0x0b, 5	; 11
     6de:	fe cf       	rjmp	.-4      	; 0x6dc <USART_transmit>
		;
	UDR0 = data;
     6e0:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	08 95       	ret

000006e8 <USART_receive>:

unsigned char USART_receive (void){
	
	while( !(UCSR0A & (1<<RXC0)))
     6e8:	5f 9b       	sbis	0x0b, 7	; 11
     6ea:	fe cf       	rjmp	.-4      	; 0x6e8 <USART_receive>
		;
	return UDR0;
     6ec:	8c b1       	in	r24, 0x0c	; 12
	
     6ee:	08 95       	ret

000006f0 <USART_init>:
#include <avr/io.h>
#include <stdio.h>

void USART_init(unsigned int ubrr){

	UBRR0H = (unsigned char)(ubrr>>8);
     6f0:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;	
     6f2:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     6f4:	88 e1       	ldi	r24, 0x18	; 24
     6f6:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     6f8:	8e e8       	ldi	r24, 0x8E	; 142
     6fa:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(USART_transmit,USART_receive);
     6fc:	64 e7       	ldi	r22, 0x74	; 116
     6fe:	73 e0       	ldi	r23, 0x03	; 3
     700:	8e e6       	ldi	r24, 0x6E	; 110
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <fdevopen>
     708:	08 95       	ret

0000070a <check_and_report_shot>:
	game_over_screen(score_print);
	return;
}
		
void check_and_report_shot( void )
{
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	2a 97       	sbiw	r28, 0x0a	; 10
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
	can_message_t shot_msg = {'s',1};
     71e:	fe 01       	movw	r30, r28
     720:	31 96       	adiw	r30, 0x01	; 1
     722:	8a e0       	ldi	r24, 0x0A	; 10
     724:	df 01       	movw	r26, r30
     726:	1d 92       	st	X+, r1
     728:	8a 95       	dec	r24
     72a:	e9 f7       	brne	.-6      	; 0x726 <check_and_report_shot+0x1c>
     72c:	83 e7       	ldi	r24, 0x73	; 115
     72e:	89 83       	std	Y+1, r24	; 0x01
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	8a 83       	std	Y+2, r24	; 0x02
	static int recent_shot = 0;
	if (recent_shot == 0)
     734:	80 91 0e 03 	lds	r24, 0x030E
     738:	90 91 0f 03 	lds	r25, 0x030F
     73c:	89 2b       	or	r24, r25
     73e:	89 f4       	brne	.+34     	; 0x762 <check_and_report_shot+0x58>
	{
		if(ADC_read(3) > 100) //read input from multifunction card
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     748:	85 36       	cpi	r24, 0x65	; 101
     74a:	a8 f0       	brcs	.+42     	; 0x776 <check_and_report_shot+0x6c>
		{
			can_message_send(&shot_msg);
     74c:	ce 01       	movw	r24, r28
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	0e 94 ff 01 	call	0x3fe	; 0x3fe <can_message_send>
			recent_shot = 1;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	90 93 0f 03 	sts	0x030F, r25
     75c:	80 93 0e 03 	sts	0x030E, r24
     760:	0a c0       	rjmp	.+20     	; 0x776 <check_and_report_shot+0x6c>
		}
	}
	else
	{
		if (ADC_read(3) < 100){
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     76a:	84 36       	cpi	r24, 0x64	; 100
     76c:	20 f4       	brcc	.+8      	; 0x776 <check_and_report_shot+0x6c>
			recent_shot = 0;
     76e:	10 92 0f 03 	sts	0x030F, r1
     772:	10 92 0e 03 	sts	0x030E, r1
		}
	}
}
     776:	2a 96       	adiw	r28, 0x0a	; 10
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	08 95       	ret

00000788 <game_print_highscore>:

void game_print_highscore( void )
{
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
	int i;
	char* temp = "000000000000000";

	oled_clear_all();
     794:	0e 94 4e 03 	call	0x69c	; 0x69c <oled_clear_all>
	oled_goto(0,0);
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
	oled_print("Highscores");
     7a0:	81 eb       	ldi	r24, 0xB1	; 177
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	0e 94 2e 03 	call	0x65c	; 0x65c <oled_print>
	for (i=0; i<3 ;i++)
     7a8:	c0 e0       	ldi	r28, 0x00	; 0
     7aa:	d0 e0       	ldi	r29, 0x00	; 0
	{
		oled_goto(i+2,8);
		sprintf(temp,"%d. %d    ",i+1,eeprom_read_word((uint16_t*)(i*2)));
     7ac:	0f 2e       	mov	r0, r31
     7ae:	fc eb       	ldi	r31, 0xBC	; 188
     7b0:	ef 2e       	mov	r14, r31
     7b2:	f2 e0       	ldi	r31, 0x02	; 2
     7b4:	ff 2e       	mov	r15, r31
     7b6:	f0 2d       	mov	r31, r0
     7b8:	07 ec       	ldi	r16, 0xC7	; 199
     7ba:	12 e0       	ldi	r17, 0x02	; 2
	oled_clear_all();
	oled_goto(0,0);
	oled_print("Highscores");
	for (i=0; i<3 ;i++)
	{
		oled_goto(i+2,8);
     7bc:	68 e0       	ldi	r22, 0x08	; 8
     7be:	8c 2f       	mov	r24, r28
     7c0:	8e 5f       	subi	r24, 0xFE	; 254
     7c2:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
		sprintf(temp,"%d. %d    ",i+1,eeprom_read_word((uint16_t*)(i*2)));
     7c6:	ce 01       	movw	r24, r28
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	0e 94 3d 0a 	call	0x147a	; 0x147a <__eerd_word_m162>
     7d0:	21 96       	adiw	r28, 0x01	; 1
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	df 93       	push	r29
     7d8:	cf 93       	push	r28
     7da:	ff 92       	push	r15
     7dc:	ef 92       	push	r14
     7de:	1f 93       	push	r17
     7e0:	0f 93       	push	r16
     7e2:	0e 94 49 08 	call	0x1092	; 0x1092 <sprintf>
		oled_print(temp);
     7e6:	c8 01       	movw	r24, r16
     7e8:	0e 94 2e 03 	call	0x65c	; 0x65c <oled_print>
	char* temp = "000000000000000";

	oled_clear_all();
	oled_goto(0,0);
	oled_print("Highscores");
	for (i=0; i<3 ;i++)
     7ec:	8d b7       	in	r24, 0x3d	; 61
     7ee:	9e b7       	in	r25, 0x3e	; 62
     7f0:	08 96       	adiw	r24, 0x08	; 8
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	9e bf       	out	0x3e, r25	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	8d bf       	out	0x3d, r24	; 61
     7fc:	c3 30       	cpi	r28, 0x03	; 3
     7fe:	d1 05       	cpc	r29, r1
     800:	e9 f6       	brne	.-70     	; 0x7bc <game_print_highscore+0x34>
		oled_goto(i+2,8);
		sprintf(temp,"%d. %d    ",i+1,eeprom_read_word((uint16_t*)(i*2)));
		oled_print(temp);
	}
	return;
}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	08 95       	ret

00000810 <game_update_highscore>:

void game_update_highscore( int score, uint16_t* highscore )
{
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	08 2f       	mov	r16, r24
     81a:	19 2f       	mov	r17, r25
     81c:	eb 01       	movw	r28, r22
	if (score > highscore[0])
     81e:	28 2f       	mov	r18, r24
     820:	39 2f       	mov	r19, r25
     822:	48 81       	ld	r20, Y
     824:	59 81       	ldd	r21, Y+1	; 0x01
     826:	42 17       	cp	r20, r18
     828:	53 07       	cpc	r21, r19
     82a:	98 f4       	brcc	.+38     	; 0x852 <game_update_highscore+0x42>
	{
		eeprom_write_word((uint16_t*)4, highscore[1]);
     82c:	6a 81       	ldd	r22, Y+2	; 0x02
     82e:	7b 81       	ldd	r23, Y+3	; 0x03
     830:	84 e0       	ldi	r24, 0x04	; 4
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 43 0a 	call	0x1486	; 0x1486 <__eewr_word_m162>
		eeprom_write_word((uint16_t*)2, highscore[0]);
     838:	68 81       	ld	r22, Y
     83a:	79 81       	ldd	r23, Y+1	; 0x01
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0e 94 43 0a 	call	0x1486	; 0x1486 <__eewr_word_m162>
		eeprom_write_word((uint16_t*)0, score );
     844:	60 2f       	mov	r22, r16
     846:	71 2f       	mov	r23, r17
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 43 0a 	call	0x1486	; 0x1486 <__eewr_word_m162>
     850:	1b c0       	rjmp	.+54     	; 0x888 <game_update_highscore+0x78>
	}
	else if(score > highscore[1])
     852:	6a 81       	ldd	r22, Y+2	; 0x02
     854:	7b 81       	ldd	r23, Y+3	; 0x03
     856:	62 17       	cp	r22, r18
     858:	73 07       	cpc	r23, r19
     85a:	58 f4       	brcc	.+22     	; 0x872 <game_update_highscore+0x62>
	{
		eeprom_write_word((uint16_t*)4, highscore[1]);
     85c:	84 e0       	ldi	r24, 0x04	; 4
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 43 0a 	call	0x1486	; 0x1486 <__eewr_word_m162>
		eeprom_write_word((uint16_t*)2, score );
     864:	60 2f       	mov	r22, r16
     866:	71 2f       	mov	r23, r17
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 43 0a 	call	0x1486	; 0x1486 <__eewr_word_m162>
     870:	0b c0       	rjmp	.+22     	; 0x888 <game_update_highscore+0x78>
	}
	else if(score > highscore[2])
     872:	4c 81       	ldd	r20, Y+4	; 0x04
     874:	5d 81       	ldd	r21, Y+5	; 0x05
     876:	42 17       	cp	r20, r18
     878:	53 07       	cpc	r21, r19
     87a:	30 f4       	brcc	.+12     	; 0x888 <game_update_highscore+0x78>
	{
		eeprom_write_word((uint16_t*)4, score );
     87c:	68 2f       	mov	r22, r24
     87e:	79 2f       	mov	r23, r25
     880:	84 e0       	ldi	r24, 0x04	; 4
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 43 0a 	call	0x1486	; 0x1486 <__eewr_word_m162>
	}
}
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	08 95       	ret

00000892 <game_reset_highscore>:

void game_reset_highscore ( void )
{
	eeprom_write_word((uint16_t*)0, 0 );	//	Reset the highscores
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 43 0a 	call	0x1486	; 0x1486 <__eewr_word_m162>
	eeprom_write_word((uint16_t*)2, 0 );
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 43 0a 	call	0x1486	; 0x1486 <__eewr_word_m162>
	eeprom_write_word((uint16_t*)4, 0 );
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	84 e0       	ldi	r24, 0x04	; 4
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 43 0a 	call	0x1486	; 0x1486 <__eewr_word_m162>
     8b6:	08 95       	ret

000008b8 <game_over_screen>:
}

void game_over_screen ( char* score )
{
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	ec 01       	movw	r28, r24
	
	oled_clear_all();
     8be:	0e 94 4e 03 	call	0x69c	; 0x69c <oled_clear_all>
	oled_goto(2,8);
     8c2:	68 e0       	ldi	r22, 0x08	; 8
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
	oled_print("GAME OVER! :-(");
     8ca:	87 ed       	ldi	r24, 0xD7	; 215
     8cc:	92 e0       	ldi	r25, 0x02	; 2
     8ce:	0e 94 2e 03 	call	0x65c	; 0x65c <oled_print>
	oled_goto(3,0);
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
	oled_print("    Score: ");
     8da:	86 ee       	ldi	r24, 0xE6	; 230
     8dc:	92 e0       	ldi	r25, 0x02	; 2
     8de:	0e 94 2e 03 	call	0x65c	; 0x65c <oled_print>
	oled_goto(4, 0);
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	84 e0       	ldi	r24, 0x04	; 4
     8e6:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
	oled_print(score);
     8ea:	ce 01       	movw	r24, r28
     8ec:	0e 94 2e 03 	call	0x65c	; 0x65c <oled_print>

	while( joy_get_direction() == NEUTRAL ) ;	
     8f0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <joy_get_direction>
     8f4:	84 30       	cpi	r24, 0x04	; 4
     8f6:	e1 f3       	breq	.-8      	; 0x8f0 <game_over_screen+0x38>
	
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <game_play>:
void check_and_report_shot( void );
void game_update_highscore( int , uint16_t* );
void game_over_screen ( char* );

void game_play( void )
{
     8fe:	4f 92       	push	r4
     900:	5f 92       	push	r5
     902:	6f 92       	push	r6
     904:	7f 92       	push	r7
     906:	8f 92       	push	r8
     908:	9f 92       	push	r9
     90a:	af 92       	push	r10
     90c:	bf 92       	push	r11
     90e:	cf 92       	push	r12
     910:	df 92       	push	r13
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	60 97       	sbiw	r28, 0x10	; 16
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
	int score = 0;
	int score_sub = 0;
	char* score_print = "000000000000000";
	joy_position_t joystick;
	
	can_message_t message = {'m',1,"00"};
     92e:	8a e0       	ldi	r24, 0x0A	; 10
     930:	e8 e8       	ldi	r30, 0x88	; 136
     932:	f2 e0       	ldi	r31, 0x02	; 2
     934:	de 01       	movw	r26, r28
     936:	17 96       	adiw	r26, 0x07	; 7
     938:	01 90       	ld	r0, Z+
     93a:	0d 92       	st	X+, r0
     93c:	8a 95       	dec	r24
     93e:	e1 f7       	brne	.-8      	; 0x938 <game_play+0x3a>
	
	// Get highscores
	for(i=0; i<3; i++)
	{
		highscore[i] = eeprom_read_word((uint16_t*)(i*2));
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 3d 0a 	call	0x147a	; 0x147a <__eerd_word_m162>
     948:	9a 83       	std	Y+2, r25	; 0x02
     94a:	89 83       	std	Y+1, r24	; 0x01
     94c:	82 e0       	ldi	r24, 0x02	; 2
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 3d 0a 	call	0x147a	; 0x147a <__eerd_word_m162>
     954:	9c 83       	std	Y+4, r25	; 0x04
     956:	8b 83       	std	Y+3, r24	; 0x03
     958:	84 e0       	ldi	r24, 0x04	; 4
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 3d 0a 	call	0x147a	; 0x147a <__eerd_word_m162>
     960:	9e 83       	std	Y+6, r25	; 0x06
     962:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	//Setup OLED Screen
	oled_clear_all();
     964:	0e 94 4e 03 	call	0x69c	; 0x69c <oled_clear_all>
	oled_goto(0,0);
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
	oled_print("     GAME");
     970:	82 ef       	ldi	r24, 0xF2	; 242
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	0e 94 2e 03 	call	0x65c	; 0x65c <oled_print>
	oled_goto(3,0);
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
	oled_print("    Score: ");
     980:	86 ee       	ldi	r24, 0xE6	; 230
     982:	92 e0       	ldi	r25, 0x02	; 2
     984:	0e 94 2e 03 	call	0x65c	; 0x65c <oled_print>
	
	// Sending game mode to node 2
	message.data[0] = TOUCH_JOY_MODE;
     988:	80 91 10 03 	lds	r24, 0x0310
     98c:	90 91 11 03 	lds	r25, 0x0311
     990:	89 87       	std	Y+9, r24	; 0x09
	can_message_send(&message);
     992:	ce 01       	movw	r24, r28
     994:	07 96       	adiw	r24, 0x07	; 7
     996:	0e 94 ff 01 	call	0x3fe	; 0x3fe <can_message_send>
void game_play( void )
{
	uint16_t highscore[3];
	int i;
	int score = 0;
	int score_sub = 0;
     99a:	c1 2c       	mov	r12, r1
     99c:	d1 2c       	mov	r13, r1

void game_play( void )
{
	uint16_t highscore[3];
	int i;
	int score = 0;
     99e:	00 e0       	ldi	r16, 0x00	; 0
     9a0:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{
		//Read input from multifunction card
		joystick =  joy_read();
		joystick_msg.data[0] = joystick.x_pos/DIFFICULTY_MODE;
     9a2:	0f 2e       	mov	r0, r31
     9a4:	f2 e1       	ldi	r31, 0x12	; 18
     9a6:	8f 2e       	mov	r8, r31
     9a8:	f1 e0       	ldi	r31, 0x01	; 1
     9aa:	9f 2e       	mov	r9, r31
     9ac:	f0 2d       	mov	r31, r0
		joystick_msg.data[1] = joystick.y_pos;
     9ae:	0f 2e       	mov	r0, r31
     9b0:	f3 e1       	ldi	r31, 0x13	; 19
     9b2:	6f 2e       	mov	r6, r31
     9b4:	f1 e0       	ldi	r31, 0x01	; 1
     9b6:	7f 2e       	mov	r7, r31
     9b8:	f0 2d       	mov	r31, r0
		can_message_send(&joystick_msg);
		if (TOUCH_JOY_MODE == 1){
			touch_msg.data[0] = ADC_read(2);
     9ba:	0f 2e       	mov	r0, r31
     9bc:	f8 e0       	ldi	r31, 0x08	; 8
     9be:	4f 2e       	mov	r4, r31
     9c0:	f1 e0       	ldi	r31, 0x01	; 1
     9c2:	5f 2e       	mov	r5, r31
     9c4:	f0 2d       	mov	r31, r0
		// Check for quit
		if ( (ADC_read(2) > 180 && TOUCH_JOY_MODE == 0) || (ADC_read(0) > 200 && TOUCH_JOY_MODE == 1) ) break;
		
		// Print Score on oled
		oled_goto(4, 0);
		sprintf(score_print,"       %d     ",score);
     9c6:	0f 2e       	mov	r0, r31
     9c8:	fc ef       	ldi	r31, 0xFC	; 252
     9ca:	af 2e       	mov	r10, r31
     9cc:	f2 e0       	ldi	r31, 0x02	; 2
     9ce:	bf 2e       	mov	r11, r31
     9d0:	f0 2d       	mov	r31, r0
     9d2:	0f 2e       	mov	r0, r31
     9d4:	f7 ec       	ldi	r31, 0xC7	; 199
     9d6:	ef 2e       	mov	r14, r31
     9d8:	f2 e0       	ldi	r31, 0x02	; 2
     9da:	ff 2e       	mov	r15, r31
     9dc:	f0 2d       	mov	r31, r0
     9de:	03 c0       	rjmp	.+6      	; 0x9e6 <game_play+0xe8>
		oled_print(score_print);
		
		// Increment score
		if(score_sub++ > 700)
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	c8 1a       	sub	r12, r24
     9e4:	d8 0a       	sbc	r13, r24
	can_message_send(&message);
	
	while(1)
	{
		//Read input from multifunction card
		joystick =  joy_read();
     9e6:	0e 94 b2 05 	call	0xb64	; 0xb64 <joy_read>
     9ea:	48 2f       	mov	r20, r24
		joystick_msg.data[0] = joystick.x_pos/DIFFICULTY_MODE;
     9ec:	20 91 1a 01 	lds	r18, 0x011A
     9f0:	30 91 1b 01 	lds	r19, 0x011B
     9f4:	86 2f       	mov	r24, r22
     9f6:	97 2f       	mov	r25, r23
     9f8:	b9 01       	movw	r22, r18
     9fa:	0e 94 a3 07 	call	0xf46	; 0xf46 <__divmodhi4>
     9fe:	f4 01       	movw	r30, r8
     a00:	60 83       	st	Z, r22
		joystick_msg.data[1] = joystick.y_pos;
     a02:	f3 01       	movw	r30, r6
     a04:	40 83       	st	Z, r20
		can_message_send(&joystick_msg);
     a06:	80 e1       	ldi	r24, 0x10	; 16
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <can_message_send>
		if (TOUCH_JOY_MODE == 1){
     a0e:	80 91 10 03 	lds	r24, 0x0310
     a12:	90 91 11 03 	lds	r25, 0x0311
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	51 f4       	brne	.+20     	; 0xa2e <game_play+0x130>
			touch_msg.data[0] = ADC_read(2);
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     a22:	f2 01       	movw	r30, r4
     a24:	80 83       	st	Z, r24
			can_message_send(&touch_msg);	
     a26:	86 e0       	ldi	r24, 0x06	; 6
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <can_message_send>
		}
		// Check for pressed shot button
		check_and_report_shot();
     a2e:	0e 94 85 03 	call	0x70a	; 0x70a <check_and_report_shot>
		
		// Handle game over
		if (can_get_message(&message) == 1)
     a32:	ce 01       	movw	r24, r28
     a34:	07 96       	adiw	r24, 0x07	; 7
     a36:	0e 94 57 02 	call	0x4ae	; 0x4ae <can_get_message>
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	19 f4       	brne	.+6      	; 0xa44 <game_play+0x146>
		{
			if(message.id == 'g') break;	// Goal
     a3e:	8f 81       	ldd	r24, Y+7	; 0x07
     a40:	87 36       	cpi	r24, 0x67	; 103
     a42:	c1 f1       	breq	.+112    	; 0xab4 <game_play+0x1b6>
		}
		
		// Check for quit
		if ( (ADC_read(2) > 180 && TOUCH_JOY_MODE == 0) || (ADC_read(0) > 200 && TOUCH_JOY_MODE == 1) ) break;
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     a4c:	85 3b       	cpi	r24, 0xB5	; 181
     a4e:	30 f0       	brcs	.+12     	; 0xa5c <game_play+0x15e>
     a50:	80 91 10 03 	lds	r24, 0x0310
     a54:	90 91 11 03 	lds	r25, 0x0311
     a58:	89 2b       	or	r24, r25
     a5a:	61 f1       	breq	.+88     	; 0xab4 <game_play+0x1b6>
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     a64:	89 3c       	cpi	r24, 0xC9	; 201
     a66:	30 f0       	brcs	.+12     	; 0xa74 <game_play+0x176>
     a68:	80 91 10 03 	lds	r24, 0x0310
     a6c:	90 91 11 03 	lds	r25, 0x0311
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	01 f1       	breq	.+64     	; 0xab4 <game_play+0x1b6>
		
		// Print Score on oled
		oled_goto(4, 0);
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	84 e0       	ldi	r24, 0x04	; 4
     a78:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
		sprintf(score_print,"       %d     ",score);
     a7c:	1f 93       	push	r17
     a7e:	0f 93       	push	r16
     a80:	bf 92       	push	r11
     a82:	af 92       	push	r10
     a84:	ff 92       	push	r15
     a86:	ef 92       	push	r14
     a88:	0e 94 49 08 	call	0x1092	; 0x1092 <sprintf>
		oled_print(score_print);
     a8c:	c7 01       	movw	r24, r14
     a8e:	0e 94 2e 03 	call	0x65c	; 0x65c <oled_print>
		
		// Increment score
		if(score_sub++ > 700)
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	fd eb       	ldi	r31, 0xBD	; 189
     aa0:	cf 16       	cp	r12, r31
     aa2:	f2 e0       	ldi	r31, 0x02	; 2
     aa4:	df 06       	cpc	r13, r31
     aa6:	0c f4       	brge	.+2      	; 0xaaa <game_play+0x1ac>
     aa8:	9b cf       	rjmp	.-202    	; 0x9e0 <game_play+0xe2>
		{
			score_sub = 0;
			score++;
     aaa:	0f 5f       	subi	r16, 0xFF	; 255
     aac:	1f 4f       	sbci	r17, 0xFF	; 255
		oled_print(score_print);
		
		// Increment score
		if(score_sub++ > 700)
		{
			score_sub = 0;
     aae:	c1 2c       	mov	r12, r1
     ab0:	d1 2c       	mov	r13, r1
     ab2:	99 cf       	rjmp	.-206    	; 0x9e6 <game_play+0xe8>
			score++;
		}
	}
	// Stop node 2 from running
	joystick_msg.data[0] = 0;
     ab4:	10 92 12 01 	sts	0x0112, r1
	joystick_msg.data[1] = 0;
     ab8:	10 92 13 01 	sts	0x0113, r1
	can_message_send(&joystick_msg);
     abc:	80 e1       	ldi	r24, 0x10	; 16
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <can_message_send>
	if (TOUCH_JOY_MODE == 1){
     ac4:	80 91 10 03 	lds	r24, 0x0310
     ac8:	90 91 11 03 	lds	r25, 0x0311
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	39 f4       	brne	.+14     	; 0xade <game_play+0x1e0>
		touch_msg.data[0] = 128;
     ad0:	80 e8       	ldi	r24, 0x80	; 128
     ad2:	80 93 08 01 	sts	0x0108, r24
		can_message_send(&touch_msg);
     ad6:	86 e0       	ldi	r24, 0x06	; 6
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	0e 94 ff 01 	call	0x3fe	; 0x3fe <can_message_send>
	}

	game_update_highscore(score,highscore);
     ade:	be 01       	movw	r22, r28
     ae0:	6f 5f       	subi	r22, 0xFF	; 255
     ae2:	7f 4f       	sbci	r23, 0xFF	; 255
     ae4:	c8 01       	movw	r24, r16
     ae6:	0e 94 08 04 	call	0x810	; 0x810 <game_update_highscore>
	game_over_screen(score_print);
     aea:	87 ec       	ldi	r24, 0xC7	; 199
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <game_over_screen>
	return;
}
     af2:	60 96       	adiw	r28, 0x10	; 16
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	cd bf       	out	0x3d, r28	; 61
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	df 90       	pop	r13
     b0c:	cf 90       	pop	r12
     b0e:	bf 90       	pop	r11
     b10:	af 90       	pop	r10
     b12:	9f 90       	pop	r9
     b14:	8f 90       	pop	r8
     b16:	7f 90       	pop	r7
     b18:	6f 90       	pop	r6
     b1a:	5f 90       	pop	r5
     b1c:	4f 90       	pop	r4
     b1e:	08 95       	ret

00000b20 <game_change_mode>:
	
}

void game_change_mode( int mode )
{
	TOUCH_JOY_MODE = mode;
     b20:	90 93 11 03 	sts	0x0311, r25
     b24:	80 93 10 03 	sts	0x0310, r24
     b28:	08 95       	ret

00000b2a <game_change_difficulty>:
}

void game_change_difficulty( int diff)
{
	DIFFICULTY_MODE = diff;
     b2a:	90 93 1b 01 	sts	0x011B, r25
     b2e:	80 93 1a 01 	sts	0x011A, r24
     b32:	08 95       	ret

00000b34 <main>:
#include "joystick.h"

int main(void)
{	
	// Activate external memory
	MCUCR |= (1 << SRE);
     b34:	85 b7       	in	r24, 0x35	; 53
     b36:	80 68       	ori	r24, 0x80	; 128
     b38:	85 bf       	out	0x35, r24	; 53
		
	// Initialize	
	USART_init(MYUBRR);
     b3a:	8f e1       	ldi	r24, 0x1F	; 31
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <USART_init>
	joy_init();
     b42:	0e 94 31 06 	call	0xc62	; 0xc62 <joy_init>
	oled_init();
     b46:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <oled_init>
	can_init();
     b4a:	0e 94 ed 01 	call	0x3da	; 0x3da <can_init>
	menu_init();
     b4e:	0e 94 c1 06 	call	0xd82	; 0xd82 <menu_init>
	
	
	// Starts the FSM
	while(1)
	{
		menu_fsm();
     b52:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <menu_fsm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	9f e5       	ldi	r25, 0x5F	; 95
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	f1 f7       	brne	.-4      	; 0xb5a <main+0x26>
     b5e:	00 c0       	rjmp	.+0      	; 0xb60 <main+0x2c>
     b60:	00 00       	nop
     b62:	f7 cf       	rjmp	.-18     	; 0xb52 <main+0x1e>

00000b64 <joy_read>:

void joy_init(){
	joy_calibrate();
}

joy_position_t joy_read(){
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
	joy_position_t position;
	position.x_pos = (ADC_read(1) - x_ref)*100/128;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	20 91 13 03 	lds	r18, 0x0313
     b76:	82 1b       	sub	r24, r18
     b78:	91 09       	sbc	r25, r1
     b7a:	44 e6       	ldi	r20, 0x64	; 100
     b7c:	48 9f       	mul	r20, r24
     b7e:	90 01       	movw	r18, r0
     b80:	49 9f       	mul	r20, r25
     b82:	30 0d       	add	r19, r0
     b84:	11 24       	eor	r1, r1
     b86:	33 23       	and	r19, r19
     b88:	14 f4       	brge	.+4      	; 0xb8e <joy_read+0x2a>
     b8a:	21 58       	subi	r18, 0x81	; 129
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	e9 01       	movw	r28, r18
     b90:	cc 0f       	add	r28, r28
     b92:	cd 2f       	mov	r28, r29
     b94:	cc 1f       	adc	r28, r28
     b96:	dd 0b       	sbc	r29, r29
	position.y_pos = (ADC_read(0) - y_ref)*100/128;
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	20 91 12 03 	lds	r18, 0x0312
     ba6:	82 1b       	sub	r24, r18
     ba8:	91 09       	sbc	r25, r1
     baa:	44 e6       	ldi	r20, 0x64	; 100
     bac:	48 9f       	mul	r20, r24
     bae:	90 01       	movw	r18, r0
     bb0:	49 9f       	mul	r20, r25
     bb2:	30 0d       	add	r19, r0
     bb4:	11 24       	eor	r1, r1
     bb6:	33 23       	and	r19, r19
     bb8:	14 f4       	brge	.+4      	; 0xbbe <joy_read+0x5a>
     bba:	21 58       	subi	r18, 0x81	; 129
     bbc:	3f 4f       	sbci	r19, 0xFF	; 255
	return position;
     bbe:	be 01       	movw	r22, r28
     bc0:	c9 01       	movw	r24, r18
     bc2:	88 0f       	add	r24, r24
     bc4:	89 2f       	mov	r24, r25
     bc6:	88 1f       	adc	r24, r24
     bc8:	99 0b       	sbc	r25, r25
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <joy_get_direction>:

direction joy_get_direction(){
	joy_position_t position = joy_read();
     bd0:	0e 94 b2 05 	call	0xb64	; 0xb64 <joy_read>
	
	if (position.x_pos > 70)		return RIGHT;
     bd4:	67 34       	cpi	r22, 0x47	; 71
     bd6:	71 05       	cpc	r23, r1
     bd8:	64 f4       	brge	.+24     	; 0xbf2 <joy_get_direction+0x22>
	else if (position.x_pos < -70)	return LEFT;
     bda:	6a 3b       	cpi	r22, 0xBA	; 186
     bdc:	4f ef       	ldi	r20, 0xFF	; 255
     bde:	74 07       	cpc	r23, r20
     be0:	54 f0       	brlt	.+20     	; 0xbf6 <joy_get_direction+0x26>
	else if (position.y_pos > 70)	return UP;
     be2:	87 34       	cpi	r24, 0x47	; 71
     be4:	91 05       	cpc	r25, r1
     be6:	4c f4       	brge	.+18     	; 0xbfa <joy_get_direction+0x2a>
	else if (position.y_pos < -70)	return DOWN;
     be8:	8a 3b       	cpi	r24, 0xBA	; 186
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	44 f4       	brge	.+16     	; 0xbfe <joy_get_direction+0x2e>
     bee:	83 e0       	ldi	r24, 0x03	; 3
     bf0:	08 95       	ret
}

direction joy_get_direction(){
	joy_position_t position = joy_read();
	
	if (position.x_pos > 70)		return RIGHT;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	08 95       	ret
	else if (position.x_pos < -70)	return LEFT;
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	08 95       	ret
	else if (position.y_pos > 70)	return UP;
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	08 95       	ret
	else if (position.y_pos < -70)	return DOWN;
	else							return NEUTRAL;
     bfe:	84 e0       	ldi	r24, 0x04	; 4
}
     c00:	08 95       	ret

00000c02 <joy_calibrate>:

void joy_calibrate(){
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	ca e0       	ldi	r28, 0x0A	; 10
     c10:	d0 e0       	ldi	r29, 0x00	; 0
	int sum_x=0;
	int sum_y=0;
     c12:	00 e0       	ldi	r16, 0x00	; 0
     c14:	10 e0       	ldi	r17, 0x00	; 0
	else if (position.y_pos < -70)	return DOWN;
	else							return NEUTRAL;
}

void joy_calibrate(){
	int sum_x=0;
     c16:	e1 2c       	mov	r14, r1
     c18:	f1 2c       	mov	r15, r1
	int sum_y=0;
	int i;
	for(i=0;i<10;i++){
		sum_x += ADC_read(1);
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     c22:	e8 0e       	add	r14, r24
     c24:	f1 1c       	adc	r15, r1
		sum_y += ADC_read(0);
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_read>
     c2e:	08 0f       	add	r16, r24
     c30:	11 1d       	adc	r17, r1
     c32:	21 97       	sbiw	r28, 0x01	; 1

void joy_calibrate(){
	int sum_x=0;
	int sum_y=0;
	int i;
	for(i=0;i<10;i++){
     c34:	20 97       	sbiw	r28, 0x00	; 0
     c36:	89 f7       	brne	.-30     	; 0xc1a <joy_calibrate+0x18>
		sum_x += ADC_read(1);
		sum_y += ADC_read(0);
	}
	x_ref = sum_x/10;
     c38:	2a e0       	ldi	r18, 0x0A	; 10
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	c7 01       	movw	r24, r14
     c3e:	b9 01       	movw	r22, r18
     c40:	0e 94 a3 07 	call	0xf46	; 0xf46 <__divmodhi4>
     c44:	60 93 13 03 	sts	0x0313, r22
	y_ref = sum_y/10;
     c48:	c8 01       	movw	r24, r16
     c4a:	b9 01       	movw	r22, r18
     c4c:	0e 94 a3 07 	call	0xf46	; 0xf46 <__divmodhi4>
     c50:	60 93 12 03 	sts	0x0312, r22
}
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	08 95       	ret

00000c62 <joy_init>:

char x_ref = 0;
char y_ref = 0;

void joy_init(){
	joy_calibrate();
     c62:	0e 94 01 06 	call	0xc02	; 0xc02 <joy_calibrate>
     c66:	08 95       	ret

00000c68 <update_next>:
	last_dir = curr_dir;
}


void update_next(direction dir){
	if (dir == DOWN)
     c68:	83 30       	cpi	r24, 0x03	; 3
     c6a:	41 f5       	brne	.+80     	; 0xcbc <update_next+0x54>
	{
		if (next+1 <= current->number_children)
     c6c:	80 91 17 03 	lds	r24, 0x0317
     c70:	90 91 18 03 	lds	r25, 0x0318
     c74:	ac 01       	movw	r20, r24
     c76:	4f 5f       	subi	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	e0 91 15 03 	lds	r30, 0x0315
     c7e:	f0 91 16 03 	lds	r31, 0x0316
     c82:	27 85       	ldd	r18, Z+15	; 0x0f
     c84:	30 89       	ldd	r19, Z+16	; 0x10
     c86:	24 17       	cp	r18, r20
     c88:	35 07       	cpc	r19, r21
     c8a:	b4 f1       	brlt	.+108    	; 0xcf8 <update_next+0x90>
		{
			oled_goto(next,0);
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
			oled_print(" ");
     c92:	89 e0       	ldi	r24, 0x09	; 9
     c94:	93 e0       	ldi	r25, 0x03	; 3
     c96:	0e 94 2e 03 	call	0x65c	; 0x65c <oled_print>
			next++;
     c9a:	80 91 17 03 	lds	r24, 0x0317
     c9e:	90 91 18 03 	lds	r25, 0x0318
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	90 93 18 03 	sts	0x0318, r25
     ca8:	80 93 17 03 	sts	0x0317, r24
			oled_goto(next,0);
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
			oled_print("-");
     cb2:	8b e0       	ldi	r24, 0x0B	; 11
     cb4:	93 e0       	ldi	r25, 0x03	; 3
     cb6:	0e 94 2e 03 	call	0x65c	; 0x65c <oled_print>
     cba:	08 95       	ret
		}
	}
	else
	{
		if (next > 1)
     cbc:	80 91 17 03 	lds	r24, 0x0317
     cc0:	90 91 18 03 	lds	r25, 0x0318
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	91 05       	cpc	r25, r1
     cc8:	bc f0       	brlt	.+46     	; 0xcf8 <update_next+0x90>
		{
			oled_goto(next,0);
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
			oled_print(" ");
     cd0:	89 e0       	ldi	r24, 0x09	; 9
     cd2:	93 e0       	ldi	r25, 0x03	; 3
     cd4:	0e 94 2e 03 	call	0x65c	; 0x65c <oled_print>
			next--;
     cd8:	80 91 17 03 	lds	r24, 0x0317
     cdc:	90 91 18 03 	lds	r25, 0x0318
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	90 93 18 03 	sts	0x0318, r25
     ce6:	80 93 17 03 	sts	0x0317, r24
			oled_goto(next,0);
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
			oled_print("-");
     cf0:	8b e0       	ldi	r24, 0x0B	; 11
     cf2:	93 e0       	ldi	r25, 0x03	; 3
     cf4:	0e 94 2e 03 	call	0x65c	; 0x65c <oled_print>
     cf8:	08 95       	ret

00000cfa <menu_print>:
		}
	}
}

void menu_print(menu_t* object){
     cfa:	ef 92       	push	r14
     cfc:	ff 92       	push	r15
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	7c 01       	movw	r14, r24
	next = 1;
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	90 93 18 03 	sts	0x0318, r25
     d10:	80 93 17 03 	sts	0x0317, r24
	oled_clear_all();
     d14:	0e 94 4e 03 	call	0x69c	; 0x69c <oled_clear_all>
	oled_goto(0,0);
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
	oled_print(object->name);
     d20:	c7 01       	movw	r24, r14
     d22:	0e 94 2e 03 	call	0x65c	; 0x65c <oled_print>
	oled_goto(next,0);
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	80 91 17 03 	lds	r24, 0x0317
     d2c:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
	oled_print("-");
     d30:	8b e0       	ldi	r24, 0x0B	; 11
     d32:	93 e0       	ldi	r25, 0x03	; 3
     d34:	0e 94 2e 03 	call	0x65c	; 0x65c <oled_print>
	
	int i;
	for (i=1;i<object->number_children+1;i++)
     d38:	f7 01       	movw	r30, r14
     d3a:	87 85       	ldd	r24, Z+15	; 0x0f
     d3c:	90 89       	ldd	r25, Z+16	; 0x10
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	02 97       	sbiw	r24, 0x02	; 2
     d42:	c4 f0       	brlt	.+48     	; 0xd74 <menu_print+0x7a>
     d44:	87 01       	movw	r16, r14
     d46:	0d 5e       	subi	r16, 0xED	; 237
     d48:	1f 4f       	sbci	r17, 0xFF	; 255
     d4a:	c1 e0       	ldi	r28, 0x01	; 1
     d4c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		oled_goto(i,8);
     d4e:	68 e0       	ldi	r22, 0x08	; 8
     d50:	8c 2f       	mov	r24, r28
     d52:	0e 94 41 03 	call	0x682	; 0x682 <oled_goto>
		oled_print((object->children[i-1])->name);
     d56:	f8 01       	movw	r30, r16
     d58:	81 91       	ld	r24, Z+
     d5a:	91 91       	ld	r25, Z+
     d5c:	8f 01       	movw	r16, r30
     d5e:	0e 94 2e 03 	call	0x65c	; 0x65c <oled_print>
	oled_print(object->name);
	oled_goto(next,0);
	oled_print("-");
	
	int i;
	for (i=1;i<object->number_children+1;i++)
     d62:	21 96       	adiw	r28, 0x01	; 1
     d64:	f7 01       	movw	r30, r14
     d66:	27 85       	ldd	r18, Z+15	; 0x0f
     d68:	30 89       	ldd	r19, Z+16	; 0x10
     d6a:	2f 5f       	subi	r18, 0xFF	; 255
     d6c:	3f 4f       	sbci	r19, 0xFF	; 255
     d6e:	c2 17       	cp	r28, r18
     d70:	d3 07       	cpc	r29, r19
     d72:	6c f3       	brlt	.-38     	; 0xd4e <menu_print+0x54>
	{
		oled_goto(i,8);
		oled_print((object->children[i-1])->name);
	}
}
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	ef 90       	pop	r14
     d80:	08 95       	ret

00000d82 <menu_init>:
menu_t menu = {"Main Menu",	3,	NULL,	{&sub1,&sub2,&sub3}};

void menu_init()
{
	// Setup the menu hierarchy
	sub3sub1sub1.parent = &sub3sub2;
     d82:	82 ec       	ldi	r24, 0xC2	; 194
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	90 93 79 02 	sts	0x0279, r25
     d8a:	80 93 78 02 	sts	0x0278, r24
	sub3sub1sub2.parent = &sub3sub2;
     d8e:	90 93 58 02 	sts	0x0258, r25
     d92:	80 93 57 02 	sts	0x0257, r24
	sub3sub3sub1.parent = &sub3sub3;
     d96:	81 ea       	ldi	r24, 0xA1	; 161
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	90 93 37 02 	sts	0x0237, r25
     d9e:	80 93 36 02 	sts	0x0236, r24
	sub3sub3sub2.parent = &sub3sub3;
     da2:	90 93 16 02 	sts	0x0216, r25
     da6:	80 93 15 02 	sts	0x0215, r24
	sub3sub1.parent= &sub3;
     daa:	8e e3       	ldi	r24, 0x3E	; 62
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	90 93 f5 01 	sts	0x01F5, r25
     db2:	80 93 f4 01 	sts	0x01F4, r24
	sub3sub2.parent= &sub3;
     db6:	90 93 d4 01 	sts	0x01D4, r25
     dba:	80 93 d3 01 	sts	0x01D3, r24
	sub3sub3.parent= &sub3;
     dbe:	90 93 b3 01 	sts	0x01B3, r25
     dc2:	80 93 b2 01 	sts	0x01B2, r24
	sub1.parent = &menu;	
     dc6:	8d e1       	ldi	r24, 0x1D	; 29
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	90 93 92 01 	sts	0x0192, r25
     dce:	80 93 91 01 	sts	0x0191, r24
	sub2.parent = &menu;
     dd2:	90 93 71 01 	sts	0x0171, r25
     dd6:	80 93 70 01 	sts	0x0170, r24
	sub3.parent = &menu;
     dda:	90 93 50 01 	sts	0x0150, r25
     dde:	80 93 4f 01 	sts	0x014F, r24
	current = &menu;
     de2:	90 93 16 03 	sts	0x0316, r25
     de6:	80 93 15 03 	sts	0x0315, r24
	menu_print(current);
     dea:	0e 94 7d 06 	call	0xcfa	; 0xcfa <menu_print>
     dee:	08 95       	ret

00000df0 <menu_fsm>:
void menu_fsm()
{
	static direction curr_dir;
	static direction last_dir = NEUTRAL; 
	
	curr_dir = joy_get_direction();
     df0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <joy_get_direction>
     df4:	80 93 14 03 	sts	0x0314, r24
	if (curr_dir != last_dir)
     df8:	90 91 1c 01 	lds	r25, 0x011C
     dfc:	89 17       	cp	r24, r25
     dfe:	09 f4       	brne	.+2      	; 0xe02 <menu_fsm+0x12>
     e00:	9d c0       	rjmp	.+314    	; 0xf3c <menu_fsm+0x14c>
	{
		switch (curr_dir){
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	49 f0       	breq	.+18     	; 0xe18 <menu_fsm+0x28>
     e06:	08 f4       	brcc	.+2      	; 0xe0a <menu_fsm+0x1a>
     e08:	83 c0       	rjmp	.+262    	; 0xf10 <menu_fsm+0x120>
     e0a:	82 30       	cpi	r24, 0x02	; 2
     e0c:	09 f4       	brne	.+2      	; 0xe10 <menu_fsm+0x20>
     e0e:	8f c0       	rjmp	.+286    	; 0xf2e <menu_fsm+0x13e>
     e10:	83 30       	cpi	r24, 0x03	; 3
     e12:	09 f4       	brne	.+2      	; 0xe16 <menu_fsm+0x26>
     e14:	90 c0       	rjmp	.+288    	; 0xf36 <menu_fsm+0x146>
     e16:	92 c0       	rjmp	.+292    	; 0xf3c <menu_fsm+0x14c>
		case RIGHT:
			switch(current->children[next-1]->name[0])
     e18:	80 91 15 03 	lds	r24, 0x0315
     e1c:	90 91 16 03 	lds	r25, 0x0316
     e20:	e0 91 17 03 	lds	r30, 0x0317
     e24:	f0 91 18 03 	lds	r31, 0x0318
     e28:	31 97       	sbiw	r30, 0x01	; 1
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	e8 0f       	add	r30, r24
     e30:	f9 1f       	adc	r31, r25
     e32:	a3 89       	ldd	r26, Z+19	; 0x13
     e34:	b4 89       	ldd	r27, Z+20	; 0x14
     e36:	4c 91       	ld	r20, X
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	45 54       	subi	r20, 0x45	; 69
     e3c:	51 09       	sbc	r21, r1
     e3e:	40 31       	cpi	r20, 0x10	; 16
     e40:	51 05       	cpc	r21, r1
     e42:	f8 f4       	brcc	.+62     	; 0xe82 <menu_fsm+0x92>
     e44:	48 5c       	subi	r20, 0xC8	; 200
     e46:	5f 4f       	sbci	r21, 0xFF	; 255
     e48:	fa 01       	movw	r30, r20
     e4a:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <__tablejump2__>
			{
					
				case 'P':       // [P]lay Game
					current = current->children[next-1];
     e4e:	b0 93 16 03 	sts	0x0316, r27
     e52:	a0 93 15 03 	sts	0x0315, r26
					game_play();
     e56:	0e 94 7f 04 	call	0x8fe	; 0x8fe <game_play>
					current = current->parent;
     e5a:	e0 91 15 03 	lds	r30, 0x0315
     e5e:	f0 91 16 03 	lds	r31, 0x0316
     e62:	81 89       	ldd	r24, Z+17	; 0x11
     e64:	92 89       	ldd	r25, Z+18	; 0x12
     e66:	90 93 16 03 	sts	0x0316, r25
     e6a:	80 93 15 03 	sts	0x0315, r24
					menu_print(current);
     e6e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <menu_print>
					break;
     e72:	64 c0       	rjmp	.+200    	; 0xf3c <menu_fsm+0x14c>
				case 'H':		// [H]ighscores
					current = current->children[next-1];
     e74:	b0 93 16 03 	sts	0x0316, r27
     e78:	a0 93 15 03 	sts	0x0315, r26
					game_print_highscore();
     e7c:	0e 94 c4 03 	call	0x788	; 0x788 <game_print_highscore>
					break;
     e80:	5d c0       	rjmp	.+186    	; 0xf3c <menu_fsm+0x14c>
				default:	// [S]ettings & [C]hoose Input
					current = current->children[next-1];
     e82:	b0 93 16 03 	sts	0x0316, r27
     e86:	a0 93 15 03 	sts	0x0315, r26
					menu_print(current);
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <menu_print>
					break;
     e90:	55 c0       	rjmp	.+170    	; 0xf3c <menu_fsm+0x14c>
				case 'R' :		// [R]eset Scores
					game_reset_highscore();
     e92:	0e 94 49 04 	call	0x892	; 0x892 <game_reset_highscore>
					current = &menu;
     e96:	8d e1       	ldi	r24, 0x1D	; 29
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	90 93 16 03 	sts	0x0316, r25
     e9e:	80 93 15 03 	sts	0x0315, r24
					menu_print(current);
     ea2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <menu_print>
					break;	
     ea6:	4a c0       	rjmp	.+148    	; 0xf3c <menu_fsm+0x14c>
				case 'T' :		// [T]ouch as input	
					game_change_mode( 1 );
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 90 05 	call	0xb20	; 0xb20 <game_change_mode>
					current = &menu;
     eb0:	8d e1       	ldi	r24, 0x1D	; 29
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	90 93 16 03 	sts	0x0316, r25
     eb8:	80 93 15 03 	sts	0x0315, r24
					menu_print(current);
     ebc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <menu_print>
					break;	
     ec0:	3d c0       	rjmp	.+122    	; 0xf3c <menu_fsm+0x14c>
				case 'J' :		// [J]oystick as input
					game_change_mode( 0 );
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 90 05 	call	0xb20	; 0xb20 <game_change_mode>
					current = &menu;
     eca:	8d e1       	ldi	r24, 0x1D	; 29
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	90 93 16 03 	sts	0x0316, r25
     ed2:	80 93 15 03 	sts	0x0315, r24
					menu_print(current);
     ed6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <menu_print>
					break;
     eda:	30 c0       	rjmp	.+96     	; 0xf3c <menu_fsm+0x14c>
				case 'M' :		// [M]edium as difficulty
					game_change_difficulty( 2 );
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 95 05 	call	0xb2a	; 0xb2a <game_change_difficulty>
					current = &menu;
     ee4:	8d e1       	ldi	r24, 0x1D	; 29
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	90 93 16 03 	sts	0x0316, r25
     eec:	80 93 15 03 	sts	0x0315, r24
					menu_print(current);
     ef0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <menu_print>
					break;
     ef4:	23 c0       	rjmp	.+70     	; 0xf3c <menu_fsm+0x14c>
				case 'E' :		// [E]asy as difficulty	
					game_change_difficulty( 1 );
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 95 05 	call	0xb2a	; 0xb2a <game_change_difficulty>
					current = &menu;
     efe:	8d e1       	ldi	r24, 0x1D	; 29
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	90 93 16 03 	sts	0x0316, r25
     f06:	80 93 15 03 	sts	0x0315, r24
					menu_print(current);
     f0a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <menu_print>
					break;
     f0e:	16 c0       	rjmp	.+44     	; 0xf3c <menu_fsm+0x14c>
			}
			break;
				
		case LEFT:
			if (current->parent != NULL){
     f10:	e0 91 15 03 	lds	r30, 0x0315
     f14:	f0 91 16 03 	lds	r31, 0x0316
     f18:	81 89       	ldd	r24, Z+17	; 0x11
     f1a:	92 89       	ldd	r25, Z+18	; 0x12
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	71 f0       	breq	.+28     	; 0xf3c <menu_fsm+0x14c>
				current = current->parent;
     f20:	90 93 16 03 	sts	0x0316, r25
     f24:	80 93 15 03 	sts	0x0315, r24
				menu_print(current);
     f28:	0e 94 7d 06 	call	0xcfa	; 0xcfa <menu_print>
     f2c:	07 c0       	rjmp	.+14     	; 0xf3c <menu_fsm+0x14c>
			}
			break;
		case UP:
			update_next(curr_dir);
     f2e:	82 e0       	ldi	r24, 0x02	; 2
     f30:	0e 94 34 06 	call	0xc68	; 0xc68 <update_next>
			break;
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <menu_fsm+0x14c>
		case DOWN:
			update_next(curr_dir);
     f36:	83 e0       	ldi	r24, 0x03	; 3
     f38:	0e 94 34 06 	call	0xc68	; 0xc68 <update_next>
			break;
			default:
			break;
		}
	}
	last_dir = curr_dir;
     f3c:	80 91 14 03 	lds	r24, 0x0314
     f40:	80 93 1c 01 	sts	0x011C, r24
     f44:	08 95       	ret

00000f46 <__divmodhi4>:
     f46:	97 fb       	bst	r25, 7
     f48:	07 2e       	mov	r0, r23
     f4a:	16 f4       	brtc	.+4      	; 0xf50 <__divmodhi4+0xa>
     f4c:	00 94       	com	r0
     f4e:	07 d0       	rcall	.+14     	; 0xf5e <__divmodhi4_neg1>
     f50:	77 fd       	sbrc	r23, 7
     f52:	09 d0       	rcall	.+18     	; 0xf66 <__divmodhi4_neg2>
     f54:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__udivmodhi4>
     f58:	07 fc       	sbrc	r0, 7
     f5a:	05 d0       	rcall	.+10     	; 0xf66 <__divmodhi4_neg2>
     f5c:	3e f4       	brtc	.+14     	; 0xf6c <__divmodhi4_exit>

00000f5e <__divmodhi4_neg1>:
     f5e:	90 95       	com	r25
     f60:	81 95       	neg	r24
     f62:	9f 4f       	sbci	r25, 0xFF	; 255
     f64:	08 95       	ret

00000f66 <__divmodhi4_neg2>:
     f66:	70 95       	com	r23
     f68:	61 95       	neg	r22
     f6a:	7f 4f       	sbci	r23, 0xFF	; 255

00000f6c <__divmodhi4_exit>:
     f6c:	08 95       	ret

00000f6e <__tablejump2__>:
     f6e:	ee 0f       	add	r30, r30
     f70:	ff 1f       	adc	r31, r31

00000f72 <__tablejump__>:
     f72:	05 90       	lpm	r0, Z+
     f74:	f4 91       	lpm	r31, Z
     f76:	e0 2d       	mov	r30, r0
     f78:	09 94       	ijmp

00000f7a <__udivmodhi4>:
     f7a:	aa 1b       	sub	r26, r26
     f7c:	bb 1b       	sub	r27, r27
     f7e:	51 e1       	ldi	r21, 0x11	; 17
     f80:	07 c0       	rjmp	.+14     	; 0xf90 <__udivmodhi4_ep>

00000f82 <__udivmodhi4_loop>:
     f82:	aa 1f       	adc	r26, r26
     f84:	bb 1f       	adc	r27, r27
     f86:	a6 17       	cp	r26, r22
     f88:	b7 07       	cpc	r27, r23
     f8a:	10 f0       	brcs	.+4      	; 0xf90 <__udivmodhi4_ep>
     f8c:	a6 1b       	sub	r26, r22
     f8e:	b7 0b       	sbc	r27, r23

00000f90 <__udivmodhi4_ep>:
     f90:	88 1f       	adc	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	5a 95       	dec	r21
     f96:	a9 f7       	brne	.-22     	; 0xf82 <__udivmodhi4_loop>
     f98:	80 95       	com	r24
     f9a:	90 95       	com	r25
     f9c:	bc 01       	movw	r22, r24
     f9e:	cd 01       	movw	r24, r26
     fa0:	08 95       	ret

00000fa2 <fdevopen>:
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	ec 01       	movw	r28, r24
     fac:	8b 01       	movw	r16, r22
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	31 f4       	brne	.+12     	; 0xfbe <fdevopen+0x1c>
     fb2:	61 15       	cp	r22, r1
     fb4:	71 05       	cpc	r23, r1
     fb6:	19 f4       	brne	.+6      	; 0xfbe <fdevopen+0x1c>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	38 c0       	rjmp	.+112    	; 0x102e <fdevopen+0x8c>
     fbe:	6e e0       	ldi	r22, 0x0E	; 14
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 48 0a 	call	0x1490	; 0x1490 <calloc>
     fca:	fc 01       	movw	r30, r24
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	a1 f3       	breq	.-24     	; 0xfb8 <fdevopen+0x16>
     fd0:	80 e8       	ldi	r24, 0x80	; 128
     fd2:	83 83       	std	Z+3, r24	; 0x03
     fd4:	01 15       	cp	r16, r1
     fd6:	11 05       	cpc	r17, r1
     fd8:	71 f0       	breq	.+28     	; 0xff6 <fdevopen+0x54>
     fda:	13 87       	std	Z+11, r17	; 0x0b
     fdc:	02 87       	std	Z+10, r16	; 0x0a
     fde:	81 e8       	ldi	r24, 0x81	; 129
     fe0:	83 83       	std	Z+3, r24	; 0x03
     fe2:	80 91 19 03 	lds	r24, 0x0319
     fe6:	90 91 1a 03 	lds	r25, 0x031A
     fea:	89 2b       	or	r24, r25
     fec:	21 f4       	brne	.+8      	; 0xff6 <fdevopen+0x54>
     fee:	f0 93 1a 03 	sts	0x031A, r31
     ff2:	e0 93 19 03 	sts	0x0319, r30
     ff6:	20 97       	sbiw	r28, 0x00	; 0
     ff8:	c9 f0       	breq	.+50     	; 0x102c <fdevopen+0x8a>
     ffa:	d1 87       	std	Z+9, r29	; 0x09
     ffc:	c0 87       	std	Z+8, r28	; 0x08
     ffe:	83 81       	ldd	r24, Z+3	; 0x03
    1000:	82 60       	ori	r24, 0x02	; 2
    1002:	83 83       	std	Z+3, r24	; 0x03
    1004:	80 91 1b 03 	lds	r24, 0x031B
    1008:	90 91 1c 03 	lds	r25, 0x031C
    100c:	89 2b       	or	r24, r25
    100e:	71 f4       	brne	.+28     	; 0x102c <fdevopen+0x8a>
    1010:	f0 93 1c 03 	sts	0x031C, r31
    1014:	e0 93 1b 03 	sts	0x031B, r30
    1018:	80 91 1d 03 	lds	r24, 0x031D
    101c:	90 91 1e 03 	lds	r25, 0x031E
    1020:	89 2b       	or	r24, r25
    1022:	21 f4       	brne	.+8      	; 0x102c <fdevopen+0x8a>
    1024:	f0 93 1e 03 	sts	0x031E, r31
    1028:	e0 93 1d 03 	sts	0x031D, r30
    102c:	cf 01       	movw	r24, r30
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	08 95       	ret

00001038 <puts>:
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	e0 91 1b 03 	lds	r30, 0x031B
    1044:	f0 91 1c 03 	lds	r31, 0x031C
    1048:	23 81       	ldd	r18, Z+3	; 0x03
    104a:	21 ff       	sbrs	r18, 1
    104c:	1b c0       	rjmp	.+54     	; 0x1084 <puts+0x4c>
    104e:	ec 01       	movw	r28, r24
    1050:	00 e0       	ldi	r16, 0x00	; 0
    1052:	10 e0       	ldi	r17, 0x00	; 0
    1054:	89 91       	ld	r24, Y+
    1056:	60 91 1b 03 	lds	r22, 0x031B
    105a:	70 91 1c 03 	lds	r23, 0x031C
    105e:	db 01       	movw	r26, r22
    1060:	18 96       	adiw	r26, 0x08	; 8
    1062:	ed 91       	ld	r30, X+
    1064:	fc 91       	ld	r31, X
    1066:	19 97       	sbiw	r26, 0x09	; 9
    1068:	88 23       	and	r24, r24
    106a:	31 f0       	breq	.+12     	; 0x1078 <puts+0x40>
    106c:	09 95       	icall
    106e:	89 2b       	or	r24, r25
    1070:	89 f3       	breq	.-30     	; 0x1054 <puts+0x1c>
    1072:	0f ef       	ldi	r16, 0xFF	; 255
    1074:	1f ef       	ldi	r17, 0xFF	; 255
    1076:	ee cf       	rjmp	.-36     	; 0x1054 <puts+0x1c>
    1078:	8a e0       	ldi	r24, 0x0A	; 10
    107a:	09 95       	icall
    107c:	89 2b       	or	r24, r25
    107e:	11 f4       	brne	.+4      	; 0x1084 <puts+0x4c>
    1080:	c8 01       	movw	r24, r16
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <puts+0x50>
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	9f ef       	ldi	r25, 0xFF	; 255
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret

00001092 <sprintf>:
    1092:	ae e0       	ldi	r26, 0x0E	; 14
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ef e4       	ldi	r30, 0x4F	; 79
    1098:	f8 e0       	ldi	r31, 0x08	; 8
    109a:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__prologue_saves__+0x1c>
    109e:	0d 89       	ldd	r16, Y+21	; 0x15
    10a0:	1e 89       	ldd	r17, Y+22	; 0x16
    10a2:	86 e0       	ldi	r24, 0x06	; 6
    10a4:	8c 83       	std	Y+4, r24	; 0x04
    10a6:	1a 83       	std	Y+2, r17	; 0x02
    10a8:	09 83       	std	Y+1, r16	; 0x01
    10aa:	8f ef       	ldi	r24, 0xFF	; 255
    10ac:	9f e7       	ldi	r25, 0x7F	; 127
    10ae:	9e 83       	std	Y+6, r25	; 0x06
    10b0:	8d 83       	std	Y+5, r24	; 0x05
    10b2:	ae 01       	movw	r20, r28
    10b4:	47 5e       	subi	r20, 0xE7	; 231
    10b6:	5f 4f       	sbci	r21, 0xFF	; 255
    10b8:	6f 89       	ldd	r22, Y+23	; 0x17
    10ba:	78 8d       	ldd	r23, Y+24	; 0x18
    10bc:	ce 01       	movw	r24, r28
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <vfprintf>
    10c4:	ef 81       	ldd	r30, Y+7	; 0x07
    10c6:	f8 85       	ldd	r31, Y+8	; 0x08
    10c8:	e0 0f       	add	r30, r16
    10ca:	f1 1f       	adc	r31, r17
    10cc:	10 82       	st	Z, r1
    10ce:	2e 96       	adiw	r28, 0x0e	; 14
    10d0:	e4 e0       	ldi	r30, 0x04	; 4
    10d2:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__epilogue_restores__+0x1c>

000010d6 <vfprintf>:
    10d6:	ac e0       	ldi	r26, 0x0C	; 12
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e1 e7       	ldi	r30, 0x71	; 113
    10dc:	f8 e0       	ldi	r31, 0x08	; 8
    10de:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <__prologue_saves__>
    10e2:	7c 01       	movw	r14, r24
    10e4:	6b 01       	movw	r12, r22
    10e6:	8a 01       	movw	r16, r20
    10e8:	fc 01       	movw	r30, r24
    10ea:	17 82       	std	Z+7, r1	; 0x07
    10ec:	16 82       	std	Z+6, r1	; 0x06
    10ee:	83 81       	ldd	r24, Z+3	; 0x03
    10f0:	81 ff       	sbrs	r24, 1
    10f2:	bd c1       	rjmp	.+890    	; 0x146e <vfprintf+0x398>
    10f4:	ce 01       	movw	r24, r28
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	4c 01       	movw	r8, r24
    10fa:	f7 01       	movw	r30, r14
    10fc:	93 81       	ldd	r25, Z+3	; 0x03
    10fe:	f6 01       	movw	r30, r12
    1100:	93 fd       	sbrc	r25, 3
    1102:	85 91       	lpm	r24, Z+
    1104:	93 ff       	sbrs	r25, 3
    1106:	81 91       	ld	r24, Z+
    1108:	6f 01       	movw	r12, r30
    110a:	88 23       	and	r24, r24
    110c:	09 f4       	brne	.+2      	; 0x1110 <vfprintf+0x3a>
    110e:	ab c1       	rjmp	.+854    	; 0x1466 <vfprintf+0x390>
    1110:	85 32       	cpi	r24, 0x25	; 37
    1112:	39 f4       	brne	.+14     	; 0x1122 <vfprintf+0x4c>
    1114:	93 fd       	sbrc	r25, 3
    1116:	85 91       	lpm	r24, Z+
    1118:	93 ff       	sbrs	r25, 3
    111a:	81 91       	ld	r24, Z+
    111c:	6f 01       	movw	r12, r30
    111e:	85 32       	cpi	r24, 0x25	; 37
    1120:	29 f4       	brne	.+10     	; 0x112c <vfprintf+0x56>
    1122:	b7 01       	movw	r22, r14
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    112a:	e7 cf       	rjmp	.-50     	; 0x10fa <vfprintf+0x24>
    112c:	51 2c       	mov	r5, r1
    112e:	31 2c       	mov	r3, r1
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	20 32       	cpi	r18, 0x20	; 32
    1134:	a0 f4       	brcc	.+40     	; 0x115e <vfprintf+0x88>
    1136:	8b 32       	cpi	r24, 0x2B	; 43
    1138:	69 f0       	breq	.+26     	; 0x1154 <vfprintf+0x7e>
    113a:	30 f4       	brcc	.+12     	; 0x1148 <vfprintf+0x72>
    113c:	80 32       	cpi	r24, 0x20	; 32
    113e:	59 f0       	breq	.+22     	; 0x1156 <vfprintf+0x80>
    1140:	83 32       	cpi	r24, 0x23	; 35
    1142:	69 f4       	brne	.+26     	; 0x115e <vfprintf+0x88>
    1144:	20 61       	ori	r18, 0x10	; 16
    1146:	2c c0       	rjmp	.+88     	; 0x11a0 <vfprintf+0xca>
    1148:	8d 32       	cpi	r24, 0x2D	; 45
    114a:	39 f0       	breq	.+14     	; 0x115a <vfprintf+0x84>
    114c:	80 33       	cpi	r24, 0x30	; 48
    114e:	39 f4       	brne	.+14     	; 0x115e <vfprintf+0x88>
    1150:	21 60       	ori	r18, 0x01	; 1
    1152:	26 c0       	rjmp	.+76     	; 0x11a0 <vfprintf+0xca>
    1154:	22 60       	ori	r18, 0x02	; 2
    1156:	24 60       	ori	r18, 0x04	; 4
    1158:	23 c0       	rjmp	.+70     	; 0x11a0 <vfprintf+0xca>
    115a:	28 60       	ori	r18, 0x08	; 8
    115c:	21 c0       	rjmp	.+66     	; 0x11a0 <vfprintf+0xca>
    115e:	27 fd       	sbrc	r18, 7
    1160:	27 c0       	rjmp	.+78     	; 0x11b0 <vfprintf+0xda>
    1162:	30 ed       	ldi	r19, 0xD0	; 208
    1164:	38 0f       	add	r19, r24
    1166:	3a 30       	cpi	r19, 0x0A	; 10
    1168:	78 f4       	brcc	.+30     	; 0x1188 <vfprintf+0xb2>
    116a:	26 ff       	sbrs	r18, 6
    116c:	06 c0       	rjmp	.+12     	; 0x117a <vfprintf+0xa4>
    116e:	fa e0       	ldi	r31, 0x0A	; 10
    1170:	5f 9e       	mul	r5, r31
    1172:	30 0d       	add	r19, r0
    1174:	11 24       	eor	r1, r1
    1176:	53 2e       	mov	r5, r19
    1178:	13 c0       	rjmp	.+38     	; 0x11a0 <vfprintf+0xca>
    117a:	8a e0       	ldi	r24, 0x0A	; 10
    117c:	38 9e       	mul	r3, r24
    117e:	30 0d       	add	r19, r0
    1180:	11 24       	eor	r1, r1
    1182:	33 2e       	mov	r3, r19
    1184:	20 62       	ori	r18, 0x20	; 32
    1186:	0c c0       	rjmp	.+24     	; 0x11a0 <vfprintf+0xca>
    1188:	8e 32       	cpi	r24, 0x2E	; 46
    118a:	21 f4       	brne	.+8      	; 0x1194 <vfprintf+0xbe>
    118c:	26 fd       	sbrc	r18, 6
    118e:	6b c1       	rjmp	.+726    	; 0x1466 <vfprintf+0x390>
    1190:	20 64       	ori	r18, 0x40	; 64
    1192:	06 c0       	rjmp	.+12     	; 0x11a0 <vfprintf+0xca>
    1194:	8c 36       	cpi	r24, 0x6C	; 108
    1196:	11 f4       	brne	.+4      	; 0x119c <vfprintf+0xc6>
    1198:	20 68       	ori	r18, 0x80	; 128
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <vfprintf+0xca>
    119c:	88 36       	cpi	r24, 0x68	; 104
    119e:	41 f4       	brne	.+16     	; 0x11b0 <vfprintf+0xda>
    11a0:	f6 01       	movw	r30, r12
    11a2:	93 fd       	sbrc	r25, 3
    11a4:	85 91       	lpm	r24, Z+
    11a6:	93 ff       	sbrs	r25, 3
    11a8:	81 91       	ld	r24, Z+
    11aa:	6f 01       	movw	r12, r30
    11ac:	81 11       	cpse	r24, r1
    11ae:	c1 cf       	rjmp	.-126    	; 0x1132 <vfprintf+0x5c>
    11b0:	98 2f       	mov	r25, r24
    11b2:	9f 7d       	andi	r25, 0xDF	; 223
    11b4:	95 54       	subi	r25, 0x45	; 69
    11b6:	93 30       	cpi	r25, 0x03	; 3
    11b8:	28 f4       	brcc	.+10     	; 0x11c4 <vfprintf+0xee>
    11ba:	0c 5f       	subi	r16, 0xFC	; 252
    11bc:	1f 4f       	sbci	r17, 0xFF	; 255
    11be:	ff e3       	ldi	r31, 0x3F	; 63
    11c0:	f9 83       	std	Y+1, r31	; 0x01
    11c2:	0d c0       	rjmp	.+26     	; 0x11de <vfprintf+0x108>
    11c4:	83 36       	cpi	r24, 0x63	; 99
    11c6:	31 f0       	breq	.+12     	; 0x11d4 <vfprintf+0xfe>
    11c8:	83 37       	cpi	r24, 0x73	; 115
    11ca:	71 f0       	breq	.+28     	; 0x11e8 <vfprintf+0x112>
    11cc:	83 35       	cpi	r24, 0x53	; 83
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <vfprintf+0xfc>
    11d0:	5b c0       	rjmp	.+182    	; 0x1288 <vfprintf+0x1b2>
    11d2:	22 c0       	rjmp	.+68     	; 0x1218 <vfprintf+0x142>
    11d4:	f8 01       	movw	r30, r16
    11d6:	80 81       	ld	r24, Z
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	0e 5f       	subi	r16, 0xFE	; 254
    11dc:	1f 4f       	sbci	r17, 0xFF	; 255
    11de:	44 24       	eor	r4, r4
    11e0:	43 94       	inc	r4
    11e2:	51 2c       	mov	r5, r1
    11e4:	54 01       	movw	r10, r8
    11e6:	15 c0       	rjmp	.+42     	; 0x1212 <vfprintf+0x13c>
    11e8:	38 01       	movw	r6, r16
    11ea:	f2 e0       	ldi	r31, 0x02	; 2
    11ec:	6f 0e       	add	r6, r31
    11ee:	71 1c       	adc	r7, r1
    11f0:	f8 01       	movw	r30, r16
    11f2:	a0 80       	ld	r10, Z
    11f4:	b1 80       	ldd	r11, Z+1	; 0x01
    11f6:	26 ff       	sbrs	r18, 6
    11f8:	03 c0       	rjmp	.+6      	; 0x1200 <vfprintf+0x12a>
    11fa:	65 2d       	mov	r22, r5
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <vfprintf+0x12e>
    1200:	6f ef       	ldi	r22, 0xFF	; 255
    1202:	7f ef       	ldi	r23, 0xFF	; 255
    1204:	c5 01       	movw	r24, r10
    1206:	2c 87       	std	Y+12, r18	; 0x0c
    1208:	0e 94 9d 0b 	call	0x173a	; 0x173a <strnlen>
    120c:	2c 01       	movw	r4, r24
    120e:	83 01       	movw	r16, r6
    1210:	2c 85       	ldd	r18, Y+12	; 0x0c
    1212:	2f 77       	andi	r18, 0x7F	; 127
    1214:	22 2e       	mov	r2, r18
    1216:	17 c0       	rjmp	.+46     	; 0x1246 <vfprintf+0x170>
    1218:	38 01       	movw	r6, r16
    121a:	f2 e0       	ldi	r31, 0x02	; 2
    121c:	6f 0e       	add	r6, r31
    121e:	71 1c       	adc	r7, r1
    1220:	f8 01       	movw	r30, r16
    1222:	a0 80       	ld	r10, Z
    1224:	b1 80       	ldd	r11, Z+1	; 0x01
    1226:	26 ff       	sbrs	r18, 6
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <vfprintf+0x15a>
    122a:	65 2d       	mov	r22, r5
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <vfprintf+0x15e>
    1230:	6f ef       	ldi	r22, 0xFF	; 255
    1232:	7f ef       	ldi	r23, 0xFF	; 255
    1234:	c5 01       	movw	r24, r10
    1236:	2c 87       	std	Y+12, r18	; 0x0c
    1238:	0e 94 8b 0b 	call	0x1716	; 0x1716 <strnlen_P>
    123c:	2c 01       	movw	r4, r24
    123e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1240:	20 68       	ori	r18, 0x80	; 128
    1242:	22 2e       	mov	r2, r18
    1244:	83 01       	movw	r16, r6
    1246:	23 fc       	sbrc	r2, 3
    1248:	1b c0       	rjmp	.+54     	; 0x1280 <vfprintf+0x1aa>
    124a:	83 2d       	mov	r24, r3
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	48 16       	cp	r4, r24
    1250:	59 06       	cpc	r5, r25
    1252:	b0 f4       	brcc	.+44     	; 0x1280 <vfprintf+0x1aa>
    1254:	b7 01       	movw	r22, r14
    1256:	80 e2       	ldi	r24, 0x20	; 32
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    125e:	3a 94       	dec	r3
    1260:	f4 cf       	rjmp	.-24     	; 0x124a <vfprintf+0x174>
    1262:	f5 01       	movw	r30, r10
    1264:	27 fc       	sbrc	r2, 7
    1266:	85 91       	lpm	r24, Z+
    1268:	27 fe       	sbrs	r2, 7
    126a:	81 91       	ld	r24, Z+
    126c:	5f 01       	movw	r10, r30
    126e:	b7 01       	movw	r22, r14
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    1276:	31 10       	cpse	r3, r1
    1278:	3a 94       	dec	r3
    127a:	f1 e0       	ldi	r31, 0x01	; 1
    127c:	4f 1a       	sub	r4, r31
    127e:	51 08       	sbc	r5, r1
    1280:	41 14       	cp	r4, r1
    1282:	51 04       	cpc	r5, r1
    1284:	71 f7       	brne	.-36     	; 0x1262 <vfprintf+0x18c>
    1286:	e5 c0       	rjmp	.+458    	; 0x1452 <vfprintf+0x37c>
    1288:	84 36       	cpi	r24, 0x64	; 100
    128a:	11 f0       	breq	.+4      	; 0x1290 <vfprintf+0x1ba>
    128c:	89 36       	cpi	r24, 0x69	; 105
    128e:	39 f5       	brne	.+78     	; 0x12de <vfprintf+0x208>
    1290:	f8 01       	movw	r30, r16
    1292:	27 ff       	sbrs	r18, 7
    1294:	07 c0       	rjmp	.+14     	; 0x12a4 <vfprintf+0x1ce>
    1296:	60 81       	ld	r22, Z
    1298:	71 81       	ldd	r23, Z+1	; 0x01
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	93 81       	ldd	r25, Z+3	; 0x03
    129e:	0c 5f       	subi	r16, 0xFC	; 252
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	08 c0       	rjmp	.+16     	; 0x12b4 <vfprintf+0x1de>
    12a4:	60 81       	ld	r22, Z
    12a6:	71 81       	ldd	r23, Z+1	; 0x01
    12a8:	88 27       	eor	r24, r24
    12aa:	77 fd       	sbrc	r23, 7
    12ac:	80 95       	com	r24
    12ae:	98 2f       	mov	r25, r24
    12b0:	0e 5f       	subi	r16, 0xFE	; 254
    12b2:	1f 4f       	sbci	r17, 0xFF	; 255
    12b4:	2f 76       	andi	r18, 0x6F	; 111
    12b6:	b2 2e       	mov	r11, r18
    12b8:	97 ff       	sbrs	r25, 7
    12ba:	09 c0       	rjmp	.+18     	; 0x12ce <vfprintf+0x1f8>
    12bc:	90 95       	com	r25
    12be:	80 95       	com	r24
    12c0:	70 95       	com	r23
    12c2:	61 95       	neg	r22
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	8f 4f       	sbci	r24, 0xFF	; 255
    12c8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ca:	20 68       	ori	r18, 0x80	; 128
    12cc:	b2 2e       	mov	r11, r18
    12ce:	2a e0       	ldi	r18, 0x0A	; 10
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	a4 01       	movw	r20, r8
    12d4:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__ultoa_invert>
    12d8:	a8 2e       	mov	r10, r24
    12da:	a8 18       	sub	r10, r8
    12dc:	44 c0       	rjmp	.+136    	; 0x1366 <vfprintf+0x290>
    12de:	85 37       	cpi	r24, 0x75	; 117
    12e0:	29 f4       	brne	.+10     	; 0x12ec <vfprintf+0x216>
    12e2:	2f 7e       	andi	r18, 0xEF	; 239
    12e4:	b2 2e       	mov	r11, r18
    12e6:	2a e0       	ldi	r18, 0x0A	; 10
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	25 c0       	rjmp	.+74     	; 0x1336 <vfprintf+0x260>
    12ec:	f2 2f       	mov	r31, r18
    12ee:	f9 7f       	andi	r31, 0xF9	; 249
    12f0:	bf 2e       	mov	r11, r31
    12f2:	8f 36       	cpi	r24, 0x6F	; 111
    12f4:	c1 f0       	breq	.+48     	; 0x1326 <vfprintf+0x250>
    12f6:	18 f4       	brcc	.+6      	; 0x12fe <vfprintf+0x228>
    12f8:	88 35       	cpi	r24, 0x58	; 88
    12fa:	79 f0       	breq	.+30     	; 0x131a <vfprintf+0x244>
    12fc:	b4 c0       	rjmp	.+360    	; 0x1466 <vfprintf+0x390>
    12fe:	80 37       	cpi	r24, 0x70	; 112
    1300:	19 f0       	breq	.+6      	; 0x1308 <vfprintf+0x232>
    1302:	88 37       	cpi	r24, 0x78	; 120
    1304:	21 f0       	breq	.+8      	; 0x130e <vfprintf+0x238>
    1306:	af c0       	rjmp	.+350    	; 0x1466 <vfprintf+0x390>
    1308:	2f 2f       	mov	r18, r31
    130a:	20 61       	ori	r18, 0x10	; 16
    130c:	b2 2e       	mov	r11, r18
    130e:	b4 fe       	sbrs	r11, 4
    1310:	0d c0       	rjmp	.+26     	; 0x132c <vfprintf+0x256>
    1312:	8b 2d       	mov	r24, r11
    1314:	84 60       	ori	r24, 0x04	; 4
    1316:	b8 2e       	mov	r11, r24
    1318:	09 c0       	rjmp	.+18     	; 0x132c <vfprintf+0x256>
    131a:	24 ff       	sbrs	r18, 4
    131c:	0a c0       	rjmp	.+20     	; 0x1332 <vfprintf+0x25c>
    131e:	9f 2f       	mov	r25, r31
    1320:	96 60       	ori	r25, 0x06	; 6
    1322:	b9 2e       	mov	r11, r25
    1324:	06 c0       	rjmp	.+12     	; 0x1332 <vfprintf+0x25c>
    1326:	28 e0       	ldi	r18, 0x08	; 8
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	05 c0       	rjmp	.+10     	; 0x1336 <vfprintf+0x260>
    132c:	20 e1       	ldi	r18, 0x10	; 16
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <vfprintf+0x260>
    1332:	20 e1       	ldi	r18, 0x10	; 16
    1334:	32 e0       	ldi	r19, 0x02	; 2
    1336:	f8 01       	movw	r30, r16
    1338:	b7 fe       	sbrs	r11, 7
    133a:	07 c0       	rjmp	.+14     	; 0x134a <vfprintf+0x274>
    133c:	60 81       	ld	r22, Z
    133e:	71 81       	ldd	r23, Z+1	; 0x01
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	93 81       	ldd	r25, Z+3	; 0x03
    1344:	0c 5f       	subi	r16, 0xFC	; 252
    1346:	1f 4f       	sbci	r17, 0xFF	; 255
    1348:	06 c0       	rjmp	.+12     	; 0x1356 <vfprintf+0x280>
    134a:	60 81       	ld	r22, Z
    134c:	71 81       	ldd	r23, Z+1	; 0x01
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	0e 5f       	subi	r16, 0xFE	; 254
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	a4 01       	movw	r20, r8
    1358:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__ultoa_invert>
    135c:	a8 2e       	mov	r10, r24
    135e:	a8 18       	sub	r10, r8
    1360:	fb 2d       	mov	r31, r11
    1362:	ff 77       	andi	r31, 0x7F	; 127
    1364:	bf 2e       	mov	r11, r31
    1366:	b6 fe       	sbrs	r11, 6
    1368:	0b c0       	rjmp	.+22     	; 0x1380 <vfprintf+0x2aa>
    136a:	2b 2d       	mov	r18, r11
    136c:	2e 7f       	andi	r18, 0xFE	; 254
    136e:	a5 14       	cp	r10, r5
    1370:	50 f4       	brcc	.+20     	; 0x1386 <vfprintf+0x2b0>
    1372:	b4 fe       	sbrs	r11, 4
    1374:	0a c0       	rjmp	.+20     	; 0x138a <vfprintf+0x2b4>
    1376:	b2 fc       	sbrc	r11, 2
    1378:	08 c0       	rjmp	.+16     	; 0x138a <vfprintf+0x2b4>
    137a:	2b 2d       	mov	r18, r11
    137c:	2e 7e       	andi	r18, 0xEE	; 238
    137e:	05 c0       	rjmp	.+10     	; 0x138a <vfprintf+0x2b4>
    1380:	7a 2c       	mov	r7, r10
    1382:	2b 2d       	mov	r18, r11
    1384:	03 c0       	rjmp	.+6      	; 0x138c <vfprintf+0x2b6>
    1386:	7a 2c       	mov	r7, r10
    1388:	01 c0       	rjmp	.+2      	; 0x138c <vfprintf+0x2b6>
    138a:	75 2c       	mov	r7, r5
    138c:	24 ff       	sbrs	r18, 4
    138e:	0d c0       	rjmp	.+26     	; 0x13aa <vfprintf+0x2d4>
    1390:	fe 01       	movw	r30, r28
    1392:	ea 0d       	add	r30, r10
    1394:	f1 1d       	adc	r31, r1
    1396:	80 81       	ld	r24, Z
    1398:	80 33       	cpi	r24, 0x30	; 48
    139a:	11 f4       	brne	.+4      	; 0x13a0 <vfprintf+0x2ca>
    139c:	29 7e       	andi	r18, 0xE9	; 233
    139e:	09 c0       	rjmp	.+18     	; 0x13b2 <vfprintf+0x2dc>
    13a0:	22 ff       	sbrs	r18, 2
    13a2:	06 c0       	rjmp	.+12     	; 0x13b0 <vfprintf+0x2da>
    13a4:	73 94       	inc	r7
    13a6:	73 94       	inc	r7
    13a8:	04 c0       	rjmp	.+8      	; 0x13b2 <vfprintf+0x2dc>
    13aa:	82 2f       	mov	r24, r18
    13ac:	86 78       	andi	r24, 0x86	; 134
    13ae:	09 f0       	breq	.+2      	; 0x13b2 <vfprintf+0x2dc>
    13b0:	73 94       	inc	r7
    13b2:	23 fd       	sbrc	r18, 3
    13b4:	13 c0       	rjmp	.+38     	; 0x13dc <vfprintf+0x306>
    13b6:	20 ff       	sbrs	r18, 0
    13b8:	06 c0       	rjmp	.+12     	; 0x13c6 <vfprintf+0x2f0>
    13ba:	5a 2c       	mov	r5, r10
    13bc:	73 14       	cp	r7, r3
    13be:	18 f4       	brcc	.+6      	; 0x13c6 <vfprintf+0x2f0>
    13c0:	53 0c       	add	r5, r3
    13c2:	57 18       	sub	r5, r7
    13c4:	73 2c       	mov	r7, r3
    13c6:	73 14       	cp	r7, r3
    13c8:	68 f4       	brcc	.+26     	; 0x13e4 <vfprintf+0x30e>
    13ca:	b7 01       	movw	r22, r14
    13cc:	80 e2       	ldi	r24, 0x20	; 32
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	2c 87       	std	Y+12, r18	; 0x0c
    13d2:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    13d6:	73 94       	inc	r7
    13d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    13da:	f5 cf       	rjmp	.-22     	; 0x13c6 <vfprintf+0x2f0>
    13dc:	73 14       	cp	r7, r3
    13de:	10 f4       	brcc	.+4      	; 0x13e4 <vfprintf+0x30e>
    13e0:	37 18       	sub	r3, r7
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <vfprintf+0x310>
    13e4:	31 2c       	mov	r3, r1
    13e6:	24 ff       	sbrs	r18, 4
    13e8:	12 c0       	rjmp	.+36     	; 0x140e <vfprintf+0x338>
    13ea:	b7 01       	movw	r22, r14
    13ec:	80 e3       	ldi	r24, 0x30	; 48
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	2c 87       	std	Y+12, r18	; 0x0c
    13f2:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    13f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    13f8:	22 ff       	sbrs	r18, 2
    13fa:	17 c0       	rjmp	.+46     	; 0x142a <vfprintf+0x354>
    13fc:	21 ff       	sbrs	r18, 1
    13fe:	03 c0       	rjmp	.+6      	; 0x1406 <vfprintf+0x330>
    1400:	88 e5       	ldi	r24, 0x58	; 88
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 c0       	rjmp	.+4      	; 0x140a <vfprintf+0x334>
    1406:	88 e7       	ldi	r24, 0x78	; 120
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	b7 01       	movw	r22, r14
    140c:	0c c0       	rjmp	.+24     	; 0x1426 <vfprintf+0x350>
    140e:	82 2f       	mov	r24, r18
    1410:	86 78       	andi	r24, 0x86	; 134
    1412:	59 f0       	breq	.+22     	; 0x142a <vfprintf+0x354>
    1414:	21 fd       	sbrc	r18, 1
    1416:	02 c0       	rjmp	.+4      	; 0x141c <vfprintf+0x346>
    1418:	80 e2       	ldi	r24, 0x20	; 32
    141a:	01 c0       	rjmp	.+2      	; 0x141e <vfprintf+0x348>
    141c:	8b e2       	ldi	r24, 0x2B	; 43
    141e:	27 fd       	sbrc	r18, 7
    1420:	8d e2       	ldi	r24, 0x2D	; 45
    1422:	b7 01       	movw	r22, r14
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    142a:	a5 14       	cp	r10, r5
    142c:	38 f4       	brcc	.+14     	; 0x143c <vfprintf+0x366>
    142e:	b7 01       	movw	r22, r14
    1430:	80 e3       	ldi	r24, 0x30	; 48
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    1438:	5a 94       	dec	r5
    143a:	f7 cf       	rjmp	.-18     	; 0x142a <vfprintf+0x354>
    143c:	aa 94       	dec	r10
    143e:	f4 01       	movw	r30, r8
    1440:	ea 0d       	add	r30, r10
    1442:	f1 1d       	adc	r31, r1
    1444:	80 81       	ld	r24, Z
    1446:	b7 01       	movw	r22, r14
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    144e:	a1 10       	cpse	r10, r1
    1450:	f5 cf       	rjmp	.-22     	; 0x143c <vfprintf+0x366>
    1452:	33 20       	and	r3, r3
    1454:	09 f4       	brne	.+2      	; 0x1458 <vfprintf+0x382>
    1456:	51 ce       	rjmp	.-862    	; 0x10fa <vfprintf+0x24>
    1458:	b7 01       	movw	r22, r14
    145a:	80 e2       	ldi	r24, 0x20	; 32
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    1462:	3a 94       	dec	r3
    1464:	f6 cf       	rjmp	.-20     	; 0x1452 <vfprintf+0x37c>
    1466:	f7 01       	movw	r30, r14
    1468:	86 81       	ldd	r24, Z+6	; 0x06
    146a:	97 81       	ldd	r25, Z+7	; 0x07
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <vfprintf+0x39c>
    146e:	8f ef       	ldi	r24, 0xFF	; 255
    1470:	9f ef       	ldi	r25, 0xFF	; 255
    1472:	2c 96       	adiw	r28, 0x0c	; 12
    1474:	e2 e1       	ldi	r30, 0x12	; 18
    1476:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__epilogue_restores__>

0000147a <__eerd_word_m162>:
    147a:	a8 e1       	ldi	r26, 0x18	; 24
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	42 e0       	ldi	r20, 0x02	; 2
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__eerd_blraw_m162>

00001486 <__eewr_word_m162>:
    1486:	0e 94 48 0c 	call	0x1890	; 0x1890 <__eewr_byte_m162>
    148a:	27 2f       	mov	r18, r23
    148c:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <__eewr_r18_m162>

00001490 <calloc>:
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	86 9f       	mul	r24, r22
    149a:	80 01       	movw	r16, r0
    149c:	87 9f       	mul	r24, r23
    149e:	10 0d       	add	r17, r0
    14a0:	96 9f       	mul	r25, r22
    14a2:	10 0d       	add	r17, r0
    14a4:	11 24       	eor	r1, r1
    14a6:	c8 01       	movw	r24, r16
    14a8:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <malloc>
    14ac:	ec 01       	movw	r28, r24
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	29 f0       	breq	.+10     	; 0x14bc <calloc+0x2c>
    14b2:	a8 01       	movw	r20, r16
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	0e 94 96 0b 	call	0x172c	; 0x172c <memset>
    14bc:	ce 01       	movw	r24, r28
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	08 95       	ret

000014c8 <malloc>:
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	82 30       	cpi	r24, 0x02	; 2
    14ce:	91 05       	cpc	r25, r1
    14d0:	10 f4       	brcc	.+4      	; 0x14d6 <malloc+0xe>
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	e0 91 21 03 	lds	r30, 0x0321
    14da:	f0 91 22 03 	lds	r31, 0x0322
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	a0 e0       	ldi	r26, 0x00	; 0
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	30 97       	sbiw	r30, 0x00	; 0
    14e8:	39 f1       	breq	.+78     	; 0x1538 <malloc+0x70>
    14ea:	40 81       	ld	r20, Z
    14ec:	51 81       	ldd	r21, Z+1	; 0x01
    14ee:	48 17       	cp	r20, r24
    14f0:	59 07       	cpc	r21, r25
    14f2:	b8 f0       	brcs	.+46     	; 0x1522 <malloc+0x5a>
    14f4:	48 17       	cp	r20, r24
    14f6:	59 07       	cpc	r21, r25
    14f8:	71 f4       	brne	.+28     	; 0x1516 <malloc+0x4e>
    14fa:	82 81       	ldd	r24, Z+2	; 0x02
    14fc:	93 81       	ldd	r25, Z+3	; 0x03
    14fe:	10 97       	sbiw	r26, 0x00	; 0
    1500:	29 f0       	breq	.+10     	; 0x150c <malloc+0x44>
    1502:	13 96       	adiw	r26, 0x03	; 3
    1504:	9c 93       	st	X, r25
    1506:	8e 93       	st	-X, r24
    1508:	12 97       	sbiw	r26, 0x02	; 2
    150a:	2c c0       	rjmp	.+88     	; 0x1564 <malloc+0x9c>
    150c:	90 93 22 03 	sts	0x0322, r25
    1510:	80 93 21 03 	sts	0x0321, r24
    1514:	27 c0       	rjmp	.+78     	; 0x1564 <malloc+0x9c>
    1516:	21 15       	cp	r18, r1
    1518:	31 05       	cpc	r19, r1
    151a:	31 f0       	breq	.+12     	; 0x1528 <malloc+0x60>
    151c:	42 17       	cp	r20, r18
    151e:	53 07       	cpc	r21, r19
    1520:	18 f0       	brcs	.+6      	; 0x1528 <malloc+0x60>
    1522:	a9 01       	movw	r20, r18
    1524:	db 01       	movw	r26, r22
    1526:	01 c0       	rjmp	.+2      	; 0x152a <malloc+0x62>
    1528:	ef 01       	movw	r28, r30
    152a:	9a 01       	movw	r18, r20
    152c:	bd 01       	movw	r22, r26
    152e:	df 01       	movw	r26, r30
    1530:	02 80       	ldd	r0, Z+2	; 0x02
    1532:	f3 81       	ldd	r31, Z+3	; 0x03
    1534:	e0 2d       	mov	r30, r0
    1536:	d7 cf       	rjmp	.-82     	; 0x14e6 <malloc+0x1e>
    1538:	21 15       	cp	r18, r1
    153a:	31 05       	cpc	r19, r1
    153c:	f9 f0       	breq	.+62     	; 0x157c <malloc+0xb4>
    153e:	28 1b       	sub	r18, r24
    1540:	39 0b       	sbc	r19, r25
    1542:	24 30       	cpi	r18, 0x04	; 4
    1544:	31 05       	cpc	r19, r1
    1546:	80 f4       	brcc	.+32     	; 0x1568 <malloc+0xa0>
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	9b 81       	ldd	r25, Y+3	; 0x03
    154c:	61 15       	cp	r22, r1
    154e:	71 05       	cpc	r23, r1
    1550:	21 f0       	breq	.+8      	; 0x155a <malloc+0x92>
    1552:	fb 01       	movw	r30, r22
    1554:	93 83       	std	Z+3, r25	; 0x03
    1556:	82 83       	std	Z+2, r24	; 0x02
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <malloc+0x9a>
    155a:	90 93 22 03 	sts	0x0322, r25
    155e:	80 93 21 03 	sts	0x0321, r24
    1562:	fe 01       	movw	r30, r28
    1564:	32 96       	adiw	r30, 0x02	; 2
    1566:	44 c0       	rjmp	.+136    	; 0x15f0 <malloc+0x128>
    1568:	fe 01       	movw	r30, r28
    156a:	e2 0f       	add	r30, r18
    156c:	f3 1f       	adc	r31, r19
    156e:	81 93       	st	Z+, r24
    1570:	91 93       	st	Z+, r25
    1572:	22 50       	subi	r18, 0x02	; 2
    1574:	31 09       	sbc	r19, r1
    1576:	39 83       	std	Y+1, r19	; 0x01
    1578:	28 83       	st	Y, r18
    157a:	3a c0       	rjmp	.+116    	; 0x15f0 <malloc+0x128>
    157c:	20 91 1f 03 	lds	r18, 0x031F
    1580:	30 91 20 03 	lds	r19, 0x0320
    1584:	23 2b       	or	r18, r19
    1586:	41 f4       	brne	.+16     	; 0x1598 <malloc+0xd0>
    1588:	20 91 02 01 	lds	r18, 0x0102
    158c:	30 91 03 01 	lds	r19, 0x0103
    1590:	30 93 20 03 	sts	0x0320, r19
    1594:	20 93 1f 03 	sts	0x031F, r18
    1598:	20 91 00 01 	lds	r18, 0x0100
    159c:	30 91 01 01 	lds	r19, 0x0101
    15a0:	21 15       	cp	r18, r1
    15a2:	31 05       	cpc	r19, r1
    15a4:	41 f4       	brne	.+16     	; 0x15b6 <malloc+0xee>
    15a6:	2d b7       	in	r18, 0x3d	; 61
    15a8:	3e b7       	in	r19, 0x3e	; 62
    15aa:	40 91 04 01 	lds	r20, 0x0104
    15ae:	50 91 05 01 	lds	r21, 0x0105
    15b2:	24 1b       	sub	r18, r20
    15b4:	35 0b       	sbc	r19, r21
    15b6:	e0 91 1f 03 	lds	r30, 0x031F
    15ba:	f0 91 20 03 	lds	r31, 0x0320
    15be:	e2 17       	cp	r30, r18
    15c0:	f3 07       	cpc	r31, r19
    15c2:	a0 f4       	brcc	.+40     	; 0x15ec <malloc+0x124>
    15c4:	2e 1b       	sub	r18, r30
    15c6:	3f 0b       	sbc	r19, r31
    15c8:	28 17       	cp	r18, r24
    15ca:	39 07       	cpc	r19, r25
    15cc:	78 f0       	brcs	.+30     	; 0x15ec <malloc+0x124>
    15ce:	ac 01       	movw	r20, r24
    15d0:	4e 5f       	subi	r20, 0xFE	; 254
    15d2:	5f 4f       	sbci	r21, 0xFF	; 255
    15d4:	24 17       	cp	r18, r20
    15d6:	35 07       	cpc	r19, r21
    15d8:	48 f0       	brcs	.+18     	; 0x15ec <malloc+0x124>
    15da:	4e 0f       	add	r20, r30
    15dc:	5f 1f       	adc	r21, r31
    15de:	50 93 20 03 	sts	0x0320, r21
    15e2:	40 93 1f 03 	sts	0x031F, r20
    15e6:	81 93       	st	Z+, r24
    15e8:	91 93       	st	Z+, r25
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <malloc+0x128>
    15ec:	e0 e0       	ldi	r30, 0x00	; 0
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	cf 01       	movw	r24, r30
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	08 95       	ret

000015f8 <free>:
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	09 f4       	brne	.+2      	; 0x1602 <free+0xa>
    1600:	87 c0       	rjmp	.+270    	; 0x1710 <free+0x118>
    1602:	fc 01       	movw	r30, r24
    1604:	32 97       	sbiw	r30, 0x02	; 2
    1606:	13 82       	std	Z+3, r1	; 0x03
    1608:	12 82       	std	Z+2, r1	; 0x02
    160a:	c0 91 21 03 	lds	r28, 0x0321
    160e:	d0 91 22 03 	lds	r29, 0x0322
    1612:	20 97       	sbiw	r28, 0x00	; 0
    1614:	81 f4       	brne	.+32     	; 0x1636 <free+0x3e>
    1616:	20 81       	ld	r18, Z
    1618:	31 81       	ldd	r19, Z+1	; 0x01
    161a:	28 0f       	add	r18, r24
    161c:	39 1f       	adc	r19, r25
    161e:	80 91 1f 03 	lds	r24, 0x031F
    1622:	90 91 20 03 	lds	r25, 0x0320
    1626:	82 17       	cp	r24, r18
    1628:	93 07       	cpc	r25, r19
    162a:	79 f5       	brne	.+94     	; 0x168a <free+0x92>
    162c:	f0 93 20 03 	sts	0x0320, r31
    1630:	e0 93 1f 03 	sts	0x031F, r30
    1634:	6d c0       	rjmp	.+218    	; 0x1710 <free+0x118>
    1636:	de 01       	movw	r26, r28
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	ae 17       	cp	r26, r30
    163e:	bf 07       	cpc	r27, r31
    1640:	50 f4       	brcc	.+20     	; 0x1656 <free+0x5e>
    1642:	12 96       	adiw	r26, 0x02	; 2
    1644:	4d 91       	ld	r20, X+
    1646:	5c 91       	ld	r21, X
    1648:	13 97       	sbiw	r26, 0x03	; 3
    164a:	9d 01       	movw	r18, r26
    164c:	41 15       	cp	r20, r1
    164e:	51 05       	cpc	r21, r1
    1650:	09 f1       	breq	.+66     	; 0x1694 <free+0x9c>
    1652:	da 01       	movw	r26, r20
    1654:	f3 cf       	rjmp	.-26     	; 0x163c <free+0x44>
    1656:	b3 83       	std	Z+3, r27	; 0x03
    1658:	a2 83       	std	Z+2, r26	; 0x02
    165a:	40 81       	ld	r20, Z
    165c:	51 81       	ldd	r21, Z+1	; 0x01
    165e:	84 0f       	add	r24, r20
    1660:	95 1f       	adc	r25, r21
    1662:	8a 17       	cp	r24, r26
    1664:	9b 07       	cpc	r25, r27
    1666:	71 f4       	brne	.+28     	; 0x1684 <free+0x8c>
    1668:	8d 91       	ld	r24, X+
    166a:	9c 91       	ld	r25, X
    166c:	11 97       	sbiw	r26, 0x01	; 1
    166e:	84 0f       	add	r24, r20
    1670:	95 1f       	adc	r25, r21
    1672:	02 96       	adiw	r24, 0x02	; 2
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	80 83       	st	Z, r24
    1678:	12 96       	adiw	r26, 0x02	; 2
    167a:	8d 91       	ld	r24, X+
    167c:	9c 91       	ld	r25, X
    167e:	13 97       	sbiw	r26, 0x03	; 3
    1680:	93 83       	std	Z+3, r25	; 0x03
    1682:	82 83       	std	Z+2, r24	; 0x02
    1684:	21 15       	cp	r18, r1
    1686:	31 05       	cpc	r19, r1
    1688:	29 f4       	brne	.+10     	; 0x1694 <free+0x9c>
    168a:	f0 93 22 03 	sts	0x0322, r31
    168e:	e0 93 21 03 	sts	0x0321, r30
    1692:	3e c0       	rjmp	.+124    	; 0x1710 <free+0x118>
    1694:	d9 01       	movw	r26, r18
    1696:	13 96       	adiw	r26, 0x03	; 3
    1698:	fc 93       	st	X, r31
    169a:	ee 93       	st	-X, r30
    169c:	12 97       	sbiw	r26, 0x02	; 2
    169e:	4d 91       	ld	r20, X+
    16a0:	5d 91       	ld	r21, X+
    16a2:	a4 0f       	add	r26, r20
    16a4:	b5 1f       	adc	r27, r21
    16a6:	ea 17       	cp	r30, r26
    16a8:	fb 07       	cpc	r31, r27
    16aa:	79 f4       	brne	.+30     	; 0x16ca <free+0xd2>
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	84 0f       	add	r24, r20
    16b2:	95 1f       	adc	r25, r21
    16b4:	02 96       	adiw	r24, 0x02	; 2
    16b6:	d9 01       	movw	r26, r18
    16b8:	11 96       	adiw	r26, 0x01	; 1
    16ba:	9c 93       	st	X, r25
    16bc:	8e 93       	st	-X, r24
    16be:	82 81       	ldd	r24, Z+2	; 0x02
    16c0:	93 81       	ldd	r25, Z+3	; 0x03
    16c2:	13 96       	adiw	r26, 0x03	; 3
    16c4:	9c 93       	st	X, r25
    16c6:	8e 93       	st	-X, r24
    16c8:	12 97       	sbiw	r26, 0x02	; 2
    16ca:	e0 e0       	ldi	r30, 0x00	; 0
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	9b 81       	ldd	r25, Y+3	; 0x03
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	19 f0       	breq	.+6      	; 0x16dc <free+0xe4>
    16d6:	fe 01       	movw	r30, r28
    16d8:	ec 01       	movw	r28, r24
    16da:	f9 cf       	rjmp	.-14     	; 0x16ce <free+0xd6>
    16dc:	ce 01       	movw	r24, r28
    16de:	02 96       	adiw	r24, 0x02	; 2
    16e0:	28 81       	ld	r18, Y
    16e2:	39 81       	ldd	r19, Y+1	; 0x01
    16e4:	82 0f       	add	r24, r18
    16e6:	93 1f       	adc	r25, r19
    16e8:	20 91 1f 03 	lds	r18, 0x031F
    16ec:	30 91 20 03 	lds	r19, 0x0320
    16f0:	28 17       	cp	r18, r24
    16f2:	39 07       	cpc	r19, r25
    16f4:	69 f4       	brne	.+26     	; 0x1710 <free+0x118>
    16f6:	30 97       	sbiw	r30, 0x00	; 0
    16f8:	29 f4       	brne	.+10     	; 0x1704 <free+0x10c>
    16fa:	10 92 22 03 	sts	0x0322, r1
    16fe:	10 92 21 03 	sts	0x0321, r1
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <free+0x110>
    1704:	13 82       	std	Z+3, r1	; 0x03
    1706:	12 82       	std	Z+2, r1	; 0x02
    1708:	d0 93 20 03 	sts	0x0320, r29
    170c:	c0 93 1f 03 	sts	0x031F, r28
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <strnlen_P>:
    1716:	fc 01       	movw	r30, r24
    1718:	05 90       	lpm	r0, Z+
    171a:	61 50       	subi	r22, 0x01	; 1
    171c:	70 40       	sbci	r23, 0x00	; 0
    171e:	01 10       	cpse	r0, r1
    1720:	d8 f7       	brcc	.-10     	; 0x1718 <strnlen_P+0x2>
    1722:	80 95       	com	r24
    1724:	90 95       	com	r25
    1726:	8e 0f       	add	r24, r30
    1728:	9f 1f       	adc	r25, r31
    172a:	08 95       	ret

0000172c <memset>:
    172c:	dc 01       	movw	r26, r24
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <memset+0x6>
    1730:	6d 93       	st	X+, r22
    1732:	41 50       	subi	r20, 0x01	; 1
    1734:	50 40       	sbci	r21, 0x00	; 0
    1736:	e0 f7       	brcc	.-8      	; 0x1730 <memset+0x4>
    1738:	08 95       	ret

0000173a <strnlen>:
    173a:	fc 01       	movw	r30, r24
    173c:	61 50       	subi	r22, 0x01	; 1
    173e:	70 40       	sbci	r23, 0x00	; 0
    1740:	01 90       	ld	r0, Z+
    1742:	01 10       	cpse	r0, r1
    1744:	d8 f7       	brcc	.-10     	; 0x173c <strnlen+0x2>
    1746:	80 95       	com	r24
    1748:	90 95       	com	r25
    174a:	8e 0f       	add	r24, r30
    174c:	9f 1f       	adc	r25, r31
    174e:	08 95       	ret

00001750 <fputc>:
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	18 2f       	mov	r17, r24
    175a:	09 2f       	mov	r16, r25
    175c:	eb 01       	movw	r28, r22
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	81 fd       	sbrc	r24, 1
    1762:	03 c0       	rjmp	.+6      	; 0x176a <fputc+0x1a>
    1764:	8f ef       	ldi	r24, 0xFF	; 255
    1766:	9f ef       	ldi	r25, 0xFF	; 255
    1768:	20 c0       	rjmp	.+64     	; 0x17aa <fputc+0x5a>
    176a:	82 ff       	sbrs	r24, 2
    176c:	10 c0       	rjmp	.+32     	; 0x178e <fputc+0x3e>
    176e:	4e 81       	ldd	r20, Y+6	; 0x06
    1770:	5f 81       	ldd	r21, Y+7	; 0x07
    1772:	2c 81       	ldd	r18, Y+4	; 0x04
    1774:	3d 81       	ldd	r19, Y+5	; 0x05
    1776:	42 17       	cp	r20, r18
    1778:	53 07       	cpc	r21, r19
    177a:	7c f4       	brge	.+30     	; 0x179a <fputc+0x4a>
    177c:	e8 81       	ld	r30, Y
    177e:	f9 81       	ldd	r31, Y+1	; 0x01
    1780:	9f 01       	movw	r18, r30
    1782:	2f 5f       	subi	r18, 0xFF	; 255
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	39 83       	std	Y+1, r19	; 0x01
    1788:	28 83       	st	Y, r18
    178a:	10 83       	st	Z, r17
    178c:	06 c0       	rjmp	.+12     	; 0x179a <fputc+0x4a>
    178e:	e8 85       	ldd	r30, Y+8	; 0x08
    1790:	f9 85       	ldd	r31, Y+9	; 0x09
    1792:	81 2f       	mov	r24, r17
    1794:	09 95       	icall
    1796:	89 2b       	or	r24, r25
    1798:	29 f7       	brne	.-54     	; 0x1764 <fputc+0x14>
    179a:	2e 81       	ldd	r18, Y+6	; 0x06
    179c:	3f 81       	ldd	r19, Y+7	; 0x07
    179e:	2f 5f       	subi	r18, 0xFF	; 255
    17a0:	3f 4f       	sbci	r19, 0xFF	; 255
    17a2:	3f 83       	std	Y+7, r19	; 0x07
    17a4:	2e 83       	std	Y+6, r18	; 0x06
    17a6:	81 2f       	mov	r24, r17
    17a8:	90 2f       	mov	r25, r16
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	08 95       	ret

000017b4 <__ultoa_invert>:
    17b4:	fa 01       	movw	r30, r20
    17b6:	aa 27       	eor	r26, r26
    17b8:	28 30       	cpi	r18, 0x08	; 8
    17ba:	51 f1       	breq	.+84     	; 0x1810 <__ultoa_invert+0x5c>
    17bc:	20 31       	cpi	r18, 0x10	; 16
    17be:	81 f1       	breq	.+96     	; 0x1820 <__ultoa_invert+0x6c>
    17c0:	e8 94       	clt
    17c2:	6f 93       	push	r22
    17c4:	6e 7f       	andi	r22, 0xFE	; 254
    17c6:	6e 5f       	subi	r22, 0xFE	; 254
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ca:	8f 4f       	sbci	r24, 0xFF	; 255
    17cc:	9f 4f       	sbci	r25, 0xFF	; 255
    17ce:	af 4f       	sbci	r26, 0xFF	; 255
    17d0:	b1 e0       	ldi	r27, 0x01	; 1
    17d2:	3e d0       	rcall	.+124    	; 0x1850 <__ultoa_invert+0x9c>
    17d4:	b4 e0       	ldi	r27, 0x04	; 4
    17d6:	3c d0       	rcall	.+120    	; 0x1850 <__ultoa_invert+0x9c>
    17d8:	67 0f       	add	r22, r23
    17da:	78 1f       	adc	r23, r24
    17dc:	89 1f       	adc	r24, r25
    17de:	9a 1f       	adc	r25, r26
    17e0:	a1 1d       	adc	r26, r1
    17e2:	68 0f       	add	r22, r24
    17e4:	79 1f       	adc	r23, r25
    17e6:	8a 1f       	adc	r24, r26
    17e8:	91 1d       	adc	r25, r1
    17ea:	a1 1d       	adc	r26, r1
    17ec:	6a 0f       	add	r22, r26
    17ee:	71 1d       	adc	r23, r1
    17f0:	81 1d       	adc	r24, r1
    17f2:	91 1d       	adc	r25, r1
    17f4:	a1 1d       	adc	r26, r1
    17f6:	20 d0       	rcall	.+64     	; 0x1838 <__ultoa_invert+0x84>
    17f8:	09 f4       	brne	.+2      	; 0x17fc <__ultoa_invert+0x48>
    17fa:	68 94       	set
    17fc:	3f 91       	pop	r19
    17fe:	2a e0       	ldi	r18, 0x0A	; 10
    1800:	26 9f       	mul	r18, r22
    1802:	11 24       	eor	r1, r1
    1804:	30 19       	sub	r19, r0
    1806:	30 5d       	subi	r19, 0xD0	; 208
    1808:	31 93       	st	Z+, r19
    180a:	de f6       	brtc	.-74     	; 0x17c2 <__ultoa_invert+0xe>
    180c:	cf 01       	movw	r24, r30
    180e:	08 95       	ret
    1810:	46 2f       	mov	r20, r22
    1812:	47 70       	andi	r20, 0x07	; 7
    1814:	40 5d       	subi	r20, 0xD0	; 208
    1816:	41 93       	st	Z+, r20
    1818:	b3 e0       	ldi	r27, 0x03	; 3
    181a:	0f d0       	rcall	.+30     	; 0x183a <__ultoa_invert+0x86>
    181c:	c9 f7       	brne	.-14     	; 0x1810 <__ultoa_invert+0x5c>
    181e:	f6 cf       	rjmp	.-20     	; 0x180c <__ultoa_invert+0x58>
    1820:	46 2f       	mov	r20, r22
    1822:	4f 70       	andi	r20, 0x0F	; 15
    1824:	40 5d       	subi	r20, 0xD0	; 208
    1826:	4a 33       	cpi	r20, 0x3A	; 58
    1828:	18 f0       	brcs	.+6      	; 0x1830 <__ultoa_invert+0x7c>
    182a:	49 5d       	subi	r20, 0xD9	; 217
    182c:	31 fd       	sbrc	r19, 1
    182e:	40 52       	subi	r20, 0x20	; 32
    1830:	41 93       	st	Z+, r20
    1832:	02 d0       	rcall	.+4      	; 0x1838 <__ultoa_invert+0x84>
    1834:	a9 f7       	brne	.-22     	; 0x1820 <__ultoa_invert+0x6c>
    1836:	ea cf       	rjmp	.-44     	; 0x180c <__ultoa_invert+0x58>
    1838:	b4 e0       	ldi	r27, 0x04	; 4
    183a:	a6 95       	lsr	r26
    183c:	97 95       	ror	r25
    183e:	87 95       	ror	r24
    1840:	77 95       	ror	r23
    1842:	67 95       	ror	r22
    1844:	ba 95       	dec	r27
    1846:	c9 f7       	brne	.-14     	; 0x183a <__ultoa_invert+0x86>
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	61 05       	cpc	r22, r1
    184c:	71 05       	cpc	r23, r1
    184e:	08 95       	ret
    1850:	9b 01       	movw	r18, r22
    1852:	ac 01       	movw	r20, r24
    1854:	0a 2e       	mov	r0, r26
    1856:	06 94       	lsr	r0
    1858:	57 95       	ror	r21
    185a:	47 95       	ror	r20
    185c:	37 95       	ror	r19
    185e:	27 95       	ror	r18
    1860:	ba 95       	dec	r27
    1862:	c9 f7       	brne	.-14     	; 0x1856 <__ultoa_invert+0xa2>
    1864:	62 0f       	add	r22, r18
    1866:	73 1f       	adc	r23, r19
    1868:	84 1f       	adc	r24, r20
    186a:	95 1f       	adc	r25, r21
    186c:	a0 1d       	adc	r26, r0
    186e:	08 95       	ret

00001870 <__eerd_block_m162>:
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22

00001874 <__eerd_blraw_m162>:
    1874:	fc 01       	movw	r30, r24
    1876:	e1 99       	sbic	0x1c, 1	; 28
    1878:	fe cf       	rjmp	.-4      	; 0x1876 <__eerd_blraw_m162+0x2>
    187a:	06 c0       	rjmp	.+12     	; 0x1888 <__eerd_blraw_m162+0x14>
    187c:	ff bb       	out	0x1f, r31	; 31
    187e:	ee bb       	out	0x1e, r30	; 30
    1880:	e0 9a       	sbi	0x1c, 0	; 28
    1882:	31 96       	adiw	r30, 0x01	; 1
    1884:	0d b2       	in	r0, 0x1d	; 29
    1886:	0d 92       	st	X+, r0
    1888:	41 50       	subi	r20, 0x01	; 1
    188a:	50 40       	sbci	r21, 0x00	; 0
    188c:	b8 f7       	brcc	.-18     	; 0x187c <__eerd_blraw_m162+0x8>
    188e:	08 95       	ret

00001890 <__eewr_byte_m162>:
    1890:	26 2f       	mov	r18, r22

00001892 <__eewr_r18_m162>:
    1892:	e1 99       	sbic	0x1c, 1	; 28
    1894:	fe cf       	rjmp	.-4      	; 0x1892 <__eewr_r18_m162>
    1896:	9f bb       	out	0x1f, r25	; 31
    1898:	8e bb       	out	0x1e, r24	; 30
    189a:	2d bb       	out	0x1d, r18	; 29
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	e2 9a       	sbi	0x1c, 2	; 28
    18a2:	e1 9a       	sbi	0x1c, 1	; 28
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	01 96       	adiw	r24, 0x01	; 1
    18a8:	08 95       	ret

000018aa <__prologue_saves__>:
    18aa:	2f 92       	push	r2
    18ac:	3f 92       	push	r3
    18ae:	4f 92       	push	r4
    18b0:	5f 92       	push	r5
    18b2:	6f 92       	push	r6
    18b4:	7f 92       	push	r7
    18b6:	8f 92       	push	r8
    18b8:	9f 92       	push	r9
    18ba:	af 92       	push	r10
    18bc:	bf 92       	push	r11
    18be:	cf 92       	push	r12
    18c0:	df 92       	push	r13
    18c2:	ef 92       	push	r14
    18c4:	ff 92       	push	r15
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	ca 1b       	sub	r28, r26
    18d4:	db 0b       	sbc	r29, r27
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	09 94       	ijmp

000018e2 <__epilogue_restores__>:
    18e2:	2a 88       	ldd	r2, Y+18	; 0x12
    18e4:	39 88       	ldd	r3, Y+17	; 0x11
    18e6:	48 88       	ldd	r4, Y+16	; 0x10
    18e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    18ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    18ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    18ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    18f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    18f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    18f4:	b9 84       	ldd	r11, Y+9	; 0x09
    18f6:	c8 84       	ldd	r12, Y+8	; 0x08
    18f8:	df 80       	ldd	r13, Y+7	; 0x07
    18fa:	ee 80       	ldd	r14, Y+6	; 0x06
    18fc:	fd 80       	ldd	r15, Y+5	; 0x05
    18fe:	0c 81       	ldd	r16, Y+4	; 0x04
    1900:	1b 81       	ldd	r17, Y+3	; 0x03
    1902:	aa 81       	ldd	r26, Y+2	; 0x02
    1904:	b9 81       	ldd	r27, Y+1	; 0x01
    1906:	ce 0f       	add	r28, r30
    1908:	d1 1d       	adc	r29, r1
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	ed 01       	movw	r28, r26
    1916:	08 95       	ret

00001918 <_exit>:
    1918:	f8 94       	cli

0000191a <__stop_program>:
    191a:	ff cf       	rjmp	.-2      	; 0x191a <__stop_program>
