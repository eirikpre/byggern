
node_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800100  00000fe0  00001074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fe0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080023a  0080023a  000011ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011ae  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  000011de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e1b  00000000  00000000  0000141e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d0d  00000000  00000000  00003239  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ac2  00000000  00000000  00003f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004c4  00000000  00000000  00004a08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000062f  00000000  00000000  00004ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c3b  00000000  00000000  000054fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  00006136  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
   4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
  78:	00 06       	cpc	r0, r16
  7a:	5f 5f       	subi	r21, 0xFF	; 255
  7c:	06 00       	.word	0x0006	; ????
  7e:	00 00       	nop
  80:	00 07       	cpc	r16, r16
  82:	07 00       	.word	0x0007	; ????
  84:	07 07       	cpc	r16, r23
  86:	00 00       	nop
  88:	14 7f       	andi	r17, 0xF4	; 244
  8a:	7f 14       	cp	r7, r15
  8c:	7f 7f       	andi	r23, 0xFF	; 255
  8e:	14 00       	.word	0x0014	; ????
  90:	24 2e       	mov	r2, r20
  92:	6b 6b       	ori	r22, 0xBB	; 187
  94:	3a 12       	cpse	r3, r26
  96:	00 00       	nop
  98:	46 66       	ori	r20, 0x66	; 102
  9a:	30 18       	sub	r3, r0
  9c:	0c 66       	ori	r16, 0x6C	; 108
  9e:	62 00       	.word	0x0062	; ????
  a0:	30 7a       	andi	r19, 0xA0	; 160
  a2:	4f 5d       	subi	r20, 0xDF	; 223
  a4:	37 7a       	andi	r19, 0xA7	; 167
  a6:	48 00       	.word	0x0048	; ????
  a8:	04 07       	cpc	r16, r20
  aa:	03 00       	.word	0x0003	; ????
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	00 1c       	adc	r0, r0
  b2:	3e 63       	ori	r19, 0x3E	; 62
  b4:	41 00       	.word	0x0041	; ????
  b6:	00 00       	nop
  b8:	00 41       	sbci	r16, 0x10	; 16
  ba:	63 3e       	cpi	r22, 0xE3	; 227
  bc:	1c 00       	.word	0x001c	; ????
  be:	00 00       	nop
  c0:	08 2a       	or	r0, r24
  c2:	3e 1c       	adc	r3, r14
  c4:	1c 3e       	cpi	r17, 0xEC	; 236
  c6:	2a 08       	sbc	r2, r10
  c8:	08 08       	sbc	r0, r8
  ca:	3e 3e       	cpi	r19, 0xEE	; 238
  cc:	08 08       	sbc	r0, r8
  ce:	00 00       	nop
  d0:	00 a0       	ldd	r0, Z+32	; 0x20
  d2:	e0 60       	ori	r30, 0x00	; 0
  d4:	00 00       	nop
  d6:	00 00       	nop
  d8:	08 08       	sbc	r0, r8
  da:	08 08       	sbc	r0, r8
  dc:	08 08       	sbc	r0, r8
  de:	00 00       	nop
  e0:	00 00       	nop
  e2:	60 60       	ori	r22, 0x00	; 0
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	60 30       	cpi	r22, 0x00	; 0
  ea:	18 0c       	add	r1, r8
  ec:	06 03       	mulsu	r16, r22
  ee:	01 00       	.word	0x0001	; ????
  f0:	3e 7f       	andi	r19, 0xFE	; 254
  f2:	59 4d       	sbci	r21, 0xD9	; 217
  f4:	7f 3e       	cpi	r23, 0xEF	; 239
  f6:	00 00       	nop
  f8:	42 42       	sbci	r20, 0x22	; 34
  fa:	7f 7f       	andi	r23, 0xFF	; 255
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	00 00       	nop
 100:	62 73       	andi	r22, 0x32	; 50
 102:	59 49       	sbci	r21, 0x99	; 153
 104:	6f 66       	ori	r22, 0x6F	; 111
 106:	00 00       	nop
 108:	22 63       	ori	r18, 0x32	; 50
 10a:	49 49       	sbci	r20, 0x99	; 153
 10c:	7f 36       	cpi	r23, 0x6F	; 111
 10e:	00 00       	nop
 110:	18 1c       	adc	r1, r8
 112:	16 13       	cpse	r17, r22
 114:	7f 7f       	andi	r23, 0xFF	; 255
 116:	10 00       	.word	0x0010	; ????
 118:	27 67       	ori	r18, 0x77	; 119
 11a:	45 45       	sbci	r20, 0x55	; 85
 11c:	7d 39       	cpi	r23, 0x9D	; 157
 11e:	00 00       	nop
 120:	3c 7e       	andi	r19, 0xEC	; 236
 122:	4b 49       	sbci	r20, 0x9B	; 155
 124:	79 30       	cpi	r23, 0x09	; 9
 126:	00 00       	nop
 128:	03 63       	ori	r16, 0x33	; 51
 12a:	71 19       	sub	r23, r1
 12c:	0f 07       	cpc	r16, r31
 12e:	00 00       	nop
 130:	36 7f       	andi	r19, 0xF6	; 246
 132:	49 49       	sbci	r20, 0x99	; 153
 134:	7f 36       	cpi	r23, 0x6F	; 111
 136:	00 00       	nop
 138:	06 4f       	sbci	r16, 0xF6	; 246
 13a:	49 69       	ori	r20, 0x99	; 153
 13c:	3f 1e       	adc	r3, r31
 13e:	00 00       	nop
 140:	00 00       	nop
 142:	6c 6c       	ori	r22, 0xCC	; 204
 144:	00 00       	nop
 146:	00 00       	nop
 148:	00 a0       	ldd	r0, Z+32	; 0x20
 14a:	ec 6c       	ori	r30, 0xCC	; 204
 14c:	00 00       	nop
 14e:	00 00       	nop
 150:	08 1c       	adc	r0, r8
 152:	36 63       	ori	r19, 0x36	; 54
 154:	41 00       	.word	0x0041	; ????
 156:	00 00       	nop
 158:	14 14       	cp	r1, r4
 15a:	14 14       	cp	r1, r4
 15c:	14 14       	cp	r1, r4
 15e:	00 00       	nop
 160:	00 41       	sbci	r16, 0x10	; 16
 162:	63 36       	cpi	r22, 0x63	; 99
 164:	1c 08       	sbc	r1, r12
 166:	00 00       	nop
 168:	02 03       	mulsu	r16, r18
 16a:	51 59       	subi	r21, 0x91	; 145
 16c:	0f 06       	cpc	r0, r31
 16e:	00 00       	nop
 170:	3e 7f       	andi	r19, 0xFE	; 254
 172:	41 5d       	subi	r20, 0xD1	; 209
 174:	5d 1f       	adc	r21, r29
 176:	1e 00       	.word	0x001e	; ????
 178:	7c 7e       	andi	r23, 0xEC	; 236
 17a:	13 13       	cpse	r17, r19
 17c:	7e 7c       	andi	r23, 0xCE	; 206
 17e:	00 00       	nop
 180:	41 7f       	andi	r20, 0xF1	; 241
 182:	7f 49       	sbci	r23, 0x9F	; 159
 184:	49 7f       	andi	r20, 0xF9	; 249
 186:	36 00       	.word	0x0036	; ????
 188:	1c 3e       	cpi	r17, 0xEC	; 236
 18a:	63 41       	sbci	r22, 0x13	; 19
 18c:	41 63       	ori	r20, 0x31	; 49
 18e:	22 00       	.word	0x0022	; ????
 190:	41 7f       	andi	r20, 0xF1	; 241
 192:	7f 41       	sbci	r23, 0x1F	; 31
 194:	63 7f       	andi	r22, 0xF3	; 243
 196:	1c 00       	.word	0x001c	; ????
 198:	41 7f       	andi	r20, 0xF1	; 241
 19a:	7f 49       	sbci	r23, 0x9F	; 159
 19c:	5d 41       	sbci	r21, 0x1D	; 29
 19e:	63 00       	.word	0x0063	; ????
 1a0:	41 7f       	andi	r20, 0xF1	; 241
 1a2:	7f 49       	sbci	r23, 0x9F	; 159
 1a4:	1d 01       	movw	r2, r26
 1a6:	03 00       	.word	0x0003	; ????
 1a8:	1c 3e       	cpi	r17, 0xEC	; 236
 1aa:	63 41       	sbci	r22, 0x13	; 19
 1ac:	51 73       	andi	r21, 0x31	; 49
 1ae:	72 00       	.word	0x0072	; ????
 1b0:	7f 7f       	andi	r23, 0xFF	; 255
 1b2:	08 08       	sbc	r0, r8
 1b4:	7f 7f       	andi	r23, 0xFF	; 255
 1b6:	00 00       	nop
 1b8:	00 41       	sbci	r16, 0x10	; 16
 1ba:	7f 7f       	andi	r23, 0xFF	; 255
 1bc:	41 00       	.word	0x0041	; ????
 1be:	00 00       	nop
 1c0:	30 70       	andi	r19, 0x00	; 0
 1c2:	40 41       	sbci	r20, 0x10	; 16
 1c4:	7f 3f       	cpi	r23, 0xFF	; 255
 1c6:	01 00       	.word	0x0001	; ????
 1c8:	41 7f       	andi	r20, 0xF1	; 241
 1ca:	7f 08       	sbc	r7, r15
 1cc:	1c 77       	andi	r17, 0x7C	; 124
 1ce:	63 00       	.word	0x0063	; ????
 1d0:	41 7f       	andi	r20, 0xF1	; 241
 1d2:	7f 41       	sbci	r23, 0x1F	; 31
 1d4:	40 60       	ori	r20, 0x00	; 0
 1d6:	70 00       	.word	0x0070	; ????
 1d8:	7f 7f       	andi	r23, 0xFF	; 255
 1da:	06 0c       	add	r0, r6
 1dc:	06 7f       	andi	r16, 0xF6	; 246
 1de:	7f 00       	.word	0x007f	; ????
 1e0:	7f 7f       	andi	r23, 0xFF	; 255
 1e2:	06 0c       	add	r0, r6
 1e4:	18 7f       	andi	r17, 0xF8	; 248
 1e6:	7f 00       	.word	0x007f	; ????
 1e8:	1c 3e       	cpi	r17, 0xEC	; 236
 1ea:	63 41       	sbci	r22, 0x13	; 19
 1ec:	63 3e       	cpi	r22, 0xE3	; 227
 1ee:	1c 00       	.word	0x001c	; ????
 1f0:	41 7f       	andi	r20, 0xF1	; 241
 1f2:	7f 49       	sbci	r23, 0x9F	; 159
 1f4:	09 0f       	add	r16, r25
 1f6:	06 00       	.word	0x0006	; ????
 1f8:	1e 3f       	cpi	r17, 0xFE	; 254
 1fa:	21 71       	andi	r18, 0x11	; 17
 1fc:	7f 5e       	subi	r23, 0xEF	; 239
 1fe:	00 00       	nop
 200:	41 7f       	andi	r20, 0xF1	; 241
 202:	7f 19       	sub	r23, r15
 204:	39 6f       	ori	r19, 0xF9	; 249
 206:	46 00       	.word	0x0046	; ????
 208:	26 67       	ori	r18, 0x76	; 118
 20a:	4d 59       	subi	r20, 0x9D	; 157
 20c:	7b 32       	cpi	r23, 0x2B	; 43
 20e:	00 00       	nop
 210:	03 41       	sbci	r16, 0x13	; 19
 212:	7f 7f       	andi	r23, 0xFF	; 255
 214:	41 03       	mulsu	r20, r17
 216:	00 00       	nop
 218:	7f 7f       	andi	r23, 0xFF	; 255
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	7f 7f       	andi	r23, 0xFF	; 255
 21e:	00 00       	nop
 220:	1f 3f       	cpi	r17, 0xFF	; 255
 222:	60 60       	ori	r22, 0x00	; 0
 224:	3f 1f       	adc	r19, r31
 226:	00 00       	nop
 228:	7f 7f       	andi	r23, 0xFF	; 255
 22a:	30 18       	sub	r3, r0
 22c:	30 7f       	andi	r19, 0xF0	; 240
 22e:	7f 00       	.word	0x007f	; ????
 230:	63 77       	andi	r22, 0x73	; 115
 232:	1c 08       	sbc	r1, r12
 234:	1c 77       	andi	r17, 0x7C	; 124
 236:	63 00       	.word	0x0063	; ????
 238:	07 4f       	sbci	r16, 0xF7	; 247
 23a:	78 78       	andi	r23, 0x88	; 136
 23c:	4f 07       	cpc	r20, r31
 23e:	00 00       	nop
 240:	67 73       	andi	r22, 0x37	; 55
 242:	59 4d       	sbci	r21, 0xD9	; 217
 244:	47 63       	ori	r20, 0x37	; 55
 246:	71 00       	.word	0x0071	; ????
 248:	00 7f       	andi	r16, 0xF0	; 240
 24a:	7f 41       	sbci	r23, 0x1F	; 31
 24c:	41 00       	.word	0x0041	; ????
 24e:	00 00       	nop
 250:	01 03       	mulsu	r16, r17
 252:	06 0c       	add	r0, r6
 254:	18 30       	cpi	r17, 0x08	; 8
 256:	60 00       	.word	0x0060	; ????
 258:	00 41       	sbci	r16, 0x10	; 16
 25a:	41 7f       	andi	r20, 0xF1	; 241
 25c:	7f 00       	.word	0x007f	; ????
 25e:	00 00       	nop
 260:	08 0c       	add	r0, r8
 262:	06 03       	mulsu	r16, r22
 264:	06 0c       	add	r0, r6
 266:	08 00       	.word	0x0008	; ????
 268:	80 80       	ld	r8, Z
 26a:	80 80       	ld	r8, Z
 26c:	80 80       	ld	r8, Z
 26e:	80 80       	ld	r8, Z
 270:	00 00       	nop
 272:	03 07       	cpc	r16, r19
 274:	04 00       	.word	0x0004	; ????
 276:	00 00       	nop
 278:	20 74       	andi	r18, 0x40	; 64
 27a:	54 54       	subi	r21, 0x44	; 68
 27c:	3c 78       	andi	r19, 0x8C	; 140
 27e:	40 00       	.word	0x0040	; ????
 280:	41 3f       	cpi	r20, 0xF1	; 241
 282:	7f 44       	sbci	r23, 0x4F	; 79
 284:	44 7c       	andi	r20, 0xC4	; 196
 286:	38 00       	.word	0x0038	; ????
 288:	38 7c       	andi	r19, 0xC8	; 200
 28a:	44 44       	sbci	r20, 0x44	; 68
 28c:	6c 28       	or	r6, r12
 28e:	00 00       	nop
 290:	30 78       	andi	r19, 0x80	; 128
 292:	48 49       	sbci	r20, 0x98	; 152
 294:	3f 7f       	andi	r19, 0xFF	; 255
 296:	40 00       	.word	0x0040	; ????
 298:	38 7c       	andi	r19, 0xC8	; 200
 29a:	54 54       	subi	r21, 0x44	; 68
 29c:	5c 18       	sub	r5, r12
 29e:	00 00       	nop
 2a0:	48 7e       	andi	r20, 0xE8	; 232
 2a2:	7f 49       	sbci	r23, 0x9F	; 159
 2a4:	03 02       	muls	r16, r19
 2a6:	00 00       	nop
 2a8:	98 bc       	out	0x28, r9	; 40
 2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
 2ac:	f8 7c       	andi	r31, 0xC8	; 200
 2ae:	04 00       	.word	0x0004	; ????
 2b0:	41 7f       	andi	r20, 0xF1	; 241
 2b2:	7f 08       	sbc	r7, r15
 2b4:	04 7c       	andi	r16, 0xC4	; 196
 2b6:	78 00       	.word	0x0078	; ????
 2b8:	00 44       	sbci	r16, 0x40	; 64
 2ba:	7d 7d       	andi	r23, 0xDD	; 221
 2bc:	40 00       	.word	0x0040	; ????
 2be:	00 00       	nop
 2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_init+0x18>
 2c2:	84 fd       	sbrc	r24, 4
 2c4:	7d 00       	.word	0x007d	; ????
 2c6:	00 00       	nop
 2c8:	41 7f       	andi	r20, 0xF1	; 241
 2ca:	7f 10       	cpse	r7, r15
 2cc:	38 6c       	ori	r19, 0xC8	; 200
 2ce:	44 00       	.word	0x0044	; ????
 2d0:	00 41       	sbci	r16, 0x10	; 16
 2d2:	7f 7f       	andi	r23, 0xFF	; 255
 2d4:	40 00       	.word	0x0040	; ????
 2d6:	00 00       	nop
 2d8:	7c 7c       	andi	r23, 0xCC	; 204
 2da:	0c 18       	sub	r0, r12
 2dc:	0c 7c       	andi	r16, 0xCC	; 204
 2de:	78 00       	.word	0x0078	; ????
 2e0:	7c 7c       	andi	r23, 0xCC	; 204
 2e2:	04 04       	cpc	r0, r4
 2e4:	7c 78       	andi	r23, 0x8C	; 140
 2e6:	00 00       	nop
 2e8:	38 7c       	andi	r19, 0xC8	; 200
 2ea:	44 44       	sbci	r20, 0x44	; 68
 2ec:	7c 38       	cpi	r23, 0x8C	; 140
 2ee:	00 00       	nop
 2f0:	84 fc       	sbrc	r8, 4
 2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
 2f4:	24 3c       	cpi	r18, 0xC4	; 196
 2f6:	18 00       	.word	0x0018	; ????
 2f8:	18 3c       	cpi	r17, 0xC8	; 200
 2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
 2fc:	f8 fc       	.word	0xfcf8	; ????
 2fe:	84 00       	.word	0x0084	; ????
 300:	44 7c       	andi	r20, 0xC4	; 196
 302:	78 44       	sbci	r23, 0x48	; 72
 304:	1c 18       	sub	r1, r12
 306:	00 00       	nop
 308:	48 5c       	subi	r20, 0xC8	; 200
 30a:	54 54       	subi	r21, 0x44	; 68
 30c:	74 24       	eor	r7, r4
 30e:	00 00       	nop
 310:	00 04       	cpc	r0, r0
 312:	3e 7f       	andi	r19, 0xFE	; 254
 314:	44 24       	eor	r4, r4
 316:	00 00       	nop
 318:	3c 7c       	andi	r19, 0xCC	; 204
 31a:	40 40       	sbci	r20, 0x00	; 0
 31c:	3c 7c       	andi	r19, 0xCC	; 204
 31e:	40 00       	.word	0x0040	; ????
 320:	1c 3c       	cpi	r17, 0xCC	; 204
 322:	60 60       	ori	r22, 0x00	; 0
 324:	3c 1c       	adc	r3, r12
 326:	00 00       	nop
 328:	3c 7c       	andi	r19, 0xCC	; 204
 32a:	60 30       	cpi	r22, 0x00	; 0
 32c:	60 7c       	andi	r22, 0xC0	; 192
 32e:	3c 00       	.word	0x003c	; ????
 330:	44 6c       	ori	r20, 0xC4	; 196
 332:	38 10       	cpse	r3, r8
 334:	38 6c       	ori	r19, 0xC8	; 200
 336:	44 00       	.word	0x0044	; ????
 338:	9c bc       	out	0x2c, r9	; 44
 33a:	a0 a0       	ldd	r10, Z+32	; 0x20
 33c:	fc 7c       	andi	r31, 0xCC	; 204
 33e:	00 00       	nop
 340:	4c 64       	ori	r20, 0x4C	; 76
 342:	74 5c       	subi	r23, 0xC4	; 196
 344:	4c 64       	ori	r20, 0x4C	; 76
 346:	00 00       	nop
 348:	08 08       	sbc	r0, r8
 34a:	3e 77       	andi	r19, 0x7E	; 126
 34c:	41 41       	sbci	r20, 0x11	; 17
 34e:	00 00       	nop
 350:	00 00       	nop
 352:	00 77       	andi	r16, 0x70	; 112
 354:	77 00       	.word	0x0077	; ????
 356:	00 00       	nop
 358:	41 41       	sbci	r20, 0x11	; 17
 35a:	77 3e       	cpi	r23, 0xE7	; 231
 35c:	08 08       	sbc	r0, r8
 35e:	00 00       	nop
 360:	02 03       	mulsu	r16, r18
 362:	01 03       	mulsu	r16, r17
 364:	02 03       	mulsu	r16, r18
 366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
 368:	11 24       	eor	r1, r1
 36a:	1f be       	out	0x3f, r1	; 63
 36c:	cf ef       	ldi	r28, 0xFF	; 255
 36e:	d4 e0       	ldi	r29, 0x04	; 4
 370:	de bf       	out	0x3e, r29	; 62
 372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
 374:	12 e0       	ldi	r17, 0x02	; 2
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b1 e0       	ldi	r27, 0x01	; 1
 37a:	e0 ee       	ldi	r30, 0xE0	; 224
 37c:	ff e0       	ldi	r31, 0x0F	; 15
 37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
 380:	05 90       	lpm	r0, Z+
 382:	0d 92       	st	X+, r0
 384:	aa 33       	cpi	r26, 0x3A	; 58
 386:	b1 07       	cpc	r27, r17
 388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
 38a:	22 e0       	ldi	r18, 0x02	; 2
 38c:	aa e3       	ldi	r26, 0x3A	; 58
 38e:	b2 e0       	ldi	r27, 0x02	; 2
 390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
 392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
 394:	ac 34       	cpi	r26, 0x4C	; 76
 396:	b2 07       	cpc	r27, r18
 398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
 39a:	0e 94 9a 02 	call	0x534	; 0x534 <main>
 39e:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <_exit>

000003a2 <__bad_interrupt>:
 3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_read>:
 3a6:	8c 5f       	subi	r24, 0xFC	; 252
 3a8:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ac:	81 e4       	ldi	r24, 0x41	; 65
 3ae:	8a 95       	dec	r24
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <ADC_read+0x8>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <ADC_read+0xe>
 3b4:	80 91 00 14 	lds	r24, 0x1400
 3b8:	08 95       	ret

000003ba <check_and_report_shot>:
void check_and_report_shot( void )
{
	
	static int recent_shot = 0;
	
	if (recent_shot == 0)
 3ba:	80 91 3a 02 	lds	r24, 0x023A
 3be:	90 91 3b 02 	lds	r25, 0x023B
 3c2:	89 2b       	or	r24, r25
 3c4:	89 f4       	brne	.+34     	; 0x3e8 <check_and_report_shot+0x2e>
	{
		if(ADC_read(3) > 100)
 3c6:	83 e0       	ldi	r24, 0x03	; 3
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
 3ce:	85 36       	cpi	r24, 0x65	; 101
 3d0:	a8 f0       	brcs	.+42     	; 0x3fc <check_and_report_shot+0x42>
		{
			can_message_send(&shot_msg);
 3d2:	80 e1       	ldi	r24, 0x10	; 16
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	0e 94 be 02 	call	0x57c	; 0x57c <can_message_send>
			recent_shot = 1;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	90 93 3b 02 	sts	0x023B, r25
 3e2:	80 93 3a 02 	sts	0x023A, r24
 3e6:	08 95       	ret
		}
	}
	else
	{
		if (ADC_read(3) < 100){
 3e8:	83 e0       	ldi	r24, 0x03	; 3
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
 3f0:	84 36       	cpi	r24, 0x64	; 100
 3f2:	20 f4       	brcc	.+8      	; 0x3fc <check_and_report_shot+0x42>
			recent_shot = 0;
 3f4:	10 92 3b 02 	sts	0x023B, r1
 3f8:	10 92 3a 02 	sts	0x023A, r1
 3fc:	08 95       	ret

000003fe <play_game>:
can_message_t touch_msg = {'t',1,"0000000"};
	
void check_and_report_shot( void );

int play_game( void )
{
 3fe:	cf 92       	push	r12
 400:	df 92       	push	r13
 402:	ef 92       	push	r14
 404:	ff 92       	push	r15
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	2b 97       	sbiw	r28, 0x0b	; 11
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	f8 94       	cli
 418:	de bf       	out	0x3e, r29	; 62
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	cd bf       	out	0x3d, r28	; 61
	char score = 0;
 41e:	19 82       	std	Y+1, r1	; 0x01
	
	can_message_t message = {'m',1,"00"};
 420:	8a e0       	ldi	r24, 0x0A	; 10
 422:	e8 ef       	ldi	r30, 0xF8	; 248
 424:	f1 e0       	ldi	r31, 0x01	; 1
 426:	de 01       	movw	r26, r28
 428:	12 96       	adiw	r26, 0x02	; 2
 42a:	01 90       	ld	r0, Z+
 42c:	0d 92       	st	X+, r0
 42e:	8a 95       	dec	r24
 430:	e1 f7       	brne	.-8      	; 0x42a <play_game+0x2c>
	joy_position_t joystick;
	
	// Sending mode to node 2
	message.data[0] = TOUCH_JOY_MODE;
 432:	80 91 24 01 	lds	r24, 0x0124
 436:	8c 83       	std	Y+4, r24	; 0x04
	can_message_send(&message);
 438:	ce 01       	movw	r24, r28
 43a:	02 96       	adiw	r24, 0x02	; 2
 43c:	0e 94 be 02 	call	0x57c	; 0x57c <can_message_send>
	
	//Print Screen
	oled_clear_all();
 440:	0e 94 cf 05 	call	0xb9e	; 0xb9e <oled_clear_all>
	oled_goto(0,0);
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 c2 05 	call	0xb84	; 0xb84 <oled_goto>
	oled_print("     GAME");
 44c:	82 e0       	ldi	r24, 0x02	; 2
 44e:	92 e0       	ldi	r25, 0x02	; 2
 450:	0e 94 82 05 	call	0xb04	; 0xb04 <oled_print>
	oled_goto(4,0);
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	0e 94 c2 05 	call	0xb84	; 0xb84 <oled_goto>
	oled_print("    Score: ");
 45c:	8c e0       	ldi	r24, 0x0C	; 12
 45e:	92 e0       	ldi	r25, 0x02	; 2
 460:	0e 94 82 05 	call	0xb04	; 0xb04 <oled_print>
	
	while(1)
	{
		//Joystick
		joystick =  get_position();
		joystick_msg.data[0] = joystick.x_pos;
 464:	0f 2e       	mov	r0, r31
 466:	fc e1       	ldi	r31, 0x1C	; 28
 468:	ef 2e       	mov	r14, r31
 46a:	f1 e0       	ldi	r31, 0x01	; 1
 46c:	ff 2e       	mov	r15, r31
 46e:	f0 2d       	mov	r31, r0
		joystick_msg.data[1] = joystick.y_pos;
 470:	0d e1       	ldi	r16, 0x1D	; 29
 472:	11 e0       	ldi	r17, 0x01	; 1
		can_message_send(&joystick_msg);
		
		if (TOUCH_JOY_MODE == 1){
			touch_msg.data[0] = ADC_read(2);
 474:	0f 2e       	mov	r0, r31
 476:	f8 e0       	ldi	r31, 0x08	; 8
 478:	cf 2e       	mov	r12, r31
 47a:	f1 e0       	ldi	r31, 0x01	; 1
 47c:	df 2e       	mov	r13, r31
 47e:	f0 2d       	mov	r31, r0
	oled_print("    Score: ");
	
	while(1)
	{
		//Joystick
		joystick =  get_position();
 480:	0e 94 d5 03 	call	0x7aa	; 0x7aa <get_position>
		joystick_msg.data[0] = joystick.x_pos;
 484:	f7 01       	movw	r30, r14
 486:	60 83       	st	Z, r22
		joystick_msg.data[1] = joystick.y_pos;
 488:	f8 01       	movw	r30, r16
 48a:	80 83       	st	Z, r24
		can_message_send(&joystick_msg);
 48c:	8a e1       	ldi	r24, 0x1A	; 26
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	0e 94 be 02 	call	0x57c	; 0x57c <can_message_send>
		
		if (TOUCH_JOY_MODE == 1){
 494:	80 91 24 01 	lds	r24, 0x0124
 498:	90 91 25 01 	lds	r25, 0x0125
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	51 f4       	brne	.+20     	; 0x4b4 <play_game+0xb6>
			touch_msg.data[0] = ADC_read(2);
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
 4a8:	f6 01       	movw	r30, r12
 4aa:	80 83       	st	Z, r24
			can_message_send(&touch_msg);	
 4ac:	86 e0       	ldi	r24, 0x06	; 6
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	0e 94 be 02 	call	0x57c	; 0x57c <can_message_send>
		}
		
		// Handle potential goals
		if (can_get_message(&message) == 1)
 4b4:	ce 01       	movw	r24, r28
 4b6:	02 96       	adiw	r24, 0x02	; 2
 4b8:	0e 94 16 03 	call	0x62c	; 0x62c <can_get_message>
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	31 f4       	brne	.+12     	; 0x4cc <play_game+0xce>
		{
			if(message.id == 'g')	// Goal
 4c0:	8a 81       	ldd	r24, Y+2	; 0x02
 4c2:	87 36       	cpi	r24, 0x67	; 103
 4c4:	19 f4       	brne	.+6      	; 0x4cc <play_game+0xce>
			{
				score++;
 4c6:	89 81       	ldd	r24, Y+1	; 0x01
 4c8:	8f 5f       	subi	r24, 0xFF	; 255
 4ca:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		
		// Check for shot button
		check_and_report_shot();
 4cc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <check_and_report_shot>
		
		// Check for quit
		if (ADC_read(2) > 180 && TOUCH_JOY_MODE == 0)
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
 4d8:	85 3b       	cpi	r24, 0xB5	; 181
 4da:	30 f0       	brcs	.+12     	; 0x4e8 <play_game+0xea>
 4dc:	80 91 24 01 	lds	r24, 0x0124
 4e0:	90 91 25 01 	lds	r25, 0x0125
 4e4:	89 2b       	or	r24, r25
 4e6:	a9 f0       	breq	.+42     	; 0x512 <__stack+0x13>
		{
			break;
		}
		else if (ADC_read(0) > 200 && TOUCH_JOY_MODE == 1)
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
 4f0:	89 3c       	cpi	r24, 0xC9	; 201
 4f2:	30 f0       	brcs	.+12     	; 0x500 <__stack+0x1>
 4f4:	80 91 24 01 	lds	r24, 0x0124
 4f8:	90 91 25 01 	lds	r25, 0x0125
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	49 f0       	breq	.+18     	; 0x512 <__stack+0x13>
		{
			break;
		}
		
		// Print Score
		oled_goto(3, 0);
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	0e 94 c2 05 	call	0xb84	; 0xb84 <oled_goto>
		oled_print(&score);
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	0e 94 82 05 	call	0xb04	; 0xb04 <oled_print>
			
		
		
	}
 510:	b7 cf       	rjmp	.-146    	; 0x480 <play_game+0x82>
	return score;
 512:	89 81       	ldd	r24, Y+1	; 0x01
}
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	2b 96       	adiw	r28, 0x0b	; 11
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	0f 91       	pop	r16
 52a:	ff 90       	pop	r15
 52c:	ef 90       	pop	r14
 52e:	df 90       	pop	r13
 530:	cf 90       	pop	r12
 532:	08 95       	ret

00000534 <main>:


int main(void)
{

	USART_init(MYUBRR);
 534:	8f e1       	ldi	r24, 0x1F	; 31
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 f7 05 	call	0xbee	; 0xbee <USART_init>
	// Activate external memory
	MCUCR |= (1 << SRE);
 53c:	85 b7       	in	r24, 0x35	; 53
 53e:	80 68       	ori	r24, 0x80	; 128
 540:	85 bf       	out	0x35, r24	; 53
		
	// Initialize	
	joy_init();
 542:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <joy_init>
	oled_init();
 546:	0e 94 95 05 	call	0xb2a	; 0xb2a <oled_init>
	can_init();
 54a:	0e 94 ac 02 	call	0x558	; 0x558 <can_init>
	
	
	
	// Starts the FSM
	menu_init();
 54e:	0e 94 40 05 	call	0xa80	; 0xa80 <menu_init>
	
}
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	08 95       	ret

00000558 <can_init>:
#include "MCP2515.h"

void can_init()
{
	
	mcp2515_init();
 558:	0e 94 94 03 	call	0x728	; 0x728 <mcp2515_init>
	
	mcp2515_bit_modify(MCP_RXF0SIDH, 0xff , 0x00);
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	6f ef       	ldi	r22, 0xFF	; 255
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	0e 94 61 03 	call	0x6c2	; 0x6c2 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXF0SIDL, 0xE0 , 0x00);
 566:	40 e0       	ldi	r20, 0x00	; 0
 568:	60 ee       	ldi	r22, 0xE0	; 224
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, 0xE0 , MODE_NORMAL);
 570:	40 e0       	ldi	r20, 0x00	; 0
 572:	60 ee       	ldi	r22, 0xE0	; 224
 574:	8f e0       	ldi	r24, 0x0F	; 15
 576:	0e 94 61 03 	call	0x6c2	; 0x6c2 <mcp2515_bit_modify>
 57a:	08 95       	ret

0000057c <can_message_send>:
	
}


void can_message_send(can_message_t *message)
{
 57c:	1f 93       	push	r17
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	ec 01       	movw	r28, r24
	char i;
	
	// ID
	mcp2515_write(MCP_TXB0CTRL + 1,message->id);
 584:	68 81       	ld	r22, Y
 586:	81 e3       	ldi	r24, 0x31	; 49
 588:	0e 94 42 03 	call	0x684	; 0x684 <mcp2515_write>
	mcp2515_write(0x32,0x00);
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	82 e3       	ldi	r24, 0x32	; 50
 590:	0e 94 42 03 	call	0x684	; 0x684 <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
 594:	69 81       	ldd	r22, Y+1	; 0x01
 596:	85 e3       	ldi	r24, 0x35	; 53
 598:	0e 94 42 03 	call	0x684	; 0x684 <mcp2515_write>
	
	// Data
	for (i = 0; i< message->length; i++){
 59c:	89 81       	ldd	r24, Y+1	; 0x01
 59e:	88 23       	and	r24, r24
 5a0:	69 f0       	breq	.+26     	; 0x5bc <can_message_send+0x40>
 5a2:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0CTRL + 6 + i, *((message->data)+i) );
 5a4:	fe 01       	movw	r30, r28
 5a6:	e1 0f       	add	r30, r17
 5a8:	f1 1d       	adc	r31, r1
 5aa:	62 81       	ldd	r22, Z+2	; 0x02
 5ac:	86 e3       	ldi	r24, 0x36	; 54
 5ae:	81 0f       	add	r24, r17
 5b0:	0e 94 42 03 	call	0x684	; 0x684 <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
	
	// Data
	for (i = 0; i< message->length; i++){
 5b4:	1f 5f       	subi	r17, 0xFF	; 255
 5b6:	89 81       	ldd	r24, Y+1	; 0x01
 5b8:	18 17       	cp	r17, r24
 5ba:	a0 f3       	brcs	.-24     	; 0x5a4 <can_message_send+0x28>
		mcp2515_write(MCP_TXB0CTRL + 6 + i, *((message->data)+i) );
	}
	
	mcp2515_request_to_send(MCP_RTS_TX0);
 5bc:	81 e8       	ldi	r24, 0x81	; 129
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 56 03 	call	0x6ac	; 0x6ac <mcp2515_request_to_send>
}
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	1f 91       	pop	r17
 5ca:	08 95       	ret

000005cc <can_message_receive>:

void can_message_receive(can_message_t* message, int buffer)
{
 5cc:	ef 92       	push	r14
 5ce:	ff 92       	push	r15
 5d0:	0f 93       	push	r16
 5d2:	1f 93       	push	r17
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	8c 01       	movw	r16, r24
 5da:	e6 2e       	mov	r14, r22
	char i;
	
	// ID
	message->id = mcp2515_read(MCP_RXB0CTRL+buffer + 1);
 5dc:	81 e6       	ldi	r24, 0x61	; 97
 5de:	86 0f       	add	r24, r22
 5e0:	0e 94 30 03 	call	0x660	; 0x660 <mcp2515_read>
 5e4:	f8 01       	movw	r30, r16
 5e6:	80 83       	st	Z, r24
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
 5e8:	85 e6       	ldi	r24, 0x65	; 101
 5ea:	8e 0d       	add	r24, r14
 5ec:	0e 94 30 03 	call	0x660	; 0x660 <mcp2515_read>
 5f0:	f8 01       	movw	r30, r16
 5f2:	81 83       	std	Z+1, r24	; 0x01
	
	// Data
	for(i=0;i<message->length;i++)
 5f4:	88 23       	and	r24, r24
 5f6:	99 f0       	breq	.+38     	; 0x61e <can_message_receive+0x52>
 5f8:	c0 e0       	ldi	r28, 0x00	; 0
 5fa:	d0 e0       	ldi	r29, 0x00	; 0
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
 5fc:	f6 e6       	ldi	r31, 0x66	; 102
 5fe:	ef 0e       	add	r14, r31
 600:	fc 2e       	mov	r15, r28
 602:	8c 2f       	mov	r24, r28
 604:	8e 0d       	add	r24, r14
 606:	0e 94 30 03 	call	0x660	; 0x660 <mcp2515_read>
 60a:	f8 01       	movw	r30, r16
 60c:	ec 0f       	add	r30, r28
 60e:	f1 1d       	adc	r31, r1
 610:	82 83       	std	Z+2, r24	; 0x02
 612:	f3 94       	inc	r15
 614:	21 96       	adiw	r28, 0x01	; 1
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
	
	// Data
	for(i=0;i<message->length;i++)
 616:	f8 01       	movw	r30, r16
 618:	81 81       	ldd	r24, Z+1	; 0x01
 61a:	f8 16       	cp	r15, r24
 61c:	88 f3       	brcs	.-30     	; 0x600 <can_message_receive+0x34>
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
	}
	
}
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	1f 91       	pop	r17
 624:	0f 91       	pop	r16
 626:	ff 90       	pop	r15
 628:	ef 90       	pop	r14
 62a:	08 95       	ret

0000062c <can_get_message>:

int can_get_message(can_message_t* message)
{
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	ec 01       	movw	r28, r24
	
	if ((mcp2515_read(MCP_CANINTF) & 0x01) == 0x01)
 632:	8c e2       	ldi	r24, 0x2C	; 44
 634:	0e 94 30 03 	call	0x660	; 0x660 <mcp2515_read>
 638:	80 ff       	sbrs	r24, 0
 63a:	0d c0       	rjmp	.+26     	; 0x656 <can_get_message+0x2a>
	{
		can_message_receive(message,0);
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	ce 01       	movw	r24, r28
 642:	0e 94 e6 02 	call	0x5cc	; 0x5cc <can_message_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x01,0x00);
 646:	40 e0       	ldi	r20, 0x00	; 0
 648:	61 e0       	ldi	r22, 0x01	; 1
 64a:	8c e2       	ldi	r24, 0x2C	; 44
 64c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <mcp2515_bit_modify>
		return 1;
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <can_get_message+0x2e>
		mcp2515_bit_modify(MCP_CANINTF,0x02,0x00);
		return 1;
	}*/
	else
	{
		return 0;
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	08 95       	ret

00000660 <mcp2515_read>:
 660:	cf 93       	push	r28
 662:	c8 2f       	mov	r28, r24
 664:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <spi_select>
 668:	83 e0       	ldi	r24, 0x03	; 3
 66a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <spi_transmit>
 66e:	8c 2f       	mov	r24, r28
 670:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <spi_transmit>
 674:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <spi_receive>
 678:	c8 2f       	mov	r28, r24
 67a:	0e 94 de 05 	call	0xbbc	; 0xbbc <spi_deselect>
 67e:	8c 2f       	mov	r24, r28
 680:	cf 91       	pop	r28
 682:	08 95       	ret

00000684 <mcp2515_write>:
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	d8 2f       	mov	r29, r24
 68a:	c6 2f       	mov	r28, r22
 68c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <spi_select>
 690:	82 e0       	ldi	r24, 0x02	; 2
 692:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <spi_transmit>
 696:	8d 2f       	mov	r24, r29
 698:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <spi_transmit>
 69c:	8c 2f       	mov	r24, r28
 69e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <spi_transmit>
 6a2:	0e 94 de 05 	call	0xbbc	; 0xbbc <spi_deselect>
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	08 95       	ret

000006ac <mcp2515_request_to_send>:
 6ac:	cf 93       	push	r28
 6ae:	c8 2f       	mov	r28, r24
 6b0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <spi_select>
 6b4:	8c 2f       	mov	r24, r28
 6b6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <spi_transmit>
 6ba:	0e 94 de 05 	call	0xbbc	; 0xbbc <spi_deselect>
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <mcp2515_bit_modify>:
 6c2:	1f 93       	push	r17
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	18 2f       	mov	r17, r24
 6ca:	d6 2f       	mov	r29, r22
 6cc:	c4 2f       	mov	r28, r20
 6ce:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <spi_select>
 6d2:	85 e0       	ldi	r24, 0x05	; 5
 6d4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <spi_transmit>
 6d8:	81 2f       	mov	r24, r17
 6da:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <spi_transmit>
 6de:	8d 2f       	mov	r24, r29
 6e0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <spi_transmit>
 6e4:	8c 2f       	mov	r24, r28
 6e6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <spi_transmit>
 6ea:	0e 94 de 05 	call	0xbbc	; 0xbbc <spi_deselect>
 6ee:	df 91       	pop	r29
 6f0:	cf 91       	pop	r28
 6f2:	1f 91       	pop	r17
 6f4:	08 95       	ret

000006f6 <mcp2515_reset>:
 6f6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <spi_select>
 6fa:	80 ec       	ldi	r24, 0xC0	; 192
 6fc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <spi_transmit>
 700:	0e 94 de 05 	call	0xbbc	; 0xbbc <spi_deselect>
 704:	08 95       	ret

00000706 <mcp2515_read_status>:
 706:	cf 93       	push	r28
 708:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <spi_select>
 70c:	83 e0       	ldi	r24, 0x03	; 3
 70e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <spi_transmit>
 712:	8e e0       	ldi	r24, 0x0E	; 14
 714:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <spi_transmit>
 718:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <spi_receive>
 71c:	c8 2f       	mov	r28, r24
 71e:	0e 94 de 05 	call	0xbbc	; 0xbbc <spi_deselect>
 722:	8c 2f       	mov	r24, r28
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <mcp2515_init>:
 728:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <spi_init>
 72c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <mcp2515_reset>
 730:	0e 94 83 03 	call	0x706	; 0x706 <mcp2515_read_status>
 734:	80 7e       	andi	r24, 0xE0	; 224
 736:	80 38       	cpi	r24, 0x80	; 128
 738:	21 f0       	breq	.+8      	; 0x742 <mcp2515_init+0x1a>
 73a:	88 e1       	ldi	r24, 0x18	; 24
 73c:	92 e0       	ldi	r25, 0x02	; 2
 73e:	0e 94 77 06 	call	0xcee	; 0xcee <puts>
 742:	08 95       	ret

00000744 <joy_calibrate>:
char x_ref = 0;
char y_ref = 0;



void joy_calibrate(){
 744:	ef 92       	push	r14
 746:	ff 92       	push	r15
 748:	0f 93       	push	r16
 74a:	1f 93       	push	r17
 74c:	cf 93       	push	r28
 74e:	df 93       	push	r29
 750:	ca e0       	ldi	r28, 0x0A	; 10
 752:	d0 e0       	ldi	r29, 0x00	; 0
	int sum_x=0;
	int sum_y=0;
 754:	00 e0       	ldi	r16, 0x00	; 0
 756:	10 e0       	ldi	r17, 0x00	; 0
char y_ref = 0;



void joy_calibrate(){
	int sum_x=0;
 758:	e1 2c       	mov	r14, r1
 75a:	f1 2c       	mov	r15, r1
	int sum_y=0;
	int i;
	for(i=0;i<10;i++){
		sum_x += ADC_read(1);
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
 764:	e8 0e       	add	r14, r24
 766:	f1 1c       	adc	r15, r1
		sum_y += ADC_read(0);
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
 770:	08 0f       	add	r16, r24
 772:	11 1d       	adc	r17, r1
 774:	21 97       	sbiw	r28, 0x01	; 1

void joy_calibrate(){
	int sum_x=0;
	int sum_y=0;
	int i;
	for(i=0;i<10;i++){
 776:	20 97       	sbiw	r28, 0x00	; 0
 778:	89 f7       	brne	.-30     	; 0x75c <joy_calibrate+0x18>
		sum_x += ADC_read(1);
		sum_y += ADC_read(0);
	}
	x_ref = sum_x/10;
 77a:	2a e0       	ldi	r18, 0x0A	; 10
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	c7 01       	movw	r24, r14
 780:	b9 01       	movw	r22, r18
 782:	0e 94 04 06 	call	0xc08	; 0xc08 <__divmodhi4>
 786:	60 93 3d 02 	sts	0x023D, r22
	y_ref = sum_y/10;
 78a:	c8 01       	movw	r24, r16
 78c:	b9 01       	movw	r22, r18
 78e:	0e 94 04 06 	call	0xc08	; 0xc08 <__divmodhi4>
 792:	60 93 3c 02 	sts	0x023C, r22
	
}
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	1f 91       	pop	r17
 79c:	0f 91       	pop	r16
 79e:	ff 90       	pop	r15
 7a0:	ef 90       	pop	r14
 7a2:	08 95       	ret

000007a4 <joy_init>:

void joy_init(){
	joy_calibrate();
 7a4:	0e 94 a2 03 	call	0x744	; 0x744 <joy_calibrate>
 7a8:	08 95       	ret

000007aa <get_position>:
	
}

joy_position_t get_position(){
 7aa:	cf 93       	push	r28
 7ac:	df 93       	push	r29
	joy_position_t position;
	position.x_pos = (ADC_read(1) - x_ref)*100/128;
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	20 91 3d 02 	lds	r18, 0x023D
 7bc:	82 1b       	sub	r24, r18
 7be:	91 09       	sbc	r25, r1
 7c0:	44 e6       	ldi	r20, 0x64	; 100
 7c2:	48 9f       	mul	r20, r24
 7c4:	90 01       	movw	r18, r0
 7c6:	49 9f       	mul	r20, r25
 7c8:	30 0d       	add	r19, r0
 7ca:	11 24       	eor	r1, r1
 7cc:	33 23       	and	r19, r19
 7ce:	14 f4       	brge	.+4      	; 0x7d4 <get_position+0x2a>
 7d0:	21 58       	subi	r18, 0x81	; 129
 7d2:	3f 4f       	sbci	r19, 0xFF	; 255
 7d4:	e9 01       	movw	r28, r18
 7d6:	cc 0f       	add	r28, r28
 7d8:	cd 2f       	mov	r28, r29
 7da:	cc 1f       	adc	r28, r28
 7dc:	dd 0b       	sbc	r29, r29
	position.y_pos = (ADC_read(0) - y_ref)*100/128;
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	20 91 3c 02 	lds	r18, 0x023C
 7ec:	82 1b       	sub	r24, r18
 7ee:	91 09       	sbc	r25, r1
 7f0:	44 e6       	ldi	r20, 0x64	; 100
 7f2:	48 9f       	mul	r20, r24
 7f4:	90 01       	movw	r18, r0
 7f6:	49 9f       	mul	r20, r25
 7f8:	30 0d       	add	r19, r0
 7fa:	11 24       	eor	r1, r1
 7fc:	33 23       	and	r19, r19
 7fe:	14 f4       	brge	.+4      	; 0x804 <get_position+0x5a>
 800:	21 58       	subi	r18, 0x81	; 129
 802:	3f 4f       	sbci	r19, 0xFF	; 255
	return position;
 804:	be 01       	movw	r22, r28
 806:	c9 01       	movw	r24, r18
 808:	88 0f       	add	r24, r24
 80a:	89 2f       	mov	r24, r25
 80c:	88 1f       	adc	r24, r24
 80e:	99 0b       	sbc	r25, r25
}
 810:	df 91       	pop	r29
 812:	cf 91       	pop	r28
 814:	08 95       	ret

00000816 <get_direction>:


direction get_direction(){
	
	joy_position_t position = get_position();
 816:	0e 94 d5 03 	call	0x7aa	; 0x7aa <get_position>
	
	if (position.x_pos > 70)
 81a:	67 34       	cpi	r22, 0x47	; 71
 81c:	71 05       	cpc	r23, r1
 81e:	64 f4       	brge	.+24     	; 0x838 <get_direction+0x22>
		{

			return RIGHT;
		}
	else if (position.x_pos < -70)
 820:	6a 3b       	cpi	r22, 0xBA	; 186
 822:	4f ef       	ldi	r20, 0xFF	; 255
 824:	74 07       	cpc	r23, r20
 826:	54 f0       	brlt	.+20     	; 0x83c <get_direction+0x26>
		{

			return LEFT;
		}
	else if (position.y_pos > 70)
 828:	87 34       	cpi	r24, 0x47	; 71
 82a:	91 05       	cpc	r25, r1
 82c:	4c f4       	brge	.+18     	; 0x840 <get_direction+0x2a>
		{

			return UP;
		}
	else if (position.y_pos < -70)
 82e:	8a 3b       	cpi	r24, 0xBA	; 186
 830:	9f 4f       	sbci	r25, 0xFF	; 255
 832:	44 f4       	brge	.+16     	; 0x844 <get_direction+0x2e>
		{

			return DOWN;
 834:	83 e0       	ldi	r24, 0x03	; 3
 836:	08 95       	ret
	joy_position_t position = get_position();
	
	if (position.x_pos > 70)
		{

			return RIGHT;
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	08 95       	ret
		}
	else if (position.x_pos < -70)
		{

			return LEFT;
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	08 95       	ret
		}
	else if (position.y_pos > 70)
		{

			return UP;
 840:	82 e0       	ldi	r24, 0x02	; 2
 842:	08 95       	ret
			return DOWN;
		}
	else
		{

			return NEUTRAL;
 844:	84 e0       	ldi	r24, 0x04	; 4
		}
	
}
 846:	08 95       	ret

00000848 <update_next>:
	*last_dir = *curr_dir;
}


void update_next(direction dir){
	if (dir == DOWN) {
 848:	83 30       	cpi	r24, 0x03	; 3
 84a:	41 f5       	brne	.+80     	; 0x89c <update_next+0x54>
		if (next+1 <= current->number_children){
 84c:	80 91 40 02 	lds	r24, 0x0240
 850:	90 91 41 02 	lds	r25, 0x0241
 854:	ac 01       	movw	r20, r24
 856:	4f 5f       	subi	r20, 0xFF	; 255
 858:	5f 4f       	sbci	r21, 0xFF	; 255
 85a:	e0 91 3e 02 	lds	r30, 0x023E
 85e:	f0 91 3f 02 	lds	r31, 0x023F
 862:	27 85       	ldd	r18, Z+15	; 0x0f
 864:	30 89       	ldd	r19, Z+16	; 0x10
 866:	24 17       	cp	r18, r20
 868:	35 07       	cpc	r19, r21
 86a:	b4 f1       	brlt	.+108    	; 0x8d8 <update_next+0x90>
			oled_goto(next,0);
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	0e 94 c2 05 	call	0xb84	; 0xb84 <oled_goto>
			oled_print(" ");
 872:	86 e1       	ldi	r24, 0x16	; 22
 874:	92 e0       	ldi	r25, 0x02	; 2
 876:	0e 94 82 05 	call	0xb04	; 0xb04 <oled_print>
			next++;
 87a:	80 91 40 02 	lds	r24, 0x0240
 87e:	90 91 41 02 	lds	r25, 0x0241
 882:	01 96       	adiw	r24, 0x01	; 1
 884:	90 93 41 02 	sts	0x0241, r25
 888:	80 93 40 02 	sts	0x0240, r24
			oled_goto(next,0);
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	0e 94 c2 05 	call	0xb84	; 0xb84 <oled_goto>
			oled_print("-");
 892:	87 e3       	ldi	r24, 0x37	; 55
 894:	92 e0       	ldi	r25, 0x02	; 2
 896:	0e 94 82 05 	call	0xb04	; 0xb04 <oled_print>
 89a:	08 95       	ret
		}
		
	}
	else{
		if (next > 1){
 89c:	80 91 40 02 	lds	r24, 0x0240
 8a0:	90 91 41 02 	lds	r25, 0x0241
 8a4:	82 30       	cpi	r24, 0x02	; 2
 8a6:	91 05       	cpc	r25, r1
 8a8:	bc f0       	brlt	.+46     	; 0x8d8 <update_next+0x90>
			oled_goto(next,0);
 8aa:	60 e0       	ldi	r22, 0x00	; 0
 8ac:	0e 94 c2 05 	call	0xb84	; 0xb84 <oled_goto>
			oled_print(" ");
 8b0:	86 e1       	ldi	r24, 0x16	; 22
 8b2:	92 e0       	ldi	r25, 0x02	; 2
 8b4:	0e 94 82 05 	call	0xb04	; 0xb04 <oled_print>
			next--;
 8b8:	80 91 40 02 	lds	r24, 0x0240
 8bc:	90 91 41 02 	lds	r25, 0x0241
 8c0:	01 97       	sbiw	r24, 0x01	; 1
 8c2:	90 93 41 02 	sts	0x0241, r25
 8c6:	80 93 40 02 	sts	0x0240, r24
			oled_goto(next,0);
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	0e 94 c2 05 	call	0xb84	; 0xb84 <oled_goto>
			oled_print("-");
 8d0:	87 e3       	ldi	r24, 0x37	; 55
 8d2:	92 e0       	ldi	r25, 0x02	; 2
 8d4:	0e 94 82 05 	call	0xb04	; 0xb04 <oled_print>
 8d8:	08 95       	ret

000008da <menu_print>:
		}
	}
}

void menu_print(menu_t* object){
 8da:	ef 92       	push	r14
 8dc:	ff 92       	push	r15
 8de:	0f 93       	push	r16
 8e0:	1f 93       	push	r17
 8e2:	cf 93       	push	r28
 8e4:	df 93       	push	r29
 8e6:	7c 01       	movw	r14, r24
	next = 1;
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	90 93 41 02 	sts	0x0241, r25
 8f0:	80 93 40 02 	sts	0x0240, r24
	oled_clear_all();
 8f4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <oled_clear_all>
	oled_goto(0,0);
 8f8:	60 e0       	ldi	r22, 0x00	; 0
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	0e 94 c2 05 	call	0xb84	; 0xb84 <oled_goto>
	oled_print(object->name);
 900:	c7 01       	movw	r24, r14
 902:	0e 94 82 05 	call	0xb04	; 0xb04 <oled_print>
	oled_goto(next,0);
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	80 91 40 02 	lds	r24, 0x0240
 90c:	0e 94 c2 05 	call	0xb84	; 0xb84 <oled_goto>
	oled_print("-");
 910:	87 e3       	ldi	r24, 0x37	; 55
 912:	92 e0       	ldi	r25, 0x02	; 2
 914:	0e 94 82 05 	call	0xb04	; 0xb04 <oled_print>
	
	int i;
	for (i=1;i<object->number_children+1;i++)
 918:	f7 01       	movw	r30, r14
 91a:	87 85       	ldd	r24, Z+15	; 0x0f
 91c:	90 89       	ldd	r25, Z+16	; 0x10
 91e:	01 96       	adiw	r24, 0x01	; 1
 920:	02 97       	sbiw	r24, 0x02	; 2
 922:	c4 f0       	brlt	.+48     	; 0x954 <menu_print+0x7a>
 924:	87 01       	movw	r16, r14
 926:	0b 5e       	subi	r16, 0xEB	; 235
 928:	1f 4f       	sbci	r17, 0xFF	; 255
 92a:	c1 e0       	ldi	r28, 0x01	; 1
 92c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		oled_goto(i,8);
 92e:	68 e0       	ldi	r22, 0x08	; 8
 930:	8c 2f       	mov	r24, r28
 932:	0e 94 c2 05 	call	0xb84	; 0xb84 <oled_goto>
		oled_print((object->children[i-1])->name);
 936:	f8 01       	movw	r30, r16
 938:	81 91       	ld	r24, Z+
 93a:	91 91       	ld	r25, Z+
 93c:	8f 01       	movw	r16, r30
 93e:	0e 94 82 05 	call	0xb04	; 0xb04 <oled_print>
	oled_print(object->name);
	oled_goto(next,0);
	oled_print("-");
	
	int i;
	for (i=1;i<object->number_children+1;i++)
 942:	21 96       	adiw	r28, 0x01	; 1
 944:	f7 01       	movw	r30, r14
 946:	27 85       	ldd	r18, Z+15	; 0x0f
 948:	30 89       	ldd	r19, Z+16	; 0x10
 94a:	2f 5f       	subi	r18, 0xFF	; 255
 94c:	3f 4f       	sbci	r19, 0xFF	; 255
 94e:	c2 17       	cp	r28, r18
 950:	d3 07       	cpc	r29, r19
 952:	6c f3       	brlt	.-38     	; 0x92e <menu_print+0x54>
	{
		oled_goto(i,8);
		oled_print((object->children[i-1])->name);
	}
}
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	1f 91       	pop	r17
 95a:	0f 91       	pop	r16
 95c:	ff 90       	pop	r15
 95e:	ef 90       	pop	r14
 960:	08 95       	ret

00000962 <menu_handler>:
}



void menu_handler(direction* curr_dir, direction* last_dir)
{
 962:	0f 93       	push	r16
 964:	1f 93       	push	r17
 966:	cf 93       	push	r28
 968:	df 93       	push	r29
 96a:	8c 01       	movw	r16, r24
 96c:	eb 01       	movw	r28, r22
	
	*curr_dir = get_direction();
 96e:	0e 94 0b 04 	call	0x816	; 0x816 <get_direction>
 972:	f8 01       	movw	r30, r16
 974:	80 83       	st	Z, r24
	if (*curr_dir != *last_dir)
 976:	98 81       	ld	r25, Y
 978:	89 17       	cp	r24, r25
 97a:	09 f4       	brne	.+2      	; 0x97e <menu_handler+0x1c>
 97c:	64 c0       	rjmp	.+200    	; 0xa46 <menu_handler+0xe4>
	{
		switch (*curr_dir){
 97e:	81 30       	cpi	r24, 0x01	; 1
 980:	49 f0       	breq	.+18     	; 0x994 <menu_handler+0x32>
 982:	08 f4       	brcc	.+2      	; 0x986 <menu_handler+0x24>
 984:	4a c0       	rjmp	.+148    	; 0xa1a <menu_handler+0xb8>
 986:	82 30       	cpi	r24, 0x02	; 2
 988:	09 f4       	brne	.+2      	; 0x98c <menu_handler+0x2a>
 98a:	56 c0       	rjmp	.+172    	; 0xa38 <menu_handler+0xd6>
 98c:	83 30       	cpi	r24, 0x03	; 3
 98e:	09 f4       	brne	.+2      	; 0x992 <menu_handler+0x30>
 990:	57 c0       	rjmp	.+174    	; 0xa40 <menu_handler+0xde>
 992:	59 c0       	rjmp	.+178    	; 0xa46 <menu_handler+0xe4>
			case RIGHT:
			
			
				switch(current->children[next-1]->name[0]){
 994:	80 91 3e 02 	lds	r24, 0x023E
 998:	90 91 3f 02 	lds	r25, 0x023F
 99c:	e0 91 40 02 	lds	r30, 0x0240
 9a0:	f0 91 41 02 	lds	r31, 0x0241
 9a4:	31 97       	sbiw	r30, 0x01	; 1
 9a6:	ee 0f       	add	r30, r30
 9a8:	ff 1f       	adc	r31, r31
 9aa:	e8 0f       	add	r30, r24
 9ac:	f9 1f       	adc	r31, r25
 9ae:	05 88       	ldd	r0, Z+21	; 0x15
 9b0:	f6 89       	ldd	r31, Z+22	; 0x16
 9b2:	e0 2d       	mov	r30, r0
 9b4:	80 81       	ld	r24, Z
 9b6:	80 35       	cpi	r24, 0x50	; 80
 9b8:	31 f0       	breq	.+12     	; 0x9c6 <menu_handler+0x64>
 9ba:	83 35       	cpi	r24, 0x53	; 83
 9bc:	b9 f0       	breq	.+46     	; 0x9ec <menu_handler+0x8a>
 9be:	83 34       	cpi	r24, 0x43	; 67
 9c0:	09 f0       	breq	.+2      	; 0x9c4 <menu_handler+0x62>
 9c2:	41 c0       	rjmp	.+130    	; 0xa46 <menu_handler+0xe4>
 9c4:	1b c0       	rjmp	.+54     	; 0x9fc <menu_handler+0x9a>
					
					case 'P':
						current = current->children[next-1];
 9c6:	f0 93 3f 02 	sts	0x023F, r31
 9ca:	e0 93 3e 02 	sts	0x023E, r30
						play_game();
 9ce:	0e 94 ff 01 	call	0x3fe	; 0x3fe <play_game>
						// Handle highscore
						current = current->parent;
 9d2:	e0 91 3e 02 	lds	r30, 0x023E
 9d6:	f0 91 3f 02 	lds	r31, 0x023F
 9da:	83 89       	ldd	r24, Z+19	; 0x13
 9dc:	94 89       	ldd	r25, Z+20	; 0x14
 9de:	90 93 3f 02 	sts	0x023F, r25
 9e2:	80 93 3e 02 	sts	0x023E, r24
						menu_print(current);
 9e6:	0e 94 6d 04 	call	0x8da	; 0x8da <menu_print>
						
					break;
 9ea:	2d c0       	rjmp	.+90     	; 0xa46 <menu_handler+0xe4>
					case 'H':
						
					break;
					case 'S':
						current = current->children[next-1];
 9ec:	f0 93 3f 02 	sts	0x023F, r31
 9f0:	e0 93 3e 02 	sts	0x023E, r30
						menu_print(current);
 9f4:	cf 01       	movw	r24, r30
 9f6:	0e 94 6d 04 	call	0x8da	; 0x8da <menu_print>
					break;
 9fa:	25 c0       	rjmp	.+74     	; 0xa46 <menu_handler+0xe4>
					case 'D' :
					break;
					case 'C' :
						joy_calibrate();
 9fc:	0e 94 a2 03 	call	0x744	; 0x744 <joy_calibrate>
						current = current->parent;
 a00:	e0 91 3e 02 	lds	r30, 0x023E
 a04:	f0 91 3f 02 	lds	r31, 0x023F
 a08:	83 89       	ldd	r24, Z+19	; 0x13
 a0a:	94 89       	ldd	r25, Z+20	; 0x14
 a0c:	90 93 3f 02 	sts	0x023F, r25
 a10:	80 93 3e 02 	sts	0x023E, r24
						menu_print(current);
 a14:	0e 94 6d 04 	call	0x8da	; 0x8da <menu_print>
					break;
 a18:	16 c0       	rjmp	.+44     	; 0xa46 <menu_handler+0xe4>
				}
			
			
			break;
			case LEFT:
			if (current->parent != NULL){
 a1a:	e0 91 3e 02 	lds	r30, 0x023E
 a1e:	f0 91 3f 02 	lds	r31, 0x023F
 a22:	83 89       	ldd	r24, Z+19	; 0x13
 a24:	94 89       	ldd	r25, Z+20	; 0x14
 a26:	00 97       	sbiw	r24, 0x00	; 0
 a28:	71 f0       	breq	.+28     	; 0xa46 <menu_handler+0xe4>
				current = current->parent;
 a2a:	90 93 3f 02 	sts	0x023F, r25
 a2e:	80 93 3e 02 	sts	0x023E, r24
				menu_print(current);
 a32:	0e 94 6d 04 	call	0x8da	; 0x8da <menu_print>
 a36:	07 c0       	rjmp	.+14     	; 0xa46 <menu_handler+0xe4>
			}
			break;
			case UP:
			
			update_next(*curr_dir);
 a38:	82 e0       	ldi	r24, 0x02	; 2
 a3a:	0e 94 24 04 	call	0x848	; 0x848 <update_next>
			break;
 a3e:	03 c0       	rjmp	.+6      	; 0xa46 <menu_handler+0xe4>
			case DOWN:
			
			update_next(*curr_dir);
 a40:	83 e0       	ldi	r24, 0x03	; 3
 a42:	0e 94 24 04 	call	0x848	; 0x848 <update_next>
			break;
			default:
			break;
		}
	}
	*last_dir = *curr_dir;
 a46:	f8 01       	movw	r30, r16
 a48:	80 81       	ld	r24, Z
 a4a:	88 83       	st	Y, r24
}
 a4c:	df 91       	pop	r29
 a4e:	cf 91       	pop	r28
 a50:	1f 91       	pop	r17
 a52:	0f 91       	pop	r16
 a54:	08 95       	ret

00000a56 <menu_fsm>:
	menu_fsm();
	
}


void menu_fsm(){
 a56:	cf 93       	push	r28
 a58:	df 93       	push	r29
 a5a:	00 d0       	rcall	.+0      	; 0xa5c <menu_fsm+0x6>
 a5c:	cd b7       	in	r28, 0x3d	; 61
 a5e:	de b7       	in	r29, 0x3e	; 62
	direction curr_dir;
	direction last_dir = NEUTRAL;
 a60:	84 e0       	ldi	r24, 0x04	; 4
 a62:	8a 83       	std	Y+2, r24	; 0x02
	
	while(1)
	{
		// Menu
		menu_handler(&curr_dir, &last_dir);
 a64:	be 01       	movw	r22, r28
 a66:	6e 5f       	subi	r22, 0xFE	; 254
 a68:	7f 4f       	sbci	r23, 0xFF	; 255
 a6a:	ce 01       	movw	r24, r28
 a6c:	01 96       	adiw	r24, 0x01	; 1
 a6e:	0e 94 b1 04 	call	0x962	; 0x962 <menu_handler>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a72:	8f ef       	ldi	r24, 0xFF	; 255
 a74:	9f e2       	ldi	r25, 0x2F	; 47
 a76:	01 97       	sbiw	r24, 0x01	; 1
 a78:	f1 f7       	brne	.-4      	; 0xa76 <menu_fsm+0x20>
 a7a:	00 c0       	rjmp	.+0      	; 0xa7c <menu_fsm+0x26>
 a7c:	00 00       	nop
 a7e:	f2 cf       	rjmp	.-28     	; 0xa64 <menu_fsm+0xe>

00000a80 <menu_init>:
menu_t sub4 = {"Debug",0,NULL ,NULL,{}};
menu_t menu = {"Main Menu",4,NULL,NULL,{&sub1,&sub2,&sub3,&sub4}};

void menu_init(){

	sub3sub1.parent= &sub3;
 a80:	8c e6       	ldi	r24, 0x6C	; 108
 a82:	91 e0       	ldi	r25, 0x01	; 1
 a84:	90 93 e9 01 	sts	0x01E9, r25
 a88:	80 93 e8 01 	sts	0x01E8, r24
	sub1.parent = &menu;	
 a8c:	86 e2       	ldi	r24, 0x26	; 38
 a8e:	91 e0       	ldi	r25, 0x01	; 1
 a90:	90 93 c6 01 	sts	0x01C6, r25
 a94:	80 93 c5 01 	sts	0x01C5, r24
	sub2.parent = &menu;
 a98:	90 93 a3 01 	sts	0x01A3, r25
 a9c:	80 93 a2 01 	sts	0x01A2, r24
	sub3.parent = &menu;
 aa0:	90 93 80 01 	sts	0x0180, r25
 aa4:	80 93 7f 01 	sts	0x017F, r24
	
	current = &menu;
 aa8:	90 93 3f 02 	sts	0x023F, r25
 aac:	80 93 3e 02 	sts	0x023E, r24
	next = 1;
 ab0:	81 e0       	ldi	r24, 0x01	; 1
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	90 93 41 02 	sts	0x0241, r25
 ab8:	80 93 40 02 	sts	0x0240, r24
	
	menu_print(current);
 abc:	86 e2       	ldi	r24, 0x26	; 38
 abe:	91 e0       	ldi	r25, 0x01	; 1
 ac0:	0e 94 6d 04 	call	0x8da	; 0x8da <menu_print>
	menu_fsm();
 ac4:	0e 94 2b 05 	call	0xa56	; 0xa56 <menu_fsm>

00000ac8 <oled_print_char>:
 ac8:	cf 93       	push	r28
 aca:	df 93       	push	r29
 acc:	ec 01       	movw	r28, r24
 ace:	20 e0       	ldi	r18, 0x00	; 0
 ad0:	30 e0       	ldi	r19, 0x00	; 0
 ad2:	a0 e0       	ldi	r26, 0x00	; 0
 ad4:	b2 e1       	ldi	r27, 0x12	; 18
 ad6:	e8 81       	ld	r30, Y
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	b0 97       	sbiw	r30, 0x20	; 32
 adc:	ee 0f       	add	r30, r30
 ade:	ff 1f       	adc	r31, r31
 ae0:	ee 0f       	add	r30, r30
 ae2:	ff 1f       	adc	r31, r31
 ae4:	ee 0f       	add	r30, r30
 ae6:	ff 1f       	adc	r31, r31
 ae8:	e2 0f       	add	r30, r18
 aea:	f3 1f       	adc	r31, r19
 aec:	e0 59       	subi	r30, 0x90	; 144
 aee:	ff 4f       	sbci	r31, 0xFF	; 255
 af0:	e4 91       	lpm	r30, Z
 af2:	ec 93       	st	X, r30
 af4:	2f 5f       	subi	r18, 0xFF	; 255
 af6:	3f 4f       	sbci	r19, 0xFF	; 255
 af8:	28 30       	cpi	r18, 0x08	; 8
 afa:	31 05       	cpc	r19, r1
 afc:	61 f7       	brne	.-40     	; 0xad6 <oled_print_char+0xe>
 afe:	df 91       	pop	r29
 b00:	cf 91       	pop	r28
 b02:	08 95       	ret

00000b04 <oled_print>:
 b04:	cf 93       	push	r28
 b06:	df 93       	push	r29
 b08:	fc 01       	movw	r30, r24
 b0a:	20 81       	ld	r18, Z
 b0c:	22 23       	and	r18, r18
 b0e:	51 f0       	breq	.+20     	; 0xb24 <oled_print+0x20>
 b10:	ec 01       	movw	r28, r24
 b12:	21 96       	adiw	r28, 0x01	; 1
 b14:	0e 94 64 05 	call	0xac8	; 0xac8 <oled_print_char>
 b18:	ce 01       	movw	r24, r28
 b1a:	21 96       	adiw	r28, 0x01	; 1
 b1c:	fc 01       	movw	r30, r24
 b1e:	20 81       	ld	r18, Z
 b20:	21 11       	cpse	r18, r1
 b22:	f8 cf       	rjmp	.-16     	; 0xb14 <oled_print+0x10>
 b24:	df 91       	pop	r29
 b26:	cf 91       	pop	r28
 b28:	08 95       	ret

00000b2a <oled_init>:
 b2a:	e0 e0       	ldi	r30, 0x00	; 0
 b2c:	f0 e1       	ldi	r31, 0x10	; 16
 b2e:	8e ea       	ldi	r24, 0xAE	; 174
 b30:	80 83       	st	Z, r24
 b32:	81 ea       	ldi	r24, 0xA1	; 161
 b34:	80 83       	st	Z, r24
 b36:	8a ed       	ldi	r24, 0xDA	; 218
 b38:	80 83       	st	Z, r24
 b3a:	82 e1       	ldi	r24, 0x12	; 18
 b3c:	80 83       	st	Z, r24
 b3e:	88 ec       	ldi	r24, 0xC8	; 200
 b40:	80 83       	st	Z, r24
 b42:	88 ea       	ldi	r24, 0xA8	; 168
 b44:	80 83       	st	Z, r24
 b46:	8f e3       	ldi	r24, 0x3F	; 63
 b48:	80 83       	st	Z, r24
 b4a:	85 ed       	ldi	r24, 0xD5	; 213
 b4c:	80 83       	st	Z, r24
 b4e:	80 e8       	ldi	r24, 0x80	; 128
 b50:	80 83       	st	Z, r24
 b52:	81 e8       	ldi	r24, 0x81	; 129
 b54:	80 83       	st	Z, r24
 b56:	80 e5       	ldi	r24, 0x50	; 80
 b58:	80 83       	st	Z, r24
 b5a:	89 ed       	ldi	r24, 0xD9	; 217
 b5c:	80 83       	st	Z, r24
 b5e:	81 e2       	ldi	r24, 0x21	; 33
 b60:	80 83       	st	Z, r24
 b62:	80 e2       	ldi	r24, 0x20	; 32
 b64:	80 83       	st	Z, r24
 b66:	10 82       	st	Z, r1
 b68:	8b ed       	ldi	r24, 0xDB	; 219
 b6a:	80 83       	st	Z, r24
 b6c:	80 e3       	ldi	r24, 0x30	; 48
 b6e:	80 83       	st	Z, r24
 b70:	8d ea       	ldi	r24, 0xAD	; 173
 b72:	80 83       	st	Z, r24
 b74:	10 82       	st	Z, r1
 b76:	84 ea       	ldi	r24, 0xA4	; 164
 b78:	80 83       	st	Z, r24
 b7a:	86 ea       	ldi	r24, 0xA6	; 166
 b7c:	80 83       	st	Z, r24
 b7e:	8f ea       	ldi	r24, 0xAF	; 175
 b80:	80 83       	st	Z, r24
 b82:	08 95       	ret

00000b84 <oled_goto>:
 b84:	e0 e0       	ldi	r30, 0x00	; 0
 b86:	f0 e1       	ldi	r31, 0x10	; 16
 b88:	91 e2       	ldi	r25, 0x21	; 33
 b8a:	90 83       	st	Z, r25
 b8c:	60 83       	st	Z, r22
 b8e:	9f e7       	ldi	r25, 0x7F	; 127
 b90:	90 83       	st	Z, r25
 b92:	92 e2       	ldi	r25, 0x22	; 34
 b94:	90 83       	st	Z, r25
 b96:	80 83       	st	Z, r24
 b98:	87 e0       	ldi	r24, 0x07	; 7
 b9a:	80 83       	st	Z, r24
 b9c:	08 95       	ret

00000b9e <oled_clear_all>:
 b9e:	60 e0       	ldi	r22, 0x00	; 0
 ba0:	80 e0       	ldi	r24, 0x00	; 0
 ba2:	0e 94 c2 05 	call	0xb84	; 0xb84 <oled_goto>
 ba6:	80 e0       	ldi	r24, 0x00	; 0
 ba8:	94 e0       	ldi	r25, 0x04	; 4
 baa:	e0 e0       	ldi	r30, 0x00	; 0
 bac:	f2 e1       	ldi	r31, 0x12	; 18
 bae:	10 82       	st	Z, r1
 bb0:	01 97       	sbiw	r24, 0x01	; 1
 bb2:	00 97       	sbiw	r24, 0x00	; 0
 bb4:	e1 f7       	brne	.-8      	; 0xbae <oled_clear_all+0x10>
 bb6:	08 95       	ret

00000bb8 <spi_select>:
 bb8:	c4 98       	cbi	0x18, 4	; 24
 bba:	08 95       	ret

00000bbc <spi_deselect>:
 bbc:	c4 9a       	sbi	0x18, 4	; 24
 bbe:	08 95       	ret

00000bc0 <spi_transmit>:
 bc0:	8f b9       	out	0x0f, r24	; 15
 bc2:	77 9b       	sbis	0x0e, 7	; 14
 bc4:	fe cf       	rjmp	.-4      	; 0xbc2 <spi_transmit+0x2>
 bc6:	08 95       	ret

00000bc8 <spi_receive>:
 bc8:	80 e0       	ldi	r24, 0x00	; 0
 bca:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <spi_transmit>
 bce:	8f b1       	in	r24, 0x0f	; 15
 bd0:	08 95       	ret

00000bd2 <spi_init>:
 bd2:	87 b3       	in	r24, 0x17	; 23
 bd4:	80 6b       	ori	r24, 0xB0	; 176
 bd6:	87 bb       	out	0x17, r24	; 23
 bd8:	81 e5       	ldi	r24, 0x51	; 81
 bda:	8d b9       	out	0x0d, r24	; 13
 bdc:	08 95       	ret

00000bde <USART_transmit>:
	fdevopen(USART_transmit,USART_receive);
}

void USART_transmit(unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)))
 bde:	5d 9b       	sbis	0x0b, 5	; 11
 be0:	fe cf       	rjmp	.-4      	; 0xbde <USART_transmit>
		;
	UDR0 = data;
 be2:	8c b9       	out	0x0c, r24	; 12
 be4:	08 95       	ret

00000be6 <USART_receive>:
	
}

unsigned char USART_receive (void){
	
	while( !(UCSR0A & (1<<RXC0)))
 be6:	5f 9b       	sbis	0x0b, 7	; 11
 be8:	fe cf       	rjmp	.-4      	; 0xbe6 <USART_receive>
		;
	return UDR0;
 bea:	8c b1       	in	r24, 0x0c	; 12
	
 bec:	08 95       	ret

00000bee <USART_init>:
#include "USART_driver.h"

void USART_init(unsigned int ubrr){

	UBRR0H = (unsigned char)(ubrr>>8);
 bee:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;	
 bf0:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 bf2:	88 e1       	ldi	r24, 0x18	; 24
 bf4:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 bf6:	8e e8       	ldi	r24, 0x8E	; 142
 bf8:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(USART_transmit,USART_receive);
 bfa:	63 ef       	ldi	r22, 0xF3	; 243
 bfc:	75 e0       	ldi	r23, 0x05	; 5
 bfe:	8f ee       	ldi	r24, 0xEF	; 239
 c00:	95 e0       	ldi	r25, 0x05	; 5
 c02:	0e 94 2c 06 	call	0xc58	; 0xc58 <fdevopen>
 c06:	08 95       	ret

00000c08 <__divmodhi4>:
 c08:	97 fb       	bst	r25, 7
 c0a:	07 2e       	mov	r0, r23
 c0c:	16 f4       	brtc	.+4      	; 0xc12 <__divmodhi4+0xa>
 c0e:	00 94       	com	r0
 c10:	07 d0       	rcall	.+14     	; 0xc20 <__divmodhi4_neg1>
 c12:	77 fd       	sbrc	r23, 7
 c14:	09 d0       	rcall	.+18     	; 0xc28 <__divmodhi4_neg2>
 c16:	0e 94 18 06 	call	0xc30	; 0xc30 <__udivmodhi4>
 c1a:	07 fc       	sbrc	r0, 7
 c1c:	05 d0       	rcall	.+10     	; 0xc28 <__divmodhi4_neg2>
 c1e:	3e f4       	brtc	.+14     	; 0xc2e <__divmodhi4_exit>

00000c20 <__divmodhi4_neg1>:
 c20:	90 95       	com	r25
 c22:	81 95       	neg	r24
 c24:	9f 4f       	sbci	r25, 0xFF	; 255
 c26:	08 95       	ret

00000c28 <__divmodhi4_neg2>:
 c28:	70 95       	com	r23
 c2a:	61 95       	neg	r22
 c2c:	7f 4f       	sbci	r23, 0xFF	; 255

00000c2e <__divmodhi4_exit>:
 c2e:	08 95       	ret

00000c30 <__udivmodhi4>:
 c30:	aa 1b       	sub	r26, r26
 c32:	bb 1b       	sub	r27, r27
 c34:	51 e1       	ldi	r21, 0x11	; 17
 c36:	07 c0       	rjmp	.+14     	; 0xc46 <__udivmodhi4_ep>

00000c38 <__udivmodhi4_loop>:
 c38:	aa 1f       	adc	r26, r26
 c3a:	bb 1f       	adc	r27, r27
 c3c:	a6 17       	cp	r26, r22
 c3e:	b7 07       	cpc	r27, r23
 c40:	10 f0       	brcs	.+4      	; 0xc46 <__udivmodhi4_ep>
 c42:	a6 1b       	sub	r26, r22
 c44:	b7 0b       	sbc	r27, r23

00000c46 <__udivmodhi4_ep>:
 c46:	88 1f       	adc	r24, r24
 c48:	99 1f       	adc	r25, r25
 c4a:	5a 95       	dec	r21
 c4c:	a9 f7       	brne	.-22     	; 0xc38 <__udivmodhi4_loop>
 c4e:	80 95       	com	r24
 c50:	90 95       	com	r25
 c52:	bc 01       	movw	r22, r24
 c54:	cd 01       	movw	r24, r26
 c56:	08 95       	ret

00000c58 <fdevopen>:
 c58:	0f 93       	push	r16
 c5a:	1f 93       	push	r17
 c5c:	cf 93       	push	r28
 c5e:	df 93       	push	r29
 c60:	ec 01       	movw	r28, r24
 c62:	8b 01       	movw	r16, r22
 c64:	00 97       	sbiw	r24, 0x00	; 0
 c66:	31 f4       	brne	.+12     	; 0xc74 <fdevopen+0x1c>
 c68:	61 15       	cp	r22, r1
 c6a:	71 05       	cpc	r23, r1
 c6c:	19 f4       	brne	.+6      	; 0xc74 <fdevopen+0x1c>
 c6e:	80 e0       	ldi	r24, 0x00	; 0
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	38 c0       	rjmp	.+112    	; 0xce4 <fdevopen+0x8c>
 c74:	6e e0       	ldi	r22, 0x0E	; 14
 c76:	70 e0       	ldi	r23, 0x00	; 0
 c78:	81 e0       	ldi	r24, 0x01	; 1
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	0e 94 a4 06 	call	0xd48	; 0xd48 <calloc>
 c80:	fc 01       	movw	r30, r24
 c82:	00 97       	sbiw	r24, 0x00	; 0
 c84:	a1 f3       	breq	.-24     	; 0xc6e <fdevopen+0x16>
 c86:	80 e8       	ldi	r24, 0x80	; 128
 c88:	83 83       	std	Z+3, r24	; 0x03
 c8a:	01 15       	cp	r16, r1
 c8c:	11 05       	cpc	r17, r1
 c8e:	71 f0       	breq	.+28     	; 0xcac <fdevopen+0x54>
 c90:	13 87       	std	Z+11, r17	; 0x0b
 c92:	02 87       	std	Z+10, r16	; 0x0a
 c94:	81 e8       	ldi	r24, 0x81	; 129
 c96:	83 83       	std	Z+3, r24	; 0x03
 c98:	80 91 42 02 	lds	r24, 0x0242
 c9c:	90 91 43 02 	lds	r25, 0x0243
 ca0:	89 2b       	or	r24, r25
 ca2:	21 f4       	brne	.+8      	; 0xcac <fdevopen+0x54>
 ca4:	f0 93 43 02 	sts	0x0243, r31
 ca8:	e0 93 42 02 	sts	0x0242, r30
 cac:	20 97       	sbiw	r28, 0x00	; 0
 cae:	c9 f0       	breq	.+50     	; 0xce2 <fdevopen+0x8a>
 cb0:	d1 87       	std	Z+9, r29	; 0x09
 cb2:	c0 87       	std	Z+8, r28	; 0x08
 cb4:	83 81       	ldd	r24, Z+3	; 0x03
 cb6:	82 60       	ori	r24, 0x02	; 2
 cb8:	83 83       	std	Z+3, r24	; 0x03
 cba:	80 91 44 02 	lds	r24, 0x0244
 cbe:	90 91 45 02 	lds	r25, 0x0245
 cc2:	89 2b       	or	r24, r25
 cc4:	71 f4       	brne	.+28     	; 0xce2 <fdevopen+0x8a>
 cc6:	f0 93 45 02 	sts	0x0245, r31
 cca:	e0 93 44 02 	sts	0x0244, r30
 cce:	80 91 46 02 	lds	r24, 0x0246
 cd2:	90 91 47 02 	lds	r25, 0x0247
 cd6:	89 2b       	or	r24, r25
 cd8:	21 f4       	brne	.+8      	; 0xce2 <fdevopen+0x8a>
 cda:	f0 93 47 02 	sts	0x0247, r31
 cde:	e0 93 46 02 	sts	0x0246, r30
 ce2:	cf 01       	movw	r24, r30
 ce4:	df 91       	pop	r29
 ce6:	cf 91       	pop	r28
 ce8:	1f 91       	pop	r17
 cea:	0f 91       	pop	r16
 cec:	08 95       	ret

00000cee <puts>:
 cee:	0f 93       	push	r16
 cf0:	1f 93       	push	r17
 cf2:	cf 93       	push	r28
 cf4:	df 93       	push	r29
 cf6:	e0 91 44 02 	lds	r30, 0x0244
 cfa:	f0 91 45 02 	lds	r31, 0x0245
 cfe:	23 81       	ldd	r18, Z+3	; 0x03
 d00:	21 ff       	sbrs	r18, 1
 d02:	1b c0       	rjmp	.+54     	; 0xd3a <puts+0x4c>
 d04:	ec 01       	movw	r28, r24
 d06:	00 e0       	ldi	r16, 0x00	; 0
 d08:	10 e0       	ldi	r17, 0x00	; 0
 d0a:	89 91       	ld	r24, Y+
 d0c:	60 91 44 02 	lds	r22, 0x0244
 d10:	70 91 45 02 	lds	r23, 0x0245
 d14:	db 01       	movw	r26, r22
 d16:	18 96       	adiw	r26, 0x08	; 8
 d18:	ed 91       	ld	r30, X+
 d1a:	fc 91       	ld	r31, X
 d1c:	19 97       	sbiw	r26, 0x09	; 9
 d1e:	88 23       	and	r24, r24
 d20:	31 f0       	breq	.+12     	; 0xd2e <puts+0x40>
 d22:	09 95       	icall
 d24:	89 2b       	or	r24, r25
 d26:	89 f3       	breq	.-30     	; 0xd0a <puts+0x1c>
 d28:	0f ef       	ldi	r16, 0xFF	; 255
 d2a:	1f ef       	ldi	r17, 0xFF	; 255
 d2c:	ee cf       	rjmp	.-36     	; 0xd0a <puts+0x1c>
 d2e:	8a e0       	ldi	r24, 0x0A	; 10
 d30:	09 95       	icall
 d32:	89 2b       	or	r24, r25
 d34:	11 f4       	brne	.+4      	; 0xd3a <puts+0x4c>
 d36:	c8 01       	movw	r24, r16
 d38:	02 c0       	rjmp	.+4      	; 0xd3e <puts+0x50>
 d3a:	8f ef       	ldi	r24, 0xFF	; 255
 d3c:	9f ef       	ldi	r25, 0xFF	; 255
 d3e:	df 91       	pop	r29
 d40:	cf 91       	pop	r28
 d42:	1f 91       	pop	r17
 d44:	0f 91       	pop	r16
 d46:	08 95       	ret

00000d48 <calloc>:
 d48:	0f 93       	push	r16
 d4a:	1f 93       	push	r17
 d4c:	cf 93       	push	r28
 d4e:	df 93       	push	r29
 d50:	86 9f       	mul	r24, r22
 d52:	80 01       	movw	r16, r0
 d54:	87 9f       	mul	r24, r23
 d56:	10 0d       	add	r17, r0
 d58:	96 9f       	mul	r25, r22
 d5a:	10 0d       	add	r17, r0
 d5c:	11 24       	eor	r1, r1
 d5e:	c8 01       	movw	r24, r16
 d60:	0e 94 c0 06 	call	0xd80	; 0xd80 <malloc>
 d64:	ec 01       	movw	r28, r24
 d66:	00 97       	sbiw	r24, 0x00	; 0
 d68:	29 f0       	breq	.+10     	; 0xd74 <calloc+0x2c>
 d6a:	a8 01       	movw	r20, r16
 d6c:	60 e0       	ldi	r22, 0x00	; 0
 d6e:	70 e0       	ldi	r23, 0x00	; 0
 d70:	0e 94 e7 07 	call	0xfce	; 0xfce <memset>
 d74:	ce 01       	movw	r24, r28
 d76:	df 91       	pop	r29
 d78:	cf 91       	pop	r28
 d7a:	1f 91       	pop	r17
 d7c:	0f 91       	pop	r16
 d7e:	08 95       	ret

00000d80 <malloc>:
 d80:	cf 93       	push	r28
 d82:	df 93       	push	r29
 d84:	82 30       	cpi	r24, 0x02	; 2
 d86:	91 05       	cpc	r25, r1
 d88:	10 f4       	brcc	.+4      	; 0xd8e <malloc+0xe>
 d8a:	82 e0       	ldi	r24, 0x02	; 2
 d8c:	90 e0       	ldi	r25, 0x00	; 0
 d8e:	e0 91 4a 02 	lds	r30, 0x024A
 d92:	f0 91 4b 02 	lds	r31, 0x024B
 d96:	20 e0       	ldi	r18, 0x00	; 0
 d98:	30 e0       	ldi	r19, 0x00	; 0
 d9a:	a0 e0       	ldi	r26, 0x00	; 0
 d9c:	b0 e0       	ldi	r27, 0x00	; 0
 d9e:	30 97       	sbiw	r30, 0x00	; 0
 da0:	39 f1       	breq	.+78     	; 0xdf0 <malloc+0x70>
 da2:	40 81       	ld	r20, Z
 da4:	51 81       	ldd	r21, Z+1	; 0x01
 da6:	48 17       	cp	r20, r24
 da8:	59 07       	cpc	r21, r25
 daa:	b8 f0       	brcs	.+46     	; 0xdda <malloc+0x5a>
 dac:	48 17       	cp	r20, r24
 dae:	59 07       	cpc	r21, r25
 db0:	71 f4       	brne	.+28     	; 0xdce <malloc+0x4e>
 db2:	82 81       	ldd	r24, Z+2	; 0x02
 db4:	93 81       	ldd	r25, Z+3	; 0x03
 db6:	10 97       	sbiw	r26, 0x00	; 0
 db8:	29 f0       	breq	.+10     	; 0xdc4 <malloc+0x44>
 dba:	13 96       	adiw	r26, 0x03	; 3
 dbc:	9c 93       	st	X, r25
 dbe:	8e 93       	st	-X, r24
 dc0:	12 97       	sbiw	r26, 0x02	; 2
 dc2:	2c c0       	rjmp	.+88     	; 0xe1c <malloc+0x9c>
 dc4:	90 93 4b 02 	sts	0x024B, r25
 dc8:	80 93 4a 02 	sts	0x024A, r24
 dcc:	27 c0       	rjmp	.+78     	; 0xe1c <malloc+0x9c>
 dce:	21 15       	cp	r18, r1
 dd0:	31 05       	cpc	r19, r1
 dd2:	31 f0       	breq	.+12     	; 0xde0 <malloc+0x60>
 dd4:	42 17       	cp	r20, r18
 dd6:	53 07       	cpc	r21, r19
 dd8:	18 f0       	brcs	.+6      	; 0xde0 <malloc+0x60>
 dda:	a9 01       	movw	r20, r18
 ddc:	db 01       	movw	r26, r22
 dde:	01 c0       	rjmp	.+2      	; 0xde2 <malloc+0x62>
 de0:	ef 01       	movw	r28, r30
 de2:	9a 01       	movw	r18, r20
 de4:	bd 01       	movw	r22, r26
 de6:	df 01       	movw	r26, r30
 de8:	02 80       	ldd	r0, Z+2	; 0x02
 dea:	f3 81       	ldd	r31, Z+3	; 0x03
 dec:	e0 2d       	mov	r30, r0
 dee:	d7 cf       	rjmp	.-82     	; 0xd9e <malloc+0x1e>
 df0:	21 15       	cp	r18, r1
 df2:	31 05       	cpc	r19, r1
 df4:	f9 f0       	breq	.+62     	; 0xe34 <malloc+0xb4>
 df6:	28 1b       	sub	r18, r24
 df8:	39 0b       	sbc	r19, r25
 dfa:	24 30       	cpi	r18, 0x04	; 4
 dfc:	31 05       	cpc	r19, r1
 dfe:	80 f4       	brcc	.+32     	; 0xe20 <malloc+0xa0>
 e00:	8a 81       	ldd	r24, Y+2	; 0x02
 e02:	9b 81       	ldd	r25, Y+3	; 0x03
 e04:	61 15       	cp	r22, r1
 e06:	71 05       	cpc	r23, r1
 e08:	21 f0       	breq	.+8      	; 0xe12 <malloc+0x92>
 e0a:	fb 01       	movw	r30, r22
 e0c:	93 83       	std	Z+3, r25	; 0x03
 e0e:	82 83       	std	Z+2, r24	; 0x02
 e10:	04 c0       	rjmp	.+8      	; 0xe1a <malloc+0x9a>
 e12:	90 93 4b 02 	sts	0x024B, r25
 e16:	80 93 4a 02 	sts	0x024A, r24
 e1a:	fe 01       	movw	r30, r28
 e1c:	32 96       	adiw	r30, 0x02	; 2
 e1e:	44 c0       	rjmp	.+136    	; 0xea8 <malloc+0x128>
 e20:	fe 01       	movw	r30, r28
 e22:	e2 0f       	add	r30, r18
 e24:	f3 1f       	adc	r31, r19
 e26:	81 93       	st	Z+, r24
 e28:	91 93       	st	Z+, r25
 e2a:	22 50       	subi	r18, 0x02	; 2
 e2c:	31 09       	sbc	r19, r1
 e2e:	39 83       	std	Y+1, r19	; 0x01
 e30:	28 83       	st	Y, r18
 e32:	3a c0       	rjmp	.+116    	; 0xea8 <malloc+0x128>
 e34:	20 91 48 02 	lds	r18, 0x0248
 e38:	30 91 49 02 	lds	r19, 0x0249
 e3c:	23 2b       	or	r18, r19
 e3e:	41 f4       	brne	.+16     	; 0xe50 <malloc+0xd0>
 e40:	20 91 02 01 	lds	r18, 0x0102
 e44:	30 91 03 01 	lds	r19, 0x0103
 e48:	30 93 49 02 	sts	0x0249, r19
 e4c:	20 93 48 02 	sts	0x0248, r18
 e50:	20 91 00 01 	lds	r18, 0x0100
 e54:	30 91 01 01 	lds	r19, 0x0101
 e58:	21 15       	cp	r18, r1
 e5a:	31 05       	cpc	r19, r1
 e5c:	41 f4       	brne	.+16     	; 0xe6e <malloc+0xee>
 e5e:	2d b7       	in	r18, 0x3d	; 61
 e60:	3e b7       	in	r19, 0x3e	; 62
 e62:	40 91 04 01 	lds	r20, 0x0104
 e66:	50 91 05 01 	lds	r21, 0x0105
 e6a:	24 1b       	sub	r18, r20
 e6c:	35 0b       	sbc	r19, r21
 e6e:	e0 91 48 02 	lds	r30, 0x0248
 e72:	f0 91 49 02 	lds	r31, 0x0249
 e76:	e2 17       	cp	r30, r18
 e78:	f3 07       	cpc	r31, r19
 e7a:	a0 f4       	brcc	.+40     	; 0xea4 <malloc+0x124>
 e7c:	2e 1b       	sub	r18, r30
 e7e:	3f 0b       	sbc	r19, r31
 e80:	28 17       	cp	r18, r24
 e82:	39 07       	cpc	r19, r25
 e84:	78 f0       	brcs	.+30     	; 0xea4 <malloc+0x124>
 e86:	ac 01       	movw	r20, r24
 e88:	4e 5f       	subi	r20, 0xFE	; 254
 e8a:	5f 4f       	sbci	r21, 0xFF	; 255
 e8c:	24 17       	cp	r18, r20
 e8e:	35 07       	cpc	r19, r21
 e90:	48 f0       	brcs	.+18     	; 0xea4 <malloc+0x124>
 e92:	4e 0f       	add	r20, r30
 e94:	5f 1f       	adc	r21, r31
 e96:	50 93 49 02 	sts	0x0249, r21
 e9a:	40 93 48 02 	sts	0x0248, r20
 e9e:	81 93       	st	Z+, r24
 ea0:	91 93       	st	Z+, r25
 ea2:	02 c0       	rjmp	.+4      	; 0xea8 <malloc+0x128>
 ea4:	e0 e0       	ldi	r30, 0x00	; 0
 ea6:	f0 e0       	ldi	r31, 0x00	; 0
 ea8:	cf 01       	movw	r24, r30
 eaa:	df 91       	pop	r29
 eac:	cf 91       	pop	r28
 eae:	08 95       	ret

00000eb0 <free>:
 eb0:	cf 93       	push	r28
 eb2:	df 93       	push	r29
 eb4:	00 97       	sbiw	r24, 0x00	; 0
 eb6:	09 f4       	brne	.+2      	; 0xeba <free+0xa>
 eb8:	87 c0       	rjmp	.+270    	; 0xfc8 <free+0x118>
 eba:	fc 01       	movw	r30, r24
 ebc:	32 97       	sbiw	r30, 0x02	; 2
 ebe:	13 82       	std	Z+3, r1	; 0x03
 ec0:	12 82       	std	Z+2, r1	; 0x02
 ec2:	c0 91 4a 02 	lds	r28, 0x024A
 ec6:	d0 91 4b 02 	lds	r29, 0x024B
 eca:	20 97       	sbiw	r28, 0x00	; 0
 ecc:	81 f4       	brne	.+32     	; 0xeee <free+0x3e>
 ece:	20 81       	ld	r18, Z
 ed0:	31 81       	ldd	r19, Z+1	; 0x01
 ed2:	28 0f       	add	r18, r24
 ed4:	39 1f       	adc	r19, r25
 ed6:	80 91 48 02 	lds	r24, 0x0248
 eda:	90 91 49 02 	lds	r25, 0x0249
 ede:	82 17       	cp	r24, r18
 ee0:	93 07       	cpc	r25, r19
 ee2:	79 f5       	brne	.+94     	; 0xf42 <free+0x92>
 ee4:	f0 93 49 02 	sts	0x0249, r31
 ee8:	e0 93 48 02 	sts	0x0248, r30
 eec:	6d c0       	rjmp	.+218    	; 0xfc8 <free+0x118>
 eee:	de 01       	movw	r26, r28
 ef0:	20 e0       	ldi	r18, 0x00	; 0
 ef2:	30 e0       	ldi	r19, 0x00	; 0
 ef4:	ae 17       	cp	r26, r30
 ef6:	bf 07       	cpc	r27, r31
 ef8:	50 f4       	brcc	.+20     	; 0xf0e <free+0x5e>
 efa:	12 96       	adiw	r26, 0x02	; 2
 efc:	4d 91       	ld	r20, X+
 efe:	5c 91       	ld	r21, X
 f00:	13 97       	sbiw	r26, 0x03	; 3
 f02:	9d 01       	movw	r18, r26
 f04:	41 15       	cp	r20, r1
 f06:	51 05       	cpc	r21, r1
 f08:	09 f1       	breq	.+66     	; 0xf4c <free+0x9c>
 f0a:	da 01       	movw	r26, r20
 f0c:	f3 cf       	rjmp	.-26     	; 0xef4 <free+0x44>
 f0e:	b3 83       	std	Z+3, r27	; 0x03
 f10:	a2 83       	std	Z+2, r26	; 0x02
 f12:	40 81       	ld	r20, Z
 f14:	51 81       	ldd	r21, Z+1	; 0x01
 f16:	84 0f       	add	r24, r20
 f18:	95 1f       	adc	r25, r21
 f1a:	8a 17       	cp	r24, r26
 f1c:	9b 07       	cpc	r25, r27
 f1e:	71 f4       	brne	.+28     	; 0xf3c <free+0x8c>
 f20:	8d 91       	ld	r24, X+
 f22:	9c 91       	ld	r25, X
 f24:	11 97       	sbiw	r26, 0x01	; 1
 f26:	84 0f       	add	r24, r20
 f28:	95 1f       	adc	r25, r21
 f2a:	02 96       	adiw	r24, 0x02	; 2
 f2c:	91 83       	std	Z+1, r25	; 0x01
 f2e:	80 83       	st	Z, r24
 f30:	12 96       	adiw	r26, 0x02	; 2
 f32:	8d 91       	ld	r24, X+
 f34:	9c 91       	ld	r25, X
 f36:	13 97       	sbiw	r26, 0x03	; 3
 f38:	93 83       	std	Z+3, r25	; 0x03
 f3a:	82 83       	std	Z+2, r24	; 0x02
 f3c:	21 15       	cp	r18, r1
 f3e:	31 05       	cpc	r19, r1
 f40:	29 f4       	brne	.+10     	; 0xf4c <free+0x9c>
 f42:	f0 93 4b 02 	sts	0x024B, r31
 f46:	e0 93 4a 02 	sts	0x024A, r30
 f4a:	3e c0       	rjmp	.+124    	; 0xfc8 <free+0x118>
 f4c:	d9 01       	movw	r26, r18
 f4e:	13 96       	adiw	r26, 0x03	; 3
 f50:	fc 93       	st	X, r31
 f52:	ee 93       	st	-X, r30
 f54:	12 97       	sbiw	r26, 0x02	; 2
 f56:	4d 91       	ld	r20, X+
 f58:	5d 91       	ld	r21, X+
 f5a:	a4 0f       	add	r26, r20
 f5c:	b5 1f       	adc	r27, r21
 f5e:	ea 17       	cp	r30, r26
 f60:	fb 07       	cpc	r31, r27
 f62:	79 f4       	brne	.+30     	; 0xf82 <free+0xd2>
 f64:	80 81       	ld	r24, Z
 f66:	91 81       	ldd	r25, Z+1	; 0x01
 f68:	84 0f       	add	r24, r20
 f6a:	95 1f       	adc	r25, r21
 f6c:	02 96       	adiw	r24, 0x02	; 2
 f6e:	d9 01       	movw	r26, r18
 f70:	11 96       	adiw	r26, 0x01	; 1
 f72:	9c 93       	st	X, r25
 f74:	8e 93       	st	-X, r24
 f76:	82 81       	ldd	r24, Z+2	; 0x02
 f78:	93 81       	ldd	r25, Z+3	; 0x03
 f7a:	13 96       	adiw	r26, 0x03	; 3
 f7c:	9c 93       	st	X, r25
 f7e:	8e 93       	st	-X, r24
 f80:	12 97       	sbiw	r26, 0x02	; 2
 f82:	e0 e0       	ldi	r30, 0x00	; 0
 f84:	f0 e0       	ldi	r31, 0x00	; 0
 f86:	8a 81       	ldd	r24, Y+2	; 0x02
 f88:	9b 81       	ldd	r25, Y+3	; 0x03
 f8a:	00 97       	sbiw	r24, 0x00	; 0
 f8c:	19 f0       	breq	.+6      	; 0xf94 <free+0xe4>
 f8e:	fe 01       	movw	r30, r28
 f90:	ec 01       	movw	r28, r24
 f92:	f9 cf       	rjmp	.-14     	; 0xf86 <free+0xd6>
 f94:	ce 01       	movw	r24, r28
 f96:	02 96       	adiw	r24, 0x02	; 2
 f98:	28 81       	ld	r18, Y
 f9a:	39 81       	ldd	r19, Y+1	; 0x01
 f9c:	82 0f       	add	r24, r18
 f9e:	93 1f       	adc	r25, r19
 fa0:	20 91 48 02 	lds	r18, 0x0248
 fa4:	30 91 49 02 	lds	r19, 0x0249
 fa8:	28 17       	cp	r18, r24
 faa:	39 07       	cpc	r19, r25
 fac:	69 f4       	brne	.+26     	; 0xfc8 <free+0x118>
 fae:	30 97       	sbiw	r30, 0x00	; 0
 fb0:	29 f4       	brne	.+10     	; 0xfbc <free+0x10c>
 fb2:	10 92 4b 02 	sts	0x024B, r1
 fb6:	10 92 4a 02 	sts	0x024A, r1
 fba:	02 c0       	rjmp	.+4      	; 0xfc0 <free+0x110>
 fbc:	13 82       	std	Z+3, r1	; 0x03
 fbe:	12 82       	std	Z+2, r1	; 0x02
 fc0:	d0 93 49 02 	sts	0x0249, r29
 fc4:	c0 93 48 02 	sts	0x0248, r28
 fc8:	df 91       	pop	r29
 fca:	cf 91       	pop	r28
 fcc:	08 95       	ret

00000fce <memset>:
 fce:	dc 01       	movw	r26, r24
 fd0:	01 c0       	rjmp	.+2      	; 0xfd4 <memset+0x6>
 fd2:	6d 93       	st	X+, r22
 fd4:	41 50       	subi	r20, 0x01	; 1
 fd6:	50 40       	sbci	r21, 0x00	; 0
 fd8:	e0 f7       	brcc	.-8      	; 0xfd2 <memset+0x4>
 fda:	08 95       	ret

00000fdc <_exit>:
 fdc:	f8 94       	cli

00000fde <__stop_program>:
 fde:	ff cf       	rjmp	.-2      	; 0xfde <__stop_program>
