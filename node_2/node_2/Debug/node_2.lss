
node_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800200  0000160a  0000169e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000160a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800248  00800248  000016e6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016e6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000218  00000000  00000000  00001742  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000173f  00000000  00000000  0000195a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bea  00000000  00000000  00003099  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c39  00000000  00000000  00003c83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000484  00000000  00000000  000058bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000a22b  00000000  00000000  00005d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c6d  00000000  00000000  0000ff6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  00010bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004383  00000000  00000000  00010d78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e0       	ldi	r30, 0x0A	; 10
      fc:	f6 e1       	ldi	r31, 0x16	; 22
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 34       	cpi	r26, 0x48	; 72
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a8 e4       	ldi	r26, 0x48	; 72
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 36       	cpi	r26, 0x64	; 100
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	6f d0       	rcall	.+222    	; 0x1fe <main>
     120:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <init_solenoid>:
	}
}

void init_solenoid(void)
{
	DDRC |= (1 << PC0);
     126:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= (1 << PC0);
     128:	40 9a       	sbi	0x08, 0	; 8
     12a:	08 95       	ret

0000012c <solenoid_shoot>:
}

void solenoid_shoot(void)
{
	PORTC &= ~(1 << PC0);
     12c:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12e:	2f e7       	ldi	r18, 0x7F	; 127
     130:	89 ea       	ldi	r24, 0xA9	; 169
     132:	93 e0       	ldi	r25, 0x03	; 3
     134:	21 50       	subi	r18, 0x01	; 1
     136:	80 40       	sbci	r24, 0x00	; 0
     138:	90 40       	sbci	r25, 0x00	; 0
     13a:	e1 f7       	brne	.-8      	; 0x134 <solenoid_shoot+0x8>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <solenoid_shoot+0x12>
     13e:	00 00       	nop
	_delay_ms(75);
	PORTC |= (1 << PC0);
     140:	40 9a       	sbi	0x08, 0	; 8
     142:	08 95       	ret

00000144 <handle_message>:
	}
}

 
void handle_message(can_message_t* message)
{
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	ec 01       	movw	r28, r24
	static int TOUCH_JOY_MODE = 0;
	switch (message->id)
     14a:	88 81       	ld	r24, Y
     14c:	80 37       	cpi	r24, 0x70	; 112
     14e:	71 f0       	breq	.+28     	; 0x16c <handle_message+0x28>
     150:	34 f4       	brge	.+12     	; 0x15e <handle_message+0x1a>
     152:	8a 36       	cpi	r24, 0x6A	; 106
     154:	71 f0       	breq	.+28     	; 0x172 <handle_message+0x2e>
     156:	8d 36       	cpi	r24, 0x6D	; 109
     158:	09 f4       	brne	.+2      	; 0x15c <handle_message+0x18>
     15a:	42 c0       	rjmp	.+132    	; 0x1e0 <handle_message+0x9c>
     15c:	4b c0       	rjmp	.+150    	; 0x1f4 <handle_message+0xb0>
     15e:	83 37       	cpi	r24, 0x73	; 115
     160:	09 f4       	brne	.+2      	; 0x164 <handle_message+0x20>
     162:	38 c0       	rjmp	.+112    	; 0x1d4 <handle_message+0x90>
     164:	84 37       	cpi	r24, 0x74	; 116
     166:	09 f4       	brne	.+2      	; 0x16a <handle_message+0x26>
     168:	37 c0       	rjmp	.+110    	; 0x1d8 <handle_message+0x94>
     16a:	44 c0       	rjmp	.+136    	; 0x1f4 <handle_message+0xb0>
	{
		case 'p' :				// Print
			can_print(message);
     16c:	ce 01       	movw	r24, r28
     16e:	59 d2       	rcall	.+1202   	; 0x622 <can_print>
			break;
     170:	43 c0       	rjmp	.+134    	; 0x1f8 <handle_message+0xb4>
		case 'j' :
			if(TOUCH_JOY_MODE == 0){
     172:	80 91 48 02 	lds	r24, 0x0248
     176:	90 91 49 02 	lds	r25, 0x0249
     17a:	89 2b       	or	r24, r25
     17c:	a9 f4       	brne	.+42     	; 0x1a8 <handle_message+0x64>
				servo_write( message->data[1] * 5.0 + 1450 );	//	Y - value
     17e:	6b 81       	ldd	r22, Y+3	; 0x03
     180:	77 27       	eor	r23, r23
     182:	67 fd       	sbrc	r22, 7
     184:	70 95       	com	r23
     186:	87 2f       	mov	r24, r23
     188:	97 2f       	mov	r25, r23
     18a:	96 d4       	rcall	.+2348   	; 0xab8 <__floatsisf>
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	40 ea       	ldi	r20, 0xA0	; 160
     192:	50 e4       	ldi	r21, 0x40	; 64
     194:	45 d5       	rcall	.+2698   	; 0xc20 <__mulsf3>
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e4       	ldi	r19, 0x40	; 64
     19a:	45 eb       	ldi	r20, 0xB5	; 181
     19c:	54 e4       	ldi	r21, 0x44	; 68
     19e:	89 d3       	rcall	.+1810   	; 0x8b2 <__addsf3>
     1a0:	26 d1       	rcall	.+588    	; 0x3ee <servo_write>
				motor_drive( message->data[0] );
     1a2:	8a 81       	ldd	r24, Y+2	; 0x02
     1a4:	40 d0       	rcall	.+128    	; 0x226 <motor_drive>
     1a6:	28 c0       	rjmp	.+80     	; 0x1f8 <handle_message+0xb4>
			}
			else
			{
				servo_write( - message->data[0] * 5.0 + 1450 );	//	X - value
     1a8:	6a 81       	ldd	r22, Y+2	; 0x02
     1aa:	77 27       	eor	r23, r23
     1ac:	61 95       	neg	r22
     1ae:	0c f4       	brge	.+2      	; 0x1b2 <handle_message+0x6e>
     1b0:	70 95       	com	r23
     1b2:	88 27       	eor	r24, r24
     1b4:	77 fd       	sbrc	r23, 7
     1b6:	80 95       	com	r24
     1b8:	98 2f       	mov	r25, r24
     1ba:	7e d4       	rcall	.+2300   	; 0xab8 <__floatsisf>
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	40 ea       	ldi	r20, 0xA0	; 160
     1c2:	50 e4       	ldi	r21, 0x40	; 64
     1c4:	2d d5       	rcall	.+2650   	; 0xc20 <__mulsf3>
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e4       	ldi	r19, 0x40	; 64
     1ca:	45 eb       	ldi	r20, 0xB5	; 181
     1cc:	54 e4       	ldi	r21, 0x44	; 68
     1ce:	71 d3       	rcall	.+1762   	; 0x8b2 <__addsf3>
     1d0:	0e d1       	rcall	.+540    	; 0x3ee <servo_write>
     1d2:	12 c0       	rjmp	.+36     	; 0x1f8 <handle_message+0xb4>
			}
			break;
		case 's' :
			solenoid_shoot();
     1d4:	ab df       	rcall	.-170    	; 0x12c <solenoid_shoot>
			break;
     1d6:	10 c0       	rjmp	.+32     	; 0x1f8 <handle_message+0xb4>
		case 't' :	
			position_controller( -message->data[0] );				//	X - value
     1d8:	8a 81       	ldd	r24, Y+2	; 0x02
     1da:	81 95       	neg	r24
     1dc:	a3 d0       	rcall	.+326    	; 0x324 <position_controller>
			break;
     1de:	0c c0       	rjmp	.+24     	; 0x1f8 <handle_message+0xb4>
			
		case 'm' : 
			TOUCH_JOY_MODE = message->data[0];
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
     1e2:	99 27       	eor	r25, r25
     1e4:	87 fd       	sbrc	r24, 7
     1e6:	90 95       	com	r25
     1e8:	90 93 49 02 	sts	0x0249, r25
     1ec:	80 93 48 02 	sts	0x0248, r24
			// Reset motor when new game with touch-slider
			motor_init();
     1f0:	7a d0       	rcall	.+244    	; 0x2e6 <motor_init>
			break;
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <handle_message+0xb4>
			
		default:
			can_print(message);
     1f4:	ce 01       	movw	r24, r28
     1f6:	15 d2       	rcall	.+1066   	; 0x622 <can_print>
			break;
	}
}
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <main>:

void handle_message(can_message_t* message);

int main (void)
{
	can_init();
     1fe:	7a d1       	rcall	.+756    	; 0x4f4 <can_init>
	servo_init();
     200:	d2 d0       	rcall	.+420    	; 0x3a6 <servo_init>
	init_ADC();
     202:	2b d1       	rcall	.+598    	; 0x45a <init_ADC>
	USART_init(MYUBRR);
     204:	87 e6       	ldi	r24, 0x67	; 103
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	43 d3       	rcall	.+1670   	; 0x890 <USART_init>
	motor_init();
     20a:	6d d0       	rcall	.+218    	; 0x2e6 <motor_init>
	init_solenoid();
     20c:	8c df       	rcall	.-232    	; 0x126 <init_solenoid>

	DDRF = 0xFF; // MJ1 output
     20e:	8f ef       	ldi	r24, 0xFF	; 255
     210:	80 bb       	out	0x10, r24	; 16
	{

		
		
		/*    TESTING    */
		if (can_get_message(&message) == 1)
     212:	8e e4       	ldi	r24, 0x4E	; 78
     214:	92 e0       	ldi	r25, 0x02	; 2
     216:	df d1       	rcall	.+958    	; 0x5d6 <can_get_message>
     218:	01 97       	sbiw	r24, 0x01	; 1
     21a:	19 f4       	brne	.+6      	; 0x222 <main+0x24>
		{
			handle_message(&message);
     21c:	8e e4       	ldi	r24, 0x4E	; 78
     21e:	92 e0       	ldi	r25, 0x02	; 2
     220:	91 df       	rcall	.-222    	; 0x144 <handle_message>
		}
		check_and_report_goal();
     222:	39 d1       	rcall	.+626    	; 0x496 <check_and_report_goal>
		
	}
     224:	f6 cf       	rjmp	.-20     	; 0x212 <main+0x14>

00000226 <motor_drive>:
}



void motor_drive( char joystick_x )
{
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	1f 92       	push	r1
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
	// Set direction
	if(joystick_x < 0){
     230:	88 23       	and	r24, r24
     232:	14 f4       	brge	.+4      	; 0x238 <motor_drive+0x12>
		PORTF &= ~(1 << PF3);
     234:	8b 98       	cbi	0x11, 3	; 17
     236:	01 c0       	rjmp	.+2      	; 0x23a <motor_drive+0x14>
	}
	else{
		PORTF |= (1 << PF3);
     238:	8b 9a       	sbi	0x11, 3	; 17
	}
	// Set speed
	char motor_speed = (char)((abs((float)joystick_x)*150)/100);
     23a:	28 2f       	mov	r18, r24
     23c:	33 27       	eor	r19, r19
     23e:	27 fd       	sbrc	r18, 7
     240:	30 95       	com	r19
     242:	33 23       	and	r19, r19
     244:	1c f4       	brge	.+6      	; 0x24c <motor_drive+0x26>
     246:	31 95       	neg	r19
     248:	21 95       	neg	r18
     24a:	31 09       	sbc	r19, r1
     24c:	46 e9       	ldi	r20, 0x96	; 150
     24e:	42 9f       	mul	r20, r18
     250:	c0 01       	movw	r24, r0
     252:	43 9f       	mul	r20, r19
     254:	90 0d       	add	r25, r0
     256:	11 24       	eor	r1, r1
     258:	64 e6       	ldi	r22, 0x64	; 100
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	44 d5       	rcall	.+2696   	; 0xce6 <__divmodhi4>
	if (motor_speed > 50) {motor_speed = 70;}
     25e:	63 33       	cpi	r22, 0x33	; 51
     260:	14 f4       	brge	.+4      	; 0x266 <motor_drive+0x40>
	}
	else{
		PORTF |= (1 << PF3);
	}
	// Set speed
	char motor_speed = (char)((abs((float)joystick_x)*150)/100);
     262:	69 83       	std	Y+1, r22	; 0x01
     264:	02 c0       	rjmp	.+4      	; 0x26a <motor_drive+0x44>
	if (motor_speed > 50) {motor_speed = 70;}
     266:	86 e4       	ldi	r24, 0x46	; 70
     268:	89 83       	std	Y+1, r24	; 0x01
	i2c_transmit(0x50, &motor_speed,1);
     26a:	41 e0       	ldi	r20, 0x01	; 1
     26c:	50 e0       	ldi	r21, 0x00	; 0
     26e:	be 01       	movw	r22, r28
     270:	6f 5f       	subi	r22, 0xFF	; 255
     272:	7f 4f       	sbci	r23, 0xFF	; 255
     274:	80 e5       	ldi	r24, 0x50	; 80
     276:	ca d2       	rcall	.+1428   	; 0x80c <i2c_transmit>
}
     278:	0f 90       	pop	r0
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <reverse>:

uint8_t	reverse(uint8_t x)
{
	x = (((x & 0xaa) >> 1) | ((x & 0x55) << 1));
     280:	28 2f       	mov	r18, r24
     282:	25 75       	andi	r18, 0x55	; 85
     284:	22 0f       	add	r18, r18
     286:	98 2f       	mov	r25, r24
     288:	9a 7a       	andi	r25, 0xAA	; 170
     28a:	96 95       	lsr	r25
     28c:	92 2b       	or	r25, r18
	x = (((x & 0xcc) >> 2) | ((x & 0x33) << 2));
     28e:	29 2f       	mov	r18, r25
     290:	23 73       	andi	r18, 0x33	; 51
     292:	22 0f       	add	r18, r18
     294:	22 0f       	add	r18, r18
     296:	89 2f       	mov	r24, r25
     298:	8c 7c       	andi	r24, 0xCC	; 204
     29a:	86 95       	lsr	r24
     29c:	86 95       	lsr	r24
     29e:	82 2b       	or	r24, r18
	x = (((x & 0xf0) >> 4) | ((x & 0x0f) << 4));
	return x;
}
     2a0:	82 95       	swap	r24
     2a2:	08 95       	ret

000002a4 <encoder_read>:


}

uint16_t encoder_read( void )
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
	uint8_t high,low;
	PORTF &= ~(1 << PF7); // !OE = 0
     2a8:	8f 98       	cbi	0x11, 7	; 17
	PORTF &= ~(1 << PF5); // SET = 0 // For MSB
     2aa:	8d 98       	cbi	0x11, 5	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ac:	4a e6       	ldi	r20, 0x6A	; 106
     2ae:	4a 95       	dec	r20
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <encoder_read+0xa>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <encoder_read+0x10>
	_delay_us(20);
	high = PINK;
     2b4:	80 91 06 01 	lds	r24, 0x0106
	
	PORTF |= (1 << PF5);	//SET = 1 // For LSB
     2b8:	8d 9a       	sbi	0x11, 5	; 17
     2ba:	5a e6       	ldi	r21, 0x6A	; 106
     2bc:	5a 95       	dec	r21
     2be:	f1 f7       	brne	.-4      	; 0x2bc <encoder_read+0x18>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <encoder_read+0x1e>
	_delay_us(20); 
	low = PINK;
     2c2:	d0 91 06 01 	lds	r29, 0x0106
	PORTF |= (1 << PF7); // !OE = 1
     2c6:	8f 9a       	sbi	0x11, 7	; 17
	
	high = reverse(high);
     2c8:	db df       	rcall	.-74     	; 0x280 <reverse>
     2ca:	c8 2f       	mov	r28, r24
	low = reverse(low);
     2cc:	8d 2f       	mov	r24, r29
     2ce:	d8 df       	rcall	.-80     	; 0x280 <reverse>
	
	
	return (high << 8) + low;
     2d0:	2c 2f       	mov	r18, r28
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	32 2f       	mov	r19, r18
     2d6:	22 27       	eor	r18, r18
}
     2d8:	a9 01       	movw	r20, r18
     2da:	48 0f       	add	r20, r24
     2dc:	51 1d       	adc	r21, r1
     2de:	ca 01       	movw	r24, r20
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <motor_init>:
uint8_t	reverse(uint8_t x);

void motor_init(void)
{
	
	i2c_init();
     2e6:	57 d2       	rcall	.+1198   	; 0x796 <i2c_init>
	DDRF = 0xff;
     2e8:	8f ef       	ldi	r24, 0xFF	; 255
     2ea:	80 bb       	out	0x10, r24	; 16
	DDRK = 0x00;
     2ec:	10 92 07 01 	sts	0x0107, r1
	
	PORTF |= (1 << PF4); // Enable motor
     2f0:	8c 9a       	sbi	0x11, 4	; 17
	
	//Move to known reference point
	motor_drive(-50);
     2f2:	8e ec       	ldi	r24, 0xCE	; 206
     2f4:	98 df       	rcall	.-208    	; 0x226 <motor_drive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f6:	2f ef       	ldi	r18, 0xFF	; 255
     2f8:	8d e2       	ldi	r24, 0x2D	; 45
     2fa:	92 e2       	ldi	r25, 0x22	; 34
     2fc:	21 50       	subi	r18, 0x01	; 1
     2fe:	80 40       	sbci	r24, 0x00	; 0
     300:	90 40       	sbci	r25, 0x00	; 0
     302:	e1 f7       	brne	.-8      	; 0x2fc <motor_init+0x16>
     304:	00 c0       	rjmp	.+0      	; 0x306 <motor_init+0x20>
     306:	00 00       	nop
	_delay_ms(700);
	motor_drive(0);
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	8d df       	rcall	.-230    	; 0x226 <motor_drive>
	
	//Toggle reset encoder
	PORTF &= ~(1 << PF6);
     30c:	8e 98       	cbi	0x11, 6	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30e:	2a e1       	ldi	r18, 0x1A	; 26
     310:	2a 95       	dec	r18
     312:	f1 f7       	brne	.-4      	; 0x310 <motor_init+0x2a>
     314:	00 c0       	rjmp	.+0      	; 0x316 <motor_init+0x30>
	_delay_us(5);
	PORTF |= (1 << PF6);
     316:	8e 9a       	sbi	0x11, 6	; 17
	
	ref_pos = encoder_read();
     318:	c5 df       	rcall	.-118    	; 0x2a4 <encoder_read>
     31a:	90 93 59 02 	sts	0x0259, r25
     31e:	80 93 58 02 	sts	0x0258, r24
     322:	08 95       	ret

00000324 <position_controller>:
	return (high << 8) + low;
}


void position_controller( char pos )
{
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	18 2f       	mov	r17, r24
	int16_t rotations = encoder_read();
     334:	b7 df       	rcall	.-146    	; 0x2a4 <encoder_read>
     336:	ec 01       	movw	r28, r24
	int16_t prefered_rotations = ref_pos + ( ( (int32_t)pos ) * 8000.0) / 255;
     338:	60 91 58 02 	lds	r22, 0x0258
     33c:	70 91 59 02 	lds	r23, 0x0259
     340:	88 27       	eor	r24, r24
     342:	77 fd       	sbrc	r23, 7
     344:	80 95       	com	r24
     346:	98 2f       	mov	r25, r24
     348:	b7 d3       	rcall	.+1902   	; 0xab8 <__floatsisf>
     34a:	6b 01       	movw	r12, r22
     34c:	7c 01       	movw	r14, r24
     34e:	61 2f       	mov	r22, r17
     350:	77 27       	eor	r23, r23
     352:	67 fd       	sbrc	r22, 7
     354:	70 95       	com	r23
     356:	87 2f       	mov	r24, r23
     358:	97 2f       	mov	r25, r23
     35a:	ae d3       	rcall	.+1884   	; 0xab8 <__floatsisf>
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	4a ef       	ldi	r20, 0xFA	; 250
     362:	55 e4       	ldi	r21, 0x45	; 69
     364:	5d d4       	rcall	.+2234   	; 0xc20 <__mulsf3>
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	4f e7       	ldi	r20, 0x7F	; 127
     36c:	53 e4       	ldi	r21, 0x43	; 67
     36e:	09 d3       	rcall	.+1554   	; 0x982 <__divsf3>
     370:	9b 01       	movw	r18, r22
     372:	ac 01       	movw	r20, r24
     374:	c7 01       	movw	r24, r14
     376:	b6 01       	movw	r22, r12
     378:	9c d2       	rcall	.+1336   	; 0x8b2 <__addsf3>
     37a:	6b d3       	rcall	.+1750   	; 0xa52 <__fixsfsi>
	int16_t error = -prefered_rotations + rotations;
     37c:	c6 1b       	sub	r28, r22
     37e:	d7 0b       	sbc	r29, r23
	char to_motor = error >> 6;
     380:	ce 01       	movw	r24, r28
     382:	08 2e       	mov	r0, r24
     384:	89 2f       	mov	r24, r25
     386:	00 0c       	add	r0, r0
     388:	88 1f       	adc	r24, r24
     38a:	99 0b       	sbc	r25, r25
     38c:	00 0c       	add	r0, r0
     38e:	88 1f       	adc	r24, r24
     390:	99 1f       	adc	r25, r25

	motor_drive(to_motor*2);
     392:	88 0f       	add	r24, r24
     394:	48 df       	rcall	.-368    	; 0x226 <motor_drive>
	
}
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	cf 90       	pop	r12
     3a4:	08 95       	ret

000003a6 <servo_init>:
}

int us_to_compare(float us)
{
	return ( (us / 20000.0 ) * TOP_VALUE );
}
     3a6:	e0 e8       	ldi	r30, 0x80	; 128
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 81       	ld	r24, Z
     3ac:	82 60       	ori	r24, 0x02	; 2
     3ae:	80 83       	st	Z, r24
     3b0:	a1 e8       	ldi	r26, 0x81	; 129
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	8c 91       	ld	r24, X
     3b6:	88 61       	ori	r24, 0x18	; 24
     3b8:	8c 93       	st	X, r24
     3ba:	8c 91       	ld	r24, X
     3bc:	82 60       	ori	r24, 0x02	; 2
     3be:	8c 93       	st	X, r24
     3c0:	8c 91       	ld	r24, X
     3c2:	8a 7f       	andi	r24, 0xFA	; 250
     3c4:	8c 93       	st	X, r24
     3c6:	80 81       	ld	r24, Z
     3c8:	80 68       	ori	r24, 0x80	; 128
     3ca:	80 83       	st	Z, r24
     3cc:	80 81       	ld	r24, Z
     3ce:	8f 7b       	andi	r24, 0xBF	; 191
     3d0:	80 83       	st	Z, r24
     3d2:	80 e4       	ldi	r24, 0x40	; 64
     3d4:	9c e9       	ldi	r25, 0x9C	; 156
     3d6:	90 93 87 00 	sts	0x0087, r25
     3da:	80 93 86 00 	sts	0x0086, r24
     3de:	88 e0       	ldi	r24, 0x08	; 8
     3e0:	97 e0       	ldi	r25, 0x07	; 7
     3e2:	90 93 89 00 	sts	0x0089, r25
     3e6:	80 93 88 00 	sts	0x0088, r24
     3ea:	25 9a       	sbi	0x04, 5	; 4
     3ec:	08 95       	ret

000003ee <servo_write>:


void servo_write(float val)
{
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	6b 01       	movw	r12, r22
     3f8:	7c 01       	movw	r14, r24
	if(val > 900.0 && val < 2050.0)
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	41 e6       	ldi	r20, 0x61	; 97
     400:	54 e4       	ldi	r21, 0x44	; 68
     402:	0a d4       	rcall	.+2068   	; 0xc18 <__gesf2>
     404:	18 16       	cp	r1, r24
     406:	24 f5       	brge	.+72     	; 0x450 <servo_write+0x62>
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e2       	ldi	r19, 0x20	; 32
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	55 e4       	ldi	r21, 0x45	; 69
     410:	c7 01       	movw	r24, r14
     412:	b6 01       	movw	r22, r12
     414:	b2 d2       	rcall	.+1380   	; 0x97a <__cmpsf2>
     416:	88 23       	and	r24, r24
     418:	dc f4       	brge	.+54     	; 0x450 <servo_write+0x62>

}

int us_to_compare(float us)
{
	return ( (us / 20000.0 ) * TOP_VALUE );
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	30 e4       	ldi	r19, 0x40	; 64
     41e:	4c e9       	ldi	r20, 0x9C	; 156
     420:	56 e4       	ldi	r21, 0x46	; 70
     422:	c7 01       	movw	r24, r14
     424:	b6 01       	movw	r22, r12
     426:	ad d2       	rcall	.+1370   	; 0x982 <__divsf3>
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	34 e2       	ldi	r19, 0x24	; 36
     42c:	44 e7       	ldi	r20, 0x74	; 116
     42e:	5b e4       	ldi	r21, 0x4B	; 75
     430:	f7 d3       	rcall	.+2030   	; 0xc20 <__mulsf3>
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	40 e0       	ldi	r20, 0x00	; 0
     438:	5e e3       	ldi	r21, 0x3E	; 62
     43a:	f2 d3       	rcall	.+2020   	; 0xc20 <__mulsf3>
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	48 e4       	ldi	r20, 0x48	; 72
     442:	52 e4       	ldi	r21, 0x42	; 66
     444:	9e d2       	rcall	.+1340   	; 0x982 <__divsf3>
     446:	05 d3       	rcall	.+1546   	; 0xa52 <__fixsfsi>

void servo_write(float val)
{
	if(val > 900.0 && val < 2050.0)
	{
		OCR1A = us_to_compare(val);
     448:	70 93 89 00 	sts	0x0089, r23
     44c:	60 93 88 00 	sts	0x0088, r22
	}
}
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	df 90       	pop	r13
     456:	cf 90       	pop	r12
     458:	08 95       	ret

0000045a <init_ADC>:
int recent_goal_counter = 0;

can_message_t goal_msg = {'g',0};

void init_ADC(){
	DDRF &= ~(1 << PF0);
     45a:	80 98       	cbi	0x10, 0	; 16
	//ADMUX &= 0xe0;
	ADCSRA |= (1 << ADEN) | (1 << ADATE)  | (1 << ADSC) | (1 << ADPS2) |(1 << ADIE)| (1 << ADPS1) | (1 << ADPS0);
     45c:	ea e7       	ldi	r30, 0x7A	; 122
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	8f 6e       	ori	r24, 0xEF	; 239
     464:	80 83       	st	Z, r24
	ADMUX  |= (1 <<REFS0) | (1 <<ADLAR);
     466:	ec e7       	ldi	r30, 0x7C	; 124
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	80 66       	ori	r24, 0x60	; 96
     46e:	80 83       	st	Z, r24
     470:	08 95       	ret

00000472 <ADC_read>:

uint8_t ADC_read(){
	int mean = 0; int i = 0;
	int nsamples = 4;
	for (i = 0; i <nsamples; i++){
		mean = mean + ADCH;
     472:	e9 e7       	ldi	r30, 0x79	; 121
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	20 81       	ld	r18, Z
     478:	80 81       	ld	r24, Z
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	82 0f       	add	r24, r18
     47e:	91 1d       	adc	r25, r1
     480:	20 81       	ld	r18, Z
     482:	82 0f       	add	r24, r18
     484:	91 1d       	adc	r25, r1
     486:	20 81       	ld	r18, Z
     488:	82 0f       	add	r24, r18
     48a:	91 1d       	adc	r25, r1
	}
	mean = mean/nsamples;
     48c:	95 95       	asr	r25
     48e:	87 95       	ror	r24
     490:	95 95       	asr	r25
     492:	87 95       	ror	r24
	return mean;
}
     494:	08 95       	ret

00000496 <check_and_report_goal>:

void check_and_report_goal( void ){
	int threshold = 10;
	
	if (recent_goal == 0)
     496:	80 91 4c 02 	lds	r24, 0x024C
     49a:	90 91 4d 02 	lds	r25, 0x024D
     49e:	89 2b       	or	r24, r25
     4a0:	79 f4       	brne	.+30     	; 0x4c0 <check_and_report_goal+0x2a>
	{
		goal_msg.data[0] = ADC_read();
     4a2:	e7 df       	rcall	.-50     	; 0x472 <ADC_read>
     4a4:	80 93 08 02 	sts	0x0208, r24
		if(goal_msg.data[0] < threshold)
     4a8:	8a 30       	cpi	r24, 0x0A	; 10
     4aa:	1c f5       	brge	.+70     	; 0x4f2 <check_and_report_goal+0x5c>
		{
			recent_goal = 1;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	90 93 4d 02 	sts	0x024D, r25
     4b4:	80 93 4c 02 	sts	0x024C, r24
			can_message_send(&goal_msg);		
     4b8:	86 e0       	ldi	r24, 0x06	; 6
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	29 c0       	rjmp	.+82     	; 0x510 <can_message_send>
     4be:	08 95       	ret
		}
	}
	else
	{
		recent_goal_counter += 1;
     4c0:	80 91 4a 02 	lds	r24, 0x024A
     4c4:	90 91 4b 02 	lds	r25, 0x024B
     4c8:	01 96       	adiw	r24, 0x01	; 1
		if (recent_goal_counter > 1000/40)
     4ca:	8a 31       	cpi	r24, 0x1A	; 26
     4cc:	91 05       	cpc	r25, r1
     4ce:	2c f4       	brge	.+10     	; 0x4da <check_and_report_goal+0x44>
			can_message_send(&goal_msg);		
		}
	}
	else
	{
		recent_goal_counter += 1;
     4d0:	90 93 4b 02 	sts	0x024B, r25
     4d4:	80 93 4a 02 	sts	0x024A, r24
     4d8:	08 95       	ret
		if (recent_goal_counter > 1000/40)
		{
			recent_goal_counter = 0;
     4da:	10 92 4b 02 	sts	0x024B, r1
     4de:	10 92 4a 02 	sts	0x024A, r1
			if (ADC_read() > threshold){
     4e2:	c7 df       	rcall	.-114    	; 0x472 <ADC_read>
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0b 97       	sbiw	r24, 0x0b	; 11
     4e8:	24 f0       	brlt	.+8      	; 0x4f2 <check_and_report_goal+0x5c>
				recent_goal = 0;
     4ea:	10 92 4d 02 	sts	0x024D, r1
     4ee:	10 92 4c 02 	sts	0x024C, r1
     4f2:	08 95       	ret

000004f4 <can_init>:


void can_init()
{
	
	mcp2515_init();
     4f4:	33 d1       	rcall	.+614    	; 0x75c <mcp2515_init>
	
	mcp2515_bit_modify(MCP_RXF0SIDH, 0xff , 0x00);
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	6f ef       	ldi	r22, 0xFF	; 255
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	0a d1       	rcall	.+532    	; 0x712 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXF0SIDL, 0xE0 , 0x00);
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	60 ee       	ldi	r22, 0xE0	; 224
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	06 d1       	rcall	.+524    	; 0x712 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, 0xE0 , MODE_NORMAL);
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	60 ee       	ldi	r22, 0xE0	; 224
     50a:	8f e0       	ldi	r24, 0x0F	; 15
     50c:	02 c1       	rjmp	.+516    	; 0x712 <mcp2515_bit_modify>
     50e:	08 95       	ret

00000510 <can_message_send>:
	
}


void can_message_send(can_message_t *message)
{
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	7c 01       	movw	r14, r24
	int i;
	
	// ID
	mcp2515_write(MCP_TXB0CTRL + 1,message->id);
     51e:	fc 01       	movw	r30, r24
     520:	60 81       	ld	r22, Z
     522:	81 e3       	ldi	r24, 0x31	; 49
     524:	df d0       	rcall	.+446    	; 0x6e4 <mcp2515_write>
	mcp2515_write(0x32,0x00);
     526:	60 e0       	ldi	r22, 0x00	; 0
     528:	82 e3       	ldi	r24, 0x32	; 50
     52a:	dc d0       	rcall	.+440    	; 0x6e4 <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
     52c:	f7 01       	movw	r30, r14
     52e:	61 81       	ldd	r22, Z+1	; 0x01
     530:	85 e3       	ldi	r24, 0x35	; 53
     532:	d8 d0       	rcall	.+432    	; 0x6e4 <mcp2515_write>
	
	// Data
	for (i = 0; i< message->length; i++){
     534:	f7 01       	movw	r30, r14
     536:	81 81       	ldd	r24, Z+1	; 0x01
     538:	18 16       	cp	r1, r24
     53a:	a4 f4       	brge	.+40     	; 0x564 <can_message_send+0x54>
     53c:	87 01       	movw	r16, r14
     53e:	0e 5f       	subi	r16, 0xFE	; 254
     540:	1f 4f       	sbci	r17, 0xFF	; 255
     542:	c0 e0       	ldi	r28, 0x00	; 0
     544:	d0 e0       	ldi	r29, 0x00	; 0
		mcp2515_write(MCP_TXB0CTRL + 6 + i, (message->data[i]) );
     546:	f8 01       	movw	r30, r16
     548:	61 91       	ld	r22, Z+
     54a:	8f 01       	movw	r16, r30
     54c:	8c 2f       	mov	r24, r28
     54e:	8a 5c       	subi	r24, 0xCA	; 202
     550:	c9 d0       	rcall	.+402    	; 0x6e4 <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
	
	// Data
	for (i = 0; i< message->length; i++){
     552:	21 96       	adiw	r28, 0x01	; 1
     554:	f7 01       	movw	r30, r14
     556:	21 81       	ldd	r18, Z+1	; 0x01
     558:	33 27       	eor	r19, r19
     55a:	27 fd       	sbrc	r18, 7
     55c:	30 95       	com	r19
     55e:	c2 17       	cp	r28, r18
     560:	d3 07       	cpc	r29, r19
     562:	8c f3       	brlt	.-30     	; 0x546 <can_message_send+0x36>
		mcp2515_write(MCP_TXB0CTRL + 6 + i, (message->data[i]) );
	}
	
	mcp2515_request_to_send(MCP_RTS_TX0);
     564:	81 e8       	ldi	r24, 0x81	; 129
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	cc d0       	rcall	.+408    	; 0x702 <mcp2515_request_to_send>
}
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	ff 90       	pop	r15
     574:	ef 90       	pop	r14
     576:	08 95       	ret

00000578 <can_message_receive>:

void can_message_receive(can_message_t* message, int buffer)
{
     578:	ef 92       	push	r14
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	8c 01       	movw	r16, r24
     586:	e6 2e       	mov	r14, r22
	char i;
	
	// ID
	message->id = mcp2515_read(MCP_RXB0CTRL+buffer + 1);
     588:	81 e6       	ldi	r24, 0x61	; 97
     58a:	86 0f       	add	r24, r22
     58c:	9e d0       	rcall	.+316    	; 0x6ca <mcp2515_read>
     58e:	f8 01       	movw	r30, r16
     590:	80 83       	st	Z, r24
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
     592:	85 e6       	ldi	r24, 0x65	; 101
     594:	8e 0d       	add	r24, r14
     596:	99 d0       	rcall	.+306    	; 0x6ca <mcp2515_read>
     598:	f8 01       	movw	r30, r16
     59a:	81 83       	std	Z+1, r24	; 0x01
	
	// Data
	for(i=0;i<message->length;i++)
     59c:	18 16       	cp	r1, r24
     59e:	a4 f4       	brge	.+40     	; 0x5c8 <can_message_receive+0x50>
     5a0:	c0 e0       	ldi	r28, 0x00	; 0
     5a2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
     5a4:	f6 e6       	ldi	r31, 0x66	; 102
     5a6:	ef 0e       	add	r14, r31
     5a8:	fc 2e       	mov	r15, r28
     5aa:	8c 2f       	mov	r24, r28
     5ac:	8e 0d       	add	r24, r14
     5ae:	8d d0       	rcall	.+282    	; 0x6ca <mcp2515_read>
     5b0:	f8 01       	movw	r30, r16
     5b2:	ec 0f       	add	r30, r28
     5b4:	f1 1d       	adc	r31, r1
     5b6:	c7 fd       	sbrc	r28, 7
     5b8:	fa 95       	dec	r31
     5ba:	82 83       	std	Z+2, r24	; 0x02
     5bc:	f3 94       	inc	r15
     5be:	21 96       	adiw	r28, 0x01	; 1
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
	
	// Data
	for(i=0;i<message->length;i++)
     5c0:	f8 01       	movw	r30, r16
     5c2:	81 81       	ldd	r24, Z+1	; 0x01
     5c4:	f8 16       	cp	r15, r24
     5c6:	84 f3       	brlt	.-32     	; 0x5a8 <can_message_receive+0x30>
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
	}
	
}
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	08 95       	ret

000005d6 <can_get_message>:

int can_get_message(can_message_t* message)
{
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	ec 01       	movw	r28, r24
	
	if ((mcp2515_read(MCP_CANINTF) & 0x01) == 0x01)
     5dc:	8c e2       	ldi	r24, 0x2C	; 44
     5de:	75 d0       	rcall	.+234    	; 0x6ca <mcp2515_read>
     5e0:	80 ff       	sbrs	r24, 0
     5e2:	0b c0       	rjmp	.+22     	; 0x5fa <can_get_message+0x24>
	{
		can_message_receive(message,0);
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	ce 01       	movw	r24, r28
     5ea:	c6 df       	rcall	.-116    	; 0x578 <can_message_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x01,0x00);
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	8c e2       	ldi	r24, 0x2C	; 44
     5f2:	8f d0       	rcall	.+286    	; 0x712 <mcp2515_bit_modify>
		return 1;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	11 c0       	rjmp	.+34     	; 0x61c <can_get_message+0x46>
	}
	else if ((mcp2515_read(MCP_CANINTF) & 0x02) == 0x02)
     5fa:	8c e2       	ldi	r24, 0x2C	; 44
     5fc:	66 d0       	rcall	.+204    	; 0x6ca <mcp2515_read>
     5fe:	81 ff       	sbrs	r24, 1
     600:	0b c0       	rjmp	.+22     	; 0x618 <can_get_message+0x42>
	{
		can_message_receive(message,1);
     602:	61 e0       	ldi	r22, 0x01	; 1
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	ce 01       	movw	r24, r28
     608:	b7 df       	rcall	.-146    	; 0x578 <can_message_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x02,0x00);
     60a:	40 e0       	ldi	r20, 0x00	; 0
     60c:	62 e0       	ldi	r22, 0x02	; 2
     60e:	8c e2       	ldi	r24, 0x2C	; 44
     610:	80 d0       	rcall	.+256    	; 0x712 <mcp2515_bit_modify>
		return 1;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	02 c0       	rjmp	.+4      	; 0x61c <can_get_message+0x46>
	}
	else
	{
		return 0;
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <can_print>:


void can_print(can_message_t* msg)
{
     622:	cf 92       	push	r12
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	6c 01       	movw	r12, r24
	printf("ID: %c ,Length: %d, ",msg->id,msg->length);
     634:	fc 01       	movw	r30, r24
     636:	21 81       	ldd	r18, Z+1	; 0x01
     638:	82 2f       	mov	r24, r18
     63a:	99 27       	eor	r25, r25
     63c:	87 fd       	sbrc	r24, 7
     63e:	90 95       	com	r25
     640:	9f 93       	push	r25
     642:	2f 93       	push	r18
     644:	20 81       	ld	r18, Z
     646:	82 2f       	mov	r24, r18
     648:	99 27       	eor	r25, r25
     64a:	87 fd       	sbrc	r24, 7
     64c:	90 95       	com	r25
     64e:	9f 93       	push	r25
     650:	2f 93       	push	r18
     652:	80 e1       	ldi	r24, 0x10	; 16
     654:	92 e0       	ldi	r25, 0x02	; 2
     656:	9f 93       	push	r25
     658:	8f 93       	push	r24
     65a:	b6 d3       	rcall	.+1900   	; 0xdc8 <printf>
	int i ;
	for (i=0; i<msg->length;i++)
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	f6 01       	movw	r30, r12
     66a:	81 81       	ldd	r24, Z+1	; 0x01
     66c:	18 16       	cp	r1, r24
     66e:	0c f5       	brge	.+66     	; 0x6b2 <can_print+0x90>
     670:	76 01       	movw	r14, r12
     672:	f2 e0       	ldi	r31, 0x02	; 2
     674:	ef 0e       	add	r14, r31
     676:	f1 1c       	adc	r15, r1
     678:	c0 e0       	ldi	r28, 0x00	; 0
     67a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("%i", msg->data[i]);
     67c:	05 e2       	ldi	r16, 0x25	; 37
     67e:	12 e0       	ldi	r17, 0x02	; 2
     680:	f7 01       	movw	r30, r14
     682:	21 91       	ld	r18, Z+
     684:	7f 01       	movw	r14, r30
     686:	82 2f       	mov	r24, r18
     688:	99 27       	eor	r25, r25
     68a:	87 fd       	sbrc	r24, 7
     68c:	90 95       	com	r25
     68e:	9f 93       	push	r25
     690:	2f 93       	push	r18
     692:	1f 93       	push	r17
     694:	0f 93       	push	r16
     696:	98 d3       	rcall	.+1840   	; 0xdc8 <printf>

void can_print(can_message_t* msg)
{
	printf("ID: %c ,Length: %d, ",msg->id,msg->length);
	int i ;
	for (i=0; i<msg->length;i++)
     698:	21 96       	adiw	r28, 0x01	; 1
     69a:	f6 01       	movw	r30, r12
     69c:	21 81       	ldd	r18, Z+1	; 0x01
     69e:	33 27       	eor	r19, r19
     6a0:	27 fd       	sbrc	r18, 7
     6a2:	30 95       	com	r19
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	c2 17       	cp	r28, r18
     6ae:	d3 07       	cpc	r29, r19
     6b0:	3c f3       	brlt	.-50     	; 0x680 <can_print+0x5e>
	{
		printf("%i", msg->data[i]);
	}
	printf("\n");
     6b2:	8a e0       	ldi	r24, 0x0A	; 10
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	99 d3       	rcall	.+1842   	; 0xdea <putchar>
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	df 90       	pop	r13
     6c6:	cf 90       	pop	r12
     6c8:	08 95       	ret

000006ca <mcp2515_read>:
		printf("MCP2515 is not in config mode!\n");
	}
	
	
}
char mcp2515_read (char addr){
     6ca:	cf 93       	push	r28
     6cc:	c8 2f       	mov	r28, r24
	char result;
	
	spi_select();
     6ce:	50 d0       	rcall	.+160    	; 0x770 <spi_select>
	
	spi_transmit(MCP_READ);
     6d0:	83 e0       	ldi	r24, 0x03	; 3
     6d2:	52 d0       	rcall	.+164    	; 0x778 <spi_transmit>
	spi_transmit(addr);
     6d4:	8c 2f       	mov	r24, r28
     6d6:	50 d0       	rcall	.+160    	; 0x778 <spi_transmit>
	result = spi_receive();
     6d8:	54 d0       	rcall	.+168    	; 0x782 <spi_receive>
     6da:	c8 2f       	mov	r28, r24
	
	spi_deselect();
     6dc:	4b d0       	rcall	.+150    	; 0x774 <spi_deselect>
	
	return result;
}
     6de:	8c 2f       	mov	r24, r28
     6e0:	cf 91       	pop	r28
     6e2:	08 95       	ret

000006e4 <mcp2515_write>:

void mcp2515_write(char addr, char data)
{
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	d8 2f       	mov	r29, r24
     6ea:	c6 2f       	mov	r28, r22
	spi_select();
     6ec:	41 d0       	rcall	.+130    	; 0x770 <spi_select>
	
	spi_transmit(MCP_WRITE);
     6ee:	82 e0       	ldi	r24, 0x02	; 2
     6f0:	43 d0       	rcall	.+134    	; 0x778 <spi_transmit>
	spi_transmit(addr);
     6f2:	8d 2f       	mov	r24, r29
     6f4:	41 d0       	rcall	.+130    	; 0x778 <spi_transmit>
	spi_transmit(data);
     6f6:	8c 2f       	mov	r24, r28
     6f8:	3f d0       	rcall	.+126    	; 0x778 <spi_transmit>
	
	spi_deselect();
     6fa:	3c d0       	rcall	.+120    	; 0x774 <spi_deselect>
	
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <mcp2515_request_to_send>:

void mcp2515_request_to_send(int reg)
{
     702:	cf 93       	push	r28
     704:	c8 2f       	mov	r28, r24
	spi_select();
     706:	34 d0       	rcall	.+104    	; 0x770 <spi_select>
	
	spi_transmit(reg);
     708:	8c 2f       	mov	r24, r28
     70a:	36 d0       	rcall	.+108    	; 0x778 <spi_transmit>
	
	spi_deselect();
     70c:	33 d0       	rcall	.+102    	; 0x774 <spi_deselect>
}
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <mcp2515_bit_modify>:

void mcp2515_bit_modify(char addr, char mask_byte, char data)
{
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	18 2f       	mov	r17, r24
     71a:	d6 2f       	mov	r29, r22
     71c:	c4 2f       	mov	r28, r20
	spi_select();
     71e:	28 d0       	rcall	.+80     	; 0x770 <spi_select>
	
	spi_transmit(MCP_BITMOD);
     720:	85 e0       	ldi	r24, 0x05	; 5
     722:	2a d0       	rcall	.+84     	; 0x778 <spi_transmit>
	spi_transmit(addr);
     724:	81 2f       	mov	r24, r17
     726:	28 d0       	rcall	.+80     	; 0x778 <spi_transmit>
	spi_transmit(mask_byte);
     728:	8d 2f       	mov	r24, r29
     72a:	26 d0       	rcall	.+76     	; 0x778 <spi_transmit>
	spi_transmit(data);
     72c:	8c 2f       	mov	r24, r28
     72e:	24 d0       	rcall	.+72     	; 0x778 <spi_transmit>
	
	spi_deselect();
     730:	21 d0       	rcall	.+66     	; 0x774 <spi_deselect>
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	08 95       	ret

0000073a <mcp2515_reset>:

void mcp2515_reset()
{
	spi_select();
     73a:	1a d0       	rcall	.+52     	; 0x770 <spi_select>
	
	spi_transmit(MCP_RESET);
     73c:	80 ec       	ldi	r24, 0xC0	; 192
     73e:	1c d0       	rcall	.+56     	; 0x778 <spi_transmit>
	
	spi_deselect();
     740:	19 c0       	rjmp	.+50     	; 0x774 <spi_deselect>
     742:	08 95       	ret

00000744 <mcp2515_read_status>:
}

char mcp2515_read_status()
{
     744:	cf 93       	push	r28
	char output;
	spi_select();
     746:	14 d0       	rcall	.+40     	; 0x770 <spi_select>
	spi_transmit(MCP_READ);
     748:	83 e0       	ldi	r24, 0x03	; 3
     74a:	16 d0       	rcall	.+44     	; 0x778 <spi_transmit>
	spi_transmit(MCP_CANSTAT);
     74c:	8e e0       	ldi	r24, 0x0E	; 14
     74e:	14 d0       	rcall	.+40     	; 0x778 <spi_transmit>
	output = spi_receive();
     750:	18 d0       	rcall	.+48     	; 0x782 <spi_receive>
     752:	c8 2f       	mov	r28, r24
	
	spi_deselect();
     754:	0f d0       	rcall	.+30     	; 0x774 <spi_deselect>
	return output;
}
     756:	8c 2f       	mov	r24, r28
     758:	cf 91       	pop	r28
     75a:	08 95       	ret

0000075c <mcp2515_init>:
#include "spi_control.h"
#include <stdio.h>

void mcp2515_init(){
	char status;
	spi_init();
     75c:	16 d0       	rcall	.+44     	; 0x78a <spi_init>
	mcp2515_reset();
     75e:	ed df       	rcall	.-38     	; 0x73a <mcp2515_reset>
	
	status = mcp2515_read_status();
     760:	f1 df       	rcall	.-30     	; 0x744 <mcp2515_read_status>
	if ((status & MODE_MASK) != MODE_CONFIG)
     762:	80 7e       	andi	r24, 0xE0	; 224
     764:	80 38       	cpi	r24, 0x80	; 128
     766:	19 f0       	breq	.+6      	; 0x76e <mcp2515_init+0x12>
	{
		printf("MCP2515 is not in config mode!\n");
     768:	88 e2       	ldi	r24, 0x28	; 40
     76a:	92 e0       	ldi	r25, 0x02	; 2
     76c:	43 c3       	rjmp	.+1670   	; 0xdf4 <puts>
     76e:	08 95       	ret

00000770 <spi_select>:
#include "spi_control.h"
#include <stdio.h>

void spi_select()
{
	PORTB &= ~(1<<PB0);
     770:	28 98       	cbi	0x05, 0	; 5
     772:	08 95       	ret

00000774 <spi_deselect>:
}

void spi_deselect()
{
	PORTB |= (1<<PB0);
     774:	28 9a       	sbi	0x05, 0	; 5
     776:	08 95       	ret

00000778 <spi_transmit>:


void spi_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     778:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     77a:	0d b4       	in	r0, 0x2d	; 45
     77c:	07 fe       	sbrs	r0, 7
     77e:	fd cf       	rjmp	.-6      	; 0x77a <spi_transmit+0x2>
	;
}
     780:	08 95       	ret

00000782 <spi_receive>:
	PORTB |= (1<<PB0);
}

char spi_receive()
{
	spi_transmit(0);
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	f9 df       	rcall	.-14     	; 0x778 <spi_transmit>
	return SPDR;
     786:	8e b5       	in	r24, 0x2e	; 46
}
     788:	08 95       	ret

0000078a <spi_init>:
}


void spi_init(){
	/* Set MOSI,SCK and SS output, all others input */
	DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<DD_SS);    
     78a:	84 b1       	in	r24, 0x04	; 4
     78c:	87 60       	ori	r24, 0x07	; 7
     78e:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     790:	81 e5       	ldi	r24, 0x51	; 81
     792:	8c bd       	out	0x2c, r24	; 44
     794:	08 95       	ret

00000796 <i2c_init>:



void i2c_init( void )
{
	TWBR = 0x0C; // Baud
     796:	8c e0       	ldi	r24, 0x0C	; 12
     798:	80 93 b8 00 	sts	0x00B8, r24
     79c:	08 95       	ret

0000079e <i2c_start>:


char i2c_start(char address)
{
	// reset TWI control register
	TWCR = 0;
     79e:	ec eb       	ldi	r30, 0xBC	; 188
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	10 82       	st	Z, r1
	// transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     7a4:	94 ea       	ldi	r25, 0xA4	; 164
     7a6:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     7a8:	90 81       	ld	r25, Z
     7aa:	99 23       	and	r25, r25
     7ac:	ec f7       	brge	.-6      	; 0x7a8 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     7ae:	90 91 b9 00 	lds	r25, 0x00B9
     7b2:	98 7f       	andi	r25, 0xF8	; 248
     7b4:	98 30       	cpi	r25, 0x08	; 8
     7b6:	a1 f4       	brne	.+40     	; 0x7e0 <i2c_start+0x42>
	
	// load slave address into data register
	TWDR = address;
     7b8:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     7bc:	84 e8       	ldi	r24, 0x84	; 132
     7be:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     7c2:	ec eb       	ldi	r30, 0xBC	; 188
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	80 81       	ld	r24, Z
     7c8:	88 23       	and	r24, r24
     7ca:	ec f7       	brge	.-6      	; 0x7c6 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     7cc:	90 91 b9 00 	lds	r25, 0x00B9
     7d0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     7d2:	98 31       	cpi	r25, 0x18	; 24
     7d4:	39 f0       	breq	.+14     	; 0x7e4 <i2c_start+0x46>
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 34       	cpi	r25, 0x40	; 64
     7da:	29 f4       	brne	.+10     	; 0x7e6 <i2c_start+0x48>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
     7e4:	80 e0       	ldi	r24, 0x00	; 0
}
     7e6:	08 95       	ret

000007e8 <i2c_write>:

char i2c_write(char data)
{
	// load data into data register
	TWDR = data;
     7e8:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     7ec:	84 e8       	ldi	r24, 0x84	; 132
     7ee:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     7f2:	ec eb       	ldi	r30, 0xBC	; 188
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
     7f8:	88 23       	and	r24, r24
     7fa:	ec f7       	brge	.-6      	; 0x7f6 <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     7fc:	90 91 b9 00 	lds	r25, 0x00B9
     800:	98 7f       	andi	r25, 0xF8	; 248
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	98 32       	cpi	r25, 0x28	; 40
     806:	09 f4       	brne	.+2      	; 0x80a <i2c_write+0x22>
     808:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     80a:	08 95       	ret

0000080c <i2c_transmit>:

char i2c_transmit(char address, char* data, uint16_t length)
{
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	7b 01       	movw	r14, r22
     81c:	8a 01       	movw	r16, r20
	// Start
	if (i2c_start(address | I2C_WRITE)) return 1;
     81e:	bf df       	rcall	.-130    	; 0x79e <i2c_start>
     820:	81 11       	cpse	r24, r1
     822:	15 c0       	rjmp	.+42     	; 0x84e <i2c_transmit+0x42>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
     824:	e1 df       	rcall	.-62     	; 0x7e8 <i2c_write>
     826:	d8 2e       	mov	r13, r24
     828:	81 11       	cpse	r24, r1
     82a:	14 c0       	rjmp	.+40     	; 0x854 <i2c_transmit+0x48>
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
     82c:	01 15       	cp	r16, r1
     82e:	11 05       	cpc	r17, r1
     830:	51 f0       	breq	.+20     	; 0x846 <i2c_transmit+0x3a>
     832:	e7 01       	movw	r28, r14
     834:	0e 0d       	add	r16, r14
     836:	1f 1d       	adc	r17, r15
	{
		if (i2c_write(data[i])) return 1;
     838:	89 91       	ld	r24, Y+
     83a:	d6 df       	rcall	.-84     	; 0x7e8 <i2c_write>
     83c:	81 11       	cpse	r24, r1
     83e:	0d c0       	rjmp	.+26     	; 0x85a <i2c_transmit+0x4e>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
     840:	c0 17       	cp	r28, r16
     842:	d1 07       	cpc	r29, r17
     844:	c9 f7       	brne	.-14     	; 0x838 <i2c_transmit+0x2c>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     846:	84 e9       	ldi	r24, 0x94	; 148
     848:	80 93 bc 00 	sts	0x00BC, r24
     84c:	08 c0       	rjmp	.+16     	; 0x85e <i2c_transmit+0x52>
}

char i2c_transmit(char address, char* data, uint16_t length)
{
	// Start
	if (i2c_start(address | I2C_WRITE)) return 1;
     84e:	dd 24       	eor	r13, r13
     850:	d3 94       	inc	r13
     852:	05 c0       	rjmp	.+10     	; 0x85e <i2c_transmit+0x52>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
     854:	dd 24       	eor	r13, r13
     856:	d3 94       	inc	r13
     858:	02 c0       	rjmp	.+4      	; 0x85e <i2c_transmit+0x52>
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     85a:	dd 24       	eor	r13, r13
     85c:	d3 94       	inc	r13
	}
	
	i2c_stop();
	
	return 0;
}
     85e:	8d 2d       	mov	r24, r13
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	0f 91       	pop	r16
     868:	ff 90       	pop	r15
     86a:	ef 90       	pop	r14
     86c:	df 90       	pop	r13
     86e:	08 95       	ret

00000870 <USART_transmit>:
	fdevopen(USART_transmit,USART_receive);
}

void USART_transmit(unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)))
     870:	e0 ec       	ldi	r30, 0xC0	; 192
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	90 81       	ld	r25, Z
     876:	95 ff       	sbrs	r25, 5
     878:	fd cf       	rjmp	.-6      	; 0x874 <USART_transmit+0x4>
		;
	UDR0 = data;
     87a:	80 93 c6 00 	sts	0x00C6, r24
     87e:	08 95       	ret

00000880 <USART_receive>:
	
}

unsigned char USART_receive (void){
	
	while( !(UCSR0A & (1<<RXC0)))
     880:	e0 ec       	ldi	r30, 0xC0	; 192
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	88 23       	and	r24, r24
     888:	ec f7       	brge	.-6      	; 0x884 <USART_receive+0x4>
		;
	return UDR0;
     88a:	80 91 c6 00 	lds	r24, 0x00C6
	
     88e:	08 95       	ret

00000890 <USART_init>:
#include "USART_driver.h"
#include <stdio.h>
void USART_init(unsigned int ubrr){

	UBRR0H = (unsigned char)(ubrr>>8);
     890:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;	
     894:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     898:	88 e1       	ldi	r24, 0x18	; 24
     89a:	80 93 c1 00 	sts	0x00C1, r24
	
	UCSR0C = (3<<UCSZ00); 
     89e:	86 e0       	ldi	r24, 0x06	; 6
     8a0:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(USART_transmit,USART_receive);
     8a4:	60 e4       	ldi	r22, 0x40	; 64
     8a6:	74 e0       	ldi	r23, 0x04	; 4
     8a8:	88 e3       	ldi	r24, 0x38	; 56
     8aa:	94 e0       	ldi	r25, 0x04	; 4
     8ac:	43 c2       	rjmp	.+1158   	; 0xd34 <fdevopen>
     8ae:	08 95       	ret

000008b0 <__subsf3>:
     8b0:	50 58       	subi	r21, 0x80	; 128

000008b2 <__addsf3>:
     8b2:	bb 27       	eor	r27, r27
     8b4:	aa 27       	eor	r26, r26
     8b6:	0e d0       	rcall	.+28     	; 0x8d4 <__addsf3x>
     8b8:	75 c1       	rjmp	.+746    	; 0xba4 <__fp_round>
     8ba:	66 d1       	rcall	.+716    	; 0xb88 <__fp_pscA>
     8bc:	30 f0       	brcs	.+12     	; 0x8ca <__addsf3+0x18>
     8be:	6b d1       	rcall	.+726    	; 0xb96 <__fp_pscB>
     8c0:	20 f0       	brcs	.+8      	; 0x8ca <__addsf3+0x18>
     8c2:	31 f4       	brne	.+12     	; 0x8d0 <__addsf3+0x1e>
     8c4:	9f 3f       	cpi	r25, 0xFF	; 255
     8c6:	11 f4       	brne	.+4      	; 0x8cc <__addsf3+0x1a>
     8c8:	1e f4       	brtc	.+6      	; 0x8d0 <__addsf3+0x1e>
     8ca:	5b c1       	rjmp	.+694    	; 0xb82 <__fp_nan>
     8cc:	0e f4       	brtc	.+2      	; 0x8d0 <__addsf3+0x1e>
     8ce:	e0 95       	com	r30
     8d0:	e7 fb       	bst	r30, 7
     8d2:	51 c1       	rjmp	.+674    	; 0xb76 <__fp_inf>

000008d4 <__addsf3x>:
     8d4:	e9 2f       	mov	r30, r25
     8d6:	77 d1       	rcall	.+750    	; 0xbc6 <__fp_split3>
     8d8:	80 f3       	brcs	.-32     	; 0x8ba <__addsf3+0x8>
     8da:	ba 17       	cp	r27, r26
     8dc:	62 07       	cpc	r22, r18
     8de:	73 07       	cpc	r23, r19
     8e0:	84 07       	cpc	r24, r20
     8e2:	95 07       	cpc	r25, r21
     8e4:	18 f0       	brcs	.+6      	; 0x8ec <__addsf3x+0x18>
     8e6:	71 f4       	brne	.+28     	; 0x904 <__addsf3x+0x30>
     8e8:	9e f5       	brtc	.+102    	; 0x950 <__addsf3x+0x7c>
     8ea:	8f c1       	rjmp	.+798    	; 0xc0a <__fp_zero>
     8ec:	0e f4       	brtc	.+2      	; 0x8f0 <__addsf3x+0x1c>
     8ee:	e0 95       	com	r30
     8f0:	0b 2e       	mov	r0, r27
     8f2:	ba 2f       	mov	r27, r26
     8f4:	a0 2d       	mov	r26, r0
     8f6:	0b 01       	movw	r0, r22
     8f8:	b9 01       	movw	r22, r18
     8fa:	90 01       	movw	r18, r0
     8fc:	0c 01       	movw	r0, r24
     8fe:	ca 01       	movw	r24, r20
     900:	a0 01       	movw	r20, r0
     902:	11 24       	eor	r1, r1
     904:	ff 27       	eor	r31, r31
     906:	59 1b       	sub	r21, r25
     908:	99 f0       	breq	.+38     	; 0x930 <__addsf3x+0x5c>
     90a:	59 3f       	cpi	r21, 0xF9	; 249
     90c:	50 f4       	brcc	.+20     	; 0x922 <__addsf3x+0x4e>
     90e:	50 3e       	cpi	r21, 0xE0	; 224
     910:	68 f1       	brcs	.+90     	; 0x96c <__addsf3x+0x98>
     912:	1a 16       	cp	r1, r26
     914:	f0 40       	sbci	r31, 0x00	; 0
     916:	a2 2f       	mov	r26, r18
     918:	23 2f       	mov	r18, r19
     91a:	34 2f       	mov	r19, r20
     91c:	44 27       	eor	r20, r20
     91e:	58 5f       	subi	r21, 0xF8	; 248
     920:	f3 cf       	rjmp	.-26     	; 0x908 <__addsf3x+0x34>
     922:	46 95       	lsr	r20
     924:	37 95       	ror	r19
     926:	27 95       	ror	r18
     928:	a7 95       	ror	r26
     92a:	f0 40       	sbci	r31, 0x00	; 0
     92c:	53 95       	inc	r21
     92e:	c9 f7       	brne	.-14     	; 0x922 <__addsf3x+0x4e>
     930:	7e f4       	brtc	.+30     	; 0x950 <__addsf3x+0x7c>
     932:	1f 16       	cp	r1, r31
     934:	ba 0b       	sbc	r27, r26
     936:	62 0b       	sbc	r22, r18
     938:	73 0b       	sbc	r23, r19
     93a:	84 0b       	sbc	r24, r20
     93c:	ba f0       	brmi	.+46     	; 0x96c <__addsf3x+0x98>
     93e:	91 50       	subi	r25, 0x01	; 1
     940:	a1 f0       	breq	.+40     	; 0x96a <__addsf3x+0x96>
     942:	ff 0f       	add	r31, r31
     944:	bb 1f       	adc	r27, r27
     946:	66 1f       	adc	r22, r22
     948:	77 1f       	adc	r23, r23
     94a:	88 1f       	adc	r24, r24
     94c:	c2 f7       	brpl	.-16     	; 0x93e <__addsf3x+0x6a>
     94e:	0e c0       	rjmp	.+28     	; 0x96c <__addsf3x+0x98>
     950:	ba 0f       	add	r27, r26
     952:	62 1f       	adc	r22, r18
     954:	73 1f       	adc	r23, r19
     956:	84 1f       	adc	r24, r20
     958:	48 f4       	brcc	.+18     	; 0x96c <__addsf3x+0x98>
     95a:	87 95       	ror	r24
     95c:	77 95       	ror	r23
     95e:	67 95       	ror	r22
     960:	b7 95       	ror	r27
     962:	f7 95       	ror	r31
     964:	9e 3f       	cpi	r25, 0xFE	; 254
     966:	08 f0       	brcs	.+2      	; 0x96a <__addsf3x+0x96>
     968:	b3 cf       	rjmp	.-154    	; 0x8d0 <__addsf3+0x1e>
     96a:	93 95       	inc	r25
     96c:	88 0f       	add	r24, r24
     96e:	08 f0       	brcs	.+2      	; 0x972 <__addsf3x+0x9e>
     970:	99 27       	eor	r25, r25
     972:	ee 0f       	add	r30, r30
     974:	97 95       	ror	r25
     976:	87 95       	ror	r24
     978:	08 95       	ret

0000097a <__cmpsf2>:
     97a:	d9 d0       	rcall	.+434    	; 0xb2e <__fp_cmp>
     97c:	08 f4       	brcc	.+2      	; 0x980 <__cmpsf2+0x6>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	08 95       	ret

00000982 <__divsf3>:
     982:	0c d0       	rcall	.+24     	; 0x99c <__divsf3x>
     984:	0f c1       	rjmp	.+542    	; 0xba4 <__fp_round>
     986:	07 d1       	rcall	.+526    	; 0xb96 <__fp_pscB>
     988:	40 f0       	brcs	.+16     	; 0x99a <__divsf3+0x18>
     98a:	fe d0       	rcall	.+508    	; 0xb88 <__fp_pscA>
     98c:	30 f0       	brcs	.+12     	; 0x99a <__divsf3+0x18>
     98e:	21 f4       	brne	.+8      	; 0x998 <__divsf3+0x16>
     990:	5f 3f       	cpi	r21, 0xFF	; 255
     992:	19 f0       	breq	.+6      	; 0x99a <__divsf3+0x18>
     994:	f0 c0       	rjmp	.+480    	; 0xb76 <__fp_inf>
     996:	51 11       	cpse	r21, r1
     998:	39 c1       	rjmp	.+626    	; 0xc0c <__fp_szero>
     99a:	f3 c0       	rjmp	.+486    	; 0xb82 <__fp_nan>

0000099c <__divsf3x>:
     99c:	14 d1       	rcall	.+552    	; 0xbc6 <__fp_split3>
     99e:	98 f3       	brcs	.-26     	; 0x986 <__divsf3+0x4>

000009a0 <__divsf3_pse>:
     9a0:	99 23       	and	r25, r25
     9a2:	c9 f3       	breq	.-14     	; 0x996 <__divsf3+0x14>
     9a4:	55 23       	and	r21, r21
     9a6:	b1 f3       	breq	.-20     	; 0x994 <__divsf3+0x12>
     9a8:	95 1b       	sub	r25, r21
     9aa:	55 0b       	sbc	r21, r21
     9ac:	bb 27       	eor	r27, r27
     9ae:	aa 27       	eor	r26, r26
     9b0:	62 17       	cp	r22, r18
     9b2:	73 07       	cpc	r23, r19
     9b4:	84 07       	cpc	r24, r20
     9b6:	38 f0       	brcs	.+14     	; 0x9c6 <__divsf3_pse+0x26>
     9b8:	9f 5f       	subi	r25, 0xFF	; 255
     9ba:	5f 4f       	sbci	r21, 0xFF	; 255
     9bc:	22 0f       	add	r18, r18
     9be:	33 1f       	adc	r19, r19
     9c0:	44 1f       	adc	r20, r20
     9c2:	aa 1f       	adc	r26, r26
     9c4:	a9 f3       	breq	.-22     	; 0x9b0 <__divsf3_pse+0x10>
     9c6:	33 d0       	rcall	.+102    	; 0xa2e <__divsf3_pse+0x8e>
     9c8:	0e 2e       	mov	r0, r30
     9ca:	3a f0       	brmi	.+14     	; 0x9da <__divsf3_pse+0x3a>
     9cc:	e0 e8       	ldi	r30, 0x80	; 128
     9ce:	30 d0       	rcall	.+96     	; 0xa30 <__divsf3_pse+0x90>
     9d0:	91 50       	subi	r25, 0x01	; 1
     9d2:	50 40       	sbci	r21, 0x00	; 0
     9d4:	e6 95       	lsr	r30
     9d6:	00 1c       	adc	r0, r0
     9d8:	ca f7       	brpl	.-14     	; 0x9cc <__divsf3_pse+0x2c>
     9da:	29 d0       	rcall	.+82     	; 0xa2e <__divsf3_pse+0x8e>
     9dc:	fe 2f       	mov	r31, r30
     9de:	27 d0       	rcall	.+78     	; 0xa2e <__divsf3_pse+0x8e>
     9e0:	66 0f       	add	r22, r22
     9e2:	77 1f       	adc	r23, r23
     9e4:	88 1f       	adc	r24, r24
     9e6:	bb 1f       	adc	r27, r27
     9e8:	26 17       	cp	r18, r22
     9ea:	37 07       	cpc	r19, r23
     9ec:	48 07       	cpc	r20, r24
     9ee:	ab 07       	cpc	r26, r27
     9f0:	b0 e8       	ldi	r27, 0x80	; 128
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <__divsf3_pse+0x56>
     9f4:	bb 0b       	sbc	r27, r27
     9f6:	80 2d       	mov	r24, r0
     9f8:	bf 01       	movw	r22, r30
     9fa:	ff 27       	eor	r31, r31
     9fc:	93 58       	subi	r25, 0x83	; 131
     9fe:	5f 4f       	sbci	r21, 0xFF	; 255
     a00:	2a f0       	brmi	.+10     	; 0xa0c <__divsf3_pse+0x6c>
     a02:	9e 3f       	cpi	r25, 0xFE	; 254
     a04:	51 05       	cpc	r21, r1
     a06:	68 f0       	brcs	.+26     	; 0xa22 <__divsf3_pse+0x82>
     a08:	b6 c0       	rjmp	.+364    	; 0xb76 <__fp_inf>
     a0a:	00 c1       	rjmp	.+512    	; 0xc0c <__fp_szero>
     a0c:	5f 3f       	cpi	r21, 0xFF	; 255
     a0e:	ec f3       	brlt	.-6      	; 0xa0a <__divsf3_pse+0x6a>
     a10:	98 3e       	cpi	r25, 0xE8	; 232
     a12:	dc f3       	brlt	.-10     	; 0xa0a <__divsf3_pse+0x6a>
     a14:	86 95       	lsr	r24
     a16:	77 95       	ror	r23
     a18:	67 95       	ror	r22
     a1a:	b7 95       	ror	r27
     a1c:	f7 95       	ror	r31
     a1e:	9f 5f       	subi	r25, 0xFF	; 255
     a20:	c9 f7       	brne	.-14     	; 0xa14 <__divsf3_pse+0x74>
     a22:	88 0f       	add	r24, r24
     a24:	91 1d       	adc	r25, r1
     a26:	96 95       	lsr	r25
     a28:	87 95       	ror	r24
     a2a:	97 f9       	bld	r25, 7
     a2c:	08 95       	ret
     a2e:	e1 e0       	ldi	r30, 0x01	; 1
     a30:	66 0f       	add	r22, r22
     a32:	77 1f       	adc	r23, r23
     a34:	88 1f       	adc	r24, r24
     a36:	bb 1f       	adc	r27, r27
     a38:	62 17       	cp	r22, r18
     a3a:	73 07       	cpc	r23, r19
     a3c:	84 07       	cpc	r24, r20
     a3e:	ba 07       	cpc	r27, r26
     a40:	20 f0       	brcs	.+8      	; 0xa4a <__divsf3_pse+0xaa>
     a42:	62 1b       	sub	r22, r18
     a44:	73 0b       	sbc	r23, r19
     a46:	84 0b       	sbc	r24, r20
     a48:	ba 0b       	sbc	r27, r26
     a4a:	ee 1f       	adc	r30, r30
     a4c:	88 f7       	brcc	.-30     	; 0xa30 <__divsf3_pse+0x90>
     a4e:	e0 95       	com	r30
     a50:	08 95       	ret

00000a52 <__fixsfsi>:
     a52:	04 d0       	rcall	.+8      	; 0xa5c <__fixunssfsi>
     a54:	68 94       	set
     a56:	b1 11       	cpse	r27, r1
     a58:	d9 c0       	rjmp	.+434    	; 0xc0c <__fp_szero>
     a5a:	08 95       	ret

00000a5c <__fixunssfsi>:
     a5c:	bc d0       	rcall	.+376    	; 0xbd6 <__fp_splitA>
     a5e:	88 f0       	brcs	.+34     	; 0xa82 <__fixunssfsi+0x26>
     a60:	9f 57       	subi	r25, 0x7F	; 127
     a62:	90 f0       	brcs	.+36     	; 0xa88 <__fixunssfsi+0x2c>
     a64:	b9 2f       	mov	r27, r25
     a66:	99 27       	eor	r25, r25
     a68:	b7 51       	subi	r27, 0x17	; 23
     a6a:	a0 f0       	brcs	.+40     	; 0xa94 <__fixunssfsi+0x38>
     a6c:	d1 f0       	breq	.+52     	; 0xaa2 <__fixunssfsi+0x46>
     a6e:	66 0f       	add	r22, r22
     a70:	77 1f       	adc	r23, r23
     a72:	88 1f       	adc	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	1a f0       	brmi	.+6      	; 0xa7e <__fixunssfsi+0x22>
     a78:	ba 95       	dec	r27
     a7a:	c9 f7       	brne	.-14     	; 0xa6e <__fixunssfsi+0x12>
     a7c:	12 c0       	rjmp	.+36     	; 0xaa2 <__fixunssfsi+0x46>
     a7e:	b1 30       	cpi	r27, 0x01	; 1
     a80:	81 f0       	breq	.+32     	; 0xaa2 <__fixunssfsi+0x46>
     a82:	c3 d0       	rcall	.+390    	; 0xc0a <__fp_zero>
     a84:	b1 e0       	ldi	r27, 0x01	; 1
     a86:	08 95       	ret
     a88:	c0 c0       	rjmp	.+384    	; 0xc0a <__fp_zero>
     a8a:	67 2f       	mov	r22, r23
     a8c:	78 2f       	mov	r23, r24
     a8e:	88 27       	eor	r24, r24
     a90:	b8 5f       	subi	r27, 0xF8	; 248
     a92:	39 f0       	breq	.+14     	; 0xaa2 <__fixunssfsi+0x46>
     a94:	b9 3f       	cpi	r27, 0xF9	; 249
     a96:	cc f3       	brlt	.-14     	; 0xa8a <__fixunssfsi+0x2e>
     a98:	86 95       	lsr	r24
     a9a:	77 95       	ror	r23
     a9c:	67 95       	ror	r22
     a9e:	b3 95       	inc	r27
     aa0:	d9 f7       	brne	.-10     	; 0xa98 <__fixunssfsi+0x3c>
     aa2:	3e f4       	brtc	.+14     	; 0xab2 <__fixunssfsi+0x56>
     aa4:	90 95       	com	r25
     aa6:	80 95       	com	r24
     aa8:	70 95       	com	r23
     aaa:	61 95       	neg	r22
     aac:	7f 4f       	sbci	r23, 0xFF	; 255
     aae:	8f 4f       	sbci	r24, 0xFF	; 255
     ab0:	9f 4f       	sbci	r25, 0xFF	; 255
     ab2:	08 95       	ret

00000ab4 <__floatunsisf>:
     ab4:	e8 94       	clt
     ab6:	09 c0       	rjmp	.+18     	; 0xaca <__floatsisf+0x12>

00000ab8 <__floatsisf>:
     ab8:	97 fb       	bst	r25, 7
     aba:	3e f4       	brtc	.+14     	; 0xaca <__floatsisf+0x12>
     abc:	90 95       	com	r25
     abe:	80 95       	com	r24
     ac0:	70 95       	com	r23
     ac2:	61 95       	neg	r22
     ac4:	7f 4f       	sbci	r23, 0xFF	; 255
     ac6:	8f 4f       	sbci	r24, 0xFF	; 255
     ac8:	9f 4f       	sbci	r25, 0xFF	; 255
     aca:	99 23       	and	r25, r25
     acc:	a9 f0       	breq	.+42     	; 0xaf8 <__floatsisf+0x40>
     ace:	f9 2f       	mov	r31, r25
     ad0:	96 e9       	ldi	r25, 0x96	; 150
     ad2:	bb 27       	eor	r27, r27
     ad4:	93 95       	inc	r25
     ad6:	f6 95       	lsr	r31
     ad8:	87 95       	ror	r24
     ada:	77 95       	ror	r23
     adc:	67 95       	ror	r22
     ade:	b7 95       	ror	r27
     ae0:	f1 11       	cpse	r31, r1
     ae2:	f8 cf       	rjmp	.-16     	; 0xad4 <__floatsisf+0x1c>
     ae4:	fa f4       	brpl	.+62     	; 0xb24 <__floatsisf+0x6c>
     ae6:	bb 0f       	add	r27, r27
     ae8:	11 f4       	brne	.+4      	; 0xaee <__floatsisf+0x36>
     aea:	60 ff       	sbrs	r22, 0
     aec:	1b c0       	rjmp	.+54     	; 0xb24 <__floatsisf+0x6c>
     aee:	6f 5f       	subi	r22, 0xFF	; 255
     af0:	7f 4f       	sbci	r23, 0xFF	; 255
     af2:	8f 4f       	sbci	r24, 0xFF	; 255
     af4:	9f 4f       	sbci	r25, 0xFF	; 255
     af6:	16 c0       	rjmp	.+44     	; 0xb24 <__floatsisf+0x6c>
     af8:	88 23       	and	r24, r24
     afa:	11 f0       	breq	.+4      	; 0xb00 <__floatsisf+0x48>
     afc:	96 e9       	ldi	r25, 0x96	; 150
     afe:	11 c0       	rjmp	.+34     	; 0xb22 <__floatsisf+0x6a>
     b00:	77 23       	and	r23, r23
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatsisf+0x54>
     b04:	9e e8       	ldi	r25, 0x8E	; 142
     b06:	87 2f       	mov	r24, r23
     b08:	76 2f       	mov	r23, r22
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <__floatsisf+0x5e>
     b0c:	66 23       	and	r22, r22
     b0e:	71 f0       	breq	.+28     	; 0xb2c <__floatsisf+0x74>
     b10:	96 e8       	ldi	r25, 0x86	; 134
     b12:	86 2f       	mov	r24, r22
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	2a f0       	brmi	.+10     	; 0xb24 <__floatsisf+0x6c>
     b1a:	9a 95       	dec	r25
     b1c:	66 0f       	add	r22, r22
     b1e:	77 1f       	adc	r23, r23
     b20:	88 1f       	adc	r24, r24
     b22:	da f7       	brpl	.-10     	; 0xb1a <__floatsisf+0x62>
     b24:	88 0f       	add	r24, r24
     b26:	96 95       	lsr	r25
     b28:	87 95       	ror	r24
     b2a:	97 f9       	bld	r25, 7
     b2c:	08 95       	ret

00000b2e <__fp_cmp>:
     b2e:	99 0f       	add	r25, r25
     b30:	00 08       	sbc	r0, r0
     b32:	55 0f       	add	r21, r21
     b34:	aa 0b       	sbc	r26, r26
     b36:	e0 e8       	ldi	r30, 0x80	; 128
     b38:	fe ef       	ldi	r31, 0xFE	; 254
     b3a:	16 16       	cp	r1, r22
     b3c:	17 06       	cpc	r1, r23
     b3e:	e8 07       	cpc	r30, r24
     b40:	f9 07       	cpc	r31, r25
     b42:	c0 f0       	brcs	.+48     	; 0xb74 <__fp_cmp+0x46>
     b44:	12 16       	cp	r1, r18
     b46:	13 06       	cpc	r1, r19
     b48:	e4 07       	cpc	r30, r20
     b4a:	f5 07       	cpc	r31, r21
     b4c:	98 f0       	brcs	.+38     	; 0xb74 <__fp_cmp+0x46>
     b4e:	62 1b       	sub	r22, r18
     b50:	73 0b       	sbc	r23, r19
     b52:	84 0b       	sbc	r24, r20
     b54:	95 0b       	sbc	r25, r21
     b56:	39 f4       	brne	.+14     	; 0xb66 <__fp_cmp+0x38>
     b58:	0a 26       	eor	r0, r26
     b5a:	61 f0       	breq	.+24     	; 0xb74 <__fp_cmp+0x46>
     b5c:	23 2b       	or	r18, r19
     b5e:	24 2b       	or	r18, r20
     b60:	25 2b       	or	r18, r21
     b62:	21 f4       	brne	.+8      	; 0xb6c <__fp_cmp+0x3e>
     b64:	08 95       	ret
     b66:	0a 26       	eor	r0, r26
     b68:	09 f4       	brne	.+2      	; 0xb6c <__fp_cmp+0x3e>
     b6a:	a1 40       	sbci	r26, 0x01	; 1
     b6c:	a6 95       	lsr	r26
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	81 1d       	adc	r24, r1
     b72:	81 1d       	adc	r24, r1
     b74:	08 95       	ret

00000b76 <__fp_inf>:
     b76:	97 f9       	bld	r25, 7
     b78:	9f 67       	ori	r25, 0x7F	; 127
     b7a:	80 e8       	ldi	r24, 0x80	; 128
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	08 95       	ret

00000b82 <__fp_nan>:
     b82:	9f ef       	ldi	r25, 0xFF	; 255
     b84:	80 ec       	ldi	r24, 0xC0	; 192
     b86:	08 95       	ret

00000b88 <__fp_pscA>:
     b88:	00 24       	eor	r0, r0
     b8a:	0a 94       	dec	r0
     b8c:	16 16       	cp	r1, r22
     b8e:	17 06       	cpc	r1, r23
     b90:	18 06       	cpc	r1, r24
     b92:	09 06       	cpc	r0, r25
     b94:	08 95       	ret

00000b96 <__fp_pscB>:
     b96:	00 24       	eor	r0, r0
     b98:	0a 94       	dec	r0
     b9a:	12 16       	cp	r1, r18
     b9c:	13 06       	cpc	r1, r19
     b9e:	14 06       	cpc	r1, r20
     ba0:	05 06       	cpc	r0, r21
     ba2:	08 95       	ret

00000ba4 <__fp_round>:
     ba4:	09 2e       	mov	r0, r25
     ba6:	03 94       	inc	r0
     ba8:	00 0c       	add	r0, r0
     baa:	11 f4       	brne	.+4      	; 0xbb0 <__fp_round+0xc>
     bac:	88 23       	and	r24, r24
     bae:	52 f0       	brmi	.+20     	; 0xbc4 <__fp_round+0x20>
     bb0:	bb 0f       	add	r27, r27
     bb2:	40 f4       	brcc	.+16     	; 0xbc4 <__fp_round+0x20>
     bb4:	bf 2b       	or	r27, r31
     bb6:	11 f4       	brne	.+4      	; 0xbbc <__fp_round+0x18>
     bb8:	60 ff       	sbrs	r22, 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__fp_round+0x20>
     bbc:	6f 5f       	subi	r22, 0xFF	; 255
     bbe:	7f 4f       	sbci	r23, 0xFF	; 255
     bc0:	8f 4f       	sbci	r24, 0xFF	; 255
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	08 95       	ret

00000bc6 <__fp_split3>:
     bc6:	57 fd       	sbrc	r21, 7
     bc8:	90 58       	subi	r25, 0x80	; 128
     bca:	44 0f       	add	r20, r20
     bcc:	55 1f       	adc	r21, r21
     bce:	59 f0       	breq	.+22     	; 0xbe6 <__fp_splitA+0x10>
     bd0:	5f 3f       	cpi	r21, 0xFF	; 255
     bd2:	71 f0       	breq	.+28     	; 0xbf0 <__fp_splitA+0x1a>
     bd4:	47 95       	ror	r20

00000bd6 <__fp_splitA>:
     bd6:	88 0f       	add	r24, r24
     bd8:	97 fb       	bst	r25, 7
     bda:	99 1f       	adc	r25, r25
     bdc:	61 f0       	breq	.+24     	; 0xbf6 <__fp_splitA+0x20>
     bde:	9f 3f       	cpi	r25, 0xFF	; 255
     be0:	79 f0       	breq	.+30     	; 0xc00 <__fp_splitA+0x2a>
     be2:	87 95       	ror	r24
     be4:	08 95       	ret
     be6:	12 16       	cp	r1, r18
     be8:	13 06       	cpc	r1, r19
     bea:	14 06       	cpc	r1, r20
     bec:	55 1f       	adc	r21, r21
     bee:	f2 cf       	rjmp	.-28     	; 0xbd4 <__fp_split3+0xe>
     bf0:	46 95       	lsr	r20
     bf2:	f1 df       	rcall	.-30     	; 0xbd6 <__fp_splitA>
     bf4:	08 c0       	rjmp	.+16     	; 0xc06 <__fp_splitA+0x30>
     bf6:	16 16       	cp	r1, r22
     bf8:	17 06       	cpc	r1, r23
     bfa:	18 06       	cpc	r1, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	f1 cf       	rjmp	.-30     	; 0xbe2 <__fp_splitA+0xc>
     c00:	86 95       	lsr	r24
     c02:	71 05       	cpc	r23, r1
     c04:	61 05       	cpc	r22, r1
     c06:	08 94       	sec
     c08:	08 95       	ret

00000c0a <__fp_zero>:
     c0a:	e8 94       	clt

00000c0c <__fp_szero>:
     c0c:	bb 27       	eor	r27, r27
     c0e:	66 27       	eor	r22, r22
     c10:	77 27       	eor	r23, r23
     c12:	cb 01       	movw	r24, r22
     c14:	97 f9       	bld	r25, 7
     c16:	08 95       	ret

00000c18 <__gesf2>:
     c18:	8a df       	rcall	.-236    	; 0xb2e <__fp_cmp>
     c1a:	08 f4       	brcc	.+2      	; 0xc1e <__gesf2+0x6>
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	08 95       	ret

00000c20 <__mulsf3>:
     c20:	0b d0       	rcall	.+22     	; 0xc38 <__mulsf3x>
     c22:	c0 cf       	rjmp	.-128    	; 0xba4 <__fp_round>
     c24:	b1 df       	rcall	.-158    	; 0xb88 <__fp_pscA>
     c26:	28 f0       	brcs	.+10     	; 0xc32 <__mulsf3+0x12>
     c28:	b6 df       	rcall	.-148    	; 0xb96 <__fp_pscB>
     c2a:	18 f0       	brcs	.+6      	; 0xc32 <__mulsf3+0x12>
     c2c:	95 23       	and	r25, r21
     c2e:	09 f0       	breq	.+2      	; 0xc32 <__mulsf3+0x12>
     c30:	a2 cf       	rjmp	.-188    	; 0xb76 <__fp_inf>
     c32:	a7 cf       	rjmp	.-178    	; 0xb82 <__fp_nan>
     c34:	11 24       	eor	r1, r1
     c36:	ea cf       	rjmp	.-44     	; 0xc0c <__fp_szero>

00000c38 <__mulsf3x>:
     c38:	c6 df       	rcall	.-116    	; 0xbc6 <__fp_split3>
     c3a:	a0 f3       	brcs	.-24     	; 0xc24 <__mulsf3+0x4>

00000c3c <__mulsf3_pse>:
     c3c:	95 9f       	mul	r25, r21
     c3e:	d1 f3       	breq	.-12     	; 0xc34 <__mulsf3+0x14>
     c40:	95 0f       	add	r25, r21
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	55 1f       	adc	r21, r21
     c46:	62 9f       	mul	r22, r18
     c48:	f0 01       	movw	r30, r0
     c4a:	72 9f       	mul	r23, r18
     c4c:	bb 27       	eor	r27, r27
     c4e:	f0 0d       	add	r31, r0
     c50:	b1 1d       	adc	r27, r1
     c52:	63 9f       	mul	r22, r19
     c54:	aa 27       	eor	r26, r26
     c56:	f0 0d       	add	r31, r0
     c58:	b1 1d       	adc	r27, r1
     c5a:	aa 1f       	adc	r26, r26
     c5c:	64 9f       	mul	r22, r20
     c5e:	66 27       	eor	r22, r22
     c60:	b0 0d       	add	r27, r0
     c62:	a1 1d       	adc	r26, r1
     c64:	66 1f       	adc	r22, r22
     c66:	82 9f       	mul	r24, r18
     c68:	22 27       	eor	r18, r18
     c6a:	b0 0d       	add	r27, r0
     c6c:	a1 1d       	adc	r26, r1
     c6e:	62 1f       	adc	r22, r18
     c70:	73 9f       	mul	r23, r19
     c72:	b0 0d       	add	r27, r0
     c74:	a1 1d       	adc	r26, r1
     c76:	62 1f       	adc	r22, r18
     c78:	83 9f       	mul	r24, r19
     c7a:	a0 0d       	add	r26, r0
     c7c:	61 1d       	adc	r22, r1
     c7e:	22 1f       	adc	r18, r18
     c80:	74 9f       	mul	r23, r20
     c82:	33 27       	eor	r19, r19
     c84:	a0 0d       	add	r26, r0
     c86:	61 1d       	adc	r22, r1
     c88:	23 1f       	adc	r18, r19
     c8a:	84 9f       	mul	r24, r20
     c8c:	60 0d       	add	r22, r0
     c8e:	21 1d       	adc	r18, r1
     c90:	82 2f       	mov	r24, r18
     c92:	76 2f       	mov	r23, r22
     c94:	6a 2f       	mov	r22, r26
     c96:	11 24       	eor	r1, r1
     c98:	9f 57       	subi	r25, 0x7F	; 127
     c9a:	50 40       	sbci	r21, 0x00	; 0
     c9c:	8a f0       	brmi	.+34     	; 0xcc0 <__mulsf3_pse+0x84>
     c9e:	e1 f0       	breq	.+56     	; 0xcd8 <__mulsf3_pse+0x9c>
     ca0:	88 23       	and	r24, r24
     ca2:	4a f0       	brmi	.+18     	; 0xcb6 <__mulsf3_pse+0x7a>
     ca4:	ee 0f       	add	r30, r30
     ca6:	ff 1f       	adc	r31, r31
     ca8:	bb 1f       	adc	r27, r27
     caa:	66 1f       	adc	r22, r22
     cac:	77 1f       	adc	r23, r23
     cae:	88 1f       	adc	r24, r24
     cb0:	91 50       	subi	r25, 0x01	; 1
     cb2:	50 40       	sbci	r21, 0x00	; 0
     cb4:	a9 f7       	brne	.-22     	; 0xca0 <__mulsf3_pse+0x64>
     cb6:	9e 3f       	cpi	r25, 0xFE	; 254
     cb8:	51 05       	cpc	r21, r1
     cba:	70 f0       	brcs	.+28     	; 0xcd8 <__mulsf3_pse+0x9c>
     cbc:	5c cf       	rjmp	.-328    	; 0xb76 <__fp_inf>
     cbe:	a6 cf       	rjmp	.-180    	; 0xc0c <__fp_szero>
     cc0:	5f 3f       	cpi	r21, 0xFF	; 255
     cc2:	ec f3       	brlt	.-6      	; 0xcbe <__mulsf3_pse+0x82>
     cc4:	98 3e       	cpi	r25, 0xE8	; 232
     cc6:	dc f3       	brlt	.-10     	; 0xcbe <__mulsf3_pse+0x82>
     cc8:	86 95       	lsr	r24
     cca:	77 95       	ror	r23
     ccc:	67 95       	ror	r22
     cce:	b7 95       	ror	r27
     cd0:	f7 95       	ror	r31
     cd2:	e7 95       	ror	r30
     cd4:	9f 5f       	subi	r25, 0xFF	; 255
     cd6:	c1 f7       	brne	.-16     	; 0xcc8 <__mulsf3_pse+0x8c>
     cd8:	fe 2b       	or	r31, r30
     cda:	88 0f       	add	r24, r24
     cdc:	91 1d       	adc	r25, r1
     cde:	96 95       	lsr	r25
     ce0:	87 95       	ror	r24
     ce2:	97 f9       	bld	r25, 7
     ce4:	08 95       	ret

00000ce6 <__divmodhi4>:
     ce6:	97 fb       	bst	r25, 7
     ce8:	07 2e       	mov	r0, r23
     cea:	16 f4       	brtc	.+4      	; 0xcf0 <__divmodhi4+0xa>
     cec:	00 94       	com	r0
     cee:	06 d0       	rcall	.+12     	; 0xcfc <__divmodhi4_neg1>
     cf0:	77 fd       	sbrc	r23, 7
     cf2:	08 d0       	rcall	.+16     	; 0xd04 <__divmodhi4_neg2>
     cf4:	0b d0       	rcall	.+22     	; 0xd0c <__udivmodhi4>
     cf6:	07 fc       	sbrc	r0, 7
     cf8:	05 d0       	rcall	.+10     	; 0xd04 <__divmodhi4_neg2>
     cfa:	3e f4       	brtc	.+14     	; 0xd0a <__divmodhi4_exit>

00000cfc <__divmodhi4_neg1>:
     cfc:	90 95       	com	r25
     cfe:	81 95       	neg	r24
     d00:	9f 4f       	sbci	r25, 0xFF	; 255
     d02:	08 95       	ret

00000d04 <__divmodhi4_neg2>:
     d04:	70 95       	com	r23
     d06:	61 95       	neg	r22
     d08:	7f 4f       	sbci	r23, 0xFF	; 255

00000d0a <__divmodhi4_exit>:
     d0a:	08 95       	ret

00000d0c <__udivmodhi4>:
     d0c:	aa 1b       	sub	r26, r26
     d0e:	bb 1b       	sub	r27, r27
     d10:	51 e1       	ldi	r21, 0x11	; 17
     d12:	07 c0       	rjmp	.+14     	; 0xd22 <__udivmodhi4_ep>

00000d14 <__udivmodhi4_loop>:
     d14:	aa 1f       	adc	r26, r26
     d16:	bb 1f       	adc	r27, r27
     d18:	a6 17       	cp	r26, r22
     d1a:	b7 07       	cpc	r27, r23
     d1c:	10 f0       	brcs	.+4      	; 0xd22 <__udivmodhi4_ep>
     d1e:	a6 1b       	sub	r26, r22
     d20:	b7 0b       	sbc	r27, r23

00000d22 <__udivmodhi4_ep>:
     d22:	88 1f       	adc	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	5a 95       	dec	r21
     d28:	a9 f7       	brne	.-22     	; 0xd14 <__udivmodhi4_loop>
     d2a:	80 95       	com	r24
     d2c:	90 95       	com	r25
     d2e:	bc 01       	movw	r22, r24
     d30:	cd 01       	movw	r24, r26
     d32:	08 95       	ret

00000d34 <fdevopen>:
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	ec 01       	movw	r28, r24
     d3e:	8b 01       	movw	r16, r22
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	31 f4       	brne	.+12     	; 0xd50 <fdevopen+0x1c>
     d44:	61 15       	cp	r22, r1
     d46:	71 05       	cpc	r23, r1
     d48:	19 f4       	brne	.+6      	; 0xd50 <fdevopen+0x1c>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	37 c0       	rjmp	.+110    	; 0xdbe <fdevopen+0x8a>
     d50:	6e e0       	ldi	r22, 0x0E	; 14
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	68 d2       	rcall	.+1232   	; 0x122a <calloc>
     d5a:	fc 01       	movw	r30, r24
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	a9 f3       	breq	.-22     	; 0xd4a <fdevopen+0x16>
     d60:	80 e8       	ldi	r24, 0x80	; 128
     d62:	83 83       	std	Z+3, r24	; 0x03
     d64:	01 15       	cp	r16, r1
     d66:	11 05       	cpc	r17, r1
     d68:	71 f0       	breq	.+28     	; 0xd86 <fdevopen+0x52>
     d6a:	13 87       	std	Z+11, r17	; 0x0b
     d6c:	02 87       	std	Z+10, r16	; 0x0a
     d6e:	81 e8       	ldi	r24, 0x81	; 129
     d70:	83 83       	std	Z+3, r24	; 0x03
     d72:	80 91 5a 02 	lds	r24, 0x025A
     d76:	90 91 5b 02 	lds	r25, 0x025B
     d7a:	89 2b       	or	r24, r25
     d7c:	21 f4       	brne	.+8      	; 0xd86 <fdevopen+0x52>
     d7e:	f0 93 5b 02 	sts	0x025B, r31
     d82:	e0 93 5a 02 	sts	0x025A, r30
     d86:	20 97       	sbiw	r28, 0x00	; 0
     d88:	c9 f0       	breq	.+50     	; 0xdbc <fdevopen+0x88>
     d8a:	d1 87       	std	Z+9, r29	; 0x09
     d8c:	c0 87       	std	Z+8, r28	; 0x08
     d8e:	83 81       	ldd	r24, Z+3	; 0x03
     d90:	82 60       	ori	r24, 0x02	; 2
     d92:	83 83       	std	Z+3, r24	; 0x03
     d94:	80 91 5c 02 	lds	r24, 0x025C
     d98:	90 91 5d 02 	lds	r25, 0x025D
     d9c:	89 2b       	or	r24, r25
     d9e:	71 f4       	brne	.+28     	; 0xdbc <fdevopen+0x88>
     da0:	f0 93 5d 02 	sts	0x025D, r31
     da4:	e0 93 5c 02 	sts	0x025C, r30
     da8:	80 91 5e 02 	lds	r24, 0x025E
     dac:	90 91 5f 02 	lds	r25, 0x025F
     db0:	89 2b       	or	r24, r25
     db2:	21 f4       	brne	.+8      	; 0xdbc <fdevopen+0x88>
     db4:	f0 93 5f 02 	sts	0x025F, r31
     db8:	e0 93 5e 02 	sts	0x025E, r30
     dbc:	cf 01       	movw	r24, r30
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	08 95       	ret

00000dc8 <printf>:
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	fe 01       	movw	r30, r28
     dd2:	36 96       	adiw	r30, 0x06	; 6
     dd4:	61 91       	ld	r22, Z+
     dd6:	71 91       	ld	r23, Z+
     dd8:	af 01       	movw	r20, r30
     dda:	80 91 5c 02 	lds	r24, 0x025C
     dde:	90 91 5d 02 	lds	r25, 0x025D
     de2:	35 d0       	rcall	.+106    	; 0xe4e <vfprintf>
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <putchar>:
     dea:	60 91 5c 02 	lds	r22, 0x025C
     dee:	70 91 5d 02 	lds	r23, 0x025D
     df2:	79 c3       	rjmp	.+1778   	; 0x14e6 <fputc>

00000df4 <puts>:
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	e0 91 5c 02 	lds	r30, 0x025C
     e00:	f0 91 5d 02 	lds	r31, 0x025D
     e04:	23 81       	ldd	r18, Z+3	; 0x03
     e06:	21 ff       	sbrs	r18, 1
     e08:	1b c0       	rjmp	.+54     	; 0xe40 <puts+0x4c>
     e0a:	ec 01       	movw	r28, r24
     e0c:	00 e0       	ldi	r16, 0x00	; 0
     e0e:	10 e0       	ldi	r17, 0x00	; 0
     e10:	89 91       	ld	r24, Y+
     e12:	60 91 5c 02 	lds	r22, 0x025C
     e16:	70 91 5d 02 	lds	r23, 0x025D
     e1a:	db 01       	movw	r26, r22
     e1c:	18 96       	adiw	r26, 0x08	; 8
     e1e:	ed 91       	ld	r30, X+
     e20:	fc 91       	ld	r31, X
     e22:	19 97       	sbiw	r26, 0x09	; 9
     e24:	88 23       	and	r24, r24
     e26:	31 f0       	breq	.+12     	; 0xe34 <puts+0x40>
     e28:	19 95       	eicall
     e2a:	89 2b       	or	r24, r25
     e2c:	89 f3       	breq	.-30     	; 0xe10 <puts+0x1c>
     e2e:	0f ef       	ldi	r16, 0xFF	; 255
     e30:	1f ef       	ldi	r17, 0xFF	; 255
     e32:	ee cf       	rjmp	.-36     	; 0xe10 <puts+0x1c>
     e34:	8a e0       	ldi	r24, 0x0A	; 10
     e36:	19 95       	eicall
     e38:	89 2b       	or	r24, r25
     e3a:	11 f4       	brne	.+4      	; 0xe40 <puts+0x4c>
     e3c:	c8 01       	movw	r24, r16
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <puts+0x50>
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	9f ef       	ldi	r25, 0xFF	; 255
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	08 95       	ret

00000e4e <vfprintf>:
     e4e:	2f 92       	push	r2
     e50:	3f 92       	push	r3
     e52:	4f 92       	push	r4
     e54:	5f 92       	push	r5
     e56:	6f 92       	push	r6
     e58:	7f 92       	push	r7
     e5a:	8f 92       	push	r8
     e5c:	9f 92       	push	r9
     e5e:	af 92       	push	r10
     e60:	bf 92       	push	r11
     e62:	cf 92       	push	r12
     e64:	df 92       	push	r13
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	2c 97       	sbiw	r28, 0x0c	; 12
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	7c 01       	movw	r14, r24
     e84:	6b 01       	movw	r12, r22
     e86:	8a 01       	movw	r16, r20
     e88:	fc 01       	movw	r30, r24
     e8a:	17 82       	std	Z+7, r1	; 0x07
     e8c:	16 82       	std	Z+6, r1	; 0x06
     e8e:	83 81       	ldd	r24, Z+3	; 0x03
     e90:	81 ff       	sbrs	r24, 1
     e92:	b0 c1       	rjmp	.+864    	; 0x11f4 <vfprintf+0x3a6>
     e94:	ce 01       	movw	r24, r28
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	4c 01       	movw	r8, r24
     e9a:	f7 01       	movw	r30, r14
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	f6 01       	movw	r30, r12
     ea0:	93 fd       	sbrc	r25, 3
     ea2:	85 91       	lpm	r24, Z+
     ea4:	93 ff       	sbrs	r25, 3
     ea6:	81 91       	ld	r24, Z+
     ea8:	6f 01       	movw	r12, r30
     eaa:	88 23       	and	r24, r24
     eac:	09 f4       	brne	.+2      	; 0xeb0 <vfprintf+0x62>
     eae:	9e c1       	rjmp	.+828    	; 0x11ec <vfprintf+0x39e>
     eb0:	85 32       	cpi	r24, 0x25	; 37
     eb2:	39 f4       	brne	.+14     	; 0xec2 <vfprintf+0x74>
     eb4:	93 fd       	sbrc	r25, 3
     eb6:	85 91       	lpm	r24, Z+
     eb8:	93 ff       	sbrs	r25, 3
     eba:	81 91       	ld	r24, Z+
     ebc:	6f 01       	movw	r12, r30
     ebe:	85 32       	cpi	r24, 0x25	; 37
     ec0:	21 f4       	brne	.+8      	; 0xeca <vfprintf+0x7c>
     ec2:	b7 01       	movw	r22, r14
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0f d3       	rcall	.+1566   	; 0x14e6 <fputc>
     ec8:	e8 cf       	rjmp	.-48     	; 0xe9a <vfprintf+0x4c>
     eca:	51 2c       	mov	r5, r1
     ecc:	31 2c       	mov	r3, r1
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	20 32       	cpi	r18, 0x20	; 32
     ed2:	a0 f4       	brcc	.+40     	; 0xefc <vfprintf+0xae>
     ed4:	8b 32       	cpi	r24, 0x2B	; 43
     ed6:	69 f0       	breq	.+26     	; 0xef2 <vfprintf+0xa4>
     ed8:	30 f4       	brcc	.+12     	; 0xee6 <vfprintf+0x98>
     eda:	80 32       	cpi	r24, 0x20	; 32
     edc:	59 f0       	breq	.+22     	; 0xef4 <vfprintf+0xa6>
     ede:	83 32       	cpi	r24, 0x23	; 35
     ee0:	69 f4       	brne	.+26     	; 0xefc <vfprintf+0xae>
     ee2:	20 61       	ori	r18, 0x10	; 16
     ee4:	2c c0       	rjmp	.+88     	; 0xf3e <vfprintf+0xf0>
     ee6:	8d 32       	cpi	r24, 0x2D	; 45
     ee8:	39 f0       	breq	.+14     	; 0xef8 <vfprintf+0xaa>
     eea:	80 33       	cpi	r24, 0x30	; 48
     eec:	39 f4       	brne	.+14     	; 0xefc <vfprintf+0xae>
     eee:	21 60       	ori	r18, 0x01	; 1
     ef0:	26 c0       	rjmp	.+76     	; 0xf3e <vfprintf+0xf0>
     ef2:	22 60       	ori	r18, 0x02	; 2
     ef4:	24 60       	ori	r18, 0x04	; 4
     ef6:	23 c0       	rjmp	.+70     	; 0xf3e <vfprintf+0xf0>
     ef8:	28 60       	ori	r18, 0x08	; 8
     efa:	21 c0       	rjmp	.+66     	; 0xf3e <vfprintf+0xf0>
     efc:	27 fd       	sbrc	r18, 7
     efe:	27 c0       	rjmp	.+78     	; 0xf4e <vfprintf+0x100>
     f00:	30 ed       	ldi	r19, 0xD0	; 208
     f02:	38 0f       	add	r19, r24
     f04:	3a 30       	cpi	r19, 0x0A	; 10
     f06:	78 f4       	brcc	.+30     	; 0xf26 <vfprintf+0xd8>
     f08:	26 ff       	sbrs	r18, 6
     f0a:	06 c0       	rjmp	.+12     	; 0xf18 <vfprintf+0xca>
     f0c:	fa e0       	ldi	r31, 0x0A	; 10
     f0e:	5f 9e       	mul	r5, r31
     f10:	30 0d       	add	r19, r0
     f12:	11 24       	eor	r1, r1
     f14:	53 2e       	mov	r5, r19
     f16:	13 c0       	rjmp	.+38     	; 0xf3e <vfprintf+0xf0>
     f18:	8a e0       	ldi	r24, 0x0A	; 10
     f1a:	38 9e       	mul	r3, r24
     f1c:	30 0d       	add	r19, r0
     f1e:	11 24       	eor	r1, r1
     f20:	33 2e       	mov	r3, r19
     f22:	20 62       	ori	r18, 0x20	; 32
     f24:	0c c0       	rjmp	.+24     	; 0xf3e <vfprintf+0xf0>
     f26:	8e 32       	cpi	r24, 0x2E	; 46
     f28:	21 f4       	brne	.+8      	; 0xf32 <vfprintf+0xe4>
     f2a:	26 fd       	sbrc	r18, 6
     f2c:	5f c1       	rjmp	.+702    	; 0x11ec <vfprintf+0x39e>
     f2e:	20 64       	ori	r18, 0x40	; 64
     f30:	06 c0       	rjmp	.+12     	; 0xf3e <vfprintf+0xf0>
     f32:	8c 36       	cpi	r24, 0x6C	; 108
     f34:	11 f4       	brne	.+4      	; 0xf3a <vfprintf+0xec>
     f36:	20 68       	ori	r18, 0x80	; 128
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <vfprintf+0xf0>
     f3a:	88 36       	cpi	r24, 0x68	; 104
     f3c:	41 f4       	brne	.+16     	; 0xf4e <vfprintf+0x100>
     f3e:	f6 01       	movw	r30, r12
     f40:	93 fd       	sbrc	r25, 3
     f42:	85 91       	lpm	r24, Z+
     f44:	93 ff       	sbrs	r25, 3
     f46:	81 91       	ld	r24, Z+
     f48:	6f 01       	movw	r12, r30
     f4a:	81 11       	cpse	r24, r1
     f4c:	c1 cf       	rjmp	.-126    	; 0xed0 <vfprintf+0x82>
     f4e:	98 2f       	mov	r25, r24
     f50:	9f 7d       	andi	r25, 0xDF	; 223
     f52:	95 54       	subi	r25, 0x45	; 69
     f54:	93 30       	cpi	r25, 0x03	; 3
     f56:	28 f4       	brcc	.+10     	; 0xf62 <vfprintf+0x114>
     f58:	0c 5f       	subi	r16, 0xFC	; 252
     f5a:	1f 4f       	sbci	r17, 0xFF	; 255
     f5c:	ff e3       	ldi	r31, 0x3F	; 63
     f5e:	f9 83       	std	Y+1, r31	; 0x01
     f60:	0d c0       	rjmp	.+26     	; 0xf7c <vfprintf+0x12e>
     f62:	83 36       	cpi	r24, 0x63	; 99
     f64:	31 f0       	breq	.+12     	; 0xf72 <vfprintf+0x124>
     f66:	83 37       	cpi	r24, 0x73	; 115
     f68:	71 f0       	breq	.+28     	; 0xf86 <vfprintf+0x138>
     f6a:	83 35       	cpi	r24, 0x53	; 83
     f6c:	09 f0       	breq	.+2      	; 0xf70 <vfprintf+0x122>
     f6e:	57 c0       	rjmp	.+174    	; 0x101e <vfprintf+0x1d0>
     f70:	21 c0       	rjmp	.+66     	; 0xfb4 <vfprintf+0x166>
     f72:	f8 01       	movw	r30, r16
     f74:	80 81       	ld	r24, Z
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	0e 5f       	subi	r16, 0xFE	; 254
     f7a:	1f 4f       	sbci	r17, 0xFF	; 255
     f7c:	44 24       	eor	r4, r4
     f7e:	43 94       	inc	r4
     f80:	51 2c       	mov	r5, r1
     f82:	54 01       	movw	r10, r8
     f84:	14 c0       	rjmp	.+40     	; 0xfae <vfprintf+0x160>
     f86:	38 01       	movw	r6, r16
     f88:	f2 e0       	ldi	r31, 0x02	; 2
     f8a:	6f 0e       	add	r6, r31
     f8c:	71 1c       	adc	r7, r1
     f8e:	f8 01       	movw	r30, r16
     f90:	a0 80       	ld	r10, Z
     f92:	b1 80       	ldd	r11, Z+1	; 0x01
     f94:	26 ff       	sbrs	r18, 6
     f96:	03 c0       	rjmp	.+6      	; 0xf9e <vfprintf+0x150>
     f98:	65 2d       	mov	r22, r5
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <vfprintf+0x154>
     f9e:	6f ef       	ldi	r22, 0xFF	; 255
     fa0:	7f ef       	ldi	r23, 0xFF	; 255
     fa2:	c5 01       	movw	r24, r10
     fa4:	2c 87       	std	Y+12, r18	; 0x0c
     fa6:	94 d2       	rcall	.+1320   	; 0x14d0 <strnlen>
     fa8:	2c 01       	movw	r4, r24
     faa:	83 01       	movw	r16, r6
     fac:	2c 85       	ldd	r18, Y+12	; 0x0c
     fae:	2f 77       	andi	r18, 0x7F	; 127
     fb0:	22 2e       	mov	r2, r18
     fb2:	16 c0       	rjmp	.+44     	; 0xfe0 <vfprintf+0x192>
     fb4:	38 01       	movw	r6, r16
     fb6:	f2 e0       	ldi	r31, 0x02	; 2
     fb8:	6f 0e       	add	r6, r31
     fba:	71 1c       	adc	r7, r1
     fbc:	f8 01       	movw	r30, r16
     fbe:	a0 80       	ld	r10, Z
     fc0:	b1 80       	ldd	r11, Z+1	; 0x01
     fc2:	26 ff       	sbrs	r18, 6
     fc4:	03 c0       	rjmp	.+6      	; 0xfcc <vfprintf+0x17e>
     fc6:	65 2d       	mov	r22, r5
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <vfprintf+0x182>
     fcc:	6f ef       	ldi	r22, 0xFF	; 255
     fce:	7f ef       	ldi	r23, 0xFF	; 255
     fd0:	c5 01       	movw	r24, r10
     fd2:	2c 87       	std	Y+12, r18	; 0x0c
     fd4:	6b d2       	rcall	.+1238   	; 0x14ac <strnlen_P>
     fd6:	2c 01       	movw	r4, r24
     fd8:	2c 85       	ldd	r18, Y+12	; 0x0c
     fda:	20 68       	ori	r18, 0x80	; 128
     fdc:	22 2e       	mov	r2, r18
     fde:	83 01       	movw	r16, r6
     fe0:	23 fc       	sbrc	r2, 3
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <vfprintf+0x1c8>
     fe4:	83 2d       	mov	r24, r3
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	48 16       	cp	r4, r24
     fea:	59 06       	cpc	r5, r25
     fec:	a0 f4       	brcc	.+40     	; 0x1016 <vfprintf+0x1c8>
     fee:	b7 01       	movw	r22, r14
     ff0:	80 e2       	ldi	r24, 0x20	; 32
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	78 d2       	rcall	.+1264   	; 0x14e6 <fputc>
     ff6:	3a 94       	dec	r3
     ff8:	f5 cf       	rjmp	.-22     	; 0xfe4 <vfprintf+0x196>
     ffa:	f5 01       	movw	r30, r10
     ffc:	27 fc       	sbrc	r2, 7
     ffe:	85 91       	lpm	r24, Z+
    1000:	27 fe       	sbrs	r2, 7
    1002:	81 91       	ld	r24, Z+
    1004:	5f 01       	movw	r10, r30
    1006:	b7 01       	movw	r22, r14
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	6d d2       	rcall	.+1242   	; 0x14e6 <fputc>
    100c:	31 10       	cpse	r3, r1
    100e:	3a 94       	dec	r3
    1010:	f1 e0       	ldi	r31, 0x01	; 1
    1012:	4f 1a       	sub	r4, r31
    1014:	51 08       	sbc	r5, r1
    1016:	41 14       	cp	r4, r1
    1018:	51 04       	cpc	r5, r1
    101a:	79 f7       	brne	.-34     	; 0xffa <vfprintf+0x1ac>
    101c:	de c0       	rjmp	.+444    	; 0x11da <vfprintf+0x38c>
    101e:	84 36       	cpi	r24, 0x64	; 100
    1020:	11 f0       	breq	.+4      	; 0x1026 <vfprintf+0x1d8>
    1022:	89 36       	cpi	r24, 0x69	; 105
    1024:	31 f5       	brne	.+76     	; 0x1072 <vfprintf+0x224>
    1026:	f8 01       	movw	r30, r16
    1028:	27 ff       	sbrs	r18, 7
    102a:	07 c0       	rjmp	.+14     	; 0x103a <vfprintf+0x1ec>
    102c:	60 81       	ld	r22, Z
    102e:	71 81       	ldd	r23, Z+1	; 0x01
    1030:	82 81       	ldd	r24, Z+2	; 0x02
    1032:	93 81       	ldd	r25, Z+3	; 0x03
    1034:	0c 5f       	subi	r16, 0xFC	; 252
    1036:	1f 4f       	sbci	r17, 0xFF	; 255
    1038:	08 c0       	rjmp	.+16     	; 0x104a <vfprintf+0x1fc>
    103a:	60 81       	ld	r22, Z
    103c:	71 81       	ldd	r23, Z+1	; 0x01
    103e:	88 27       	eor	r24, r24
    1040:	77 fd       	sbrc	r23, 7
    1042:	80 95       	com	r24
    1044:	98 2f       	mov	r25, r24
    1046:	0e 5f       	subi	r16, 0xFE	; 254
    1048:	1f 4f       	sbci	r17, 0xFF	; 255
    104a:	2f 76       	andi	r18, 0x6F	; 111
    104c:	b2 2e       	mov	r11, r18
    104e:	97 ff       	sbrs	r25, 7
    1050:	09 c0       	rjmp	.+18     	; 0x1064 <vfprintf+0x216>
    1052:	90 95       	com	r25
    1054:	80 95       	com	r24
    1056:	70 95       	com	r23
    1058:	61 95       	neg	r22
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	8f 4f       	sbci	r24, 0xFF	; 255
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	20 68       	ori	r18, 0x80	; 128
    1062:	b2 2e       	mov	r11, r18
    1064:	2a e0       	ldi	r18, 0x0A	; 10
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	a4 01       	movw	r20, r8
    106a:	6f d2       	rcall	.+1246   	; 0x154a <__ultoa_invert>
    106c:	a8 2e       	mov	r10, r24
    106e:	a8 18       	sub	r10, r8
    1070:	43 c0       	rjmp	.+134    	; 0x10f8 <vfprintf+0x2aa>
    1072:	85 37       	cpi	r24, 0x75	; 117
    1074:	29 f4       	brne	.+10     	; 0x1080 <vfprintf+0x232>
    1076:	2f 7e       	andi	r18, 0xEF	; 239
    1078:	b2 2e       	mov	r11, r18
    107a:	2a e0       	ldi	r18, 0x0A	; 10
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	25 c0       	rjmp	.+74     	; 0x10ca <vfprintf+0x27c>
    1080:	f2 2f       	mov	r31, r18
    1082:	f9 7f       	andi	r31, 0xF9	; 249
    1084:	bf 2e       	mov	r11, r31
    1086:	8f 36       	cpi	r24, 0x6F	; 111
    1088:	c1 f0       	breq	.+48     	; 0x10ba <vfprintf+0x26c>
    108a:	18 f4       	brcc	.+6      	; 0x1092 <vfprintf+0x244>
    108c:	88 35       	cpi	r24, 0x58	; 88
    108e:	79 f0       	breq	.+30     	; 0x10ae <vfprintf+0x260>
    1090:	ad c0       	rjmp	.+346    	; 0x11ec <vfprintf+0x39e>
    1092:	80 37       	cpi	r24, 0x70	; 112
    1094:	19 f0       	breq	.+6      	; 0x109c <vfprintf+0x24e>
    1096:	88 37       	cpi	r24, 0x78	; 120
    1098:	21 f0       	breq	.+8      	; 0x10a2 <vfprintf+0x254>
    109a:	a8 c0       	rjmp	.+336    	; 0x11ec <vfprintf+0x39e>
    109c:	2f 2f       	mov	r18, r31
    109e:	20 61       	ori	r18, 0x10	; 16
    10a0:	b2 2e       	mov	r11, r18
    10a2:	b4 fe       	sbrs	r11, 4
    10a4:	0d c0       	rjmp	.+26     	; 0x10c0 <vfprintf+0x272>
    10a6:	8b 2d       	mov	r24, r11
    10a8:	84 60       	ori	r24, 0x04	; 4
    10aa:	b8 2e       	mov	r11, r24
    10ac:	09 c0       	rjmp	.+18     	; 0x10c0 <vfprintf+0x272>
    10ae:	24 ff       	sbrs	r18, 4
    10b0:	0a c0       	rjmp	.+20     	; 0x10c6 <vfprintf+0x278>
    10b2:	9f 2f       	mov	r25, r31
    10b4:	96 60       	ori	r25, 0x06	; 6
    10b6:	b9 2e       	mov	r11, r25
    10b8:	06 c0       	rjmp	.+12     	; 0x10c6 <vfprintf+0x278>
    10ba:	28 e0       	ldi	r18, 0x08	; 8
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	05 c0       	rjmp	.+10     	; 0x10ca <vfprintf+0x27c>
    10c0:	20 e1       	ldi	r18, 0x10	; 16
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <vfprintf+0x27c>
    10c6:	20 e1       	ldi	r18, 0x10	; 16
    10c8:	32 e0       	ldi	r19, 0x02	; 2
    10ca:	f8 01       	movw	r30, r16
    10cc:	b7 fe       	sbrs	r11, 7
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <vfprintf+0x290>
    10d0:	60 81       	ld	r22, Z
    10d2:	71 81       	ldd	r23, Z+1	; 0x01
    10d4:	82 81       	ldd	r24, Z+2	; 0x02
    10d6:	93 81       	ldd	r25, Z+3	; 0x03
    10d8:	0c 5f       	subi	r16, 0xFC	; 252
    10da:	1f 4f       	sbci	r17, 0xFF	; 255
    10dc:	06 c0       	rjmp	.+12     	; 0x10ea <vfprintf+0x29c>
    10de:	60 81       	ld	r22, Z
    10e0:	71 81       	ldd	r23, Z+1	; 0x01
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 5f       	subi	r16, 0xFE	; 254
    10e8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ea:	a4 01       	movw	r20, r8
    10ec:	2e d2       	rcall	.+1116   	; 0x154a <__ultoa_invert>
    10ee:	a8 2e       	mov	r10, r24
    10f0:	a8 18       	sub	r10, r8
    10f2:	fb 2d       	mov	r31, r11
    10f4:	ff 77       	andi	r31, 0x7F	; 127
    10f6:	bf 2e       	mov	r11, r31
    10f8:	b6 fe       	sbrs	r11, 6
    10fa:	0b c0       	rjmp	.+22     	; 0x1112 <vfprintf+0x2c4>
    10fc:	2b 2d       	mov	r18, r11
    10fe:	2e 7f       	andi	r18, 0xFE	; 254
    1100:	a5 14       	cp	r10, r5
    1102:	50 f4       	brcc	.+20     	; 0x1118 <vfprintf+0x2ca>
    1104:	b4 fe       	sbrs	r11, 4
    1106:	0a c0       	rjmp	.+20     	; 0x111c <vfprintf+0x2ce>
    1108:	b2 fc       	sbrc	r11, 2
    110a:	08 c0       	rjmp	.+16     	; 0x111c <vfprintf+0x2ce>
    110c:	2b 2d       	mov	r18, r11
    110e:	2e 7e       	andi	r18, 0xEE	; 238
    1110:	05 c0       	rjmp	.+10     	; 0x111c <vfprintf+0x2ce>
    1112:	7a 2c       	mov	r7, r10
    1114:	2b 2d       	mov	r18, r11
    1116:	03 c0       	rjmp	.+6      	; 0x111e <vfprintf+0x2d0>
    1118:	7a 2c       	mov	r7, r10
    111a:	01 c0       	rjmp	.+2      	; 0x111e <vfprintf+0x2d0>
    111c:	75 2c       	mov	r7, r5
    111e:	24 ff       	sbrs	r18, 4
    1120:	0d c0       	rjmp	.+26     	; 0x113c <vfprintf+0x2ee>
    1122:	fe 01       	movw	r30, r28
    1124:	ea 0d       	add	r30, r10
    1126:	f1 1d       	adc	r31, r1
    1128:	80 81       	ld	r24, Z
    112a:	80 33       	cpi	r24, 0x30	; 48
    112c:	11 f4       	brne	.+4      	; 0x1132 <vfprintf+0x2e4>
    112e:	29 7e       	andi	r18, 0xE9	; 233
    1130:	09 c0       	rjmp	.+18     	; 0x1144 <vfprintf+0x2f6>
    1132:	22 ff       	sbrs	r18, 2
    1134:	06 c0       	rjmp	.+12     	; 0x1142 <vfprintf+0x2f4>
    1136:	73 94       	inc	r7
    1138:	73 94       	inc	r7
    113a:	04 c0       	rjmp	.+8      	; 0x1144 <vfprintf+0x2f6>
    113c:	82 2f       	mov	r24, r18
    113e:	86 78       	andi	r24, 0x86	; 134
    1140:	09 f0       	breq	.+2      	; 0x1144 <vfprintf+0x2f6>
    1142:	73 94       	inc	r7
    1144:	23 fd       	sbrc	r18, 3
    1146:	12 c0       	rjmp	.+36     	; 0x116c <vfprintf+0x31e>
    1148:	20 ff       	sbrs	r18, 0
    114a:	06 c0       	rjmp	.+12     	; 0x1158 <vfprintf+0x30a>
    114c:	5a 2c       	mov	r5, r10
    114e:	73 14       	cp	r7, r3
    1150:	18 f4       	brcc	.+6      	; 0x1158 <vfprintf+0x30a>
    1152:	53 0c       	add	r5, r3
    1154:	57 18       	sub	r5, r7
    1156:	73 2c       	mov	r7, r3
    1158:	73 14       	cp	r7, r3
    115a:	60 f4       	brcc	.+24     	; 0x1174 <vfprintf+0x326>
    115c:	b7 01       	movw	r22, r14
    115e:	80 e2       	ldi	r24, 0x20	; 32
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	2c 87       	std	Y+12, r18	; 0x0c
    1164:	c0 d1       	rcall	.+896    	; 0x14e6 <fputc>
    1166:	73 94       	inc	r7
    1168:	2c 85       	ldd	r18, Y+12	; 0x0c
    116a:	f6 cf       	rjmp	.-20     	; 0x1158 <vfprintf+0x30a>
    116c:	73 14       	cp	r7, r3
    116e:	10 f4       	brcc	.+4      	; 0x1174 <vfprintf+0x326>
    1170:	37 18       	sub	r3, r7
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <vfprintf+0x328>
    1174:	31 2c       	mov	r3, r1
    1176:	24 ff       	sbrs	r18, 4
    1178:	11 c0       	rjmp	.+34     	; 0x119c <vfprintf+0x34e>
    117a:	b7 01       	movw	r22, r14
    117c:	80 e3       	ldi	r24, 0x30	; 48
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	2c 87       	std	Y+12, r18	; 0x0c
    1182:	b1 d1       	rcall	.+866    	; 0x14e6 <fputc>
    1184:	2c 85       	ldd	r18, Y+12	; 0x0c
    1186:	22 ff       	sbrs	r18, 2
    1188:	16 c0       	rjmp	.+44     	; 0x11b6 <vfprintf+0x368>
    118a:	21 ff       	sbrs	r18, 1
    118c:	03 c0       	rjmp	.+6      	; 0x1194 <vfprintf+0x346>
    118e:	88 e5       	ldi	r24, 0x58	; 88
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <vfprintf+0x34a>
    1194:	88 e7       	ldi	r24, 0x78	; 120
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	b7 01       	movw	r22, r14
    119a:	0c c0       	rjmp	.+24     	; 0x11b4 <vfprintf+0x366>
    119c:	82 2f       	mov	r24, r18
    119e:	86 78       	andi	r24, 0x86	; 134
    11a0:	51 f0       	breq	.+20     	; 0x11b6 <vfprintf+0x368>
    11a2:	21 fd       	sbrc	r18, 1
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <vfprintf+0x35c>
    11a6:	80 e2       	ldi	r24, 0x20	; 32
    11a8:	01 c0       	rjmp	.+2      	; 0x11ac <vfprintf+0x35e>
    11aa:	8b e2       	ldi	r24, 0x2B	; 43
    11ac:	27 fd       	sbrc	r18, 7
    11ae:	8d e2       	ldi	r24, 0x2D	; 45
    11b0:	b7 01       	movw	r22, r14
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	98 d1       	rcall	.+816    	; 0x14e6 <fputc>
    11b6:	a5 14       	cp	r10, r5
    11b8:	30 f4       	brcc	.+12     	; 0x11c6 <vfprintf+0x378>
    11ba:	b7 01       	movw	r22, r14
    11bc:	80 e3       	ldi	r24, 0x30	; 48
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	92 d1       	rcall	.+804    	; 0x14e6 <fputc>
    11c2:	5a 94       	dec	r5
    11c4:	f8 cf       	rjmp	.-16     	; 0x11b6 <vfprintf+0x368>
    11c6:	aa 94       	dec	r10
    11c8:	f4 01       	movw	r30, r8
    11ca:	ea 0d       	add	r30, r10
    11cc:	f1 1d       	adc	r31, r1
    11ce:	80 81       	ld	r24, Z
    11d0:	b7 01       	movw	r22, r14
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	88 d1       	rcall	.+784    	; 0x14e6 <fputc>
    11d6:	a1 10       	cpse	r10, r1
    11d8:	f6 cf       	rjmp	.-20     	; 0x11c6 <vfprintf+0x378>
    11da:	33 20       	and	r3, r3
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <vfprintf+0x392>
    11de:	5d ce       	rjmp	.-838    	; 0xe9a <vfprintf+0x4c>
    11e0:	b7 01       	movw	r22, r14
    11e2:	80 e2       	ldi	r24, 0x20	; 32
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	7f d1       	rcall	.+766    	; 0x14e6 <fputc>
    11e8:	3a 94       	dec	r3
    11ea:	f7 cf       	rjmp	.-18     	; 0x11da <vfprintf+0x38c>
    11ec:	f7 01       	movw	r30, r14
    11ee:	86 81       	ldd	r24, Z+6	; 0x06
    11f0:	97 81       	ldd	r25, Z+7	; 0x07
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <vfprintf+0x3aa>
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	9f ef       	ldi	r25, 0xFF	; 255
    11f8:	2c 96       	adiw	r28, 0x0c	; 12
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	bf 90       	pop	r11
    1216:	af 90       	pop	r10
    1218:	9f 90       	pop	r9
    121a:	8f 90       	pop	r8
    121c:	7f 90       	pop	r7
    121e:	6f 90       	pop	r6
    1220:	5f 90       	pop	r5
    1222:	4f 90       	pop	r4
    1224:	3f 90       	pop	r3
    1226:	2f 90       	pop	r2
    1228:	08 95       	ret

0000122a <calloc>:
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	86 9f       	mul	r24, r22
    1234:	80 01       	movw	r16, r0
    1236:	87 9f       	mul	r24, r23
    1238:	10 0d       	add	r17, r0
    123a:	96 9f       	mul	r25, r22
    123c:	10 0d       	add	r17, r0
    123e:	11 24       	eor	r1, r1
    1240:	c8 01       	movw	r24, r16
    1242:	0d d0       	rcall	.+26     	; 0x125e <malloc>
    1244:	ec 01       	movw	r28, r24
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	21 f0       	breq	.+8      	; 0x1252 <calloc+0x28>
    124a:	a8 01       	movw	r20, r16
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	38 d1       	rcall	.+624    	; 0x14c2 <memset>
    1252:	ce 01       	movw	r24, r28
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	08 95       	ret

0000125e <malloc>:
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	82 30       	cpi	r24, 0x02	; 2
    1264:	91 05       	cpc	r25, r1
    1266:	10 f4       	brcc	.+4      	; 0x126c <malloc+0xe>
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	e0 91 62 02 	lds	r30, 0x0262
    1270:	f0 91 63 02 	lds	r31, 0x0263
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	a0 e0       	ldi	r26, 0x00	; 0
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	30 97       	sbiw	r30, 0x00	; 0
    127e:	39 f1       	breq	.+78     	; 0x12ce <malloc+0x70>
    1280:	40 81       	ld	r20, Z
    1282:	51 81       	ldd	r21, Z+1	; 0x01
    1284:	48 17       	cp	r20, r24
    1286:	59 07       	cpc	r21, r25
    1288:	b8 f0       	brcs	.+46     	; 0x12b8 <malloc+0x5a>
    128a:	48 17       	cp	r20, r24
    128c:	59 07       	cpc	r21, r25
    128e:	71 f4       	brne	.+28     	; 0x12ac <malloc+0x4e>
    1290:	82 81       	ldd	r24, Z+2	; 0x02
    1292:	93 81       	ldd	r25, Z+3	; 0x03
    1294:	10 97       	sbiw	r26, 0x00	; 0
    1296:	29 f0       	breq	.+10     	; 0x12a2 <malloc+0x44>
    1298:	13 96       	adiw	r26, 0x03	; 3
    129a:	9c 93       	st	X, r25
    129c:	8e 93       	st	-X, r24
    129e:	12 97       	sbiw	r26, 0x02	; 2
    12a0:	2c c0       	rjmp	.+88     	; 0x12fa <malloc+0x9c>
    12a2:	90 93 63 02 	sts	0x0263, r25
    12a6:	80 93 62 02 	sts	0x0262, r24
    12aa:	27 c0       	rjmp	.+78     	; 0x12fa <malloc+0x9c>
    12ac:	21 15       	cp	r18, r1
    12ae:	31 05       	cpc	r19, r1
    12b0:	31 f0       	breq	.+12     	; 0x12be <malloc+0x60>
    12b2:	42 17       	cp	r20, r18
    12b4:	53 07       	cpc	r21, r19
    12b6:	18 f0       	brcs	.+6      	; 0x12be <malloc+0x60>
    12b8:	a9 01       	movw	r20, r18
    12ba:	db 01       	movw	r26, r22
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <malloc+0x62>
    12be:	ef 01       	movw	r28, r30
    12c0:	9a 01       	movw	r18, r20
    12c2:	bd 01       	movw	r22, r26
    12c4:	df 01       	movw	r26, r30
    12c6:	02 80       	ldd	r0, Z+2	; 0x02
    12c8:	f3 81       	ldd	r31, Z+3	; 0x03
    12ca:	e0 2d       	mov	r30, r0
    12cc:	d7 cf       	rjmp	.-82     	; 0x127c <malloc+0x1e>
    12ce:	21 15       	cp	r18, r1
    12d0:	31 05       	cpc	r19, r1
    12d2:	f9 f0       	breq	.+62     	; 0x1312 <malloc+0xb4>
    12d4:	28 1b       	sub	r18, r24
    12d6:	39 0b       	sbc	r19, r25
    12d8:	24 30       	cpi	r18, 0x04	; 4
    12da:	31 05       	cpc	r19, r1
    12dc:	80 f4       	brcc	.+32     	; 0x12fe <malloc+0xa0>
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	9b 81       	ldd	r25, Y+3	; 0x03
    12e2:	61 15       	cp	r22, r1
    12e4:	71 05       	cpc	r23, r1
    12e6:	21 f0       	breq	.+8      	; 0x12f0 <malloc+0x92>
    12e8:	fb 01       	movw	r30, r22
    12ea:	93 83       	std	Z+3, r25	; 0x03
    12ec:	82 83       	std	Z+2, r24	; 0x02
    12ee:	04 c0       	rjmp	.+8      	; 0x12f8 <malloc+0x9a>
    12f0:	90 93 63 02 	sts	0x0263, r25
    12f4:	80 93 62 02 	sts	0x0262, r24
    12f8:	fe 01       	movw	r30, r28
    12fa:	32 96       	adiw	r30, 0x02	; 2
    12fc:	44 c0       	rjmp	.+136    	; 0x1386 <malloc+0x128>
    12fe:	fe 01       	movw	r30, r28
    1300:	e2 0f       	add	r30, r18
    1302:	f3 1f       	adc	r31, r19
    1304:	81 93       	st	Z+, r24
    1306:	91 93       	st	Z+, r25
    1308:	22 50       	subi	r18, 0x02	; 2
    130a:	31 09       	sbc	r19, r1
    130c:	39 83       	std	Y+1, r19	; 0x01
    130e:	28 83       	st	Y, r18
    1310:	3a c0       	rjmp	.+116    	; 0x1386 <malloc+0x128>
    1312:	20 91 60 02 	lds	r18, 0x0260
    1316:	30 91 61 02 	lds	r19, 0x0261
    131a:	23 2b       	or	r18, r19
    131c:	41 f4       	brne	.+16     	; 0x132e <malloc+0xd0>
    131e:	20 91 02 02 	lds	r18, 0x0202
    1322:	30 91 03 02 	lds	r19, 0x0203
    1326:	30 93 61 02 	sts	0x0261, r19
    132a:	20 93 60 02 	sts	0x0260, r18
    132e:	20 91 00 02 	lds	r18, 0x0200
    1332:	30 91 01 02 	lds	r19, 0x0201
    1336:	21 15       	cp	r18, r1
    1338:	31 05       	cpc	r19, r1
    133a:	41 f4       	brne	.+16     	; 0x134c <malloc+0xee>
    133c:	2d b7       	in	r18, 0x3d	; 61
    133e:	3e b7       	in	r19, 0x3e	; 62
    1340:	40 91 04 02 	lds	r20, 0x0204
    1344:	50 91 05 02 	lds	r21, 0x0205
    1348:	24 1b       	sub	r18, r20
    134a:	35 0b       	sbc	r19, r21
    134c:	e0 91 60 02 	lds	r30, 0x0260
    1350:	f0 91 61 02 	lds	r31, 0x0261
    1354:	e2 17       	cp	r30, r18
    1356:	f3 07       	cpc	r31, r19
    1358:	a0 f4       	brcc	.+40     	; 0x1382 <malloc+0x124>
    135a:	2e 1b       	sub	r18, r30
    135c:	3f 0b       	sbc	r19, r31
    135e:	28 17       	cp	r18, r24
    1360:	39 07       	cpc	r19, r25
    1362:	78 f0       	brcs	.+30     	; 0x1382 <malloc+0x124>
    1364:	ac 01       	movw	r20, r24
    1366:	4e 5f       	subi	r20, 0xFE	; 254
    1368:	5f 4f       	sbci	r21, 0xFF	; 255
    136a:	24 17       	cp	r18, r20
    136c:	35 07       	cpc	r19, r21
    136e:	48 f0       	brcs	.+18     	; 0x1382 <malloc+0x124>
    1370:	4e 0f       	add	r20, r30
    1372:	5f 1f       	adc	r21, r31
    1374:	50 93 61 02 	sts	0x0261, r21
    1378:	40 93 60 02 	sts	0x0260, r20
    137c:	81 93       	st	Z+, r24
    137e:	91 93       	st	Z+, r25
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <malloc+0x128>
    1382:	e0 e0       	ldi	r30, 0x00	; 0
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	cf 01       	movw	r24, r30
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	08 95       	ret

0000138e <free>:
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	09 f4       	brne	.+2      	; 0x1398 <free+0xa>
    1396:	87 c0       	rjmp	.+270    	; 0x14a6 <free+0x118>
    1398:	fc 01       	movw	r30, r24
    139a:	32 97       	sbiw	r30, 0x02	; 2
    139c:	13 82       	std	Z+3, r1	; 0x03
    139e:	12 82       	std	Z+2, r1	; 0x02
    13a0:	c0 91 62 02 	lds	r28, 0x0262
    13a4:	d0 91 63 02 	lds	r29, 0x0263
    13a8:	20 97       	sbiw	r28, 0x00	; 0
    13aa:	81 f4       	brne	.+32     	; 0x13cc <free+0x3e>
    13ac:	20 81       	ld	r18, Z
    13ae:	31 81       	ldd	r19, Z+1	; 0x01
    13b0:	28 0f       	add	r18, r24
    13b2:	39 1f       	adc	r19, r25
    13b4:	80 91 60 02 	lds	r24, 0x0260
    13b8:	90 91 61 02 	lds	r25, 0x0261
    13bc:	82 17       	cp	r24, r18
    13be:	93 07       	cpc	r25, r19
    13c0:	79 f5       	brne	.+94     	; 0x1420 <free+0x92>
    13c2:	f0 93 61 02 	sts	0x0261, r31
    13c6:	e0 93 60 02 	sts	0x0260, r30
    13ca:	6d c0       	rjmp	.+218    	; 0x14a6 <free+0x118>
    13cc:	de 01       	movw	r26, r28
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	ae 17       	cp	r26, r30
    13d4:	bf 07       	cpc	r27, r31
    13d6:	50 f4       	brcc	.+20     	; 0x13ec <free+0x5e>
    13d8:	12 96       	adiw	r26, 0x02	; 2
    13da:	4d 91       	ld	r20, X+
    13dc:	5c 91       	ld	r21, X
    13de:	13 97       	sbiw	r26, 0x03	; 3
    13e0:	9d 01       	movw	r18, r26
    13e2:	41 15       	cp	r20, r1
    13e4:	51 05       	cpc	r21, r1
    13e6:	09 f1       	breq	.+66     	; 0x142a <free+0x9c>
    13e8:	da 01       	movw	r26, r20
    13ea:	f3 cf       	rjmp	.-26     	; 0x13d2 <free+0x44>
    13ec:	b3 83       	std	Z+3, r27	; 0x03
    13ee:	a2 83       	std	Z+2, r26	; 0x02
    13f0:	40 81       	ld	r20, Z
    13f2:	51 81       	ldd	r21, Z+1	; 0x01
    13f4:	84 0f       	add	r24, r20
    13f6:	95 1f       	adc	r25, r21
    13f8:	8a 17       	cp	r24, r26
    13fa:	9b 07       	cpc	r25, r27
    13fc:	71 f4       	brne	.+28     	; 0x141a <free+0x8c>
    13fe:	8d 91       	ld	r24, X+
    1400:	9c 91       	ld	r25, X
    1402:	11 97       	sbiw	r26, 0x01	; 1
    1404:	84 0f       	add	r24, r20
    1406:	95 1f       	adc	r25, r21
    1408:	02 96       	adiw	r24, 0x02	; 2
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	80 83       	st	Z, r24
    140e:	12 96       	adiw	r26, 0x02	; 2
    1410:	8d 91       	ld	r24, X+
    1412:	9c 91       	ld	r25, X
    1414:	13 97       	sbiw	r26, 0x03	; 3
    1416:	93 83       	std	Z+3, r25	; 0x03
    1418:	82 83       	std	Z+2, r24	; 0x02
    141a:	21 15       	cp	r18, r1
    141c:	31 05       	cpc	r19, r1
    141e:	29 f4       	brne	.+10     	; 0x142a <free+0x9c>
    1420:	f0 93 63 02 	sts	0x0263, r31
    1424:	e0 93 62 02 	sts	0x0262, r30
    1428:	3e c0       	rjmp	.+124    	; 0x14a6 <free+0x118>
    142a:	d9 01       	movw	r26, r18
    142c:	13 96       	adiw	r26, 0x03	; 3
    142e:	fc 93       	st	X, r31
    1430:	ee 93       	st	-X, r30
    1432:	12 97       	sbiw	r26, 0x02	; 2
    1434:	4d 91       	ld	r20, X+
    1436:	5d 91       	ld	r21, X+
    1438:	a4 0f       	add	r26, r20
    143a:	b5 1f       	adc	r27, r21
    143c:	ea 17       	cp	r30, r26
    143e:	fb 07       	cpc	r31, r27
    1440:	79 f4       	brne	.+30     	; 0x1460 <free+0xd2>
    1442:	80 81       	ld	r24, Z
    1444:	91 81       	ldd	r25, Z+1	; 0x01
    1446:	84 0f       	add	r24, r20
    1448:	95 1f       	adc	r25, r21
    144a:	02 96       	adiw	r24, 0x02	; 2
    144c:	d9 01       	movw	r26, r18
    144e:	11 96       	adiw	r26, 0x01	; 1
    1450:	9c 93       	st	X, r25
    1452:	8e 93       	st	-X, r24
    1454:	82 81       	ldd	r24, Z+2	; 0x02
    1456:	93 81       	ldd	r25, Z+3	; 0x03
    1458:	13 96       	adiw	r26, 0x03	; 3
    145a:	9c 93       	st	X, r25
    145c:	8e 93       	st	-X, r24
    145e:	12 97       	sbiw	r26, 0x02	; 2
    1460:	e0 e0       	ldi	r30, 0x00	; 0
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	9b 81       	ldd	r25, Y+3	; 0x03
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	19 f0       	breq	.+6      	; 0x1472 <free+0xe4>
    146c:	fe 01       	movw	r30, r28
    146e:	ec 01       	movw	r28, r24
    1470:	f9 cf       	rjmp	.-14     	; 0x1464 <free+0xd6>
    1472:	ce 01       	movw	r24, r28
    1474:	02 96       	adiw	r24, 0x02	; 2
    1476:	28 81       	ld	r18, Y
    1478:	39 81       	ldd	r19, Y+1	; 0x01
    147a:	82 0f       	add	r24, r18
    147c:	93 1f       	adc	r25, r19
    147e:	20 91 60 02 	lds	r18, 0x0260
    1482:	30 91 61 02 	lds	r19, 0x0261
    1486:	28 17       	cp	r18, r24
    1488:	39 07       	cpc	r19, r25
    148a:	69 f4       	brne	.+26     	; 0x14a6 <free+0x118>
    148c:	30 97       	sbiw	r30, 0x00	; 0
    148e:	29 f4       	brne	.+10     	; 0x149a <free+0x10c>
    1490:	10 92 63 02 	sts	0x0263, r1
    1494:	10 92 62 02 	sts	0x0262, r1
    1498:	02 c0       	rjmp	.+4      	; 0x149e <free+0x110>
    149a:	13 82       	std	Z+3, r1	; 0x03
    149c:	12 82       	std	Z+2, r1	; 0x02
    149e:	d0 93 61 02 	sts	0x0261, r29
    14a2:	c0 93 60 02 	sts	0x0260, r28
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	08 95       	ret

000014ac <strnlen_P>:
    14ac:	fc 01       	movw	r30, r24
    14ae:	05 90       	lpm	r0, Z+
    14b0:	61 50       	subi	r22, 0x01	; 1
    14b2:	70 40       	sbci	r23, 0x00	; 0
    14b4:	01 10       	cpse	r0, r1
    14b6:	d8 f7       	brcc	.-10     	; 0x14ae <strnlen_P+0x2>
    14b8:	80 95       	com	r24
    14ba:	90 95       	com	r25
    14bc:	8e 0f       	add	r24, r30
    14be:	9f 1f       	adc	r25, r31
    14c0:	08 95       	ret

000014c2 <memset>:
    14c2:	dc 01       	movw	r26, r24
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <memset+0x6>
    14c6:	6d 93       	st	X+, r22
    14c8:	41 50       	subi	r20, 0x01	; 1
    14ca:	50 40       	sbci	r21, 0x00	; 0
    14cc:	e0 f7       	brcc	.-8      	; 0x14c6 <memset+0x4>
    14ce:	08 95       	ret

000014d0 <strnlen>:
    14d0:	fc 01       	movw	r30, r24
    14d2:	61 50       	subi	r22, 0x01	; 1
    14d4:	70 40       	sbci	r23, 0x00	; 0
    14d6:	01 90       	ld	r0, Z+
    14d8:	01 10       	cpse	r0, r1
    14da:	d8 f7       	brcc	.-10     	; 0x14d2 <strnlen+0x2>
    14dc:	80 95       	com	r24
    14de:	90 95       	com	r25
    14e0:	8e 0f       	add	r24, r30
    14e2:	9f 1f       	adc	r25, r31
    14e4:	08 95       	ret

000014e6 <fputc>:
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	18 2f       	mov	r17, r24
    14f0:	09 2f       	mov	r16, r25
    14f2:	eb 01       	movw	r28, r22
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	81 fd       	sbrc	r24, 1
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <fputc+0x1a>
    14fa:	8f ef       	ldi	r24, 0xFF	; 255
    14fc:	9f ef       	ldi	r25, 0xFF	; 255
    14fe:	20 c0       	rjmp	.+64     	; 0x1540 <fputc+0x5a>
    1500:	82 ff       	sbrs	r24, 2
    1502:	10 c0       	rjmp	.+32     	; 0x1524 <fputc+0x3e>
    1504:	4e 81       	ldd	r20, Y+6	; 0x06
    1506:	5f 81       	ldd	r21, Y+7	; 0x07
    1508:	2c 81       	ldd	r18, Y+4	; 0x04
    150a:	3d 81       	ldd	r19, Y+5	; 0x05
    150c:	42 17       	cp	r20, r18
    150e:	53 07       	cpc	r21, r19
    1510:	7c f4       	brge	.+30     	; 0x1530 <fputc+0x4a>
    1512:	e8 81       	ld	r30, Y
    1514:	f9 81       	ldd	r31, Y+1	; 0x01
    1516:	9f 01       	movw	r18, r30
    1518:	2f 5f       	subi	r18, 0xFF	; 255
    151a:	3f 4f       	sbci	r19, 0xFF	; 255
    151c:	39 83       	std	Y+1, r19	; 0x01
    151e:	28 83       	st	Y, r18
    1520:	10 83       	st	Z, r17
    1522:	06 c0       	rjmp	.+12     	; 0x1530 <fputc+0x4a>
    1524:	e8 85       	ldd	r30, Y+8	; 0x08
    1526:	f9 85       	ldd	r31, Y+9	; 0x09
    1528:	81 2f       	mov	r24, r17
    152a:	19 95       	eicall
    152c:	89 2b       	or	r24, r25
    152e:	29 f7       	brne	.-54     	; 0x14fa <fputc+0x14>
    1530:	2e 81       	ldd	r18, Y+6	; 0x06
    1532:	3f 81       	ldd	r19, Y+7	; 0x07
    1534:	2f 5f       	subi	r18, 0xFF	; 255
    1536:	3f 4f       	sbci	r19, 0xFF	; 255
    1538:	3f 83       	std	Y+7, r19	; 0x07
    153a:	2e 83       	std	Y+6, r18	; 0x06
    153c:	81 2f       	mov	r24, r17
    153e:	90 2f       	mov	r25, r16
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	08 95       	ret

0000154a <__ultoa_invert>:
    154a:	fa 01       	movw	r30, r20
    154c:	aa 27       	eor	r26, r26
    154e:	28 30       	cpi	r18, 0x08	; 8
    1550:	51 f1       	breq	.+84     	; 0x15a6 <__ultoa_invert+0x5c>
    1552:	20 31       	cpi	r18, 0x10	; 16
    1554:	81 f1       	breq	.+96     	; 0x15b6 <__ultoa_invert+0x6c>
    1556:	e8 94       	clt
    1558:	6f 93       	push	r22
    155a:	6e 7f       	andi	r22, 0xFE	; 254
    155c:	6e 5f       	subi	r22, 0xFE	; 254
    155e:	7f 4f       	sbci	r23, 0xFF	; 255
    1560:	8f 4f       	sbci	r24, 0xFF	; 255
    1562:	9f 4f       	sbci	r25, 0xFF	; 255
    1564:	af 4f       	sbci	r26, 0xFF	; 255
    1566:	b1 e0       	ldi	r27, 0x01	; 1
    1568:	3e d0       	rcall	.+124    	; 0x15e6 <__ultoa_invert+0x9c>
    156a:	b4 e0       	ldi	r27, 0x04	; 4
    156c:	3c d0       	rcall	.+120    	; 0x15e6 <__ultoa_invert+0x9c>
    156e:	67 0f       	add	r22, r23
    1570:	78 1f       	adc	r23, r24
    1572:	89 1f       	adc	r24, r25
    1574:	9a 1f       	adc	r25, r26
    1576:	a1 1d       	adc	r26, r1
    1578:	68 0f       	add	r22, r24
    157a:	79 1f       	adc	r23, r25
    157c:	8a 1f       	adc	r24, r26
    157e:	91 1d       	adc	r25, r1
    1580:	a1 1d       	adc	r26, r1
    1582:	6a 0f       	add	r22, r26
    1584:	71 1d       	adc	r23, r1
    1586:	81 1d       	adc	r24, r1
    1588:	91 1d       	adc	r25, r1
    158a:	a1 1d       	adc	r26, r1
    158c:	20 d0       	rcall	.+64     	; 0x15ce <__ultoa_invert+0x84>
    158e:	09 f4       	brne	.+2      	; 0x1592 <__ultoa_invert+0x48>
    1590:	68 94       	set
    1592:	3f 91       	pop	r19
    1594:	2a e0       	ldi	r18, 0x0A	; 10
    1596:	26 9f       	mul	r18, r22
    1598:	11 24       	eor	r1, r1
    159a:	30 19       	sub	r19, r0
    159c:	30 5d       	subi	r19, 0xD0	; 208
    159e:	31 93       	st	Z+, r19
    15a0:	de f6       	brtc	.-74     	; 0x1558 <__ultoa_invert+0xe>
    15a2:	cf 01       	movw	r24, r30
    15a4:	08 95       	ret
    15a6:	46 2f       	mov	r20, r22
    15a8:	47 70       	andi	r20, 0x07	; 7
    15aa:	40 5d       	subi	r20, 0xD0	; 208
    15ac:	41 93       	st	Z+, r20
    15ae:	b3 e0       	ldi	r27, 0x03	; 3
    15b0:	0f d0       	rcall	.+30     	; 0x15d0 <__ultoa_invert+0x86>
    15b2:	c9 f7       	brne	.-14     	; 0x15a6 <__ultoa_invert+0x5c>
    15b4:	f6 cf       	rjmp	.-20     	; 0x15a2 <__ultoa_invert+0x58>
    15b6:	46 2f       	mov	r20, r22
    15b8:	4f 70       	andi	r20, 0x0F	; 15
    15ba:	40 5d       	subi	r20, 0xD0	; 208
    15bc:	4a 33       	cpi	r20, 0x3A	; 58
    15be:	18 f0       	brcs	.+6      	; 0x15c6 <__ultoa_invert+0x7c>
    15c0:	49 5d       	subi	r20, 0xD9	; 217
    15c2:	31 fd       	sbrc	r19, 1
    15c4:	40 52       	subi	r20, 0x20	; 32
    15c6:	41 93       	st	Z+, r20
    15c8:	02 d0       	rcall	.+4      	; 0x15ce <__ultoa_invert+0x84>
    15ca:	a9 f7       	brne	.-22     	; 0x15b6 <__ultoa_invert+0x6c>
    15cc:	ea cf       	rjmp	.-44     	; 0x15a2 <__ultoa_invert+0x58>
    15ce:	b4 e0       	ldi	r27, 0x04	; 4
    15d0:	a6 95       	lsr	r26
    15d2:	97 95       	ror	r25
    15d4:	87 95       	ror	r24
    15d6:	77 95       	ror	r23
    15d8:	67 95       	ror	r22
    15da:	ba 95       	dec	r27
    15dc:	c9 f7       	brne	.-14     	; 0x15d0 <__ultoa_invert+0x86>
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	61 05       	cpc	r22, r1
    15e2:	71 05       	cpc	r23, r1
    15e4:	08 95       	ret
    15e6:	9b 01       	movw	r18, r22
    15e8:	ac 01       	movw	r20, r24
    15ea:	0a 2e       	mov	r0, r26
    15ec:	06 94       	lsr	r0
    15ee:	57 95       	ror	r21
    15f0:	47 95       	ror	r20
    15f2:	37 95       	ror	r19
    15f4:	27 95       	ror	r18
    15f6:	ba 95       	dec	r27
    15f8:	c9 f7       	brne	.-14     	; 0x15ec <__ultoa_invert+0xa2>
    15fa:	62 0f       	add	r22, r18
    15fc:	73 1f       	adc	r23, r19
    15fe:	84 1f       	adc	r24, r20
    1600:	95 1f       	adc	r25, r21
    1602:	a0 1d       	adc	r26, r0
    1604:	08 95       	ret

00001606 <_exit>:
    1606:	f8 94       	cli

00001608 <__stop_program>:
    1608:	ff cf       	rjmp	.-2      	; 0x1608 <__stop_program>
