
node_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800200  000014a8  0000153c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800248  00800248  00001584  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000210  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000168f  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b7e  00000000  00000000  00002e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001bb3  00000000  00000000  000039fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000434  00000000  00000000  000055b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000a1e7  00000000  00000000  000059e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a41  00000000  00000000  0000fbcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  0001060c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004383  00000000  00000000  000107a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 ea       	ldi	r30, 0xA8	; 168
      fc:	f4 e1       	ldi	r31, 0x14	; 20
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 34       	cpi	r26, 0x48	; 72
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a8 e4       	ldi	r26, 0x48	; 72
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a1 36       	cpi	r26, 0x61	; 97
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	3b d0       	rcall	.+118    	; 0x196 <main>
     120:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <init_solenoid>:
	}
}

void init_solenoid(void)
{
	DDRB |= (1 << PB4);
     126:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1 << PB4);
     128:	2c 9a       	sbi	0x05, 4	; 5
     12a:	08 95       	ret

0000012c <solenoid_shoot>:
}

void solenoid_shoot(void)
{
	PORTB &= ~(1 << PB4);
     12c:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12e:	2f e7       	ldi	r18, 0x7F	; 127
     130:	89 ea       	ldi	r24, 0xA9	; 169
     132:	93 e0       	ldi	r25, 0x03	; 3
     134:	21 50       	subi	r18, 0x01	; 1
     136:	80 40       	sbci	r24, 0x00	; 0
     138:	90 40       	sbci	r25, 0x00	; 0
     13a:	e1 f7       	brne	.-8      	; 0x134 <solenoid_shoot+0x8>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <solenoid_shoot+0x12>
     13e:	00 00       	nop
	_delay_ms(75);
	PORTB |= (1 << PB4);
     140:	2c 9a       	sbi	0x05, 4	; 5
     142:	08 95       	ret

00000144 <handle_message>:

}


void handle_message(can_message_t* message)
{
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	ec 01       	movw	r28, r24
	switch (message->id)
     14a:	88 81       	ld	r24, Y
     14c:	80 37       	cpi	r24, 0x70	; 112
     14e:	29 f0       	breq	.+10     	; 0x15a <handle_message+0x16>
     150:	83 37       	cpi	r24, 0x73	; 115
     152:	d9 f0       	breq	.+54     	; 0x18a <handle_message+0x46>
     154:	8a 36       	cpi	r24, 0x6A	; 106
     156:	d1 f4       	brne	.+52     	; 0x18c <handle_message+0x48>
     158:	03 c0       	rjmp	.+6      	; 0x160 <handle_message+0x1c>
	{
		case 'p' :				// Print
			can_print(message);
     15a:	ce 01       	movw	r24, r28
     15c:	b1 d1       	rcall	.+866    	; 0x4c0 <can_print>
			break;
     15e:	18 c0       	rjmp	.+48     	; 0x190 <handle_message+0x4c>
		case 'j' :
			motor_drive( message->data[0] );				//	X - value
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	36 d0       	rcall	.+108    	; 0x1d0 <motor_drive>
			servo_write( message->data[1] * 5.0 + 1450 );	//	Y - value
     164:	6b 81       	ldd	r22, Y+3	; 0x03
     166:	77 27       	eor	r23, r23
     168:	67 fd       	sbrc	r22, 7
     16a:	70 95       	com	r23
     16c:	87 2f       	mov	r24, r23
     16e:	97 2f       	mov	r25, r23
     170:	f2 d3       	rcall	.+2020   	; 0x956 <__floatsisf>
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	40 ea       	ldi	r20, 0xA0	; 160
     178:	50 e4       	ldi	r21, 0x40	; 64
     17a:	a1 d4       	rcall	.+2370   	; 0xabe <__mulsf3>
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e4       	ldi	r19, 0x40	; 64
     180:	45 eb       	ldi	r20, 0xB5	; 181
     182:	54 e4       	ldi	r21, 0x44	; 68
     184:	e5 d2       	rcall	.+1482   	; 0x750 <__addsf3>
     186:	82 d0       	rcall	.+260    	; 0x28c <servo_write>
			break;
     188:	03 c0       	rjmp	.+6      	; 0x190 <handle_message+0x4c>
		case 's' :
			solenoid_shoot();
     18a:	d0 df       	rcall	.-96     	; 0x12c <solenoid_shoot>
			
		
		default:
			can_print(message);
     18c:	ce 01       	movw	r24, r28
     18e:	98 d1       	rcall	.+816    	; 0x4c0 <can_print>
			break;
	}
}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <main>:

void handle_message(can_message_t* message);

int main (void)
{
	can_init();
     196:	fd d0       	rcall	.+506    	; 0x392 <can_init>
	servo_init();
     198:	55 d0       	rcall	.+170    	; 0x244 <servo_init>
	init_ADC();
     19a:	ae d0       	rcall	.+348    	; 0x2f8 <init_ADC>
	USART_init(MYUBRR);
     19c:	87 e6       	ldi	r24, 0x67	; 103
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	c6 d2       	rcall	.+1420   	; 0x72e <USART_init>
	motor_init();
     1a2:	36 d0       	rcall	.+108    	; 0x210 <motor_init>
	init_solenoid();
     1a4:	c0 df       	rcall	.-128    	; 0x126 <init_solenoid>

	DDRF = 0xFF; // MJ1 output
     1a6:	8f ef       	ldi	r24, 0xFF	; 255
     1a8:	80 bb       	out	0x10, r24	; 16
     1aa:	2f ef       	ldi	r18, 0xFF	; 255
     1ac:	89 ef       	ldi	r24, 0xF9	; 249
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	21 50       	subi	r18, 0x01	; 1
     1b2:	80 40       	sbci	r24, 0x00	; 0
     1b4:	90 40       	sbci	r25, 0x00	; 0
     1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x1a>
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x24>
     1ba:	00 00       	nop
	{

		
		_delay_ms(20);
		/*    TESTING    */
		if (can_get_message(&message) == 1)
     1bc:	8c e4       	ldi	r24, 0x4C	; 76
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	59 d1       	rcall	.+690    	; 0x474 <can_get_message>
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	19 f4       	brne	.+6      	; 0x1cc <main+0x36>
		{
			handle_message(&message);
     1c6:	8c e4       	ldi	r24, 0x4C	; 76
     1c8:	92 e0       	ldi	r25, 0x02	; 2
     1ca:	bc df       	rcall	.-136    	; 0x144 <handle_message>
		}
		check_and_report_goal();
     1cc:	b3 d0       	rcall	.+358    	; 0x334 <check_and_report_goal>
		
	}
     1ce:	ed cf       	rjmp	.-38     	; 0x1aa <main+0x14>

000001d0 <motor_drive>:


void motor_drive( char joystick_x )
{
	// Set direction
	if(joystick_x < 0){
     1d0:	88 23       	and	r24, r24
     1d2:	14 f4       	brge	.+4      	; 0x1d8 <motor_drive+0x8>
		PORTF &= ~(1 << PF3);
     1d4:	8b 98       	cbi	0x11, 3	; 17
     1d6:	01 c0       	rjmp	.+2      	; 0x1da <motor_drive+0xa>
	}
	else{
		PORTF |= (1 << PF3);
     1d8:	8b 9a       	sbi	0x11, 3	; 17
	}
	// Set speed
	motor_speed = (char)((abs((float)joystick_x)*150)/100);
     1da:	28 2f       	mov	r18, r24
     1dc:	33 27       	eor	r19, r19
     1de:	27 fd       	sbrc	r18, 7
     1e0:	30 95       	com	r19
     1e2:	33 23       	and	r19, r19
     1e4:	1c f4       	brge	.+6      	; 0x1ec <motor_drive+0x1c>
     1e6:	31 95       	neg	r19
     1e8:	21 95       	neg	r18
     1ea:	31 09       	sbc	r19, r1
     1ec:	46 e9       	ldi	r20, 0x96	; 150
     1ee:	42 9f       	mul	r20, r18
     1f0:	c0 01       	movw	r24, r0
     1f2:	43 9f       	mul	r20, r19
     1f4:	90 0d       	add	r25, r0
     1f6:	11 24       	eor	r1, r1
     1f8:	64 e6       	ldi	r22, 0x64	; 100
     1fa:	70 e0       	ldi	r23, 0x00	; 0
     1fc:	c3 d4       	rcall	.+2438   	; 0xb84 <__divmodhi4>
     1fe:	60 93 56 02 	sts	0x0256, r22
	i2c_transmit(0x50, &motor_speed,1);
     202:	41 e0       	ldi	r20, 0x01	; 1
     204:	50 e0       	ldi	r21, 0x00	; 0
     206:	66 e5       	ldi	r22, 0x56	; 86
     208:	72 e0       	ldi	r23, 0x02	; 2
     20a:	80 e5       	ldi	r24, 0x50	; 80
     20c:	4e c2       	rjmp	.+1180   	; 0x6aa <i2c_transmit>
     20e:	08 95       	ret

00000210 <motor_init>:
uint16_t correct_encoder_output(uint16_t input);

void motor_init(void)
{
	
	i2c_init();
     210:	11 d2       	rcall	.+1058   	; 0x634 <i2c_init>
	DDRF = 0xff;
     212:	8f ef       	ldi	r24, 0xFF	; 255
     214:	80 bb       	out	0x10, r24	; 16
	DDRK = 0x00;
     216:	10 92 07 01 	sts	0x0107, r1
	
	PORTF |= (1 << PF4); // Enable motor
     21a:	8c 9a       	sbi	0x11, 4	; 17
	
	//Move to known reference point
	motor_drive(-50);
     21c:	8e ec       	ldi	r24, 0xCE	; 206
     21e:	d8 df       	rcall	.-80     	; 0x1d0 <motor_drive>
     220:	2f ef       	ldi	r18, 0xFF	; 255
     222:	8d e2       	ldi	r24, 0x2D	; 45
     224:	92 e2       	ldi	r25, 0x22	; 34
     226:	21 50       	subi	r18, 0x01	; 1
     228:	80 40       	sbci	r24, 0x00	; 0
     22a:	90 40       	sbci	r25, 0x00	; 0
     22c:	e1 f7       	brne	.-8      	; 0x226 <motor_init+0x16>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <motor_init+0x20>
     230:	00 00       	nop
	_delay_ms(700);
	motor_drive(0);
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	cd df       	rcall	.-102    	; 0x1d0 <motor_drive>
	
	//Toggle reset encoder
	PORTF &= ~(1 << PF6);
     236:	8e 98       	cbi	0x11, 6	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     238:	2a e1       	ldi	r18, 0x1A	; 26
     23a:	2a 95       	dec	r18
     23c:	f1 f7       	brne	.-4      	; 0x23a <motor_init+0x2a>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <motor_init+0x30>
	_delay_us(5);
	PORTF |= (1 << PF6);
     240:	8e 9a       	sbi	0x11, 6	; 17
     242:	08 95       	ret

00000244 <servo_init>:
}

int us_to_compare(float us)
{
	return ( (us / 20000.0 ) * TOP_VALUE );
}
     244:	e0 e8       	ldi	r30, 0x80	; 128
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	82 60       	ori	r24, 0x02	; 2
     24c:	80 83       	st	Z, r24
     24e:	a1 e8       	ldi	r26, 0x81	; 129
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	8c 91       	ld	r24, X
     254:	88 61       	ori	r24, 0x18	; 24
     256:	8c 93       	st	X, r24
     258:	8c 91       	ld	r24, X
     25a:	82 60       	ori	r24, 0x02	; 2
     25c:	8c 93       	st	X, r24
     25e:	8c 91       	ld	r24, X
     260:	8a 7f       	andi	r24, 0xFA	; 250
     262:	8c 93       	st	X, r24
     264:	80 81       	ld	r24, Z
     266:	80 68       	ori	r24, 0x80	; 128
     268:	80 83       	st	Z, r24
     26a:	80 81       	ld	r24, Z
     26c:	8f 7b       	andi	r24, 0xBF	; 191
     26e:	80 83       	st	Z, r24
     270:	80 e4       	ldi	r24, 0x40	; 64
     272:	9c e9       	ldi	r25, 0x9C	; 156
     274:	90 93 87 00 	sts	0x0087, r25
     278:	80 93 86 00 	sts	0x0086, r24
     27c:	88 e0       	ldi	r24, 0x08	; 8
     27e:	97 e0       	ldi	r25, 0x07	; 7
     280:	90 93 89 00 	sts	0x0089, r25
     284:	80 93 88 00 	sts	0x0088, r24
     288:	25 9a       	sbi	0x04, 5	; 4
     28a:	08 95       	ret

0000028c <servo_write>:


void servo_write(float val)
{
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	6b 01       	movw	r12, r22
     296:	7c 01       	movw	r14, r24
	if(val > 900.0 && val < 2050.0)
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	41 e6       	ldi	r20, 0x61	; 97
     29e:	54 e4       	ldi	r21, 0x44	; 68
     2a0:	0a d4       	rcall	.+2068   	; 0xab6 <__gesf2>
     2a2:	18 16       	cp	r1, r24
     2a4:	24 f5       	brge	.+72     	; 0x2ee <servo_write+0x62>
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e2       	ldi	r19, 0x20	; 32
     2aa:	40 e0       	ldi	r20, 0x00	; 0
     2ac:	55 e4       	ldi	r21, 0x45	; 69
     2ae:	c7 01       	movw	r24, r14
     2b0:	b6 01       	movw	r22, r12
     2b2:	b2 d2       	rcall	.+1380   	; 0x818 <__cmpsf2>
     2b4:	88 23       	and	r24, r24
     2b6:	dc f4       	brge	.+54     	; 0x2ee <servo_write+0x62>

}

int us_to_compare(float us)
{
	return ( (us / 20000.0 ) * TOP_VALUE );
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	30 e4       	ldi	r19, 0x40	; 64
     2bc:	4c e9       	ldi	r20, 0x9C	; 156
     2be:	56 e4       	ldi	r21, 0x46	; 70
     2c0:	c7 01       	movw	r24, r14
     2c2:	b6 01       	movw	r22, r12
     2c4:	ad d2       	rcall	.+1370   	; 0x820 <__divsf3>
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	34 e2       	ldi	r19, 0x24	; 36
     2ca:	44 e7       	ldi	r20, 0x74	; 116
     2cc:	5b e4       	ldi	r21, 0x4B	; 75
     2ce:	f7 d3       	rcall	.+2030   	; 0xabe <__mulsf3>
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	5e e3       	ldi	r21, 0x3E	; 62
     2d8:	f2 d3       	rcall	.+2020   	; 0xabe <__mulsf3>
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	48 e4       	ldi	r20, 0x48	; 72
     2e0:	52 e4       	ldi	r21, 0x42	; 66
     2e2:	9e d2       	rcall	.+1340   	; 0x820 <__divsf3>
     2e4:	05 d3       	rcall	.+1546   	; 0x8f0 <__fixsfsi>

void servo_write(float val)
{
	if(val > 900.0 && val < 2050.0)
	{
		OCR1A = us_to_compare(val);
     2e6:	70 93 89 00 	sts	0x0089, r23
     2ea:	60 93 88 00 	sts	0x0088, r22
	}
}
     2ee:	ff 90       	pop	r15
     2f0:	ef 90       	pop	r14
     2f2:	df 90       	pop	r13
     2f4:	cf 90       	pop	r12
     2f6:	08 95       	ret

000002f8 <init_ADC>:
int recent_goal_counter = 0;

can_message_t goal_msg = {'g',0};

void init_ADC(){
	DDRF &= ~(1 << PF0);
     2f8:	80 98       	cbi	0x10, 0	; 16
	//ADMUX &= 0xe0;
	ADCSRA |= (1 << ADEN) | (1 << ADATE)  | (1 << ADSC) | (1 << ADPS2) |(1 << ADIE)| (1 << ADPS1) | (1 << ADPS0);
     2fa:	ea e7       	ldi	r30, 0x7A	; 122
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	80 81       	ld	r24, Z
     300:	8f 6e       	ori	r24, 0xEF	; 239
     302:	80 83       	st	Z, r24
	ADMUX  |= (1 <<REFS0) | (1 <<ADLAR);
     304:	ec e7       	ldi	r30, 0x7C	; 124
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	80 66       	ori	r24, 0x60	; 96
     30c:	80 83       	st	Z, r24
     30e:	08 95       	ret

00000310 <ADC_read>:

uint8_t ADC_read(){
	int mean = 0; int i = 0;
	int nsamples = 4;
	for (i = 0; i <nsamples; i++){
		mean = mean + ADCH;
     310:	e9 e7       	ldi	r30, 0x79	; 121
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	20 81       	ld	r18, Z
     316:	80 81       	ld	r24, Z
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	82 0f       	add	r24, r18
     31c:	91 1d       	adc	r25, r1
     31e:	20 81       	ld	r18, Z
     320:	82 0f       	add	r24, r18
     322:	91 1d       	adc	r25, r1
     324:	20 81       	ld	r18, Z
     326:	82 0f       	add	r24, r18
     328:	91 1d       	adc	r25, r1
	}
	mean = mean/nsamples;
     32a:	95 95       	asr	r25
     32c:	87 95       	ror	r24
     32e:	95 95       	asr	r25
     330:	87 95       	ror	r24
	return mean;
}
     332:	08 95       	ret

00000334 <check_and_report_goal>:

void check_and_report_goal( void ){
	int threshold = 10;
	
	if (recent_goal == 0)
     334:	80 91 4a 02 	lds	r24, 0x024A
     338:	90 91 4b 02 	lds	r25, 0x024B
     33c:	89 2b       	or	r24, r25
     33e:	79 f4       	brne	.+30     	; 0x35e <check_and_report_goal+0x2a>
	{
		goal_msg.data[0] = ADC_read();
     340:	e7 df       	rcall	.-50     	; 0x310 <ADC_read>
     342:	80 93 08 02 	sts	0x0208, r24
		if(goal_msg.data[0] < threshold)
     346:	8a 30       	cpi	r24, 0x0A	; 10
     348:	1c f5       	brge	.+70     	; 0x390 <check_and_report_goal+0x5c>
		{
			recent_goal = 1;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	90 93 4b 02 	sts	0x024B, r25
     352:	80 93 4a 02 	sts	0x024A, r24
			can_message_send(&goal_msg);		
     356:	86 e0       	ldi	r24, 0x06	; 6
     358:	92 e0       	ldi	r25, 0x02	; 2
     35a:	29 c0       	rjmp	.+82     	; 0x3ae <can_message_send>
     35c:	08 95       	ret
		}
	}
	else
	{
		recent_goal_counter += 1;
     35e:	80 91 48 02 	lds	r24, 0x0248
     362:	90 91 49 02 	lds	r25, 0x0249
     366:	01 96       	adiw	r24, 0x01	; 1
		if (recent_goal_counter > 1000/40)
     368:	8a 31       	cpi	r24, 0x1A	; 26
     36a:	91 05       	cpc	r25, r1
     36c:	2c f4       	brge	.+10     	; 0x378 <check_and_report_goal+0x44>
			can_message_send(&goal_msg);		
		}
	}
	else
	{
		recent_goal_counter += 1;
     36e:	90 93 49 02 	sts	0x0249, r25
     372:	80 93 48 02 	sts	0x0248, r24
     376:	08 95       	ret
		if (recent_goal_counter > 1000/40)
		{
			recent_goal_counter = 0;
     378:	10 92 49 02 	sts	0x0249, r1
     37c:	10 92 48 02 	sts	0x0248, r1
			if (ADC_read() > threshold){
     380:	c7 df       	rcall	.-114    	; 0x310 <ADC_read>
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0b 97       	sbiw	r24, 0x0b	; 11
     386:	24 f0       	brlt	.+8      	; 0x390 <check_and_report_goal+0x5c>
				recent_goal = 0;
     388:	10 92 4b 02 	sts	0x024B, r1
     38c:	10 92 4a 02 	sts	0x024A, r1
     390:	08 95       	ret

00000392 <can_init>:


void can_init()
{
	
	mcp2515_init();
     392:	33 d1       	rcall	.+614    	; 0x5fa <mcp2515_init>
	
	mcp2515_bit_modify(MCP_RXF0SIDH, 0xff , 0x00);
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	6f ef       	ldi	r22, 0xFF	; 255
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	0a d1       	rcall	.+532    	; 0x5b0 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXF0SIDL, 0xE0 , 0x00);
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	60 ee       	ldi	r22, 0xE0	; 224
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	06 d1       	rcall	.+524    	; 0x5b0 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, 0xE0 , MODE_NORMAL);
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	60 ee       	ldi	r22, 0xE0	; 224
     3a8:	8f e0       	ldi	r24, 0x0F	; 15
     3aa:	02 c1       	rjmp	.+516    	; 0x5b0 <mcp2515_bit_modify>
     3ac:	08 95       	ret

000003ae <can_message_send>:
	
}


void can_message_send(can_message_t *message)
{
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	7c 01       	movw	r14, r24
	int i;
	
	// ID
	mcp2515_write(MCP_TXB0CTRL + 1,message->id);
     3bc:	fc 01       	movw	r30, r24
     3be:	60 81       	ld	r22, Z
     3c0:	81 e3       	ldi	r24, 0x31	; 49
     3c2:	df d0       	rcall	.+446    	; 0x582 <mcp2515_write>
	mcp2515_write(0x32,0x00);
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	82 e3       	ldi	r24, 0x32	; 50
     3c8:	dc d0       	rcall	.+440    	; 0x582 <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
     3ca:	f7 01       	movw	r30, r14
     3cc:	61 81       	ldd	r22, Z+1	; 0x01
     3ce:	85 e3       	ldi	r24, 0x35	; 53
     3d0:	d8 d0       	rcall	.+432    	; 0x582 <mcp2515_write>
	
	// Data
	for (i = 0; i< message->length; i++){
     3d2:	f7 01       	movw	r30, r14
     3d4:	81 81       	ldd	r24, Z+1	; 0x01
     3d6:	18 16       	cp	r1, r24
     3d8:	a4 f4       	brge	.+40     	; 0x402 <can_message_send+0x54>
     3da:	87 01       	movw	r16, r14
     3dc:	0e 5f       	subi	r16, 0xFE	; 254
     3de:	1f 4f       	sbci	r17, 0xFF	; 255
     3e0:	c0 e0       	ldi	r28, 0x00	; 0
     3e2:	d0 e0       	ldi	r29, 0x00	; 0
		mcp2515_write(MCP_TXB0CTRL + 6 + i, (message->data[i]) );
     3e4:	f8 01       	movw	r30, r16
     3e6:	61 91       	ld	r22, Z+
     3e8:	8f 01       	movw	r16, r30
     3ea:	8c 2f       	mov	r24, r28
     3ec:	8a 5c       	subi	r24, 0xCA	; 202
     3ee:	c9 d0       	rcall	.+402    	; 0x582 <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
	
	// Data
	for (i = 0; i< message->length; i++){
     3f0:	21 96       	adiw	r28, 0x01	; 1
     3f2:	f7 01       	movw	r30, r14
     3f4:	21 81       	ldd	r18, Z+1	; 0x01
     3f6:	33 27       	eor	r19, r19
     3f8:	27 fd       	sbrc	r18, 7
     3fa:	30 95       	com	r19
     3fc:	c2 17       	cp	r28, r18
     3fe:	d3 07       	cpc	r29, r19
     400:	8c f3       	brlt	.-30     	; 0x3e4 <can_message_send+0x36>
		mcp2515_write(MCP_TXB0CTRL + 6 + i, (message->data[i]) );
	}
	
	mcp2515_request_to_send(MCP_RTS_TX0);
     402:	81 e8       	ldi	r24, 0x81	; 129
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	cc d0       	rcall	.+408    	; 0x5a0 <mcp2515_request_to_send>
}
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	08 95       	ret

00000416 <can_message_receive>:

void can_message_receive(can_message_t* message, int buffer)
{
     416:	ef 92       	push	r14
     418:	ff 92       	push	r15
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	8c 01       	movw	r16, r24
     424:	e6 2e       	mov	r14, r22
	char i;
	
	// ID
	message->id = mcp2515_read(MCP_RXB0CTRL+buffer + 1);
     426:	81 e6       	ldi	r24, 0x61	; 97
     428:	86 0f       	add	r24, r22
     42a:	9e d0       	rcall	.+316    	; 0x568 <mcp2515_read>
     42c:	f8 01       	movw	r30, r16
     42e:	80 83       	st	Z, r24
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
     430:	85 e6       	ldi	r24, 0x65	; 101
     432:	8e 0d       	add	r24, r14
     434:	99 d0       	rcall	.+306    	; 0x568 <mcp2515_read>
     436:	f8 01       	movw	r30, r16
     438:	81 83       	std	Z+1, r24	; 0x01
	
	// Data
	for(i=0;i<message->length;i++)
     43a:	18 16       	cp	r1, r24
     43c:	a4 f4       	brge	.+40     	; 0x466 <can_message_receive+0x50>
     43e:	c0 e0       	ldi	r28, 0x00	; 0
     440:	d0 e0       	ldi	r29, 0x00	; 0
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
     442:	f6 e6       	ldi	r31, 0x66	; 102
     444:	ef 0e       	add	r14, r31
     446:	fc 2e       	mov	r15, r28
     448:	8c 2f       	mov	r24, r28
     44a:	8e 0d       	add	r24, r14
     44c:	8d d0       	rcall	.+282    	; 0x568 <mcp2515_read>
     44e:	f8 01       	movw	r30, r16
     450:	ec 0f       	add	r30, r28
     452:	f1 1d       	adc	r31, r1
     454:	c7 fd       	sbrc	r28, 7
     456:	fa 95       	dec	r31
     458:	82 83       	std	Z+2, r24	; 0x02
     45a:	f3 94       	inc	r15
     45c:	21 96       	adiw	r28, 0x01	; 1
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
	
	// Data
	for(i=0;i<message->length;i++)
     45e:	f8 01       	movw	r30, r16
     460:	81 81       	ldd	r24, Z+1	; 0x01
     462:	f8 16       	cp	r15, r24
     464:	84 f3       	brlt	.-32     	; 0x446 <can_message_receive+0x30>
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
	}
	
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	ff 90       	pop	r15
     470:	ef 90       	pop	r14
     472:	08 95       	ret

00000474 <can_get_message>:

int can_get_message(can_message_t* message)
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	ec 01       	movw	r28, r24
	
	if ((mcp2515_read(MCP_CANINTF) & 0x01) == 0x01)
     47a:	8c e2       	ldi	r24, 0x2C	; 44
     47c:	75 d0       	rcall	.+234    	; 0x568 <mcp2515_read>
     47e:	80 ff       	sbrs	r24, 0
     480:	0b c0       	rjmp	.+22     	; 0x498 <can_get_message+0x24>
	{
		can_message_receive(message,0);
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	ce 01       	movw	r24, r28
     488:	c6 df       	rcall	.-116    	; 0x416 <can_message_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x01,0x00);
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	61 e0       	ldi	r22, 0x01	; 1
     48e:	8c e2       	ldi	r24, 0x2C	; 44
     490:	8f d0       	rcall	.+286    	; 0x5b0 <mcp2515_bit_modify>
		return 1;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	11 c0       	rjmp	.+34     	; 0x4ba <can_get_message+0x46>
	}
	else if ((mcp2515_read(MCP_CANINTF) & 0x02) == 0x02)
     498:	8c e2       	ldi	r24, 0x2C	; 44
     49a:	66 d0       	rcall	.+204    	; 0x568 <mcp2515_read>
     49c:	81 ff       	sbrs	r24, 1
     49e:	0b c0       	rjmp	.+22     	; 0x4b6 <can_get_message+0x42>
	{
		can_message_receive(message,1);
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	ce 01       	movw	r24, r28
     4a6:	b7 df       	rcall	.-146    	; 0x416 <can_message_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x02,0x00);
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	62 e0       	ldi	r22, 0x02	; 2
     4ac:	8c e2       	ldi	r24, 0x2C	; 44
     4ae:	80 d0       	rcall	.+256    	; 0x5b0 <mcp2515_bit_modify>
		return 1;
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <can_get_message+0x46>
	}
	else
	{
		return 0;
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <can_print>:


void can_print(can_message_t* msg)
{
     4c0:	cf 92       	push	r12
     4c2:	df 92       	push	r13
     4c4:	ef 92       	push	r14
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	6c 01       	movw	r12, r24
	printf("ID: %c ,Length: %d, ",msg->id,msg->length);
     4d2:	fc 01       	movw	r30, r24
     4d4:	21 81       	ldd	r18, Z+1	; 0x01
     4d6:	82 2f       	mov	r24, r18
     4d8:	99 27       	eor	r25, r25
     4da:	87 fd       	sbrc	r24, 7
     4dc:	90 95       	com	r25
     4de:	9f 93       	push	r25
     4e0:	2f 93       	push	r18
     4e2:	20 81       	ld	r18, Z
     4e4:	82 2f       	mov	r24, r18
     4e6:	99 27       	eor	r25, r25
     4e8:	87 fd       	sbrc	r24, 7
     4ea:	90 95       	com	r25
     4ec:	9f 93       	push	r25
     4ee:	2f 93       	push	r18
     4f0:	80 e1       	ldi	r24, 0x10	; 16
     4f2:	92 e0       	ldi	r25, 0x02	; 2
     4f4:	9f 93       	push	r25
     4f6:	8f 93       	push	r24
     4f8:	b6 d3       	rcall	.+1900   	; 0xc66 <printf>
	int i ;
	for (i=0; i<msg->length;i++)
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	f6 01       	movw	r30, r12
     508:	81 81       	ldd	r24, Z+1	; 0x01
     50a:	18 16       	cp	r1, r24
     50c:	0c f5       	brge	.+66     	; 0x550 <can_print+0x90>
     50e:	76 01       	movw	r14, r12
     510:	f2 e0       	ldi	r31, 0x02	; 2
     512:	ef 0e       	add	r14, r31
     514:	f1 1c       	adc	r15, r1
     516:	c0 e0       	ldi	r28, 0x00	; 0
     518:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("%i", msg->data[i]);
     51a:	05 e2       	ldi	r16, 0x25	; 37
     51c:	12 e0       	ldi	r17, 0x02	; 2
     51e:	f7 01       	movw	r30, r14
     520:	21 91       	ld	r18, Z+
     522:	7f 01       	movw	r14, r30
     524:	82 2f       	mov	r24, r18
     526:	99 27       	eor	r25, r25
     528:	87 fd       	sbrc	r24, 7
     52a:	90 95       	com	r25
     52c:	9f 93       	push	r25
     52e:	2f 93       	push	r18
     530:	1f 93       	push	r17
     532:	0f 93       	push	r16
     534:	98 d3       	rcall	.+1840   	; 0xc66 <printf>

void can_print(can_message_t* msg)
{
	printf("ID: %c ,Length: %d, ",msg->id,msg->length);
	int i ;
	for (i=0; i<msg->length;i++)
     536:	21 96       	adiw	r28, 0x01	; 1
     538:	f6 01       	movw	r30, r12
     53a:	21 81       	ldd	r18, Z+1	; 0x01
     53c:	33 27       	eor	r19, r19
     53e:	27 fd       	sbrc	r18, 7
     540:	30 95       	com	r19
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	c2 17       	cp	r28, r18
     54c:	d3 07       	cpc	r29, r19
     54e:	3c f3       	brlt	.-50     	; 0x51e <can_print+0x5e>
	{
		printf("%i", msg->data[i]);
	}
	printf("\n");
     550:	8a e0       	ldi	r24, 0x0A	; 10
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	99 d3       	rcall	.+1842   	; 0xc88 <putchar>
}
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	df 90       	pop	r13
     564:	cf 90       	pop	r12
     566:	08 95       	ret

00000568 <mcp2515_read>:
		printf("MCP2515 is not in config mode!\n");
	}
	
	
}
char mcp2515_read (char addr){
     568:	cf 93       	push	r28
     56a:	c8 2f       	mov	r28, r24
	char result;
	
	spi_select();
     56c:	50 d0       	rcall	.+160    	; 0x60e <spi_select>
	
	spi_transmit(MCP_READ);
     56e:	83 e0       	ldi	r24, 0x03	; 3
     570:	52 d0       	rcall	.+164    	; 0x616 <spi_transmit>
	spi_transmit(addr);
     572:	8c 2f       	mov	r24, r28
     574:	50 d0       	rcall	.+160    	; 0x616 <spi_transmit>
	result = spi_receive();
     576:	54 d0       	rcall	.+168    	; 0x620 <spi_receive>
     578:	c8 2f       	mov	r28, r24
	
	spi_deselect();
     57a:	4b d0       	rcall	.+150    	; 0x612 <spi_deselect>
	
	return result;
}
     57c:	8c 2f       	mov	r24, r28
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <mcp2515_write>:

void mcp2515_write(char addr, char data)
{
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	d8 2f       	mov	r29, r24
     588:	c6 2f       	mov	r28, r22
	spi_select();
     58a:	41 d0       	rcall	.+130    	; 0x60e <spi_select>
	
	spi_transmit(MCP_WRITE);
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	43 d0       	rcall	.+134    	; 0x616 <spi_transmit>
	spi_transmit(addr);
     590:	8d 2f       	mov	r24, r29
     592:	41 d0       	rcall	.+130    	; 0x616 <spi_transmit>
	spi_transmit(data);
     594:	8c 2f       	mov	r24, r28
     596:	3f d0       	rcall	.+126    	; 0x616 <spi_transmit>
	
	spi_deselect();
     598:	3c d0       	rcall	.+120    	; 0x612 <spi_deselect>
	
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <mcp2515_request_to_send>:

void mcp2515_request_to_send(int reg)
{
     5a0:	cf 93       	push	r28
     5a2:	c8 2f       	mov	r28, r24
	spi_select();
     5a4:	34 d0       	rcall	.+104    	; 0x60e <spi_select>
	
	spi_transmit(reg);
     5a6:	8c 2f       	mov	r24, r28
     5a8:	36 d0       	rcall	.+108    	; 0x616 <spi_transmit>
	
	spi_deselect();
     5aa:	33 d0       	rcall	.+102    	; 0x612 <spi_deselect>
}
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <mcp2515_bit_modify>:

void mcp2515_bit_modify(char addr, char mask_byte, char data)
{
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	18 2f       	mov	r17, r24
     5b8:	d6 2f       	mov	r29, r22
     5ba:	c4 2f       	mov	r28, r20
	spi_select();
     5bc:	28 d0       	rcall	.+80     	; 0x60e <spi_select>
	
	spi_transmit(MCP_BITMOD);
     5be:	85 e0       	ldi	r24, 0x05	; 5
     5c0:	2a d0       	rcall	.+84     	; 0x616 <spi_transmit>
	spi_transmit(addr);
     5c2:	81 2f       	mov	r24, r17
     5c4:	28 d0       	rcall	.+80     	; 0x616 <spi_transmit>
	spi_transmit(mask_byte);
     5c6:	8d 2f       	mov	r24, r29
     5c8:	26 d0       	rcall	.+76     	; 0x616 <spi_transmit>
	spi_transmit(data);
     5ca:	8c 2f       	mov	r24, r28
     5cc:	24 d0       	rcall	.+72     	; 0x616 <spi_transmit>
	
	spi_deselect();
     5ce:	21 d0       	rcall	.+66     	; 0x612 <spi_deselect>
}
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	08 95       	ret

000005d8 <mcp2515_reset>:

void mcp2515_reset()
{
	spi_select();
     5d8:	1a d0       	rcall	.+52     	; 0x60e <spi_select>
	
	spi_transmit(MCP_RESET);
     5da:	80 ec       	ldi	r24, 0xC0	; 192
     5dc:	1c d0       	rcall	.+56     	; 0x616 <spi_transmit>
	
	spi_deselect();
     5de:	19 c0       	rjmp	.+50     	; 0x612 <spi_deselect>
     5e0:	08 95       	ret

000005e2 <mcp2515_read_status>:
}

char mcp2515_read_status()
{
     5e2:	cf 93       	push	r28
	char output;
	spi_select();
     5e4:	14 d0       	rcall	.+40     	; 0x60e <spi_select>
	spi_transmit(MCP_READ);
     5e6:	83 e0       	ldi	r24, 0x03	; 3
     5e8:	16 d0       	rcall	.+44     	; 0x616 <spi_transmit>
	spi_transmit(MCP_CANSTAT);
     5ea:	8e e0       	ldi	r24, 0x0E	; 14
     5ec:	14 d0       	rcall	.+40     	; 0x616 <spi_transmit>
	output = spi_receive();
     5ee:	18 d0       	rcall	.+48     	; 0x620 <spi_receive>
     5f0:	c8 2f       	mov	r28, r24
	
	spi_deselect();
     5f2:	0f d0       	rcall	.+30     	; 0x612 <spi_deselect>
	return output;
}
     5f4:	8c 2f       	mov	r24, r28
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <mcp2515_init>:
#include "spi_control.h"
#include <stdio.h>

void mcp2515_init(){
	char status;
	spi_init();
     5fa:	16 d0       	rcall	.+44     	; 0x628 <spi_init>
	mcp2515_reset();
     5fc:	ed df       	rcall	.-38     	; 0x5d8 <mcp2515_reset>
	
	status = mcp2515_read_status();
     5fe:	f1 df       	rcall	.-30     	; 0x5e2 <mcp2515_read_status>
	if ((status & MODE_MASK) != MODE_CONFIG)
     600:	80 7e       	andi	r24, 0xE0	; 224
     602:	80 38       	cpi	r24, 0x80	; 128
     604:	19 f0       	breq	.+6      	; 0x60c <mcp2515_init+0x12>
	{
		printf("MCP2515 is not in config mode!\n");
     606:	88 e2       	ldi	r24, 0x28	; 40
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	43 c3       	rjmp	.+1670   	; 0xc92 <puts>
     60c:	08 95       	ret

0000060e <spi_select>:
#include "spi_control.h"
#include <stdio.h>

void spi_select()
{
	PORTB &= ~(1<<PB0);
     60e:	28 98       	cbi	0x05, 0	; 5
     610:	08 95       	ret

00000612 <spi_deselect>:
}

void spi_deselect()
{
	PORTB |= (1<<PB0);
     612:	28 9a       	sbi	0x05, 0	; 5
     614:	08 95       	ret

00000616 <spi_transmit>:


void spi_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     616:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     618:	0d b4       	in	r0, 0x2d	; 45
     61a:	07 fe       	sbrs	r0, 7
     61c:	fd cf       	rjmp	.-6      	; 0x618 <spi_transmit+0x2>
	;
}
     61e:	08 95       	ret

00000620 <spi_receive>:
	PORTB |= (1<<PB0);
}

char spi_receive()
{
	spi_transmit(0);
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	f9 df       	rcall	.-14     	; 0x616 <spi_transmit>
	return SPDR;
     624:	8e b5       	in	r24, 0x2e	; 46
}
     626:	08 95       	ret

00000628 <spi_init>:
}


void spi_init(){
	/* Set MOSI,SCK and SS output, all others input */
	DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<DD_SS);    
     628:	84 b1       	in	r24, 0x04	; 4
     62a:	87 60       	ori	r24, 0x07	; 7
     62c:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     62e:	81 e5       	ldi	r24, 0x51	; 81
     630:	8c bd       	out	0x2c, r24	; 44
     632:	08 95       	ret

00000634 <i2c_init>:



void i2c_init( void )
{
	TWBR = 0x0C; // Baud
     634:	8c e0       	ldi	r24, 0x0C	; 12
     636:	80 93 b8 00 	sts	0x00B8, r24
     63a:	08 95       	ret

0000063c <i2c_start>:


char i2c_start(char address)
{
	// reset TWI control register
	TWCR = 0;
     63c:	ec eb       	ldi	r30, 0xBC	; 188
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	10 82       	st	Z, r1
	// transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     642:	94 ea       	ldi	r25, 0xA4	; 164
     644:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     646:	90 81       	ld	r25, Z
     648:	99 23       	and	r25, r25
     64a:	ec f7       	brge	.-6      	; 0x646 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     64c:	90 91 b9 00 	lds	r25, 0x00B9
     650:	98 7f       	andi	r25, 0xF8	; 248
     652:	98 30       	cpi	r25, 0x08	; 8
     654:	a1 f4       	brne	.+40     	; 0x67e <i2c_start+0x42>
	
	// load slave address into data register
	TWDR = address;
     656:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     65a:	84 e8       	ldi	r24, 0x84	; 132
     65c:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     660:	ec eb       	ldi	r30, 0xBC	; 188
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	80 81       	ld	r24, Z
     666:	88 23       	and	r24, r24
     668:	ec f7       	brge	.-6      	; 0x664 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     66a:	90 91 b9 00 	lds	r25, 0x00B9
     66e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     670:	98 31       	cpi	r25, 0x18	; 24
     672:	39 f0       	breq	.+14     	; 0x682 <i2c_start+0x46>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	90 34       	cpi	r25, 0x40	; 64
     678:	29 f4       	brne	.+10     	; 0x684 <i2c_start+0x48>
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
     682:	80 e0       	ldi	r24, 0x00	; 0
}
     684:	08 95       	ret

00000686 <i2c_write>:

char i2c_write(char data)
{
	// load data into data register
	TWDR = data;
     686:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     68a:	84 e8       	ldi	r24, 0x84	; 132
     68c:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     690:	ec eb       	ldi	r30, 0xBC	; 188
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	88 23       	and	r24, r24
     698:	ec f7       	brge	.-6      	; 0x694 <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     69a:	90 91 b9 00 	lds	r25, 0x00B9
     69e:	98 7f       	andi	r25, 0xF8	; 248
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	98 32       	cpi	r25, 0x28	; 40
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <i2c_write+0x22>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     6a8:	08 95       	ret

000006aa <i2c_transmit>:

char i2c_transmit(char address, char* data, uint16_t length)
{
     6aa:	df 92       	push	r13
     6ac:	ef 92       	push	r14
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	7b 01       	movw	r14, r22
     6ba:	8a 01       	movw	r16, r20
	// Start
	if (i2c_start(address | I2C_WRITE)) return 1;
     6bc:	bf df       	rcall	.-130    	; 0x63c <i2c_start>
     6be:	81 11       	cpse	r24, r1
     6c0:	15 c0       	rjmp	.+42     	; 0x6ec <i2c_transmit+0x42>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
     6c2:	e1 df       	rcall	.-62     	; 0x686 <i2c_write>
     6c4:	d8 2e       	mov	r13, r24
     6c6:	81 11       	cpse	r24, r1
     6c8:	14 c0       	rjmp	.+40     	; 0x6f2 <i2c_transmit+0x48>
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
     6ca:	01 15       	cp	r16, r1
     6cc:	11 05       	cpc	r17, r1
     6ce:	51 f0       	breq	.+20     	; 0x6e4 <i2c_transmit+0x3a>
     6d0:	e7 01       	movw	r28, r14
     6d2:	0e 0d       	add	r16, r14
     6d4:	1f 1d       	adc	r17, r15
	{
		if (i2c_write(data[i])) return 1;
     6d6:	89 91       	ld	r24, Y+
     6d8:	d6 df       	rcall	.-84     	; 0x686 <i2c_write>
     6da:	81 11       	cpse	r24, r1
     6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <i2c_transmit+0x4e>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
     6de:	c0 17       	cp	r28, r16
     6e0:	d1 07       	cpc	r29, r17
     6e2:	c9 f7       	brne	.-14     	; 0x6d6 <i2c_transmit+0x2c>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     6e4:	84 e9       	ldi	r24, 0x94	; 148
     6e6:	80 93 bc 00 	sts	0x00BC, r24
     6ea:	08 c0       	rjmp	.+16     	; 0x6fc <i2c_transmit+0x52>
}

char i2c_transmit(char address, char* data, uint16_t length)
{
	// Start
	if (i2c_start(address | I2C_WRITE)) return 1;
     6ec:	dd 24       	eor	r13, r13
     6ee:	d3 94       	inc	r13
     6f0:	05 c0       	rjmp	.+10     	; 0x6fc <i2c_transmit+0x52>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
     6f2:	dd 24       	eor	r13, r13
     6f4:	d3 94       	inc	r13
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <i2c_transmit+0x52>
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     6f8:	dd 24       	eor	r13, r13
     6fa:	d3 94       	inc	r13
	}
	
	i2c_stop();
	
	return 0;
}
     6fc:	8d 2d       	mov	r24, r13
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	df 90       	pop	r13
     70c:	08 95       	ret

0000070e <USART_transmit>:
	fdevopen(USART_transmit,USART_receive);
}

void USART_transmit(unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)))
     70e:	e0 ec       	ldi	r30, 0xC0	; 192
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	90 81       	ld	r25, Z
     714:	95 ff       	sbrs	r25, 5
     716:	fd cf       	rjmp	.-6      	; 0x712 <USART_transmit+0x4>
		;
	UDR0 = data;
     718:	80 93 c6 00 	sts	0x00C6, r24
     71c:	08 95       	ret

0000071e <USART_receive>:
	
}

unsigned char USART_receive (void){
	
	while( !(UCSR0A & (1<<RXC0)))
     71e:	e0 ec       	ldi	r30, 0xC0	; 192
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	88 23       	and	r24, r24
     726:	ec f7       	brge	.-6      	; 0x722 <USART_receive+0x4>
		;
	return UDR0;
     728:	80 91 c6 00 	lds	r24, 0x00C6
	
     72c:	08 95       	ret

0000072e <USART_init>:
#include "USART_driver.h"
#include <stdio.h>
void USART_init(unsigned int ubrr){

	UBRR0H = (unsigned char)(ubrr>>8);
     72e:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;	
     732:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     736:	88 e1       	ldi	r24, 0x18	; 24
     738:	80 93 c1 00 	sts	0x00C1, r24
	
	UCSR0C = (3<<UCSZ00); 
     73c:	86 e0       	ldi	r24, 0x06	; 6
     73e:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(USART_transmit,USART_receive);
     742:	6f e8       	ldi	r22, 0x8F	; 143
     744:	73 e0       	ldi	r23, 0x03	; 3
     746:	87 e8       	ldi	r24, 0x87	; 135
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	43 c2       	rjmp	.+1158   	; 0xbd2 <fdevopen>
     74c:	08 95       	ret

0000074e <__subsf3>:
     74e:	50 58       	subi	r21, 0x80	; 128

00000750 <__addsf3>:
     750:	bb 27       	eor	r27, r27
     752:	aa 27       	eor	r26, r26
     754:	0e d0       	rcall	.+28     	; 0x772 <__addsf3x>
     756:	75 c1       	rjmp	.+746    	; 0xa42 <__fp_round>
     758:	66 d1       	rcall	.+716    	; 0xa26 <__fp_pscA>
     75a:	30 f0       	brcs	.+12     	; 0x768 <__addsf3+0x18>
     75c:	6b d1       	rcall	.+726    	; 0xa34 <__fp_pscB>
     75e:	20 f0       	brcs	.+8      	; 0x768 <__addsf3+0x18>
     760:	31 f4       	brne	.+12     	; 0x76e <__addsf3+0x1e>
     762:	9f 3f       	cpi	r25, 0xFF	; 255
     764:	11 f4       	brne	.+4      	; 0x76a <__addsf3+0x1a>
     766:	1e f4       	brtc	.+6      	; 0x76e <__addsf3+0x1e>
     768:	5b c1       	rjmp	.+694    	; 0xa20 <__fp_nan>
     76a:	0e f4       	brtc	.+2      	; 0x76e <__addsf3+0x1e>
     76c:	e0 95       	com	r30
     76e:	e7 fb       	bst	r30, 7
     770:	51 c1       	rjmp	.+674    	; 0xa14 <__fp_inf>

00000772 <__addsf3x>:
     772:	e9 2f       	mov	r30, r25
     774:	77 d1       	rcall	.+750    	; 0xa64 <__fp_split3>
     776:	80 f3       	brcs	.-32     	; 0x758 <__addsf3+0x8>
     778:	ba 17       	cp	r27, r26
     77a:	62 07       	cpc	r22, r18
     77c:	73 07       	cpc	r23, r19
     77e:	84 07       	cpc	r24, r20
     780:	95 07       	cpc	r25, r21
     782:	18 f0       	brcs	.+6      	; 0x78a <__addsf3x+0x18>
     784:	71 f4       	brne	.+28     	; 0x7a2 <__addsf3x+0x30>
     786:	9e f5       	brtc	.+102    	; 0x7ee <__addsf3x+0x7c>
     788:	8f c1       	rjmp	.+798    	; 0xaa8 <__fp_zero>
     78a:	0e f4       	brtc	.+2      	; 0x78e <__addsf3x+0x1c>
     78c:	e0 95       	com	r30
     78e:	0b 2e       	mov	r0, r27
     790:	ba 2f       	mov	r27, r26
     792:	a0 2d       	mov	r26, r0
     794:	0b 01       	movw	r0, r22
     796:	b9 01       	movw	r22, r18
     798:	90 01       	movw	r18, r0
     79a:	0c 01       	movw	r0, r24
     79c:	ca 01       	movw	r24, r20
     79e:	a0 01       	movw	r20, r0
     7a0:	11 24       	eor	r1, r1
     7a2:	ff 27       	eor	r31, r31
     7a4:	59 1b       	sub	r21, r25
     7a6:	99 f0       	breq	.+38     	; 0x7ce <__addsf3x+0x5c>
     7a8:	59 3f       	cpi	r21, 0xF9	; 249
     7aa:	50 f4       	brcc	.+20     	; 0x7c0 <__addsf3x+0x4e>
     7ac:	50 3e       	cpi	r21, 0xE0	; 224
     7ae:	68 f1       	brcs	.+90     	; 0x80a <__addsf3x+0x98>
     7b0:	1a 16       	cp	r1, r26
     7b2:	f0 40       	sbci	r31, 0x00	; 0
     7b4:	a2 2f       	mov	r26, r18
     7b6:	23 2f       	mov	r18, r19
     7b8:	34 2f       	mov	r19, r20
     7ba:	44 27       	eor	r20, r20
     7bc:	58 5f       	subi	r21, 0xF8	; 248
     7be:	f3 cf       	rjmp	.-26     	; 0x7a6 <__addsf3x+0x34>
     7c0:	46 95       	lsr	r20
     7c2:	37 95       	ror	r19
     7c4:	27 95       	ror	r18
     7c6:	a7 95       	ror	r26
     7c8:	f0 40       	sbci	r31, 0x00	; 0
     7ca:	53 95       	inc	r21
     7cc:	c9 f7       	brne	.-14     	; 0x7c0 <__addsf3x+0x4e>
     7ce:	7e f4       	brtc	.+30     	; 0x7ee <__addsf3x+0x7c>
     7d0:	1f 16       	cp	r1, r31
     7d2:	ba 0b       	sbc	r27, r26
     7d4:	62 0b       	sbc	r22, r18
     7d6:	73 0b       	sbc	r23, r19
     7d8:	84 0b       	sbc	r24, r20
     7da:	ba f0       	brmi	.+46     	; 0x80a <__addsf3x+0x98>
     7dc:	91 50       	subi	r25, 0x01	; 1
     7de:	a1 f0       	breq	.+40     	; 0x808 <__addsf3x+0x96>
     7e0:	ff 0f       	add	r31, r31
     7e2:	bb 1f       	adc	r27, r27
     7e4:	66 1f       	adc	r22, r22
     7e6:	77 1f       	adc	r23, r23
     7e8:	88 1f       	adc	r24, r24
     7ea:	c2 f7       	brpl	.-16     	; 0x7dc <__addsf3x+0x6a>
     7ec:	0e c0       	rjmp	.+28     	; 0x80a <__addsf3x+0x98>
     7ee:	ba 0f       	add	r27, r26
     7f0:	62 1f       	adc	r22, r18
     7f2:	73 1f       	adc	r23, r19
     7f4:	84 1f       	adc	r24, r20
     7f6:	48 f4       	brcc	.+18     	; 0x80a <__addsf3x+0x98>
     7f8:	87 95       	ror	r24
     7fa:	77 95       	ror	r23
     7fc:	67 95       	ror	r22
     7fe:	b7 95       	ror	r27
     800:	f7 95       	ror	r31
     802:	9e 3f       	cpi	r25, 0xFE	; 254
     804:	08 f0       	brcs	.+2      	; 0x808 <__addsf3x+0x96>
     806:	b3 cf       	rjmp	.-154    	; 0x76e <__addsf3+0x1e>
     808:	93 95       	inc	r25
     80a:	88 0f       	add	r24, r24
     80c:	08 f0       	brcs	.+2      	; 0x810 <__addsf3x+0x9e>
     80e:	99 27       	eor	r25, r25
     810:	ee 0f       	add	r30, r30
     812:	97 95       	ror	r25
     814:	87 95       	ror	r24
     816:	08 95       	ret

00000818 <__cmpsf2>:
     818:	d9 d0       	rcall	.+434    	; 0x9cc <__fp_cmp>
     81a:	08 f4       	brcc	.+2      	; 0x81e <__cmpsf2+0x6>
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	08 95       	ret

00000820 <__divsf3>:
     820:	0c d0       	rcall	.+24     	; 0x83a <__divsf3x>
     822:	0f c1       	rjmp	.+542    	; 0xa42 <__fp_round>
     824:	07 d1       	rcall	.+526    	; 0xa34 <__fp_pscB>
     826:	40 f0       	brcs	.+16     	; 0x838 <__divsf3+0x18>
     828:	fe d0       	rcall	.+508    	; 0xa26 <__fp_pscA>
     82a:	30 f0       	brcs	.+12     	; 0x838 <__divsf3+0x18>
     82c:	21 f4       	brne	.+8      	; 0x836 <__divsf3+0x16>
     82e:	5f 3f       	cpi	r21, 0xFF	; 255
     830:	19 f0       	breq	.+6      	; 0x838 <__divsf3+0x18>
     832:	f0 c0       	rjmp	.+480    	; 0xa14 <__fp_inf>
     834:	51 11       	cpse	r21, r1
     836:	39 c1       	rjmp	.+626    	; 0xaaa <__fp_szero>
     838:	f3 c0       	rjmp	.+486    	; 0xa20 <__fp_nan>

0000083a <__divsf3x>:
     83a:	14 d1       	rcall	.+552    	; 0xa64 <__fp_split3>
     83c:	98 f3       	brcs	.-26     	; 0x824 <__divsf3+0x4>

0000083e <__divsf3_pse>:
     83e:	99 23       	and	r25, r25
     840:	c9 f3       	breq	.-14     	; 0x834 <__divsf3+0x14>
     842:	55 23       	and	r21, r21
     844:	b1 f3       	breq	.-20     	; 0x832 <__divsf3+0x12>
     846:	95 1b       	sub	r25, r21
     848:	55 0b       	sbc	r21, r21
     84a:	bb 27       	eor	r27, r27
     84c:	aa 27       	eor	r26, r26
     84e:	62 17       	cp	r22, r18
     850:	73 07       	cpc	r23, r19
     852:	84 07       	cpc	r24, r20
     854:	38 f0       	brcs	.+14     	; 0x864 <__divsf3_pse+0x26>
     856:	9f 5f       	subi	r25, 0xFF	; 255
     858:	5f 4f       	sbci	r21, 0xFF	; 255
     85a:	22 0f       	add	r18, r18
     85c:	33 1f       	adc	r19, r19
     85e:	44 1f       	adc	r20, r20
     860:	aa 1f       	adc	r26, r26
     862:	a9 f3       	breq	.-22     	; 0x84e <__divsf3_pse+0x10>
     864:	33 d0       	rcall	.+102    	; 0x8cc <__divsf3_pse+0x8e>
     866:	0e 2e       	mov	r0, r30
     868:	3a f0       	brmi	.+14     	; 0x878 <__divsf3_pse+0x3a>
     86a:	e0 e8       	ldi	r30, 0x80	; 128
     86c:	30 d0       	rcall	.+96     	; 0x8ce <__divsf3_pse+0x90>
     86e:	91 50       	subi	r25, 0x01	; 1
     870:	50 40       	sbci	r21, 0x00	; 0
     872:	e6 95       	lsr	r30
     874:	00 1c       	adc	r0, r0
     876:	ca f7       	brpl	.-14     	; 0x86a <__divsf3_pse+0x2c>
     878:	29 d0       	rcall	.+82     	; 0x8cc <__divsf3_pse+0x8e>
     87a:	fe 2f       	mov	r31, r30
     87c:	27 d0       	rcall	.+78     	; 0x8cc <__divsf3_pse+0x8e>
     87e:	66 0f       	add	r22, r22
     880:	77 1f       	adc	r23, r23
     882:	88 1f       	adc	r24, r24
     884:	bb 1f       	adc	r27, r27
     886:	26 17       	cp	r18, r22
     888:	37 07       	cpc	r19, r23
     88a:	48 07       	cpc	r20, r24
     88c:	ab 07       	cpc	r26, r27
     88e:	b0 e8       	ldi	r27, 0x80	; 128
     890:	09 f0       	breq	.+2      	; 0x894 <__divsf3_pse+0x56>
     892:	bb 0b       	sbc	r27, r27
     894:	80 2d       	mov	r24, r0
     896:	bf 01       	movw	r22, r30
     898:	ff 27       	eor	r31, r31
     89a:	93 58       	subi	r25, 0x83	; 131
     89c:	5f 4f       	sbci	r21, 0xFF	; 255
     89e:	2a f0       	brmi	.+10     	; 0x8aa <__divsf3_pse+0x6c>
     8a0:	9e 3f       	cpi	r25, 0xFE	; 254
     8a2:	51 05       	cpc	r21, r1
     8a4:	68 f0       	brcs	.+26     	; 0x8c0 <__divsf3_pse+0x82>
     8a6:	b6 c0       	rjmp	.+364    	; 0xa14 <__fp_inf>
     8a8:	00 c1       	rjmp	.+512    	; 0xaaa <__fp_szero>
     8aa:	5f 3f       	cpi	r21, 0xFF	; 255
     8ac:	ec f3       	brlt	.-6      	; 0x8a8 <__divsf3_pse+0x6a>
     8ae:	98 3e       	cpi	r25, 0xE8	; 232
     8b0:	dc f3       	brlt	.-10     	; 0x8a8 <__divsf3_pse+0x6a>
     8b2:	86 95       	lsr	r24
     8b4:	77 95       	ror	r23
     8b6:	67 95       	ror	r22
     8b8:	b7 95       	ror	r27
     8ba:	f7 95       	ror	r31
     8bc:	9f 5f       	subi	r25, 0xFF	; 255
     8be:	c9 f7       	brne	.-14     	; 0x8b2 <__divsf3_pse+0x74>
     8c0:	88 0f       	add	r24, r24
     8c2:	91 1d       	adc	r25, r1
     8c4:	96 95       	lsr	r25
     8c6:	87 95       	ror	r24
     8c8:	97 f9       	bld	r25, 7
     8ca:	08 95       	ret
     8cc:	e1 e0       	ldi	r30, 0x01	; 1
     8ce:	66 0f       	add	r22, r22
     8d0:	77 1f       	adc	r23, r23
     8d2:	88 1f       	adc	r24, r24
     8d4:	bb 1f       	adc	r27, r27
     8d6:	62 17       	cp	r22, r18
     8d8:	73 07       	cpc	r23, r19
     8da:	84 07       	cpc	r24, r20
     8dc:	ba 07       	cpc	r27, r26
     8de:	20 f0       	brcs	.+8      	; 0x8e8 <__divsf3_pse+0xaa>
     8e0:	62 1b       	sub	r22, r18
     8e2:	73 0b       	sbc	r23, r19
     8e4:	84 0b       	sbc	r24, r20
     8e6:	ba 0b       	sbc	r27, r26
     8e8:	ee 1f       	adc	r30, r30
     8ea:	88 f7       	brcc	.-30     	; 0x8ce <__divsf3_pse+0x90>
     8ec:	e0 95       	com	r30
     8ee:	08 95       	ret

000008f0 <__fixsfsi>:
     8f0:	04 d0       	rcall	.+8      	; 0x8fa <__fixunssfsi>
     8f2:	68 94       	set
     8f4:	b1 11       	cpse	r27, r1
     8f6:	d9 c0       	rjmp	.+434    	; 0xaaa <__fp_szero>
     8f8:	08 95       	ret

000008fa <__fixunssfsi>:
     8fa:	bc d0       	rcall	.+376    	; 0xa74 <__fp_splitA>
     8fc:	88 f0       	brcs	.+34     	; 0x920 <__fixunssfsi+0x26>
     8fe:	9f 57       	subi	r25, 0x7F	; 127
     900:	90 f0       	brcs	.+36     	; 0x926 <__fixunssfsi+0x2c>
     902:	b9 2f       	mov	r27, r25
     904:	99 27       	eor	r25, r25
     906:	b7 51       	subi	r27, 0x17	; 23
     908:	a0 f0       	brcs	.+40     	; 0x932 <__fixunssfsi+0x38>
     90a:	d1 f0       	breq	.+52     	; 0x940 <__fixunssfsi+0x46>
     90c:	66 0f       	add	r22, r22
     90e:	77 1f       	adc	r23, r23
     910:	88 1f       	adc	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	1a f0       	brmi	.+6      	; 0x91c <__fixunssfsi+0x22>
     916:	ba 95       	dec	r27
     918:	c9 f7       	brne	.-14     	; 0x90c <__fixunssfsi+0x12>
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__fixunssfsi+0x46>
     91c:	b1 30       	cpi	r27, 0x01	; 1
     91e:	81 f0       	breq	.+32     	; 0x940 <__fixunssfsi+0x46>
     920:	c3 d0       	rcall	.+390    	; 0xaa8 <__fp_zero>
     922:	b1 e0       	ldi	r27, 0x01	; 1
     924:	08 95       	ret
     926:	c0 c0       	rjmp	.+384    	; 0xaa8 <__fp_zero>
     928:	67 2f       	mov	r22, r23
     92a:	78 2f       	mov	r23, r24
     92c:	88 27       	eor	r24, r24
     92e:	b8 5f       	subi	r27, 0xF8	; 248
     930:	39 f0       	breq	.+14     	; 0x940 <__fixunssfsi+0x46>
     932:	b9 3f       	cpi	r27, 0xF9	; 249
     934:	cc f3       	brlt	.-14     	; 0x928 <__fixunssfsi+0x2e>
     936:	86 95       	lsr	r24
     938:	77 95       	ror	r23
     93a:	67 95       	ror	r22
     93c:	b3 95       	inc	r27
     93e:	d9 f7       	brne	.-10     	; 0x936 <__fixunssfsi+0x3c>
     940:	3e f4       	brtc	.+14     	; 0x950 <__fixunssfsi+0x56>
     942:	90 95       	com	r25
     944:	80 95       	com	r24
     946:	70 95       	com	r23
     948:	61 95       	neg	r22
     94a:	7f 4f       	sbci	r23, 0xFF	; 255
     94c:	8f 4f       	sbci	r24, 0xFF	; 255
     94e:	9f 4f       	sbci	r25, 0xFF	; 255
     950:	08 95       	ret

00000952 <__floatunsisf>:
     952:	e8 94       	clt
     954:	09 c0       	rjmp	.+18     	; 0x968 <__floatsisf+0x12>

00000956 <__floatsisf>:
     956:	97 fb       	bst	r25, 7
     958:	3e f4       	brtc	.+14     	; 0x968 <__floatsisf+0x12>
     95a:	90 95       	com	r25
     95c:	80 95       	com	r24
     95e:	70 95       	com	r23
     960:	61 95       	neg	r22
     962:	7f 4f       	sbci	r23, 0xFF	; 255
     964:	8f 4f       	sbci	r24, 0xFF	; 255
     966:	9f 4f       	sbci	r25, 0xFF	; 255
     968:	99 23       	and	r25, r25
     96a:	a9 f0       	breq	.+42     	; 0x996 <__floatsisf+0x40>
     96c:	f9 2f       	mov	r31, r25
     96e:	96 e9       	ldi	r25, 0x96	; 150
     970:	bb 27       	eor	r27, r27
     972:	93 95       	inc	r25
     974:	f6 95       	lsr	r31
     976:	87 95       	ror	r24
     978:	77 95       	ror	r23
     97a:	67 95       	ror	r22
     97c:	b7 95       	ror	r27
     97e:	f1 11       	cpse	r31, r1
     980:	f8 cf       	rjmp	.-16     	; 0x972 <__floatsisf+0x1c>
     982:	fa f4       	brpl	.+62     	; 0x9c2 <__floatsisf+0x6c>
     984:	bb 0f       	add	r27, r27
     986:	11 f4       	brne	.+4      	; 0x98c <__floatsisf+0x36>
     988:	60 ff       	sbrs	r22, 0
     98a:	1b c0       	rjmp	.+54     	; 0x9c2 <__floatsisf+0x6c>
     98c:	6f 5f       	subi	r22, 0xFF	; 255
     98e:	7f 4f       	sbci	r23, 0xFF	; 255
     990:	8f 4f       	sbci	r24, 0xFF	; 255
     992:	9f 4f       	sbci	r25, 0xFF	; 255
     994:	16 c0       	rjmp	.+44     	; 0x9c2 <__floatsisf+0x6c>
     996:	88 23       	and	r24, r24
     998:	11 f0       	breq	.+4      	; 0x99e <__floatsisf+0x48>
     99a:	96 e9       	ldi	r25, 0x96	; 150
     99c:	11 c0       	rjmp	.+34     	; 0x9c0 <__floatsisf+0x6a>
     99e:	77 23       	and	r23, r23
     9a0:	21 f0       	breq	.+8      	; 0x9aa <__floatsisf+0x54>
     9a2:	9e e8       	ldi	r25, 0x8E	; 142
     9a4:	87 2f       	mov	r24, r23
     9a6:	76 2f       	mov	r23, r22
     9a8:	05 c0       	rjmp	.+10     	; 0x9b4 <__floatsisf+0x5e>
     9aa:	66 23       	and	r22, r22
     9ac:	71 f0       	breq	.+28     	; 0x9ca <__floatsisf+0x74>
     9ae:	96 e8       	ldi	r25, 0x86	; 134
     9b0:	86 2f       	mov	r24, r22
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	2a f0       	brmi	.+10     	; 0x9c2 <__floatsisf+0x6c>
     9b8:	9a 95       	dec	r25
     9ba:	66 0f       	add	r22, r22
     9bc:	77 1f       	adc	r23, r23
     9be:	88 1f       	adc	r24, r24
     9c0:	da f7       	brpl	.-10     	; 0x9b8 <__floatsisf+0x62>
     9c2:	88 0f       	add	r24, r24
     9c4:	96 95       	lsr	r25
     9c6:	87 95       	ror	r24
     9c8:	97 f9       	bld	r25, 7
     9ca:	08 95       	ret

000009cc <__fp_cmp>:
     9cc:	99 0f       	add	r25, r25
     9ce:	00 08       	sbc	r0, r0
     9d0:	55 0f       	add	r21, r21
     9d2:	aa 0b       	sbc	r26, r26
     9d4:	e0 e8       	ldi	r30, 0x80	; 128
     9d6:	fe ef       	ldi	r31, 0xFE	; 254
     9d8:	16 16       	cp	r1, r22
     9da:	17 06       	cpc	r1, r23
     9dc:	e8 07       	cpc	r30, r24
     9de:	f9 07       	cpc	r31, r25
     9e0:	c0 f0       	brcs	.+48     	; 0xa12 <__fp_cmp+0x46>
     9e2:	12 16       	cp	r1, r18
     9e4:	13 06       	cpc	r1, r19
     9e6:	e4 07       	cpc	r30, r20
     9e8:	f5 07       	cpc	r31, r21
     9ea:	98 f0       	brcs	.+38     	; 0xa12 <__fp_cmp+0x46>
     9ec:	62 1b       	sub	r22, r18
     9ee:	73 0b       	sbc	r23, r19
     9f0:	84 0b       	sbc	r24, r20
     9f2:	95 0b       	sbc	r25, r21
     9f4:	39 f4       	brne	.+14     	; 0xa04 <__fp_cmp+0x38>
     9f6:	0a 26       	eor	r0, r26
     9f8:	61 f0       	breq	.+24     	; 0xa12 <__fp_cmp+0x46>
     9fa:	23 2b       	or	r18, r19
     9fc:	24 2b       	or	r18, r20
     9fe:	25 2b       	or	r18, r21
     a00:	21 f4       	brne	.+8      	; 0xa0a <__fp_cmp+0x3e>
     a02:	08 95       	ret
     a04:	0a 26       	eor	r0, r26
     a06:	09 f4       	brne	.+2      	; 0xa0a <__fp_cmp+0x3e>
     a08:	a1 40       	sbci	r26, 0x01	; 1
     a0a:	a6 95       	lsr	r26
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	81 1d       	adc	r24, r1
     a10:	81 1d       	adc	r24, r1
     a12:	08 95       	ret

00000a14 <__fp_inf>:
     a14:	97 f9       	bld	r25, 7
     a16:	9f 67       	ori	r25, 0x7F	; 127
     a18:	80 e8       	ldi	r24, 0x80	; 128
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	08 95       	ret

00000a20 <__fp_nan>:
     a20:	9f ef       	ldi	r25, 0xFF	; 255
     a22:	80 ec       	ldi	r24, 0xC0	; 192
     a24:	08 95       	ret

00000a26 <__fp_pscA>:
     a26:	00 24       	eor	r0, r0
     a28:	0a 94       	dec	r0
     a2a:	16 16       	cp	r1, r22
     a2c:	17 06       	cpc	r1, r23
     a2e:	18 06       	cpc	r1, r24
     a30:	09 06       	cpc	r0, r25
     a32:	08 95       	ret

00000a34 <__fp_pscB>:
     a34:	00 24       	eor	r0, r0
     a36:	0a 94       	dec	r0
     a38:	12 16       	cp	r1, r18
     a3a:	13 06       	cpc	r1, r19
     a3c:	14 06       	cpc	r1, r20
     a3e:	05 06       	cpc	r0, r21
     a40:	08 95       	ret

00000a42 <__fp_round>:
     a42:	09 2e       	mov	r0, r25
     a44:	03 94       	inc	r0
     a46:	00 0c       	add	r0, r0
     a48:	11 f4       	brne	.+4      	; 0xa4e <__fp_round+0xc>
     a4a:	88 23       	and	r24, r24
     a4c:	52 f0       	brmi	.+20     	; 0xa62 <__fp_round+0x20>
     a4e:	bb 0f       	add	r27, r27
     a50:	40 f4       	brcc	.+16     	; 0xa62 <__fp_round+0x20>
     a52:	bf 2b       	or	r27, r31
     a54:	11 f4       	brne	.+4      	; 0xa5a <__fp_round+0x18>
     a56:	60 ff       	sbrs	r22, 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fp_round+0x20>
     a5a:	6f 5f       	subi	r22, 0xFF	; 255
     a5c:	7f 4f       	sbci	r23, 0xFF	; 255
     a5e:	8f 4f       	sbci	r24, 0xFF	; 255
     a60:	9f 4f       	sbci	r25, 0xFF	; 255
     a62:	08 95       	ret

00000a64 <__fp_split3>:
     a64:	57 fd       	sbrc	r21, 7
     a66:	90 58       	subi	r25, 0x80	; 128
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	59 f0       	breq	.+22     	; 0xa84 <__fp_splitA+0x10>
     a6e:	5f 3f       	cpi	r21, 0xFF	; 255
     a70:	71 f0       	breq	.+28     	; 0xa8e <__fp_splitA+0x1a>
     a72:	47 95       	ror	r20

00000a74 <__fp_splitA>:
     a74:	88 0f       	add	r24, r24
     a76:	97 fb       	bst	r25, 7
     a78:	99 1f       	adc	r25, r25
     a7a:	61 f0       	breq	.+24     	; 0xa94 <__fp_splitA+0x20>
     a7c:	9f 3f       	cpi	r25, 0xFF	; 255
     a7e:	79 f0       	breq	.+30     	; 0xa9e <__fp_splitA+0x2a>
     a80:	87 95       	ror	r24
     a82:	08 95       	ret
     a84:	12 16       	cp	r1, r18
     a86:	13 06       	cpc	r1, r19
     a88:	14 06       	cpc	r1, r20
     a8a:	55 1f       	adc	r21, r21
     a8c:	f2 cf       	rjmp	.-28     	; 0xa72 <__fp_split3+0xe>
     a8e:	46 95       	lsr	r20
     a90:	f1 df       	rcall	.-30     	; 0xa74 <__fp_splitA>
     a92:	08 c0       	rjmp	.+16     	; 0xaa4 <__fp_splitA+0x30>
     a94:	16 16       	cp	r1, r22
     a96:	17 06       	cpc	r1, r23
     a98:	18 06       	cpc	r1, r24
     a9a:	99 1f       	adc	r25, r25
     a9c:	f1 cf       	rjmp	.-30     	; 0xa80 <__fp_splitA+0xc>
     a9e:	86 95       	lsr	r24
     aa0:	71 05       	cpc	r23, r1
     aa2:	61 05       	cpc	r22, r1
     aa4:	08 94       	sec
     aa6:	08 95       	ret

00000aa8 <__fp_zero>:
     aa8:	e8 94       	clt

00000aaa <__fp_szero>:
     aaa:	bb 27       	eor	r27, r27
     aac:	66 27       	eor	r22, r22
     aae:	77 27       	eor	r23, r23
     ab0:	cb 01       	movw	r24, r22
     ab2:	97 f9       	bld	r25, 7
     ab4:	08 95       	ret

00000ab6 <__gesf2>:
     ab6:	8a df       	rcall	.-236    	; 0x9cc <__fp_cmp>
     ab8:	08 f4       	brcc	.+2      	; 0xabc <__gesf2+0x6>
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	08 95       	ret

00000abe <__mulsf3>:
     abe:	0b d0       	rcall	.+22     	; 0xad6 <__mulsf3x>
     ac0:	c0 cf       	rjmp	.-128    	; 0xa42 <__fp_round>
     ac2:	b1 df       	rcall	.-158    	; 0xa26 <__fp_pscA>
     ac4:	28 f0       	brcs	.+10     	; 0xad0 <__mulsf3+0x12>
     ac6:	b6 df       	rcall	.-148    	; 0xa34 <__fp_pscB>
     ac8:	18 f0       	brcs	.+6      	; 0xad0 <__mulsf3+0x12>
     aca:	95 23       	and	r25, r21
     acc:	09 f0       	breq	.+2      	; 0xad0 <__mulsf3+0x12>
     ace:	a2 cf       	rjmp	.-188    	; 0xa14 <__fp_inf>
     ad0:	a7 cf       	rjmp	.-178    	; 0xa20 <__fp_nan>
     ad2:	11 24       	eor	r1, r1
     ad4:	ea cf       	rjmp	.-44     	; 0xaaa <__fp_szero>

00000ad6 <__mulsf3x>:
     ad6:	c6 df       	rcall	.-116    	; 0xa64 <__fp_split3>
     ad8:	a0 f3       	brcs	.-24     	; 0xac2 <__mulsf3+0x4>

00000ada <__mulsf3_pse>:
     ada:	95 9f       	mul	r25, r21
     adc:	d1 f3       	breq	.-12     	; 0xad2 <__mulsf3+0x14>
     ade:	95 0f       	add	r25, r21
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	55 1f       	adc	r21, r21
     ae4:	62 9f       	mul	r22, r18
     ae6:	f0 01       	movw	r30, r0
     ae8:	72 9f       	mul	r23, r18
     aea:	bb 27       	eor	r27, r27
     aec:	f0 0d       	add	r31, r0
     aee:	b1 1d       	adc	r27, r1
     af0:	63 9f       	mul	r22, r19
     af2:	aa 27       	eor	r26, r26
     af4:	f0 0d       	add	r31, r0
     af6:	b1 1d       	adc	r27, r1
     af8:	aa 1f       	adc	r26, r26
     afa:	64 9f       	mul	r22, r20
     afc:	66 27       	eor	r22, r22
     afe:	b0 0d       	add	r27, r0
     b00:	a1 1d       	adc	r26, r1
     b02:	66 1f       	adc	r22, r22
     b04:	82 9f       	mul	r24, r18
     b06:	22 27       	eor	r18, r18
     b08:	b0 0d       	add	r27, r0
     b0a:	a1 1d       	adc	r26, r1
     b0c:	62 1f       	adc	r22, r18
     b0e:	73 9f       	mul	r23, r19
     b10:	b0 0d       	add	r27, r0
     b12:	a1 1d       	adc	r26, r1
     b14:	62 1f       	adc	r22, r18
     b16:	83 9f       	mul	r24, r19
     b18:	a0 0d       	add	r26, r0
     b1a:	61 1d       	adc	r22, r1
     b1c:	22 1f       	adc	r18, r18
     b1e:	74 9f       	mul	r23, r20
     b20:	33 27       	eor	r19, r19
     b22:	a0 0d       	add	r26, r0
     b24:	61 1d       	adc	r22, r1
     b26:	23 1f       	adc	r18, r19
     b28:	84 9f       	mul	r24, r20
     b2a:	60 0d       	add	r22, r0
     b2c:	21 1d       	adc	r18, r1
     b2e:	82 2f       	mov	r24, r18
     b30:	76 2f       	mov	r23, r22
     b32:	6a 2f       	mov	r22, r26
     b34:	11 24       	eor	r1, r1
     b36:	9f 57       	subi	r25, 0x7F	; 127
     b38:	50 40       	sbci	r21, 0x00	; 0
     b3a:	8a f0       	brmi	.+34     	; 0xb5e <__mulsf3_pse+0x84>
     b3c:	e1 f0       	breq	.+56     	; 0xb76 <__mulsf3_pse+0x9c>
     b3e:	88 23       	and	r24, r24
     b40:	4a f0       	brmi	.+18     	; 0xb54 <__mulsf3_pse+0x7a>
     b42:	ee 0f       	add	r30, r30
     b44:	ff 1f       	adc	r31, r31
     b46:	bb 1f       	adc	r27, r27
     b48:	66 1f       	adc	r22, r22
     b4a:	77 1f       	adc	r23, r23
     b4c:	88 1f       	adc	r24, r24
     b4e:	91 50       	subi	r25, 0x01	; 1
     b50:	50 40       	sbci	r21, 0x00	; 0
     b52:	a9 f7       	brne	.-22     	; 0xb3e <__mulsf3_pse+0x64>
     b54:	9e 3f       	cpi	r25, 0xFE	; 254
     b56:	51 05       	cpc	r21, r1
     b58:	70 f0       	brcs	.+28     	; 0xb76 <__mulsf3_pse+0x9c>
     b5a:	5c cf       	rjmp	.-328    	; 0xa14 <__fp_inf>
     b5c:	a6 cf       	rjmp	.-180    	; 0xaaa <__fp_szero>
     b5e:	5f 3f       	cpi	r21, 0xFF	; 255
     b60:	ec f3       	brlt	.-6      	; 0xb5c <__mulsf3_pse+0x82>
     b62:	98 3e       	cpi	r25, 0xE8	; 232
     b64:	dc f3       	brlt	.-10     	; 0xb5c <__mulsf3_pse+0x82>
     b66:	86 95       	lsr	r24
     b68:	77 95       	ror	r23
     b6a:	67 95       	ror	r22
     b6c:	b7 95       	ror	r27
     b6e:	f7 95       	ror	r31
     b70:	e7 95       	ror	r30
     b72:	9f 5f       	subi	r25, 0xFF	; 255
     b74:	c1 f7       	brne	.-16     	; 0xb66 <__mulsf3_pse+0x8c>
     b76:	fe 2b       	or	r31, r30
     b78:	88 0f       	add	r24, r24
     b7a:	91 1d       	adc	r25, r1
     b7c:	96 95       	lsr	r25
     b7e:	87 95       	ror	r24
     b80:	97 f9       	bld	r25, 7
     b82:	08 95       	ret

00000b84 <__divmodhi4>:
     b84:	97 fb       	bst	r25, 7
     b86:	07 2e       	mov	r0, r23
     b88:	16 f4       	brtc	.+4      	; 0xb8e <__divmodhi4+0xa>
     b8a:	00 94       	com	r0
     b8c:	06 d0       	rcall	.+12     	; 0xb9a <__divmodhi4_neg1>
     b8e:	77 fd       	sbrc	r23, 7
     b90:	08 d0       	rcall	.+16     	; 0xba2 <__divmodhi4_neg2>
     b92:	0b d0       	rcall	.+22     	; 0xbaa <__udivmodhi4>
     b94:	07 fc       	sbrc	r0, 7
     b96:	05 d0       	rcall	.+10     	; 0xba2 <__divmodhi4_neg2>
     b98:	3e f4       	brtc	.+14     	; 0xba8 <__divmodhi4_exit>

00000b9a <__divmodhi4_neg1>:
     b9a:	90 95       	com	r25
     b9c:	81 95       	neg	r24
     b9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ba0:	08 95       	ret

00000ba2 <__divmodhi4_neg2>:
     ba2:	70 95       	com	r23
     ba4:	61 95       	neg	r22
     ba6:	7f 4f       	sbci	r23, 0xFF	; 255

00000ba8 <__divmodhi4_exit>:
     ba8:	08 95       	ret

00000baa <__udivmodhi4>:
     baa:	aa 1b       	sub	r26, r26
     bac:	bb 1b       	sub	r27, r27
     bae:	51 e1       	ldi	r21, 0x11	; 17
     bb0:	07 c0       	rjmp	.+14     	; 0xbc0 <__udivmodhi4_ep>

00000bb2 <__udivmodhi4_loop>:
     bb2:	aa 1f       	adc	r26, r26
     bb4:	bb 1f       	adc	r27, r27
     bb6:	a6 17       	cp	r26, r22
     bb8:	b7 07       	cpc	r27, r23
     bba:	10 f0       	brcs	.+4      	; 0xbc0 <__udivmodhi4_ep>
     bbc:	a6 1b       	sub	r26, r22
     bbe:	b7 0b       	sbc	r27, r23

00000bc0 <__udivmodhi4_ep>:
     bc0:	88 1f       	adc	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	5a 95       	dec	r21
     bc6:	a9 f7       	brne	.-22     	; 0xbb2 <__udivmodhi4_loop>
     bc8:	80 95       	com	r24
     bca:	90 95       	com	r25
     bcc:	bc 01       	movw	r22, r24
     bce:	cd 01       	movw	r24, r26
     bd0:	08 95       	ret

00000bd2 <fdevopen>:
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	ec 01       	movw	r28, r24
     bdc:	8b 01       	movw	r16, r22
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	31 f4       	brne	.+12     	; 0xbee <fdevopen+0x1c>
     be2:	61 15       	cp	r22, r1
     be4:	71 05       	cpc	r23, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <fdevopen+0x1c>
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	37 c0       	rjmp	.+110    	; 0xc5c <fdevopen+0x8a>
     bee:	6e e0       	ldi	r22, 0x0E	; 14
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	68 d2       	rcall	.+1232   	; 0x10c8 <calloc>
     bf8:	fc 01       	movw	r30, r24
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	a9 f3       	breq	.-22     	; 0xbe8 <fdevopen+0x16>
     bfe:	80 e8       	ldi	r24, 0x80	; 128
     c00:	83 83       	std	Z+3, r24	; 0x03
     c02:	01 15       	cp	r16, r1
     c04:	11 05       	cpc	r17, r1
     c06:	71 f0       	breq	.+28     	; 0xc24 <fdevopen+0x52>
     c08:	13 87       	std	Z+11, r17	; 0x0b
     c0a:	02 87       	std	Z+10, r16	; 0x0a
     c0c:	81 e8       	ldi	r24, 0x81	; 129
     c0e:	83 83       	std	Z+3, r24	; 0x03
     c10:	80 91 57 02 	lds	r24, 0x0257
     c14:	90 91 58 02 	lds	r25, 0x0258
     c18:	89 2b       	or	r24, r25
     c1a:	21 f4       	brne	.+8      	; 0xc24 <fdevopen+0x52>
     c1c:	f0 93 58 02 	sts	0x0258, r31
     c20:	e0 93 57 02 	sts	0x0257, r30
     c24:	20 97       	sbiw	r28, 0x00	; 0
     c26:	c9 f0       	breq	.+50     	; 0xc5a <fdevopen+0x88>
     c28:	d1 87       	std	Z+9, r29	; 0x09
     c2a:	c0 87       	std	Z+8, r28	; 0x08
     c2c:	83 81       	ldd	r24, Z+3	; 0x03
     c2e:	82 60       	ori	r24, 0x02	; 2
     c30:	83 83       	std	Z+3, r24	; 0x03
     c32:	80 91 59 02 	lds	r24, 0x0259
     c36:	90 91 5a 02 	lds	r25, 0x025A
     c3a:	89 2b       	or	r24, r25
     c3c:	71 f4       	brne	.+28     	; 0xc5a <fdevopen+0x88>
     c3e:	f0 93 5a 02 	sts	0x025A, r31
     c42:	e0 93 59 02 	sts	0x0259, r30
     c46:	80 91 5b 02 	lds	r24, 0x025B
     c4a:	90 91 5c 02 	lds	r25, 0x025C
     c4e:	89 2b       	or	r24, r25
     c50:	21 f4       	brne	.+8      	; 0xc5a <fdevopen+0x88>
     c52:	f0 93 5c 02 	sts	0x025C, r31
     c56:	e0 93 5b 02 	sts	0x025B, r30
     c5a:	cf 01       	movw	r24, r30
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	08 95       	ret

00000c66 <printf>:
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	fe 01       	movw	r30, r28
     c70:	36 96       	adiw	r30, 0x06	; 6
     c72:	61 91       	ld	r22, Z+
     c74:	71 91       	ld	r23, Z+
     c76:	af 01       	movw	r20, r30
     c78:	80 91 59 02 	lds	r24, 0x0259
     c7c:	90 91 5a 02 	lds	r25, 0x025A
     c80:	35 d0       	rcall	.+106    	; 0xcec <vfprintf>
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	08 95       	ret

00000c88 <putchar>:
     c88:	60 91 59 02 	lds	r22, 0x0259
     c8c:	70 91 5a 02 	lds	r23, 0x025A
     c90:	79 c3       	rjmp	.+1778   	; 0x1384 <fputc>

00000c92 <puts>:
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	e0 91 59 02 	lds	r30, 0x0259
     c9e:	f0 91 5a 02 	lds	r31, 0x025A
     ca2:	23 81       	ldd	r18, Z+3	; 0x03
     ca4:	21 ff       	sbrs	r18, 1
     ca6:	1b c0       	rjmp	.+54     	; 0xcde <puts+0x4c>
     ca8:	ec 01       	movw	r28, r24
     caa:	00 e0       	ldi	r16, 0x00	; 0
     cac:	10 e0       	ldi	r17, 0x00	; 0
     cae:	89 91       	ld	r24, Y+
     cb0:	60 91 59 02 	lds	r22, 0x0259
     cb4:	70 91 5a 02 	lds	r23, 0x025A
     cb8:	db 01       	movw	r26, r22
     cba:	18 96       	adiw	r26, 0x08	; 8
     cbc:	ed 91       	ld	r30, X+
     cbe:	fc 91       	ld	r31, X
     cc0:	19 97       	sbiw	r26, 0x09	; 9
     cc2:	88 23       	and	r24, r24
     cc4:	31 f0       	breq	.+12     	; 0xcd2 <puts+0x40>
     cc6:	19 95       	eicall
     cc8:	89 2b       	or	r24, r25
     cca:	89 f3       	breq	.-30     	; 0xcae <puts+0x1c>
     ccc:	0f ef       	ldi	r16, 0xFF	; 255
     cce:	1f ef       	ldi	r17, 0xFF	; 255
     cd0:	ee cf       	rjmp	.-36     	; 0xcae <puts+0x1c>
     cd2:	8a e0       	ldi	r24, 0x0A	; 10
     cd4:	19 95       	eicall
     cd6:	89 2b       	or	r24, r25
     cd8:	11 f4       	brne	.+4      	; 0xcde <puts+0x4c>
     cda:	c8 01       	movw	r24, r16
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <puts+0x50>
     cde:	8f ef       	ldi	r24, 0xFF	; 255
     ce0:	9f ef       	ldi	r25, 0xFF	; 255
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	08 95       	ret

00000cec <vfprintf>:
     cec:	2f 92       	push	r2
     cee:	3f 92       	push	r3
     cf0:	4f 92       	push	r4
     cf2:	5f 92       	push	r5
     cf4:	6f 92       	push	r6
     cf6:	7f 92       	push	r7
     cf8:	8f 92       	push	r8
     cfa:	9f 92       	push	r9
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	2c 97       	sbiw	r28, 0x0c	; 12
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	7c 01       	movw	r14, r24
     d22:	6b 01       	movw	r12, r22
     d24:	8a 01       	movw	r16, r20
     d26:	fc 01       	movw	r30, r24
     d28:	17 82       	std	Z+7, r1	; 0x07
     d2a:	16 82       	std	Z+6, r1	; 0x06
     d2c:	83 81       	ldd	r24, Z+3	; 0x03
     d2e:	81 ff       	sbrs	r24, 1
     d30:	b0 c1       	rjmp	.+864    	; 0x1092 <vfprintf+0x3a6>
     d32:	ce 01       	movw	r24, r28
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	4c 01       	movw	r8, r24
     d38:	f7 01       	movw	r30, r14
     d3a:	93 81       	ldd	r25, Z+3	; 0x03
     d3c:	f6 01       	movw	r30, r12
     d3e:	93 fd       	sbrc	r25, 3
     d40:	85 91       	lpm	r24, Z+
     d42:	93 ff       	sbrs	r25, 3
     d44:	81 91       	ld	r24, Z+
     d46:	6f 01       	movw	r12, r30
     d48:	88 23       	and	r24, r24
     d4a:	09 f4       	brne	.+2      	; 0xd4e <vfprintf+0x62>
     d4c:	9e c1       	rjmp	.+828    	; 0x108a <vfprintf+0x39e>
     d4e:	85 32       	cpi	r24, 0x25	; 37
     d50:	39 f4       	brne	.+14     	; 0xd60 <vfprintf+0x74>
     d52:	93 fd       	sbrc	r25, 3
     d54:	85 91       	lpm	r24, Z+
     d56:	93 ff       	sbrs	r25, 3
     d58:	81 91       	ld	r24, Z+
     d5a:	6f 01       	movw	r12, r30
     d5c:	85 32       	cpi	r24, 0x25	; 37
     d5e:	21 f4       	brne	.+8      	; 0xd68 <vfprintf+0x7c>
     d60:	b7 01       	movw	r22, r14
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0f d3       	rcall	.+1566   	; 0x1384 <fputc>
     d66:	e8 cf       	rjmp	.-48     	; 0xd38 <vfprintf+0x4c>
     d68:	51 2c       	mov	r5, r1
     d6a:	31 2c       	mov	r3, r1
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	20 32       	cpi	r18, 0x20	; 32
     d70:	a0 f4       	brcc	.+40     	; 0xd9a <vfprintf+0xae>
     d72:	8b 32       	cpi	r24, 0x2B	; 43
     d74:	69 f0       	breq	.+26     	; 0xd90 <vfprintf+0xa4>
     d76:	30 f4       	brcc	.+12     	; 0xd84 <vfprintf+0x98>
     d78:	80 32       	cpi	r24, 0x20	; 32
     d7a:	59 f0       	breq	.+22     	; 0xd92 <vfprintf+0xa6>
     d7c:	83 32       	cpi	r24, 0x23	; 35
     d7e:	69 f4       	brne	.+26     	; 0xd9a <vfprintf+0xae>
     d80:	20 61       	ori	r18, 0x10	; 16
     d82:	2c c0       	rjmp	.+88     	; 0xddc <vfprintf+0xf0>
     d84:	8d 32       	cpi	r24, 0x2D	; 45
     d86:	39 f0       	breq	.+14     	; 0xd96 <vfprintf+0xaa>
     d88:	80 33       	cpi	r24, 0x30	; 48
     d8a:	39 f4       	brne	.+14     	; 0xd9a <vfprintf+0xae>
     d8c:	21 60       	ori	r18, 0x01	; 1
     d8e:	26 c0       	rjmp	.+76     	; 0xddc <vfprintf+0xf0>
     d90:	22 60       	ori	r18, 0x02	; 2
     d92:	24 60       	ori	r18, 0x04	; 4
     d94:	23 c0       	rjmp	.+70     	; 0xddc <vfprintf+0xf0>
     d96:	28 60       	ori	r18, 0x08	; 8
     d98:	21 c0       	rjmp	.+66     	; 0xddc <vfprintf+0xf0>
     d9a:	27 fd       	sbrc	r18, 7
     d9c:	27 c0       	rjmp	.+78     	; 0xdec <vfprintf+0x100>
     d9e:	30 ed       	ldi	r19, 0xD0	; 208
     da0:	38 0f       	add	r19, r24
     da2:	3a 30       	cpi	r19, 0x0A	; 10
     da4:	78 f4       	brcc	.+30     	; 0xdc4 <vfprintf+0xd8>
     da6:	26 ff       	sbrs	r18, 6
     da8:	06 c0       	rjmp	.+12     	; 0xdb6 <vfprintf+0xca>
     daa:	fa e0       	ldi	r31, 0x0A	; 10
     dac:	5f 9e       	mul	r5, r31
     dae:	30 0d       	add	r19, r0
     db0:	11 24       	eor	r1, r1
     db2:	53 2e       	mov	r5, r19
     db4:	13 c0       	rjmp	.+38     	; 0xddc <vfprintf+0xf0>
     db6:	8a e0       	ldi	r24, 0x0A	; 10
     db8:	38 9e       	mul	r3, r24
     dba:	30 0d       	add	r19, r0
     dbc:	11 24       	eor	r1, r1
     dbe:	33 2e       	mov	r3, r19
     dc0:	20 62       	ori	r18, 0x20	; 32
     dc2:	0c c0       	rjmp	.+24     	; 0xddc <vfprintf+0xf0>
     dc4:	8e 32       	cpi	r24, 0x2E	; 46
     dc6:	21 f4       	brne	.+8      	; 0xdd0 <vfprintf+0xe4>
     dc8:	26 fd       	sbrc	r18, 6
     dca:	5f c1       	rjmp	.+702    	; 0x108a <vfprintf+0x39e>
     dcc:	20 64       	ori	r18, 0x40	; 64
     dce:	06 c0       	rjmp	.+12     	; 0xddc <vfprintf+0xf0>
     dd0:	8c 36       	cpi	r24, 0x6C	; 108
     dd2:	11 f4       	brne	.+4      	; 0xdd8 <vfprintf+0xec>
     dd4:	20 68       	ori	r18, 0x80	; 128
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <vfprintf+0xf0>
     dd8:	88 36       	cpi	r24, 0x68	; 104
     dda:	41 f4       	brne	.+16     	; 0xdec <vfprintf+0x100>
     ddc:	f6 01       	movw	r30, r12
     dde:	93 fd       	sbrc	r25, 3
     de0:	85 91       	lpm	r24, Z+
     de2:	93 ff       	sbrs	r25, 3
     de4:	81 91       	ld	r24, Z+
     de6:	6f 01       	movw	r12, r30
     de8:	81 11       	cpse	r24, r1
     dea:	c1 cf       	rjmp	.-126    	; 0xd6e <vfprintf+0x82>
     dec:	98 2f       	mov	r25, r24
     dee:	9f 7d       	andi	r25, 0xDF	; 223
     df0:	95 54       	subi	r25, 0x45	; 69
     df2:	93 30       	cpi	r25, 0x03	; 3
     df4:	28 f4       	brcc	.+10     	; 0xe00 <vfprintf+0x114>
     df6:	0c 5f       	subi	r16, 0xFC	; 252
     df8:	1f 4f       	sbci	r17, 0xFF	; 255
     dfa:	ff e3       	ldi	r31, 0x3F	; 63
     dfc:	f9 83       	std	Y+1, r31	; 0x01
     dfe:	0d c0       	rjmp	.+26     	; 0xe1a <vfprintf+0x12e>
     e00:	83 36       	cpi	r24, 0x63	; 99
     e02:	31 f0       	breq	.+12     	; 0xe10 <vfprintf+0x124>
     e04:	83 37       	cpi	r24, 0x73	; 115
     e06:	71 f0       	breq	.+28     	; 0xe24 <vfprintf+0x138>
     e08:	83 35       	cpi	r24, 0x53	; 83
     e0a:	09 f0       	breq	.+2      	; 0xe0e <vfprintf+0x122>
     e0c:	57 c0       	rjmp	.+174    	; 0xebc <vfprintf+0x1d0>
     e0e:	21 c0       	rjmp	.+66     	; 0xe52 <vfprintf+0x166>
     e10:	f8 01       	movw	r30, r16
     e12:	80 81       	ld	r24, Z
     e14:	89 83       	std	Y+1, r24	; 0x01
     e16:	0e 5f       	subi	r16, 0xFE	; 254
     e18:	1f 4f       	sbci	r17, 0xFF	; 255
     e1a:	44 24       	eor	r4, r4
     e1c:	43 94       	inc	r4
     e1e:	51 2c       	mov	r5, r1
     e20:	54 01       	movw	r10, r8
     e22:	14 c0       	rjmp	.+40     	; 0xe4c <vfprintf+0x160>
     e24:	38 01       	movw	r6, r16
     e26:	f2 e0       	ldi	r31, 0x02	; 2
     e28:	6f 0e       	add	r6, r31
     e2a:	71 1c       	adc	r7, r1
     e2c:	f8 01       	movw	r30, r16
     e2e:	a0 80       	ld	r10, Z
     e30:	b1 80       	ldd	r11, Z+1	; 0x01
     e32:	26 ff       	sbrs	r18, 6
     e34:	03 c0       	rjmp	.+6      	; 0xe3c <vfprintf+0x150>
     e36:	65 2d       	mov	r22, r5
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <vfprintf+0x154>
     e3c:	6f ef       	ldi	r22, 0xFF	; 255
     e3e:	7f ef       	ldi	r23, 0xFF	; 255
     e40:	c5 01       	movw	r24, r10
     e42:	2c 87       	std	Y+12, r18	; 0x0c
     e44:	94 d2       	rcall	.+1320   	; 0x136e <strnlen>
     e46:	2c 01       	movw	r4, r24
     e48:	83 01       	movw	r16, r6
     e4a:	2c 85       	ldd	r18, Y+12	; 0x0c
     e4c:	2f 77       	andi	r18, 0x7F	; 127
     e4e:	22 2e       	mov	r2, r18
     e50:	16 c0       	rjmp	.+44     	; 0xe7e <vfprintf+0x192>
     e52:	38 01       	movw	r6, r16
     e54:	f2 e0       	ldi	r31, 0x02	; 2
     e56:	6f 0e       	add	r6, r31
     e58:	71 1c       	adc	r7, r1
     e5a:	f8 01       	movw	r30, r16
     e5c:	a0 80       	ld	r10, Z
     e5e:	b1 80       	ldd	r11, Z+1	; 0x01
     e60:	26 ff       	sbrs	r18, 6
     e62:	03 c0       	rjmp	.+6      	; 0xe6a <vfprintf+0x17e>
     e64:	65 2d       	mov	r22, r5
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <vfprintf+0x182>
     e6a:	6f ef       	ldi	r22, 0xFF	; 255
     e6c:	7f ef       	ldi	r23, 0xFF	; 255
     e6e:	c5 01       	movw	r24, r10
     e70:	2c 87       	std	Y+12, r18	; 0x0c
     e72:	6b d2       	rcall	.+1238   	; 0x134a <strnlen_P>
     e74:	2c 01       	movw	r4, r24
     e76:	2c 85       	ldd	r18, Y+12	; 0x0c
     e78:	20 68       	ori	r18, 0x80	; 128
     e7a:	22 2e       	mov	r2, r18
     e7c:	83 01       	movw	r16, r6
     e7e:	23 fc       	sbrc	r2, 3
     e80:	19 c0       	rjmp	.+50     	; 0xeb4 <vfprintf+0x1c8>
     e82:	83 2d       	mov	r24, r3
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	48 16       	cp	r4, r24
     e88:	59 06       	cpc	r5, r25
     e8a:	a0 f4       	brcc	.+40     	; 0xeb4 <vfprintf+0x1c8>
     e8c:	b7 01       	movw	r22, r14
     e8e:	80 e2       	ldi	r24, 0x20	; 32
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	78 d2       	rcall	.+1264   	; 0x1384 <fputc>
     e94:	3a 94       	dec	r3
     e96:	f5 cf       	rjmp	.-22     	; 0xe82 <vfprintf+0x196>
     e98:	f5 01       	movw	r30, r10
     e9a:	27 fc       	sbrc	r2, 7
     e9c:	85 91       	lpm	r24, Z+
     e9e:	27 fe       	sbrs	r2, 7
     ea0:	81 91       	ld	r24, Z+
     ea2:	5f 01       	movw	r10, r30
     ea4:	b7 01       	movw	r22, r14
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	6d d2       	rcall	.+1242   	; 0x1384 <fputc>
     eaa:	31 10       	cpse	r3, r1
     eac:	3a 94       	dec	r3
     eae:	f1 e0       	ldi	r31, 0x01	; 1
     eb0:	4f 1a       	sub	r4, r31
     eb2:	51 08       	sbc	r5, r1
     eb4:	41 14       	cp	r4, r1
     eb6:	51 04       	cpc	r5, r1
     eb8:	79 f7       	brne	.-34     	; 0xe98 <vfprintf+0x1ac>
     eba:	de c0       	rjmp	.+444    	; 0x1078 <vfprintf+0x38c>
     ebc:	84 36       	cpi	r24, 0x64	; 100
     ebe:	11 f0       	breq	.+4      	; 0xec4 <vfprintf+0x1d8>
     ec0:	89 36       	cpi	r24, 0x69	; 105
     ec2:	31 f5       	brne	.+76     	; 0xf10 <vfprintf+0x224>
     ec4:	f8 01       	movw	r30, r16
     ec6:	27 ff       	sbrs	r18, 7
     ec8:	07 c0       	rjmp	.+14     	; 0xed8 <vfprintf+0x1ec>
     eca:	60 81       	ld	r22, Z
     ecc:	71 81       	ldd	r23, Z+1	; 0x01
     ece:	82 81       	ldd	r24, Z+2	; 0x02
     ed0:	93 81       	ldd	r25, Z+3	; 0x03
     ed2:	0c 5f       	subi	r16, 0xFC	; 252
     ed4:	1f 4f       	sbci	r17, 0xFF	; 255
     ed6:	08 c0       	rjmp	.+16     	; 0xee8 <vfprintf+0x1fc>
     ed8:	60 81       	ld	r22, Z
     eda:	71 81       	ldd	r23, Z+1	; 0x01
     edc:	88 27       	eor	r24, r24
     ede:	77 fd       	sbrc	r23, 7
     ee0:	80 95       	com	r24
     ee2:	98 2f       	mov	r25, r24
     ee4:	0e 5f       	subi	r16, 0xFE	; 254
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
     ee8:	2f 76       	andi	r18, 0x6F	; 111
     eea:	b2 2e       	mov	r11, r18
     eec:	97 ff       	sbrs	r25, 7
     eee:	09 c0       	rjmp	.+18     	; 0xf02 <vfprintf+0x216>
     ef0:	90 95       	com	r25
     ef2:	80 95       	com	r24
     ef4:	70 95       	com	r23
     ef6:	61 95       	neg	r22
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	8f 4f       	sbci	r24, 0xFF	; 255
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	20 68       	ori	r18, 0x80	; 128
     f00:	b2 2e       	mov	r11, r18
     f02:	2a e0       	ldi	r18, 0x0A	; 10
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	a4 01       	movw	r20, r8
     f08:	6f d2       	rcall	.+1246   	; 0x13e8 <__ultoa_invert>
     f0a:	a8 2e       	mov	r10, r24
     f0c:	a8 18       	sub	r10, r8
     f0e:	43 c0       	rjmp	.+134    	; 0xf96 <vfprintf+0x2aa>
     f10:	85 37       	cpi	r24, 0x75	; 117
     f12:	29 f4       	brne	.+10     	; 0xf1e <vfprintf+0x232>
     f14:	2f 7e       	andi	r18, 0xEF	; 239
     f16:	b2 2e       	mov	r11, r18
     f18:	2a e0       	ldi	r18, 0x0A	; 10
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	25 c0       	rjmp	.+74     	; 0xf68 <vfprintf+0x27c>
     f1e:	f2 2f       	mov	r31, r18
     f20:	f9 7f       	andi	r31, 0xF9	; 249
     f22:	bf 2e       	mov	r11, r31
     f24:	8f 36       	cpi	r24, 0x6F	; 111
     f26:	c1 f0       	breq	.+48     	; 0xf58 <vfprintf+0x26c>
     f28:	18 f4       	brcc	.+6      	; 0xf30 <vfprintf+0x244>
     f2a:	88 35       	cpi	r24, 0x58	; 88
     f2c:	79 f0       	breq	.+30     	; 0xf4c <vfprintf+0x260>
     f2e:	ad c0       	rjmp	.+346    	; 0x108a <vfprintf+0x39e>
     f30:	80 37       	cpi	r24, 0x70	; 112
     f32:	19 f0       	breq	.+6      	; 0xf3a <vfprintf+0x24e>
     f34:	88 37       	cpi	r24, 0x78	; 120
     f36:	21 f0       	breq	.+8      	; 0xf40 <vfprintf+0x254>
     f38:	a8 c0       	rjmp	.+336    	; 0x108a <vfprintf+0x39e>
     f3a:	2f 2f       	mov	r18, r31
     f3c:	20 61       	ori	r18, 0x10	; 16
     f3e:	b2 2e       	mov	r11, r18
     f40:	b4 fe       	sbrs	r11, 4
     f42:	0d c0       	rjmp	.+26     	; 0xf5e <vfprintf+0x272>
     f44:	8b 2d       	mov	r24, r11
     f46:	84 60       	ori	r24, 0x04	; 4
     f48:	b8 2e       	mov	r11, r24
     f4a:	09 c0       	rjmp	.+18     	; 0xf5e <vfprintf+0x272>
     f4c:	24 ff       	sbrs	r18, 4
     f4e:	0a c0       	rjmp	.+20     	; 0xf64 <vfprintf+0x278>
     f50:	9f 2f       	mov	r25, r31
     f52:	96 60       	ori	r25, 0x06	; 6
     f54:	b9 2e       	mov	r11, r25
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <vfprintf+0x278>
     f58:	28 e0       	ldi	r18, 0x08	; 8
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	05 c0       	rjmp	.+10     	; 0xf68 <vfprintf+0x27c>
     f5e:	20 e1       	ldi	r18, 0x10	; 16
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <vfprintf+0x27c>
     f64:	20 e1       	ldi	r18, 0x10	; 16
     f66:	32 e0       	ldi	r19, 0x02	; 2
     f68:	f8 01       	movw	r30, r16
     f6a:	b7 fe       	sbrs	r11, 7
     f6c:	07 c0       	rjmp	.+14     	; 0xf7c <vfprintf+0x290>
     f6e:	60 81       	ld	r22, Z
     f70:	71 81       	ldd	r23, Z+1	; 0x01
     f72:	82 81       	ldd	r24, Z+2	; 0x02
     f74:	93 81       	ldd	r25, Z+3	; 0x03
     f76:	0c 5f       	subi	r16, 0xFC	; 252
     f78:	1f 4f       	sbci	r17, 0xFF	; 255
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <vfprintf+0x29c>
     f7c:	60 81       	ld	r22, Z
     f7e:	71 81       	ldd	r23, Z+1	; 0x01
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 5f       	subi	r16, 0xFE	; 254
     f86:	1f 4f       	sbci	r17, 0xFF	; 255
     f88:	a4 01       	movw	r20, r8
     f8a:	2e d2       	rcall	.+1116   	; 0x13e8 <__ultoa_invert>
     f8c:	a8 2e       	mov	r10, r24
     f8e:	a8 18       	sub	r10, r8
     f90:	fb 2d       	mov	r31, r11
     f92:	ff 77       	andi	r31, 0x7F	; 127
     f94:	bf 2e       	mov	r11, r31
     f96:	b6 fe       	sbrs	r11, 6
     f98:	0b c0       	rjmp	.+22     	; 0xfb0 <vfprintf+0x2c4>
     f9a:	2b 2d       	mov	r18, r11
     f9c:	2e 7f       	andi	r18, 0xFE	; 254
     f9e:	a5 14       	cp	r10, r5
     fa0:	50 f4       	brcc	.+20     	; 0xfb6 <vfprintf+0x2ca>
     fa2:	b4 fe       	sbrs	r11, 4
     fa4:	0a c0       	rjmp	.+20     	; 0xfba <vfprintf+0x2ce>
     fa6:	b2 fc       	sbrc	r11, 2
     fa8:	08 c0       	rjmp	.+16     	; 0xfba <vfprintf+0x2ce>
     faa:	2b 2d       	mov	r18, r11
     fac:	2e 7e       	andi	r18, 0xEE	; 238
     fae:	05 c0       	rjmp	.+10     	; 0xfba <vfprintf+0x2ce>
     fb0:	7a 2c       	mov	r7, r10
     fb2:	2b 2d       	mov	r18, r11
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <vfprintf+0x2d0>
     fb6:	7a 2c       	mov	r7, r10
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <vfprintf+0x2d0>
     fba:	75 2c       	mov	r7, r5
     fbc:	24 ff       	sbrs	r18, 4
     fbe:	0d c0       	rjmp	.+26     	; 0xfda <vfprintf+0x2ee>
     fc0:	fe 01       	movw	r30, r28
     fc2:	ea 0d       	add	r30, r10
     fc4:	f1 1d       	adc	r31, r1
     fc6:	80 81       	ld	r24, Z
     fc8:	80 33       	cpi	r24, 0x30	; 48
     fca:	11 f4       	brne	.+4      	; 0xfd0 <vfprintf+0x2e4>
     fcc:	29 7e       	andi	r18, 0xE9	; 233
     fce:	09 c0       	rjmp	.+18     	; 0xfe2 <vfprintf+0x2f6>
     fd0:	22 ff       	sbrs	r18, 2
     fd2:	06 c0       	rjmp	.+12     	; 0xfe0 <vfprintf+0x2f4>
     fd4:	73 94       	inc	r7
     fd6:	73 94       	inc	r7
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <vfprintf+0x2f6>
     fda:	82 2f       	mov	r24, r18
     fdc:	86 78       	andi	r24, 0x86	; 134
     fde:	09 f0       	breq	.+2      	; 0xfe2 <vfprintf+0x2f6>
     fe0:	73 94       	inc	r7
     fe2:	23 fd       	sbrc	r18, 3
     fe4:	12 c0       	rjmp	.+36     	; 0x100a <vfprintf+0x31e>
     fe6:	20 ff       	sbrs	r18, 0
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <vfprintf+0x30a>
     fea:	5a 2c       	mov	r5, r10
     fec:	73 14       	cp	r7, r3
     fee:	18 f4       	brcc	.+6      	; 0xff6 <vfprintf+0x30a>
     ff0:	53 0c       	add	r5, r3
     ff2:	57 18       	sub	r5, r7
     ff4:	73 2c       	mov	r7, r3
     ff6:	73 14       	cp	r7, r3
     ff8:	60 f4       	brcc	.+24     	; 0x1012 <vfprintf+0x326>
     ffa:	b7 01       	movw	r22, r14
     ffc:	80 e2       	ldi	r24, 0x20	; 32
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	2c 87       	std	Y+12, r18	; 0x0c
    1002:	c0 d1       	rcall	.+896    	; 0x1384 <fputc>
    1004:	73 94       	inc	r7
    1006:	2c 85       	ldd	r18, Y+12	; 0x0c
    1008:	f6 cf       	rjmp	.-20     	; 0xff6 <vfprintf+0x30a>
    100a:	73 14       	cp	r7, r3
    100c:	10 f4       	brcc	.+4      	; 0x1012 <vfprintf+0x326>
    100e:	37 18       	sub	r3, r7
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <vfprintf+0x328>
    1012:	31 2c       	mov	r3, r1
    1014:	24 ff       	sbrs	r18, 4
    1016:	11 c0       	rjmp	.+34     	; 0x103a <vfprintf+0x34e>
    1018:	b7 01       	movw	r22, r14
    101a:	80 e3       	ldi	r24, 0x30	; 48
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	2c 87       	std	Y+12, r18	; 0x0c
    1020:	b1 d1       	rcall	.+866    	; 0x1384 <fputc>
    1022:	2c 85       	ldd	r18, Y+12	; 0x0c
    1024:	22 ff       	sbrs	r18, 2
    1026:	16 c0       	rjmp	.+44     	; 0x1054 <vfprintf+0x368>
    1028:	21 ff       	sbrs	r18, 1
    102a:	03 c0       	rjmp	.+6      	; 0x1032 <vfprintf+0x346>
    102c:	88 e5       	ldi	r24, 0x58	; 88
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <vfprintf+0x34a>
    1032:	88 e7       	ldi	r24, 0x78	; 120
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	b7 01       	movw	r22, r14
    1038:	0c c0       	rjmp	.+24     	; 0x1052 <vfprintf+0x366>
    103a:	82 2f       	mov	r24, r18
    103c:	86 78       	andi	r24, 0x86	; 134
    103e:	51 f0       	breq	.+20     	; 0x1054 <vfprintf+0x368>
    1040:	21 fd       	sbrc	r18, 1
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <vfprintf+0x35c>
    1044:	80 e2       	ldi	r24, 0x20	; 32
    1046:	01 c0       	rjmp	.+2      	; 0x104a <vfprintf+0x35e>
    1048:	8b e2       	ldi	r24, 0x2B	; 43
    104a:	27 fd       	sbrc	r18, 7
    104c:	8d e2       	ldi	r24, 0x2D	; 45
    104e:	b7 01       	movw	r22, r14
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	98 d1       	rcall	.+816    	; 0x1384 <fputc>
    1054:	a5 14       	cp	r10, r5
    1056:	30 f4       	brcc	.+12     	; 0x1064 <vfprintf+0x378>
    1058:	b7 01       	movw	r22, r14
    105a:	80 e3       	ldi	r24, 0x30	; 48
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	92 d1       	rcall	.+804    	; 0x1384 <fputc>
    1060:	5a 94       	dec	r5
    1062:	f8 cf       	rjmp	.-16     	; 0x1054 <vfprintf+0x368>
    1064:	aa 94       	dec	r10
    1066:	f4 01       	movw	r30, r8
    1068:	ea 0d       	add	r30, r10
    106a:	f1 1d       	adc	r31, r1
    106c:	80 81       	ld	r24, Z
    106e:	b7 01       	movw	r22, r14
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	88 d1       	rcall	.+784    	; 0x1384 <fputc>
    1074:	a1 10       	cpse	r10, r1
    1076:	f6 cf       	rjmp	.-20     	; 0x1064 <vfprintf+0x378>
    1078:	33 20       	and	r3, r3
    107a:	09 f4       	brne	.+2      	; 0x107e <vfprintf+0x392>
    107c:	5d ce       	rjmp	.-838    	; 0xd38 <vfprintf+0x4c>
    107e:	b7 01       	movw	r22, r14
    1080:	80 e2       	ldi	r24, 0x20	; 32
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	7f d1       	rcall	.+766    	; 0x1384 <fputc>
    1086:	3a 94       	dec	r3
    1088:	f7 cf       	rjmp	.-18     	; 0x1078 <vfprintf+0x38c>
    108a:	f7 01       	movw	r30, r14
    108c:	86 81       	ldd	r24, Z+6	; 0x06
    108e:	97 81       	ldd	r25, Z+7	; 0x07
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <vfprintf+0x3aa>
    1092:	8f ef       	ldi	r24, 0xFF	; 255
    1094:	9f ef       	ldi	r25, 0xFF	; 255
    1096:	2c 96       	adiw	r28, 0x0c	; 12
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	cf 90       	pop	r12
    10b2:	bf 90       	pop	r11
    10b4:	af 90       	pop	r10
    10b6:	9f 90       	pop	r9
    10b8:	8f 90       	pop	r8
    10ba:	7f 90       	pop	r7
    10bc:	6f 90       	pop	r6
    10be:	5f 90       	pop	r5
    10c0:	4f 90       	pop	r4
    10c2:	3f 90       	pop	r3
    10c4:	2f 90       	pop	r2
    10c6:	08 95       	ret

000010c8 <calloc>:
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	86 9f       	mul	r24, r22
    10d2:	80 01       	movw	r16, r0
    10d4:	87 9f       	mul	r24, r23
    10d6:	10 0d       	add	r17, r0
    10d8:	96 9f       	mul	r25, r22
    10da:	10 0d       	add	r17, r0
    10dc:	11 24       	eor	r1, r1
    10de:	c8 01       	movw	r24, r16
    10e0:	0d d0       	rcall	.+26     	; 0x10fc <malloc>
    10e2:	ec 01       	movw	r28, r24
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	21 f0       	breq	.+8      	; 0x10f0 <calloc+0x28>
    10e8:	a8 01       	movw	r20, r16
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	38 d1       	rcall	.+624    	; 0x1360 <memset>
    10f0:	ce 01       	movw	r24, r28
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	08 95       	ret

000010fc <malloc>:
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	82 30       	cpi	r24, 0x02	; 2
    1102:	91 05       	cpc	r25, r1
    1104:	10 f4       	brcc	.+4      	; 0x110a <malloc+0xe>
    1106:	82 e0       	ldi	r24, 0x02	; 2
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	e0 91 5f 02 	lds	r30, 0x025F
    110e:	f0 91 60 02 	lds	r31, 0x0260
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	a0 e0       	ldi	r26, 0x00	; 0
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	39 f1       	breq	.+78     	; 0x116c <malloc+0x70>
    111e:	40 81       	ld	r20, Z
    1120:	51 81       	ldd	r21, Z+1	; 0x01
    1122:	48 17       	cp	r20, r24
    1124:	59 07       	cpc	r21, r25
    1126:	b8 f0       	brcs	.+46     	; 0x1156 <malloc+0x5a>
    1128:	48 17       	cp	r20, r24
    112a:	59 07       	cpc	r21, r25
    112c:	71 f4       	brne	.+28     	; 0x114a <malloc+0x4e>
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	10 97       	sbiw	r26, 0x00	; 0
    1134:	29 f0       	breq	.+10     	; 0x1140 <malloc+0x44>
    1136:	13 96       	adiw	r26, 0x03	; 3
    1138:	9c 93       	st	X, r25
    113a:	8e 93       	st	-X, r24
    113c:	12 97       	sbiw	r26, 0x02	; 2
    113e:	2c c0       	rjmp	.+88     	; 0x1198 <malloc+0x9c>
    1140:	90 93 60 02 	sts	0x0260, r25
    1144:	80 93 5f 02 	sts	0x025F, r24
    1148:	27 c0       	rjmp	.+78     	; 0x1198 <malloc+0x9c>
    114a:	21 15       	cp	r18, r1
    114c:	31 05       	cpc	r19, r1
    114e:	31 f0       	breq	.+12     	; 0x115c <malloc+0x60>
    1150:	42 17       	cp	r20, r18
    1152:	53 07       	cpc	r21, r19
    1154:	18 f0       	brcs	.+6      	; 0x115c <malloc+0x60>
    1156:	a9 01       	movw	r20, r18
    1158:	db 01       	movw	r26, r22
    115a:	01 c0       	rjmp	.+2      	; 0x115e <malloc+0x62>
    115c:	ef 01       	movw	r28, r30
    115e:	9a 01       	movw	r18, r20
    1160:	bd 01       	movw	r22, r26
    1162:	df 01       	movw	r26, r30
    1164:	02 80       	ldd	r0, Z+2	; 0x02
    1166:	f3 81       	ldd	r31, Z+3	; 0x03
    1168:	e0 2d       	mov	r30, r0
    116a:	d7 cf       	rjmp	.-82     	; 0x111a <malloc+0x1e>
    116c:	21 15       	cp	r18, r1
    116e:	31 05       	cpc	r19, r1
    1170:	f9 f0       	breq	.+62     	; 0x11b0 <malloc+0xb4>
    1172:	28 1b       	sub	r18, r24
    1174:	39 0b       	sbc	r19, r25
    1176:	24 30       	cpi	r18, 0x04	; 4
    1178:	31 05       	cpc	r19, r1
    117a:	80 f4       	brcc	.+32     	; 0x119c <malloc+0xa0>
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	9b 81       	ldd	r25, Y+3	; 0x03
    1180:	61 15       	cp	r22, r1
    1182:	71 05       	cpc	r23, r1
    1184:	21 f0       	breq	.+8      	; 0x118e <malloc+0x92>
    1186:	fb 01       	movw	r30, r22
    1188:	93 83       	std	Z+3, r25	; 0x03
    118a:	82 83       	std	Z+2, r24	; 0x02
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <malloc+0x9a>
    118e:	90 93 60 02 	sts	0x0260, r25
    1192:	80 93 5f 02 	sts	0x025F, r24
    1196:	fe 01       	movw	r30, r28
    1198:	32 96       	adiw	r30, 0x02	; 2
    119a:	44 c0       	rjmp	.+136    	; 0x1224 <malloc+0x128>
    119c:	fe 01       	movw	r30, r28
    119e:	e2 0f       	add	r30, r18
    11a0:	f3 1f       	adc	r31, r19
    11a2:	81 93       	st	Z+, r24
    11a4:	91 93       	st	Z+, r25
    11a6:	22 50       	subi	r18, 0x02	; 2
    11a8:	31 09       	sbc	r19, r1
    11aa:	39 83       	std	Y+1, r19	; 0x01
    11ac:	28 83       	st	Y, r18
    11ae:	3a c0       	rjmp	.+116    	; 0x1224 <malloc+0x128>
    11b0:	20 91 5d 02 	lds	r18, 0x025D
    11b4:	30 91 5e 02 	lds	r19, 0x025E
    11b8:	23 2b       	or	r18, r19
    11ba:	41 f4       	brne	.+16     	; 0x11cc <malloc+0xd0>
    11bc:	20 91 02 02 	lds	r18, 0x0202
    11c0:	30 91 03 02 	lds	r19, 0x0203
    11c4:	30 93 5e 02 	sts	0x025E, r19
    11c8:	20 93 5d 02 	sts	0x025D, r18
    11cc:	20 91 00 02 	lds	r18, 0x0200
    11d0:	30 91 01 02 	lds	r19, 0x0201
    11d4:	21 15       	cp	r18, r1
    11d6:	31 05       	cpc	r19, r1
    11d8:	41 f4       	brne	.+16     	; 0x11ea <malloc+0xee>
    11da:	2d b7       	in	r18, 0x3d	; 61
    11dc:	3e b7       	in	r19, 0x3e	; 62
    11de:	40 91 04 02 	lds	r20, 0x0204
    11e2:	50 91 05 02 	lds	r21, 0x0205
    11e6:	24 1b       	sub	r18, r20
    11e8:	35 0b       	sbc	r19, r21
    11ea:	e0 91 5d 02 	lds	r30, 0x025D
    11ee:	f0 91 5e 02 	lds	r31, 0x025E
    11f2:	e2 17       	cp	r30, r18
    11f4:	f3 07       	cpc	r31, r19
    11f6:	a0 f4       	brcc	.+40     	; 0x1220 <malloc+0x124>
    11f8:	2e 1b       	sub	r18, r30
    11fa:	3f 0b       	sbc	r19, r31
    11fc:	28 17       	cp	r18, r24
    11fe:	39 07       	cpc	r19, r25
    1200:	78 f0       	brcs	.+30     	; 0x1220 <malloc+0x124>
    1202:	ac 01       	movw	r20, r24
    1204:	4e 5f       	subi	r20, 0xFE	; 254
    1206:	5f 4f       	sbci	r21, 0xFF	; 255
    1208:	24 17       	cp	r18, r20
    120a:	35 07       	cpc	r19, r21
    120c:	48 f0       	brcs	.+18     	; 0x1220 <malloc+0x124>
    120e:	4e 0f       	add	r20, r30
    1210:	5f 1f       	adc	r21, r31
    1212:	50 93 5e 02 	sts	0x025E, r21
    1216:	40 93 5d 02 	sts	0x025D, r20
    121a:	81 93       	st	Z+, r24
    121c:	91 93       	st	Z+, r25
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <malloc+0x128>
    1220:	e0 e0       	ldi	r30, 0x00	; 0
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	cf 01       	movw	r24, r30
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	08 95       	ret

0000122c <free>:
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	09 f4       	brne	.+2      	; 0x1236 <free+0xa>
    1234:	87 c0       	rjmp	.+270    	; 0x1344 <free+0x118>
    1236:	fc 01       	movw	r30, r24
    1238:	32 97       	sbiw	r30, 0x02	; 2
    123a:	13 82       	std	Z+3, r1	; 0x03
    123c:	12 82       	std	Z+2, r1	; 0x02
    123e:	c0 91 5f 02 	lds	r28, 0x025F
    1242:	d0 91 60 02 	lds	r29, 0x0260
    1246:	20 97       	sbiw	r28, 0x00	; 0
    1248:	81 f4       	brne	.+32     	; 0x126a <free+0x3e>
    124a:	20 81       	ld	r18, Z
    124c:	31 81       	ldd	r19, Z+1	; 0x01
    124e:	28 0f       	add	r18, r24
    1250:	39 1f       	adc	r19, r25
    1252:	80 91 5d 02 	lds	r24, 0x025D
    1256:	90 91 5e 02 	lds	r25, 0x025E
    125a:	82 17       	cp	r24, r18
    125c:	93 07       	cpc	r25, r19
    125e:	79 f5       	brne	.+94     	; 0x12be <free+0x92>
    1260:	f0 93 5e 02 	sts	0x025E, r31
    1264:	e0 93 5d 02 	sts	0x025D, r30
    1268:	6d c0       	rjmp	.+218    	; 0x1344 <free+0x118>
    126a:	de 01       	movw	r26, r28
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	ae 17       	cp	r26, r30
    1272:	bf 07       	cpc	r27, r31
    1274:	50 f4       	brcc	.+20     	; 0x128a <free+0x5e>
    1276:	12 96       	adiw	r26, 0x02	; 2
    1278:	4d 91       	ld	r20, X+
    127a:	5c 91       	ld	r21, X
    127c:	13 97       	sbiw	r26, 0x03	; 3
    127e:	9d 01       	movw	r18, r26
    1280:	41 15       	cp	r20, r1
    1282:	51 05       	cpc	r21, r1
    1284:	09 f1       	breq	.+66     	; 0x12c8 <free+0x9c>
    1286:	da 01       	movw	r26, r20
    1288:	f3 cf       	rjmp	.-26     	; 0x1270 <free+0x44>
    128a:	b3 83       	std	Z+3, r27	; 0x03
    128c:	a2 83       	std	Z+2, r26	; 0x02
    128e:	40 81       	ld	r20, Z
    1290:	51 81       	ldd	r21, Z+1	; 0x01
    1292:	84 0f       	add	r24, r20
    1294:	95 1f       	adc	r25, r21
    1296:	8a 17       	cp	r24, r26
    1298:	9b 07       	cpc	r25, r27
    129a:	71 f4       	brne	.+28     	; 0x12b8 <free+0x8c>
    129c:	8d 91       	ld	r24, X+
    129e:	9c 91       	ld	r25, X
    12a0:	11 97       	sbiw	r26, 0x01	; 1
    12a2:	84 0f       	add	r24, r20
    12a4:	95 1f       	adc	r25, r21
    12a6:	02 96       	adiw	r24, 0x02	; 2
    12a8:	91 83       	std	Z+1, r25	; 0x01
    12aa:	80 83       	st	Z, r24
    12ac:	12 96       	adiw	r26, 0x02	; 2
    12ae:	8d 91       	ld	r24, X+
    12b0:	9c 91       	ld	r25, X
    12b2:	13 97       	sbiw	r26, 0x03	; 3
    12b4:	93 83       	std	Z+3, r25	; 0x03
    12b6:	82 83       	std	Z+2, r24	; 0x02
    12b8:	21 15       	cp	r18, r1
    12ba:	31 05       	cpc	r19, r1
    12bc:	29 f4       	brne	.+10     	; 0x12c8 <free+0x9c>
    12be:	f0 93 60 02 	sts	0x0260, r31
    12c2:	e0 93 5f 02 	sts	0x025F, r30
    12c6:	3e c0       	rjmp	.+124    	; 0x1344 <free+0x118>
    12c8:	d9 01       	movw	r26, r18
    12ca:	13 96       	adiw	r26, 0x03	; 3
    12cc:	fc 93       	st	X, r31
    12ce:	ee 93       	st	-X, r30
    12d0:	12 97       	sbiw	r26, 0x02	; 2
    12d2:	4d 91       	ld	r20, X+
    12d4:	5d 91       	ld	r21, X+
    12d6:	a4 0f       	add	r26, r20
    12d8:	b5 1f       	adc	r27, r21
    12da:	ea 17       	cp	r30, r26
    12dc:	fb 07       	cpc	r31, r27
    12de:	79 f4       	brne	.+30     	; 0x12fe <free+0xd2>
    12e0:	80 81       	ld	r24, Z
    12e2:	91 81       	ldd	r25, Z+1	; 0x01
    12e4:	84 0f       	add	r24, r20
    12e6:	95 1f       	adc	r25, r21
    12e8:	02 96       	adiw	r24, 0x02	; 2
    12ea:	d9 01       	movw	r26, r18
    12ec:	11 96       	adiw	r26, 0x01	; 1
    12ee:	9c 93       	st	X, r25
    12f0:	8e 93       	st	-X, r24
    12f2:	82 81       	ldd	r24, Z+2	; 0x02
    12f4:	93 81       	ldd	r25, Z+3	; 0x03
    12f6:	13 96       	adiw	r26, 0x03	; 3
    12f8:	9c 93       	st	X, r25
    12fa:	8e 93       	st	-X, r24
    12fc:	12 97       	sbiw	r26, 0x02	; 2
    12fe:	e0 e0       	ldi	r30, 0x00	; 0
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	9b 81       	ldd	r25, Y+3	; 0x03
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	19 f0       	breq	.+6      	; 0x1310 <free+0xe4>
    130a:	fe 01       	movw	r30, r28
    130c:	ec 01       	movw	r28, r24
    130e:	f9 cf       	rjmp	.-14     	; 0x1302 <free+0xd6>
    1310:	ce 01       	movw	r24, r28
    1312:	02 96       	adiw	r24, 0x02	; 2
    1314:	28 81       	ld	r18, Y
    1316:	39 81       	ldd	r19, Y+1	; 0x01
    1318:	82 0f       	add	r24, r18
    131a:	93 1f       	adc	r25, r19
    131c:	20 91 5d 02 	lds	r18, 0x025D
    1320:	30 91 5e 02 	lds	r19, 0x025E
    1324:	28 17       	cp	r18, r24
    1326:	39 07       	cpc	r19, r25
    1328:	69 f4       	brne	.+26     	; 0x1344 <free+0x118>
    132a:	30 97       	sbiw	r30, 0x00	; 0
    132c:	29 f4       	brne	.+10     	; 0x1338 <free+0x10c>
    132e:	10 92 60 02 	sts	0x0260, r1
    1332:	10 92 5f 02 	sts	0x025F, r1
    1336:	02 c0       	rjmp	.+4      	; 0x133c <free+0x110>
    1338:	13 82       	std	Z+3, r1	; 0x03
    133a:	12 82       	std	Z+2, r1	; 0x02
    133c:	d0 93 5e 02 	sts	0x025E, r29
    1340:	c0 93 5d 02 	sts	0x025D, r28
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	08 95       	ret

0000134a <strnlen_P>:
    134a:	fc 01       	movw	r30, r24
    134c:	05 90       	lpm	r0, Z+
    134e:	61 50       	subi	r22, 0x01	; 1
    1350:	70 40       	sbci	r23, 0x00	; 0
    1352:	01 10       	cpse	r0, r1
    1354:	d8 f7       	brcc	.-10     	; 0x134c <strnlen_P+0x2>
    1356:	80 95       	com	r24
    1358:	90 95       	com	r25
    135a:	8e 0f       	add	r24, r30
    135c:	9f 1f       	adc	r25, r31
    135e:	08 95       	ret

00001360 <memset>:
    1360:	dc 01       	movw	r26, r24
    1362:	01 c0       	rjmp	.+2      	; 0x1366 <memset+0x6>
    1364:	6d 93       	st	X+, r22
    1366:	41 50       	subi	r20, 0x01	; 1
    1368:	50 40       	sbci	r21, 0x00	; 0
    136a:	e0 f7       	brcc	.-8      	; 0x1364 <memset+0x4>
    136c:	08 95       	ret

0000136e <strnlen>:
    136e:	fc 01       	movw	r30, r24
    1370:	61 50       	subi	r22, 0x01	; 1
    1372:	70 40       	sbci	r23, 0x00	; 0
    1374:	01 90       	ld	r0, Z+
    1376:	01 10       	cpse	r0, r1
    1378:	d8 f7       	brcc	.-10     	; 0x1370 <strnlen+0x2>
    137a:	80 95       	com	r24
    137c:	90 95       	com	r25
    137e:	8e 0f       	add	r24, r30
    1380:	9f 1f       	adc	r25, r31
    1382:	08 95       	ret

00001384 <fputc>:
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	18 2f       	mov	r17, r24
    138e:	09 2f       	mov	r16, r25
    1390:	eb 01       	movw	r28, r22
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	81 fd       	sbrc	r24, 1
    1396:	03 c0       	rjmp	.+6      	; 0x139e <fputc+0x1a>
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	9f ef       	ldi	r25, 0xFF	; 255
    139c:	20 c0       	rjmp	.+64     	; 0x13de <fputc+0x5a>
    139e:	82 ff       	sbrs	r24, 2
    13a0:	10 c0       	rjmp	.+32     	; 0x13c2 <fputc+0x3e>
    13a2:	4e 81       	ldd	r20, Y+6	; 0x06
    13a4:	5f 81       	ldd	r21, Y+7	; 0x07
    13a6:	2c 81       	ldd	r18, Y+4	; 0x04
    13a8:	3d 81       	ldd	r19, Y+5	; 0x05
    13aa:	42 17       	cp	r20, r18
    13ac:	53 07       	cpc	r21, r19
    13ae:	7c f4       	brge	.+30     	; 0x13ce <fputc+0x4a>
    13b0:	e8 81       	ld	r30, Y
    13b2:	f9 81       	ldd	r31, Y+1	; 0x01
    13b4:	9f 01       	movw	r18, r30
    13b6:	2f 5f       	subi	r18, 0xFF	; 255
    13b8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ba:	39 83       	std	Y+1, r19	; 0x01
    13bc:	28 83       	st	Y, r18
    13be:	10 83       	st	Z, r17
    13c0:	06 c0       	rjmp	.+12     	; 0x13ce <fputc+0x4a>
    13c2:	e8 85       	ldd	r30, Y+8	; 0x08
    13c4:	f9 85       	ldd	r31, Y+9	; 0x09
    13c6:	81 2f       	mov	r24, r17
    13c8:	19 95       	eicall
    13ca:	89 2b       	or	r24, r25
    13cc:	29 f7       	brne	.-54     	; 0x1398 <fputc+0x14>
    13ce:	2e 81       	ldd	r18, Y+6	; 0x06
    13d0:	3f 81       	ldd	r19, Y+7	; 0x07
    13d2:	2f 5f       	subi	r18, 0xFF	; 255
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    13d6:	3f 83       	std	Y+7, r19	; 0x07
    13d8:	2e 83       	std	Y+6, r18	; 0x06
    13da:	81 2f       	mov	r24, r17
    13dc:	90 2f       	mov	r25, r16
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	08 95       	ret

000013e8 <__ultoa_invert>:
    13e8:	fa 01       	movw	r30, r20
    13ea:	aa 27       	eor	r26, r26
    13ec:	28 30       	cpi	r18, 0x08	; 8
    13ee:	51 f1       	breq	.+84     	; 0x1444 <__ultoa_invert+0x5c>
    13f0:	20 31       	cpi	r18, 0x10	; 16
    13f2:	81 f1       	breq	.+96     	; 0x1454 <__ultoa_invert+0x6c>
    13f4:	e8 94       	clt
    13f6:	6f 93       	push	r22
    13f8:	6e 7f       	andi	r22, 0xFE	; 254
    13fa:	6e 5f       	subi	r22, 0xFE	; 254
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255
    13fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1400:	9f 4f       	sbci	r25, 0xFF	; 255
    1402:	af 4f       	sbci	r26, 0xFF	; 255
    1404:	b1 e0       	ldi	r27, 0x01	; 1
    1406:	3e d0       	rcall	.+124    	; 0x1484 <__ultoa_invert+0x9c>
    1408:	b4 e0       	ldi	r27, 0x04	; 4
    140a:	3c d0       	rcall	.+120    	; 0x1484 <__ultoa_invert+0x9c>
    140c:	67 0f       	add	r22, r23
    140e:	78 1f       	adc	r23, r24
    1410:	89 1f       	adc	r24, r25
    1412:	9a 1f       	adc	r25, r26
    1414:	a1 1d       	adc	r26, r1
    1416:	68 0f       	add	r22, r24
    1418:	79 1f       	adc	r23, r25
    141a:	8a 1f       	adc	r24, r26
    141c:	91 1d       	adc	r25, r1
    141e:	a1 1d       	adc	r26, r1
    1420:	6a 0f       	add	r22, r26
    1422:	71 1d       	adc	r23, r1
    1424:	81 1d       	adc	r24, r1
    1426:	91 1d       	adc	r25, r1
    1428:	a1 1d       	adc	r26, r1
    142a:	20 d0       	rcall	.+64     	; 0x146c <__ultoa_invert+0x84>
    142c:	09 f4       	brne	.+2      	; 0x1430 <__ultoa_invert+0x48>
    142e:	68 94       	set
    1430:	3f 91       	pop	r19
    1432:	2a e0       	ldi	r18, 0x0A	; 10
    1434:	26 9f       	mul	r18, r22
    1436:	11 24       	eor	r1, r1
    1438:	30 19       	sub	r19, r0
    143a:	30 5d       	subi	r19, 0xD0	; 208
    143c:	31 93       	st	Z+, r19
    143e:	de f6       	brtc	.-74     	; 0x13f6 <__ultoa_invert+0xe>
    1440:	cf 01       	movw	r24, r30
    1442:	08 95       	ret
    1444:	46 2f       	mov	r20, r22
    1446:	47 70       	andi	r20, 0x07	; 7
    1448:	40 5d       	subi	r20, 0xD0	; 208
    144a:	41 93       	st	Z+, r20
    144c:	b3 e0       	ldi	r27, 0x03	; 3
    144e:	0f d0       	rcall	.+30     	; 0x146e <__ultoa_invert+0x86>
    1450:	c9 f7       	brne	.-14     	; 0x1444 <__ultoa_invert+0x5c>
    1452:	f6 cf       	rjmp	.-20     	; 0x1440 <__ultoa_invert+0x58>
    1454:	46 2f       	mov	r20, r22
    1456:	4f 70       	andi	r20, 0x0F	; 15
    1458:	40 5d       	subi	r20, 0xD0	; 208
    145a:	4a 33       	cpi	r20, 0x3A	; 58
    145c:	18 f0       	brcs	.+6      	; 0x1464 <__ultoa_invert+0x7c>
    145e:	49 5d       	subi	r20, 0xD9	; 217
    1460:	31 fd       	sbrc	r19, 1
    1462:	40 52       	subi	r20, 0x20	; 32
    1464:	41 93       	st	Z+, r20
    1466:	02 d0       	rcall	.+4      	; 0x146c <__ultoa_invert+0x84>
    1468:	a9 f7       	brne	.-22     	; 0x1454 <__ultoa_invert+0x6c>
    146a:	ea cf       	rjmp	.-44     	; 0x1440 <__ultoa_invert+0x58>
    146c:	b4 e0       	ldi	r27, 0x04	; 4
    146e:	a6 95       	lsr	r26
    1470:	97 95       	ror	r25
    1472:	87 95       	ror	r24
    1474:	77 95       	ror	r23
    1476:	67 95       	ror	r22
    1478:	ba 95       	dec	r27
    147a:	c9 f7       	brne	.-14     	; 0x146e <__ultoa_invert+0x86>
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	61 05       	cpc	r22, r1
    1480:	71 05       	cpc	r23, r1
    1482:	08 95       	ret
    1484:	9b 01       	movw	r18, r22
    1486:	ac 01       	movw	r20, r24
    1488:	0a 2e       	mov	r0, r26
    148a:	06 94       	lsr	r0
    148c:	57 95       	ror	r21
    148e:	47 95       	ror	r20
    1490:	37 95       	ror	r19
    1492:	27 95       	ror	r18
    1494:	ba 95       	dec	r27
    1496:	c9 f7       	brne	.-14     	; 0x148a <__ultoa_invert+0xa2>
    1498:	62 0f       	add	r22, r18
    149a:	73 1f       	adc	r23, r19
    149c:	84 1f       	adc	r24, r20
    149e:	95 1f       	adc	r25, r21
    14a0:	a0 1d       	adc	r26, r0
    14a2:	08 95       	ret

000014a4 <_exit>:
    14a4:	f8 94       	cli

000014a6 <__stop_program>:
    14a6:	ff cf       	rjmp	.-2      	; 0x14a6 <__stop_program>
