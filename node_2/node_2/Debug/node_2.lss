
node_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00000350  000003e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000350  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800220  00800220  00000404  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d6e  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000677  00000000  00000000  000012f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010c3  00000000  00000000  00001969  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b8  00000000  00000000  00002a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00009781  00000000  00000000  00002ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b4  00000000  00000000  0000c465  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  0000cb19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003d7f  00000000  00000000  0000cc09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e5       	ldi	r30, 0x50	; 80
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 32       	cpi	r26, 0x20	; 32
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e2       	ldi	r26, 0x20	; 32
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 32       	cpi	r26, 0x26	; 38
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	15 c1       	rjmp	.+554    	; 0x34c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "spi_control.h"
#include "ADC.h"


int main (void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	2a 97       	sbiw	r28, 0x0a	; 10
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
	can_init();
 138:	50 d0       	rcall	.+160    	; 0x1da <can_init>
	servo_init();
 13a:	12 d0       	rcall	.+36     	; 0x160 <servo_init>
	init_ADC();
 13c:	35 d0       	rcall	.+106    	; 0x1a8 <init_ADC>

	float val = 950;
	
	DDRB = 0xff;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB7);
 142:	2f 9a       	sbi	0x05, 7	; 5
	can_message_t msg;
	can_message_t msg2;
	
	while (1)
	{
		msg2.id = 'p';
 144:	10 e7       	ldi	r17, 0x70	; 112
 146:	19 83       	std	Y+1, r17	; 0x01
		msg2.data[0] = ADC_read2();
 148:	3d d0       	rcall	.+122    	; 0x1c4 <ADC_read2>
 14a:	8b 83       	std	Y+3, r24	; 0x03
		can_message_send(&msg2);
 14c:	ce 01       	movw	r24, r28
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	52 d0       	rcall	.+164    	; 0x1f6 <can_message_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	8f e1       	ldi	r24, 0x1F	; 31
 154:	9e e4       	ldi	r25, 0x4E	; 78
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0x32>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x38>
 15c:	00 00       	nop
 15e:	f3 cf       	rjmp	.-26     	; 0x146 <main+0x22>

00000160 <servo_init>:

void servo_init(void)
{

	// Fast PWM mode		
	TCCR1A |=  (1 << WGM11); 
 160:	e0 e8       	ldi	r30, 0x80	; 128
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	82 60       	ori	r24, 0x02	; 2
 168:	80 83       	st	Z, r24
	TCCR1B |=  (1 << WGM13) | (1 << WGM12);	
 16a:	a1 e8       	ldi	r26, 0x81	; 129
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	8c 91       	ld	r24, X
 170:	88 61       	ori	r24, 0x18	; 24
 172:	8c 93       	st	X, r24
	
	
	// Prescale
	TCCR1B |= (1 << CS11);
 174:	8c 91       	ld	r24, X
 176:	82 60       	ori	r24, 0x02	; 2
 178:	8c 93       	st	X, r24
	TCCR1B &= ~(1 << CS12) & ~(1 << CS10);	
 17a:	8c 91       	ld	r24, X
 17c:	8a 7f       	andi	r24, 0xFA	; 250
 17e:	8c 93       	st	X, r24
	
	// Clear OC2A on compare match, set OC2A at BOTTOM			
	TCCR1A |= (1 << COM1A1);
 180:	80 81       	ld	r24, Z
 182:	80 68       	ori	r24, 0x80	; 128
 184:	80 83       	st	Z, r24
	TCCR1A &= ~(1 << COM1A0);
 186:	80 81       	ld	r24, Z
 188:	8f 7b       	andi	r24, 0xBF	; 191
 18a:	80 83       	st	Z, r24
	// TOP Value
	ICR1 = TOP_VALUE;
 18c:	80 e4       	ldi	r24, 0x40	; 64
 18e:	9c e9       	ldi	r25, 0x9C	; 156
 190:	90 93 87 00 	sts	0x0087, r25
 194:	80 93 86 00 	sts	0x0086, r24
	
	// Compare register
	OCR1A = us_to_compare(900);
 198:	88 e0       	ldi	r24, 0x08	; 8
 19a:	97 e0       	ldi	r25, 0x07	; 7
 19c:	90 93 89 00 	sts	0x0089, r25
 1a0:	80 93 88 00 	sts	0x0088, r24
	
	// Enable output
	DDRB |= (1 << PB6);
 1a4:	26 9a       	sbi	0x04, 6	; 4
 1a6:	08 95       	ret

000001a8 <init_ADC>:
#include "ADC.h"
#include <avr/io.h>

void init_ADC(){
	ADMUX  |= (1 <<REFS0);
 1a8:	ec e7       	ldi	r30, 0x7C	; 124
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	80 64       	ori	r24, 0x40	; 64
 1b0:	80 83       	st	Z, r24
	ADMUX &= 0xe0;
 1b2:	80 81       	ld	r24, Z
 1b4:	80 7e       	andi	r24, 0xE0	; 224
 1b6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);
 1b8:	ea e7       	ldi	r30, 0x7A	; 122
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	80 83       	st	Z, r24
 1c2:	08 95       	ret

000001c4 <ADC_read2>:
	//ADCH //lese fra
	//ADCL //lese fra
}

char ADC_read2(){
	ADCSRA |= (1 << ADSC);
 1c4:	ea e7       	ldi	r30, 0x7A	; 122
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC) == (1 << ADSC)) {
 1ce:	80 81       	ld	r24, Z
 1d0:	80 fd       	sbrc	r24, 0
 1d2:	fd cf       	rjmp	.-6      	; 0x1ce <ADC_read2+0xa>
		//Delay?
	}
	return ADCL;
 1d4:	80 91 78 00 	lds	r24, 0x0078
}
 1d8:	08 95       	ret

000001da <can_init>:
#include "MCP2515.h"

void can_init()
{
	
	mcp2515_init();
 1da:	6e d0       	rcall	.+220    	; 0x2b8 <mcp2515_init>
	
	mcp2515_bit_modify(MCP_RXF0SIDH, 0xff , 0x00);
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	6f ef       	ldi	r22, 0xFF	; 255
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	45 d0       	rcall	.+138    	; 0x26e <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXF0SIDL, 0xE0 , 0x00);
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	60 ee       	ldi	r22, 0xE0	; 224
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	41 d0       	rcall	.+130    	; 0x26e <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, 0xE0 , MODE_NORMAL);
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	60 ee       	ldi	r22, 0xE0	; 224
 1f0:	8f e0       	ldi	r24, 0x0F	; 15
 1f2:	3d c0       	rjmp	.+122    	; 0x26e <mcp2515_bit_modify>
 1f4:	08 95       	ret

000001f6 <can_message_send>:
	
}


void can_message_send(can_message_t *message)
{
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
	char i;
	
	// ID
	mcp2515_write(MCP_TXB0CTRL + 1,message->id);
 1fe:	68 81       	ld	r22, Y
 200:	81 e3       	ldi	r24, 0x31	; 49
 202:	1e d0       	rcall	.+60     	; 0x240 <mcp2515_write>
	mcp2515_write(0x32,0x00);
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	82 e3       	ldi	r24, 0x32	; 50
 208:	1b d0       	rcall	.+54     	; 0x240 <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
 20a:	69 81       	ldd	r22, Y+1	; 0x01
 20c:	85 e3       	ldi	r24, 0x35	; 53
 20e:	18 d0       	rcall	.+48     	; 0x240 <mcp2515_write>
	
	// Data
	for (i = 0; i< message->length; i++){
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	18 16       	cp	r1, r24
 214:	74 f4       	brge	.+28     	; 0x232 <can_message_send+0x3c>
 216:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0CTRL + 6 + i, *((message->data)+i) );
 218:	fe 01       	movw	r30, r28
 21a:	e1 0f       	add	r30, r17
 21c:	f1 1d       	adc	r31, r1
 21e:	17 fd       	sbrc	r17, 7
 220:	fa 95       	dec	r31
 222:	62 81       	ldd	r22, Z+2	; 0x02
 224:	86 e3       	ldi	r24, 0x36	; 54
 226:	81 0f       	add	r24, r17
 228:	0b d0       	rcall	.+22     	; 0x240 <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
	
	// Data
	for (i = 0; i< message->length; i++){
 22a:	1f 5f       	subi	r17, 0xFF	; 255
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	18 17       	cp	r17, r24
 230:	9c f3       	brlt	.-26     	; 0x218 <can_message_send+0x22>
		mcp2515_write(MCP_TXB0CTRL + 6 + i, *((message->data)+i) );
	}
	
	mcp2515_request_to_send(MCP_RTS_TX0);
 232:	81 e8       	ldi	r24, 0x81	; 129
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	13 d0       	rcall	.+38     	; 0x25e <mcp2515_request_to_send>
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	08 95       	ret

00000240 <mcp2515_write>:
	
	return result;
}

void mcp2515_write(char addr, char data)
{
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	d8 2f       	mov	r29, r24
 246:	c6 2f       	mov	r28, r22
	spi_select();
 248:	41 d0       	rcall	.+130    	; 0x2cc <spi_select>
	
	spi_transmit(MCP_WRITE);
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	43 d0       	rcall	.+134    	; 0x2d4 <spi_transmit>
	spi_transmit(addr);
 24e:	8d 2f       	mov	r24, r29
 250:	41 d0       	rcall	.+130    	; 0x2d4 <spi_transmit>
	spi_transmit(data);
 252:	8c 2f       	mov	r24, r28
 254:	3f d0       	rcall	.+126    	; 0x2d4 <spi_transmit>
	
	spi_deselect();
 256:	3c d0       	rcall	.+120    	; 0x2d0 <spi_deselect>
	
}
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <mcp2515_request_to_send>:

void mcp2515_request_to_send(int reg)
{
 25e:	cf 93       	push	r28
 260:	c8 2f       	mov	r28, r24
	spi_select();
 262:	34 d0       	rcall	.+104    	; 0x2cc <spi_select>
	
	spi_transmit(reg);
 264:	8c 2f       	mov	r24, r28
 266:	36 d0       	rcall	.+108    	; 0x2d4 <spi_transmit>
	
	spi_deselect();
 268:	33 d0       	rcall	.+102    	; 0x2d0 <spi_deselect>
}
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <mcp2515_bit_modify>:

void mcp2515_bit_modify(char addr, char mask_byte, char data)
{
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	18 2f       	mov	r17, r24
 276:	d6 2f       	mov	r29, r22
 278:	c4 2f       	mov	r28, r20
	spi_select();
 27a:	28 d0       	rcall	.+80     	; 0x2cc <spi_select>
	
	spi_transmit(MCP_BITMOD);
 27c:	85 e0       	ldi	r24, 0x05	; 5
 27e:	2a d0       	rcall	.+84     	; 0x2d4 <spi_transmit>
	spi_transmit(addr);
 280:	81 2f       	mov	r24, r17
 282:	28 d0       	rcall	.+80     	; 0x2d4 <spi_transmit>
	spi_transmit(mask_byte);
 284:	8d 2f       	mov	r24, r29
 286:	26 d0       	rcall	.+76     	; 0x2d4 <spi_transmit>
	spi_transmit(data);
 288:	8c 2f       	mov	r24, r28
 28a:	24 d0       	rcall	.+72     	; 0x2d4 <spi_transmit>
	
	spi_deselect();
 28c:	21 d0       	rcall	.+66     	; 0x2d0 <spi_deselect>
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	08 95       	ret

00000296 <mcp2515_reset>:

void mcp2515_reset()
{
	spi_select();
 296:	1a d0       	rcall	.+52     	; 0x2cc <spi_select>
	
	spi_transmit(MCP_RESET);
 298:	80 ec       	ldi	r24, 0xC0	; 192
 29a:	1c d0       	rcall	.+56     	; 0x2d4 <spi_transmit>
	
	spi_deselect();
 29c:	19 c0       	rjmp	.+50     	; 0x2d0 <spi_deselect>
 29e:	08 95       	ret

000002a0 <mcp2515_read_status>:
}

char mcp2515_read_status()
{
 2a0:	cf 93       	push	r28
	char output;
	spi_select();
 2a2:	14 d0       	rcall	.+40     	; 0x2cc <spi_select>
	spi_transmit(MCP_READ);
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	16 d0       	rcall	.+44     	; 0x2d4 <spi_transmit>
	spi_transmit(MCP_CANSTAT);
 2a8:	8e e0       	ldi	r24, 0x0E	; 14
 2aa:	14 d0       	rcall	.+40     	; 0x2d4 <spi_transmit>
	output = spi_receive();
 2ac:	18 d0       	rcall	.+48     	; 0x2de <spi_receive>
 2ae:	c8 2f       	mov	r28, r24
	
	spi_deselect();
 2b0:	0f d0       	rcall	.+30     	; 0x2d0 <spi_deselect>
	return output;
}
 2b2:	8c 2f       	mov	r24, r28
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <mcp2515_init>:
#include "spi_control.h"
#include <stdio.h>

void mcp2515_init(){
	char status;
	spi_init();
 2b8:	16 d0       	rcall	.+44     	; 0x2e6 <spi_init>
	mcp2515_reset();
 2ba:	ed df       	rcall	.-38     	; 0x296 <mcp2515_reset>
	
	status = mcp2515_read_status();
 2bc:	f1 df       	rcall	.-30     	; 0x2a0 <mcp2515_read_status>
	if ((status & MODE_MASK) != MODE_CONFIG)
 2be:	80 7e       	andi	r24, 0xE0	; 224
 2c0:	80 38       	cpi	r24, 0x80	; 128
 2c2:	19 f0       	breq	.+6      	; 0x2ca <mcp2515_init+0x12>
	{
		printf("MCP2515 is not in config mode!\n");
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	92 e0       	ldi	r25, 0x02	; 2
 2c8:	14 c0       	rjmp	.+40     	; 0x2f2 <puts>
 2ca:	08 95       	ret

000002cc <spi_select>:
#include "spi_control.h"
#include <stdio.h>

void spi_select()
{
	PORTB &= ~(1<<PB0);
 2cc:	28 98       	cbi	0x05, 0	; 5
 2ce:	08 95       	ret

000002d0 <spi_deselect>:
}

void spi_deselect()
{
	PORTB |= (1<<PB0);
 2d0:	28 9a       	sbi	0x05, 0	; 5
 2d2:	08 95       	ret

000002d4 <spi_transmit>:


void spi_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
 2d4:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 2d6:	0d b4       	in	r0, 0x2d	; 45
 2d8:	07 fe       	sbrs	r0, 7
 2da:	fd cf       	rjmp	.-6      	; 0x2d6 <spi_transmit+0x2>
	;
}
 2dc:	08 95       	ret

000002de <spi_receive>:
	PORTB |= (1<<PB0);
}

char spi_receive()
{
	spi_transmit(0);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	f9 df       	rcall	.-14     	; 0x2d4 <spi_transmit>
	return SPDR;
 2e2:	8e b5       	in	r24, 0x2e	; 46
}
 2e4:	08 95       	ret

000002e6 <spi_init>:
}


void spi_init(){
	/* Set MOSI,SCK and SS output, all others input */
	DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<DD_SS);    
 2e6:	84 b1       	in	r24, 0x04	; 4
 2e8:	87 60       	ori	r24, 0x07	; 7
 2ea:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 2ec:	81 e5       	ldi	r24, 0x51	; 81
 2ee:	8c bd       	out	0x2c, r24	; 44
 2f0:	08 95       	ret

000002f2 <puts>:
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	e0 91 22 02 	lds	r30, 0x0222
 2fe:	f0 91 23 02 	lds	r31, 0x0223
 302:	23 81       	ldd	r18, Z+3	; 0x03
 304:	21 ff       	sbrs	r18, 1
 306:	1b c0       	rjmp	.+54     	; 0x33e <puts+0x4c>
 308:	ec 01       	movw	r28, r24
 30a:	00 e0       	ldi	r16, 0x00	; 0
 30c:	10 e0       	ldi	r17, 0x00	; 0
 30e:	89 91       	ld	r24, Y+
 310:	60 91 22 02 	lds	r22, 0x0222
 314:	70 91 23 02 	lds	r23, 0x0223
 318:	db 01       	movw	r26, r22
 31a:	18 96       	adiw	r26, 0x08	; 8
 31c:	ed 91       	ld	r30, X+
 31e:	fc 91       	ld	r31, X
 320:	19 97       	sbiw	r26, 0x09	; 9
 322:	88 23       	and	r24, r24
 324:	31 f0       	breq	.+12     	; 0x332 <puts+0x40>
 326:	19 95       	eicall
 328:	89 2b       	or	r24, r25
 32a:	89 f3       	breq	.-30     	; 0x30e <puts+0x1c>
 32c:	0f ef       	ldi	r16, 0xFF	; 255
 32e:	1f ef       	ldi	r17, 0xFF	; 255
 330:	ee cf       	rjmp	.-36     	; 0x30e <puts+0x1c>
 332:	8a e0       	ldi	r24, 0x0A	; 10
 334:	19 95       	eicall
 336:	89 2b       	or	r24, r25
 338:	11 f4       	brne	.+4      	; 0x33e <puts+0x4c>
 33a:	c8 01       	movw	r24, r16
 33c:	02 c0       	rjmp	.+4      	; 0x342 <puts+0x50>
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	9f ef       	ldi	r25, 0xFF	; 255
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	08 95       	ret

0000034c <_exit>:
 34c:	f8 94       	cli

0000034e <__stop_program>:
 34e:	ff cf       	rjmp	.-2      	; 0x34e <__stop_program>
