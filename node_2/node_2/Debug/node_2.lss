
node_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800200  000014fe  00001592  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800250  00800250  000015e2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015e2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000210  00000000  00000000  0000163e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016a4  00000000  00000000  0000184e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bd9  00000000  00000000  00002ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001bb9  00000000  00000000  00003acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000044c  00000000  00000000  00005684  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000a1de  00000000  00000000  00005ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ad6  00000000  00000000  0000fcae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  00010784  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004383  00000000  00000000  0001091c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee ef       	ldi	r30, 0xFE	; 254
      fc:	f4 e1       	ldi	r31, 0x14	; 20
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 35       	cpi	r26, 0x50	; 80
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a0 e5       	ldi	r26, 0x50	; 80
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a9 36       	cpi	r26, 0x69	; 105
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	3b d0       	rcall	.+118    	; 0x196 <main>
     120:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <init_solenoid>:
	}
}

void init_solenoid(void)
{
	DDRC |= (1 << PC0);
     126:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= (1 << PC0);
     128:	40 9a       	sbi	0x08, 0	; 8
     12a:	08 95       	ret

0000012c <solenoid_shoot>:
}

void solenoid_shoot(void)
{
	PORTC &= ~(1 << PC0);
     12c:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12e:	2f e7       	ldi	r18, 0x7F	; 127
     130:	89 ea       	ldi	r24, 0xA9	; 169
     132:	93 e0       	ldi	r25, 0x03	; 3
     134:	21 50       	subi	r18, 0x01	; 1
     136:	80 40       	sbci	r24, 0x00	; 0
     138:	90 40       	sbci	r25, 0x00	; 0
     13a:	e1 f7       	brne	.-8      	; 0x134 <solenoid_shoot+0x8>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <solenoid_shoot+0x12>
     13e:	00 00       	nop
	_delay_ms(75);
	PORTC |= (1 << PC0);
     140:	40 9a       	sbi	0x08, 0	; 8
     142:	08 95       	ret

00000144 <handle_message>:
	}
}


void handle_message(can_message_t* message)
{
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	ec 01       	movw	r28, r24
	switch (message->id)
     14a:	88 81       	ld	r24, Y
     14c:	80 37       	cpi	r24, 0x70	; 112
     14e:	29 f0       	breq	.+10     	; 0x15a <handle_message+0x16>
     150:	83 37       	cpi	r24, 0x73	; 115
     152:	d9 f0       	breq	.+54     	; 0x18a <handle_message+0x46>
     154:	8a 36       	cpi	r24, 0x6A	; 106
     156:	d1 f4       	brne	.+52     	; 0x18c <handle_message+0x48>
     158:	03 c0       	rjmp	.+6      	; 0x160 <handle_message+0x1c>
	{
		case 'p' :				// Print
			can_print(message);
     15a:	ce 01       	movw	r24, r28
     15c:	dc d1       	rcall	.+952    	; 0x516 <can_print>
			break;
     15e:	18 c0       	rjmp	.+48     	; 0x190 <handle_message+0x4c>
		case 'j' :
			motor_drive( message->data[0] );				//	X - value
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	39 d0       	rcall	.+114    	; 0x1d6 <motor_drive>
			servo_write( message->data[1] * 5.0 + 1450 );	//	Y - value
     164:	6b 81       	ldd	r22, Y+3	; 0x03
     166:	77 27       	eor	r23, r23
     168:	67 fd       	sbrc	r22, 7
     16a:	70 95       	com	r23
     16c:	87 2f       	mov	r24, r23
     16e:	97 2f       	mov	r25, r23
     170:	1d d4       	rcall	.+2106   	; 0x9ac <__floatsisf>
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	40 ea       	ldi	r20, 0xA0	; 160
     178:	50 e4       	ldi	r21, 0x40	; 64
     17a:	cc d4       	rcall	.+2456   	; 0xb14 <__mulsf3>
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e4       	ldi	r19, 0x40	; 64
     180:	45 eb       	ldi	r20, 0xB5	; 181
     182:	54 e4       	ldi	r21, 0x44	; 68
     184:	10 d3       	rcall	.+1568   	; 0x7a6 <__addsf3>
     186:	ad d0       	rcall	.+346    	; 0x2e2 <servo_write>
			break;
     188:	03 c0       	rjmp	.+6      	; 0x190 <handle_message+0x4c>
		case 's' :
			solenoid_shoot();
     18a:	d0 df       	rcall	.-96     	; 0x12c <solenoid_shoot>
			
		
		default:
			can_print(message);
     18c:	ce 01       	movw	r24, r28
     18e:	c3 d1       	rcall	.+902    	; 0x516 <can_print>
			break;
	}
}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <main>:

void handle_message(can_message_t* message);

int main (void)
{
	can_init();
     196:	28 d1       	rcall	.+592    	; 0x3e8 <can_init>
	servo_init();
     198:	80 d0       	rcall	.+256    	; 0x29a <servo_init>
	init_ADC();
     19a:	d9 d0       	rcall	.+434    	; 0x34e <init_ADC>
	USART_init(MYUBRR);
     19c:	87 e6       	ldi	r24, 0x67	; 103
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	f1 d2       	rcall	.+1506   	; 0x784 <USART_init>
	motor_init();
     1a2:	39 d0       	rcall	.+114    	; 0x216 <motor_init>
	init_solenoid();
     1a4:	c0 df       	rcall	.-128    	; 0x126 <init_solenoid>

	DDRF = 0xFF; // MJ1 output
     1a6:	8f ef       	ldi	r24, 0xFF	; 255
     1a8:	80 bb       	out	0x10, r24	; 16
		if (can_get_message(&message) == 1)
		{
			handle_message(&message);
		}
		check_and_report_goal();
		printf("enc: %d\n", encoder_read());
     1aa:	c0 e1       	ldi	r28, 0x10	; 16
     1ac:	d2 e0       	ldi	r29, 0x02	; 2
	{

		
		
		/*    TESTING    */
		if (can_get_message(&message) == 1)
     1ae:	84 e5       	ldi	r24, 0x54	; 84
     1b0:	92 e0       	ldi	r25, 0x02	; 2
     1b2:	8b d1       	rcall	.+790    	; 0x4ca <can_get_message>
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	19 f4       	brne	.+6      	; 0x1be <main+0x28>
		{
			handle_message(&message);
     1b8:	84 e5       	ldi	r24, 0x54	; 84
     1ba:	92 e0       	ldi	r25, 0x02	; 2
     1bc:	c3 df       	rcall	.-122    	; 0x144 <handle_message>
		}
		check_and_report_goal();
     1be:	e5 d0       	rcall	.+458    	; 0x38a <check_and_report_goal>
		printf("enc: %d\n", encoder_read());
     1c0:	56 d0       	rcall	.+172    	; 0x26e <encoder_read>
     1c2:	9f 93       	push	r25
     1c4:	8f 93       	push	r24
     1c6:	df 93       	push	r29
     1c8:	cf 93       	push	r28
     1ca:	78 d5       	rcall	.+2800   	; 0xcbc <printf>
	}
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	ec cf       	rjmp	.-40     	; 0x1ae <main+0x18>

000001d6 <motor_drive>:


void motor_drive( char joystick_x )
{
	// Set direction
	if(joystick_x < 0){
     1d6:	88 23       	and	r24, r24
     1d8:	14 f4       	brge	.+4      	; 0x1de <motor_drive+0x8>
		PORTF &= ~(1 << PF3);
     1da:	8b 98       	cbi	0x11, 3	; 17
     1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <motor_drive+0xa>
	}
	else{
		PORTF |= (1 << PF3);
     1de:	8b 9a       	sbi	0x11, 3	; 17
	}
	// Set speed
	motor_speed = (char)((abs((float)joystick_x)*150)/100);
     1e0:	28 2f       	mov	r18, r24
     1e2:	33 27       	eor	r19, r19
     1e4:	27 fd       	sbrc	r18, 7
     1e6:	30 95       	com	r19
     1e8:	33 23       	and	r19, r19
     1ea:	1c f4       	brge	.+6      	; 0x1f2 <motor_drive+0x1c>
     1ec:	31 95       	neg	r19
     1ee:	21 95       	neg	r18
     1f0:	31 09       	sbc	r19, r1
     1f2:	46 e9       	ldi	r20, 0x96	; 150
     1f4:	42 9f       	mul	r20, r18
     1f6:	c0 01       	movw	r24, r0
     1f8:	43 9f       	mul	r20, r19
     1fa:	90 0d       	add	r25, r0
     1fc:	11 24       	eor	r1, r1
     1fe:	64 e6       	ldi	r22, 0x64	; 100
     200:	70 e0       	ldi	r23, 0x00	; 0
     202:	eb d4       	rcall	.+2518   	; 0xbda <__divmodhi4>
     204:	60 93 5e 02 	sts	0x025E, r22
	i2c_transmit(0x50, &motor_speed,1);
     208:	41 e0       	ldi	r20, 0x01	; 1
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	6e e5       	ldi	r22, 0x5E	; 94
     20e:	72 e0       	ldi	r23, 0x02	; 2
     210:	80 e5       	ldi	r24, 0x50	; 80
     212:	76 c2       	rjmp	.+1260   	; 0x700 <i2c_transmit>
     214:	08 95       	ret

00000216 <motor_init>:
uint8_t	reverse(uint8_t x);

void motor_init(void)
{
	
	i2c_init();
     216:	39 d2       	rcall	.+1138   	; 0x68a <i2c_init>
	DDRF = 0xff;
     218:	8f ef       	ldi	r24, 0xFF	; 255
     21a:	80 bb       	out	0x10, r24	; 16
	DDRK = 0x00;
     21c:	10 92 07 01 	sts	0x0107, r1
	
	PORTF |= (1 << PF4); // Enable motor
     220:	8c 9a       	sbi	0x11, 4	; 17
	
	//Move to known reference point
	motor_drive(-50);
     222:	8e ec       	ldi	r24, 0xCE	; 206
     224:	d8 df       	rcall	.-80     	; 0x1d6 <motor_drive>
     226:	2f ef       	ldi	r18, 0xFF	; 255
     228:	8d e2       	ldi	r24, 0x2D	; 45
     22a:	92 e2       	ldi	r25, 0x22	; 34
     22c:	21 50       	subi	r18, 0x01	; 1
     22e:	80 40       	sbci	r24, 0x00	; 0
     230:	90 40       	sbci	r25, 0x00	; 0
     232:	e1 f7       	brne	.-8      	; 0x22c <motor_init+0x16>
     234:	00 c0       	rjmp	.+0      	; 0x236 <motor_init+0x20>
     236:	00 00       	nop
	_delay_ms(700);
	motor_drive(0);
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	cd df       	rcall	.-102    	; 0x1d6 <motor_drive>
	
	//Toggle reset encoder
	PORTF &= ~(1 << PF6);
     23c:	8e 98       	cbi	0x11, 6	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23e:	2a e1       	ldi	r18, 0x1A	; 26
     240:	2a 95       	dec	r18
     242:	f1 f7       	brne	.-4      	; 0x240 <motor_init+0x2a>
     244:	00 c0       	rjmp	.+0      	; 0x246 <motor_init+0x30>
	_delay_us(5);
	PORTF |= (1 << PF6);
     246:	8e 9a       	sbi	0x11, 6	; 17
     248:	08 95       	ret

0000024a <reverse>:



uint8_t	reverse(uint8_t x)
{
	x = (((x & 0xaa) >> 1) | ((x & 0x55) << 1));
     24a:	28 2f       	mov	r18, r24
     24c:	25 75       	andi	r18, 0x55	; 85
     24e:	22 0f       	add	r18, r18
     250:	98 2f       	mov	r25, r24
     252:	9a 7a       	andi	r25, 0xAA	; 170
     254:	96 95       	lsr	r25
     256:	92 2b       	or	r25, r18
	x = (((x & 0xcc) >> 2) | ((x & 0x33) << 2));
     258:	29 2f       	mov	r18, r25
     25a:	23 73       	andi	r18, 0x33	; 51
     25c:	22 0f       	add	r18, r18
     25e:	22 0f       	add	r18, r18
     260:	89 2f       	mov	r24, r25
     262:	8c 7c       	andi	r24, 0xCC	; 204
     264:	86 95       	lsr	r24
     266:	86 95       	lsr	r24
     268:	82 2b       	or	r24, r18
	x = (((x & 0xf0) >> 4) | ((x & 0x0f) << 4));
	return x;

     26a:	82 95       	swap	r24
     26c:	08 95       	ret

0000026e <encoder_read>:
	PORTF |= (1 << PF6);

}

uint16_t encoder_read( void )
{
     26e:	cf 93       	push	r28
	uint8_t high,low;
	PORTF &= ~(1 << PF7); // !OE = 0
     270:	8f 98       	cbi	0x11, 7	; 17
	PORTF &= ~(1 << PF5); // SET = 0 // For MSB
     272:	8d 98       	cbi	0x11, 5	; 17
     274:	8a e6       	ldi	r24, 0x6A	; 106
     276:	8a 95       	dec	r24
     278:	f1 f7       	brne	.-4      	; 0x276 <encoder_read+0x8>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <encoder_read+0xe>
	_delay_us(20);
	high = PINK;
     27c:	80 91 06 01 	lds	r24, 0x0106
	
	PORTF |= (1 << PF5);	//SET = 1 // For LSB
     280:	8d 9a       	sbi	0x11, 5	; 17
     282:	9a e6       	ldi	r25, 0x6A	; 106
     284:	9a 95       	dec	r25
     286:	f1 f7       	brne	.-4      	; 0x284 <encoder_read+0x16>
     288:	00 c0       	rjmp	.+0      	; 0x28a <encoder_read+0x1c>
	_delay_us(20); 
	low = PINK;
     28a:	c0 91 06 01 	lds	r28, 0x0106
	PORTF |= (1 << PF7); // !OE = 1
     28e:	8f 9a       	sbi	0x11, 7	; 17
	
	uint16_t out = (reverse(high) >> 8) + reverse(low);
     290:	8c 2f       	mov	r24, r28
     292:	db df       	rcall	.-74     	; 0x24a <reverse>
	return out;
}
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <servo_init>:
}

int us_to_compare(float us)
{
	return ( (us / 20000.0 ) * TOP_VALUE );
}
     29a:	e0 e8       	ldi	r30, 0x80	; 128
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	82 60       	ori	r24, 0x02	; 2
     2a2:	80 83       	st	Z, r24
     2a4:	a1 e8       	ldi	r26, 0x81	; 129
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	8c 91       	ld	r24, X
     2aa:	88 61       	ori	r24, 0x18	; 24
     2ac:	8c 93       	st	X, r24
     2ae:	8c 91       	ld	r24, X
     2b0:	82 60       	ori	r24, 0x02	; 2
     2b2:	8c 93       	st	X, r24
     2b4:	8c 91       	ld	r24, X
     2b6:	8a 7f       	andi	r24, 0xFA	; 250
     2b8:	8c 93       	st	X, r24
     2ba:	80 81       	ld	r24, Z
     2bc:	80 68       	ori	r24, 0x80	; 128
     2be:	80 83       	st	Z, r24
     2c0:	80 81       	ld	r24, Z
     2c2:	8f 7b       	andi	r24, 0xBF	; 191
     2c4:	80 83       	st	Z, r24
     2c6:	80 e4       	ldi	r24, 0x40	; 64
     2c8:	9c e9       	ldi	r25, 0x9C	; 156
     2ca:	90 93 87 00 	sts	0x0087, r25
     2ce:	80 93 86 00 	sts	0x0086, r24
     2d2:	88 e0       	ldi	r24, 0x08	; 8
     2d4:	97 e0       	ldi	r25, 0x07	; 7
     2d6:	90 93 89 00 	sts	0x0089, r25
     2da:	80 93 88 00 	sts	0x0088, r24
     2de:	25 9a       	sbi	0x04, 5	; 4
     2e0:	08 95       	ret

000002e2 <servo_write>:


void servo_write(float val)
{
     2e2:	cf 92       	push	r12
     2e4:	df 92       	push	r13
     2e6:	ef 92       	push	r14
     2e8:	ff 92       	push	r15
     2ea:	6b 01       	movw	r12, r22
     2ec:	7c 01       	movw	r14, r24
	if(val > 900.0 && val < 2050.0)
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	41 e6       	ldi	r20, 0x61	; 97
     2f4:	54 e4       	ldi	r21, 0x44	; 68
     2f6:	0a d4       	rcall	.+2068   	; 0xb0c <__gesf2>
     2f8:	18 16       	cp	r1, r24
     2fa:	24 f5       	brge	.+72     	; 0x344 <servo_write+0x62>
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e2       	ldi	r19, 0x20	; 32
     300:	40 e0       	ldi	r20, 0x00	; 0
     302:	55 e4       	ldi	r21, 0x45	; 69
     304:	c7 01       	movw	r24, r14
     306:	b6 01       	movw	r22, r12
     308:	b2 d2       	rcall	.+1380   	; 0x86e <__cmpsf2>
     30a:	88 23       	and	r24, r24
     30c:	dc f4       	brge	.+54     	; 0x344 <servo_write+0x62>

}

int us_to_compare(float us)
{
	return ( (us / 20000.0 ) * TOP_VALUE );
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e4       	ldi	r19, 0x40	; 64
     312:	4c e9       	ldi	r20, 0x9C	; 156
     314:	56 e4       	ldi	r21, 0x46	; 70
     316:	c7 01       	movw	r24, r14
     318:	b6 01       	movw	r22, r12
     31a:	ad d2       	rcall	.+1370   	; 0x876 <__divsf3>
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	34 e2       	ldi	r19, 0x24	; 36
     320:	44 e7       	ldi	r20, 0x74	; 116
     322:	5b e4       	ldi	r21, 0x4B	; 75
     324:	f7 d3       	rcall	.+2030   	; 0xb14 <__mulsf3>
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	5e e3       	ldi	r21, 0x3E	; 62
     32e:	f2 d3       	rcall	.+2020   	; 0xb14 <__mulsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	48 e4       	ldi	r20, 0x48	; 72
     336:	52 e4       	ldi	r21, 0x42	; 66
     338:	9e d2       	rcall	.+1340   	; 0x876 <__divsf3>
     33a:	05 d3       	rcall	.+1546   	; 0x946 <__fixsfsi>

void servo_write(float val)
{
	if(val > 900.0 && val < 2050.0)
	{
		OCR1A = us_to_compare(val);
     33c:	70 93 89 00 	sts	0x0089, r23
     340:	60 93 88 00 	sts	0x0088, r22
	}
}
     344:	ff 90       	pop	r15
     346:	ef 90       	pop	r14
     348:	df 90       	pop	r13
     34a:	cf 90       	pop	r12
     34c:	08 95       	ret

0000034e <init_ADC>:
int recent_goal_counter = 0;

can_message_t goal_msg = {'g',0};

void init_ADC(){
	DDRF &= ~(1 << PF0);
     34e:	80 98       	cbi	0x10, 0	; 16
	//ADMUX &= 0xe0;
	ADCSRA |= (1 << ADEN) | (1 << ADATE)  | (1 << ADSC) | (1 << ADPS2) |(1 << ADIE)| (1 << ADPS1) | (1 << ADPS0);
     350:	ea e7       	ldi	r30, 0x7A	; 122
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	8f 6e       	ori	r24, 0xEF	; 239
     358:	80 83       	st	Z, r24
	ADMUX  |= (1 <<REFS0) | (1 <<ADLAR);
     35a:	ec e7       	ldi	r30, 0x7C	; 124
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 81       	ld	r24, Z
     360:	80 66       	ori	r24, 0x60	; 96
     362:	80 83       	st	Z, r24
     364:	08 95       	ret

00000366 <ADC_read>:

uint8_t ADC_read(){
	int mean = 0; int i = 0;
	int nsamples = 4;
	for (i = 0; i <nsamples; i++){
		mean = mean + ADCH;
     366:	e9 e7       	ldi	r30, 0x79	; 121
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	20 81       	ld	r18, Z
     36c:	80 81       	ld	r24, Z
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	82 0f       	add	r24, r18
     372:	91 1d       	adc	r25, r1
     374:	20 81       	ld	r18, Z
     376:	82 0f       	add	r24, r18
     378:	91 1d       	adc	r25, r1
     37a:	20 81       	ld	r18, Z
     37c:	82 0f       	add	r24, r18
     37e:	91 1d       	adc	r25, r1
	}
	mean = mean/nsamples;
     380:	95 95       	asr	r25
     382:	87 95       	ror	r24
     384:	95 95       	asr	r25
     386:	87 95       	ror	r24
	return mean;
}
     388:	08 95       	ret

0000038a <check_and_report_goal>:

void check_and_report_goal( void ){
	int threshold = 10;
	
	if (recent_goal == 0)
     38a:	80 91 52 02 	lds	r24, 0x0252
     38e:	90 91 53 02 	lds	r25, 0x0253
     392:	89 2b       	or	r24, r25
     394:	79 f4       	brne	.+30     	; 0x3b4 <check_and_report_goal+0x2a>
	{
		goal_msg.data[0] = ADC_read();
     396:	e7 df       	rcall	.-50     	; 0x366 <ADC_read>
     398:	80 93 08 02 	sts	0x0208, r24
		if(goal_msg.data[0] < threshold)
     39c:	8a 30       	cpi	r24, 0x0A	; 10
     39e:	1c f5       	brge	.+70     	; 0x3e6 <check_and_report_goal+0x5c>
		{
			recent_goal = 1;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	90 93 53 02 	sts	0x0253, r25
     3a8:	80 93 52 02 	sts	0x0252, r24
			can_message_send(&goal_msg);		
     3ac:	86 e0       	ldi	r24, 0x06	; 6
     3ae:	92 e0       	ldi	r25, 0x02	; 2
     3b0:	29 c0       	rjmp	.+82     	; 0x404 <can_message_send>
     3b2:	08 95       	ret
		}
	}
	else
	{
		recent_goal_counter += 1;
     3b4:	80 91 50 02 	lds	r24, 0x0250
     3b8:	90 91 51 02 	lds	r25, 0x0251
     3bc:	01 96       	adiw	r24, 0x01	; 1
		if (recent_goal_counter > 1000/40)
     3be:	8a 31       	cpi	r24, 0x1A	; 26
     3c0:	91 05       	cpc	r25, r1
     3c2:	2c f4       	brge	.+10     	; 0x3ce <check_and_report_goal+0x44>
			can_message_send(&goal_msg);		
		}
	}
	else
	{
		recent_goal_counter += 1;
     3c4:	90 93 51 02 	sts	0x0251, r25
     3c8:	80 93 50 02 	sts	0x0250, r24
     3cc:	08 95       	ret
		if (recent_goal_counter > 1000/40)
		{
			recent_goal_counter = 0;
     3ce:	10 92 51 02 	sts	0x0251, r1
     3d2:	10 92 50 02 	sts	0x0250, r1
			if (ADC_read() > threshold){
     3d6:	c7 df       	rcall	.-114    	; 0x366 <ADC_read>
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0b 97       	sbiw	r24, 0x0b	; 11
     3dc:	24 f0       	brlt	.+8      	; 0x3e6 <check_and_report_goal+0x5c>
				recent_goal = 0;
     3de:	10 92 53 02 	sts	0x0253, r1
     3e2:	10 92 52 02 	sts	0x0252, r1
     3e6:	08 95       	ret

000003e8 <can_init>:


void can_init()
{
	
	mcp2515_init();
     3e8:	33 d1       	rcall	.+614    	; 0x650 <mcp2515_init>
	
	mcp2515_bit_modify(MCP_RXF0SIDH, 0xff , 0x00);
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	6f ef       	ldi	r22, 0xFF	; 255
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	0a d1       	rcall	.+532    	; 0x606 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXF0SIDL, 0xE0 , 0x00);
     3f2:	40 e0       	ldi	r20, 0x00	; 0
     3f4:	60 ee       	ldi	r22, 0xE0	; 224
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	06 d1       	rcall	.+524    	; 0x606 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, 0xE0 , MODE_NORMAL);
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	60 ee       	ldi	r22, 0xE0	; 224
     3fe:	8f e0       	ldi	r24, 0x0F	; 15
     400:	02 c1       	rjmp	.+516    	; 0x606 <mcp2515_bit_modify>
     402:	08 95       	ret

00000404 <can_message_send>:
	
}


void can_message_send(can_message_t *message)
{
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	7c 01       	movw	r14, r24
	int i;
	
	// ID
	mcp2515_write(MCP_TXB0CTRL + 1,message->id);
     412:	fc 01       	movw	r30, r24
     414:	60 81       	ld	r22, Z
     416:	81 e3       	ldi	r24, 0x31	; 49
     418:	df d0       	rcall	.+446    	; 0x5d8 <mcp2515_write>
	mcp2515_write(0x32,0x00);
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	82 e3       	ldi	r24, 0x32	; 50
     41e:	dc d0       	rcall	.+440    	; 0x5d8 <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
     420:	f7 01       	movw	r30, r14
     422:	61 81       	ldd	r22, Z+1	; 0x01
     424:	85 e3       	ldi	r24, 0x35	; 53
     426:	d8 d0       	rcall	.+432    	; 0x5d8 <mcp2515_write>
	
	// Data
	for (i = 0; i< message->length; i++){
     428:	f7 01       	movw	r30, r14
     42a:	81 81       	ldd	r24, Z+1	; 0x01
     42c:	18 16       	cp	r1, r24
     42e:	a4 f4       	brge	.+40     	; 0x458 <can_message_send+0x54>
     430:	87 01       	movw	r16, r14
     432:	0e 5f       	subi	r16, 0xFE	; 254
     434:	1f 4f       	sbci	r17, 0xFF	; 255
     436:	c0 e0       	ldi	r28, 0x00	; 0
     438:	d0 e0       	ldi	r29, 0x00	; 0
		mcp2515_write(MCP_TXB0CTRL + 6 + i, (message->data[i]) );
     43a:	f8 01       	movw	r30, r16
     43c:	61 91       	ld	r22, Z+
     43e:	8f 01       	movw	r16, r30
     440:	8c 2f       	mov	r24, r28
     442:	8a 5c       	subi	r24, 0xCA	; 202
     444:	c9 d0       	rcall	.+402    	; 0x5d8 <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
	
	// Data
	for (i = 0; i< message->length; i++){
     446:	21 96       	adiw	r28, 0x01	; 1
     448:	f7 01       	movw	r30, r14
     44a:	21 81       	ldd	r18, Z+1	; 0x01
     44c:	33 27       	eor	r19, r19
     44e:	27 fd       	sbrc	r18, 7
     450:	30 95       	com	r19
     452:	c2 17       	cp	r28, r18
     454:	d3 07       	cpc	r29, r19
     456:	8c f3       	brlt	.-30     	; 0x43a <can_message_send+0x36>
		mcp2515_write(MCP_TXB0CTRL + 6 + i, (message->data[i]) );
	}
	
	mcp2515_request_to_send(MCP_RTS_TX0);
     458:	81 e8       	ldi	r24, 0x81	; 129
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	cc d0       	rcall	.+408    	; 0x5f6 <mcp2515_request_to_send>
}
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	08 95       	ret

0000046c <can_message_receive>:

void can_message_receive(can_message_t* message, int buffer)
{
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	8c 01       	movw	r16, r24
     47a:	e6 2e       	mov	r14, r22
	char i;
	
	// ID
	message->id = mcp2515_read(MCP_RXB0CTRL+buffer + 1);
     47c:	81 e6       	ldi	r24, 0x61	; 97
     47e:	86 0f       	add	r24, r22
     480:	9e d0       	rcall	.+316    	; 0x5be <mcp2515_read>
     482:	f8 01       	movw	r30, r16
     484:	80 83       	st	Z, r24
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
     486:	85 e6       	ldi	r24, 0x65	; 101
     488:	8e 0d       	add	r24, r14
     48a:	99 d0       	rcall	.+306    	; 0x5be <mcp2515_read>
     48c:	f8 01       	movw	r30, r16
     48e:	81 83       	std	Z+1, r24	; 0x01
	
	// Data
	for(i=0;i<message->length;i++)
     490:	18 16       	cp	r1, r24
     492:	a4 f4       	brge	.+40     	; 0x4bc <can_message_receive+0x50>
     494:	c0 e0       	ldi	r28, 0x00	; 0
     496:	d0 e0       	ldi	r29, 0x00	; 0
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
     498:	f6 e6       	ldi	r31, 0x66	; 102
     49a:	ef 0e       	add	r14, r31
     49c:	fc 2e       	mov	r15, r28
     49e:	8c 2f       	mov	r24, r28
     4a0:	8e 0d       	add	r24, r14
     4a2:	8d d0       	rcall	.+282    	; 0x5be <mcp2515_read>
     4a4:	f8 01       	movw	r30, r16
     4a6:	ec 0f       	add	r30, r28
     4a8:	f1 1d       	adc	r31, r1
     4aa:	c7 fd       	sbrc	r28, 7
     4ac:	fa 95       	dec	r31
     4ae:	82 83       	std	Z+2, r24	; 0x02
     4b0:	f3 94       	inc	r15
     4b2:	21 96       	adiw	r28, 0x01	; 1
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
	
	// Data
	for(i=0;i<message->length;i++)
     4b4:	f8 01       	movw	r30, r16
     4b6:	81 81       	ldd	r24, Z+1	; 0x01
     4b8:	f8 16       	cp	r15, r24
     4ba:	84 f3       	brlt	.-32     	; 0x49c <can_message_receive+0x30>
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
	}
	
}
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	08 95       	ret

000004ca <can_get_message>:

int can_get_message(can_message_t* message)
{
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	ec 01       	movw	r28, r24
	
	if ((mcp2515_read(MCP_CANINTF) & 0x01) == 0x01)
     4d0:	8c e2       	ldi	r24, 0x2C	; 44
     4d2:	75 d0       	rcall	.+234    	; 0x5be <mcp2515_read>
     4d4:	80 ff       	sbrs	r24, 0
     4d6:	0b c0       	rjmp	.+22     	; 0x4ee <can_get_message+0x24>
	{
		can_message_receive(message,0);
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	ce 01       	movw	r24, r28
     4de:	c6 df       	rcall	.-116    	; 0x46c <can_message_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x01,0x00);
     4e0:	40 e0       	ldi	r20, 0x00	; 0
     4e2:	61 e0       	ldi	r22, 0x01	; 1
     4e4:	8c e2       	ldi	r24, 0x2C	; 44
     4e6:	8f d0       	rcall	.+286    	; 0x606 <mcp2515_bit_modify>
		return 1;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	11 c0       	rjmp	.+34     	; 0x510 <can_get_message+0x46>
	}
	else if ((mcp2515_read(MCP_CANINTF) & 0x02) == 0x02)
     4ee:	8c e2       	ldi	r24, 0x2C	; 44
     4f0:	66 d0       	rcall	.+204    	; 0x5be <mcp2515_read>
     4f2:	81 ff       	sbrs	r24, 1
     4f4:	0b c0       	rjmp	.+22     	; 0x50c <can_get_message+0x42>
	{
		can_message_receive(message,1);
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	ce 01       	movw	r24, r28
     4fc:	b7 df       	rcall	.-146    	; 0x46c <can_message_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x02,0x00);
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	62 e0       	ldi	r22, 0x02	; 2
     502:	8c e2       	ldi	r24, 0x2C	; 44
     504:	80 d0       	rcall	.+256    	; 0x606 <mcp2515_bit_modify>
		return 1;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	02 c0       	rjmp	.+4      	; 0x510 <can_get_message+0x46>
	}
	else
	{
		return 0;
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <can_print>:


void can_print(can_message_t* msg)
{
     516:	cf 92       	push	r12
     518:	df 92       	push	r13
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	6c 01       	movw	r12, r24
	printf("ID: %c ,Length: %d, ",msg->id,msg->length);
     528:	fc 01       	movw	r30, r24
     52a:	21 81       	ldd	r18, Z+1	; 0x01
     52c:	82 2f       	mov	r24, r18
     52e:	99 27       	eor	r25, r25
     530:	87 fd       	sbrc	r24, 7
     532:	90 95       	com	r25
     534:	9f 93       	push	r25
     536:	2f 93       	push	r18
     538:	20 81       	ld	r18, Z
     53a:	82 2f       	mov	r24, r18
     53c:	99 27       	eor	r25, r25
     53e:	87 fd       	sbrc	r24, 7
     540:	90 95       	com	r25
     542:	9f 93       	push	r25
     544:	2f 93       	push	r18
     546:	89 e1       	ldi	r24, 0x19	; 25
     548:	92 e0       	ldi	r25, 0x02	; 2
     54a:	9f 93       	push	r25
     54c:	8f 93       	push	r24
     54e:	b6 d3       	rcall	.+1900   	; 0xcbc <printf>
	int i ;
	for (i=0; i<msg->length;i++)
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	f6 01       	movw	r30, r12
     55e:	81 81       	ldd	r24, Z+1	; 0x01
     560:	18 16       	cp	r1, r24
     562:	0c f5       	brge	.+66     	; 0x5a6 <can_print+0x90>
     564:	76 01       	movw	r14, r12
     566:	f2 e0       	ldi	r31, 0x02	; 2
     568:	ef 0e       	add	r14, r31
     56a:	f1 1c       	adc	r15, r1
     56c:	c0 e0       	ldi	r28, 0x00	; 0
     56e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("%i", msg->data[i]);
     570:	0e e2       	ldi	r16, 0x2E	; 46
     572:	12 e0       	ldi	r17, 0x02	; 2
     574:	f7 01       	movw	r30, r14
     576:	21 91       	ld	r18, Z+
     578:	7f 01       	movw	r14, r30
     57a:	82 2f       	mov	r24, r18
     57c:	99 27       	eor	r25, r25
     57e:	87 fd       	sbrc	r24, 7
     580:	90 95       	com	r25
     582:	9f 93       	push	r25
     584:	2f 93       	push	r18
     586:	1f 93       	push	r17
     588:	0f 93       	push	r16
     58a:	98 d3       	rcall	.+1840   	; 0xcbc <printf>

void can_print(can_message_t* msg)
{
	printf("ID: %c ,Length: %d, ",msg->id,msg->length);
	int i ;
	for (i=0; i<msg->length;i++)
     58c:	21 96       	adiw	r28, 0x01	; 1
     58e:	f6 01       	movw	r30, r12
     590:	21 81       	ldd	r18, Z+1	; 0x01
     592:	33 27       	eor	r19, r19
     594:	27 fd       	sbrc	r18, 7
     596:	30 95       	com	r19
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	c2 17       	cp	r28, r18
     5a2:	d3 07       	cpc	r29, r19
     5a4:	3c f3       	brlt	.-50     	; 0x574 <can_print+0x5e>
	{
		printf("%i", msg->data[i]);
	}
	printf("\n");
     5a6:	8a e0       	ldi	r24, 0x0A	; 10
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	99 d3       	rcall	.+1842   	; 0xcde <putchar>
}
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	cf 90       	pop	r12
     5bc:	08 95       	ret

000005be <mcp2515_read>:
		printf("MCP2515 is not in config mode!\n");
	}
	
	
}
char mcp2515_read (char addr){
     5be:	cf 93       	push	r28
     5c0:	c8 2f       	mov	r28, r24
	char result;
	
	spi_select();
     5c2:	50 d0       	rcall	.+160    	; 0x664 <spi_select>
	
	spi_transmit(MCP_READ);
     5c4:	83 e0       	ldi	r24, 0x03	; 3
     5c6:	52 d0       	rcall	.+164    	; 0x66c <spi_transmit>
	spi_transmit(addr);
     5c8:	8c 2f       	mov	r24, r28
     5ca:	50 d0       	rcall	.+160    	; 0x66c <spi_transmit>
	result = spi_receive();
     5cc:	54 d0       	rcall	.+168    	; 0x676 <spi_receive>
     5ce:	c8 2f       	mov	r28, r24
	
	spi_deselect();
     5d0:	4b d0       	rcall	.+150    	; 0x668 <spi_deselect>
	
	return result;
}
     5d2:	8c 2f       	mov	r24, r28
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <mcp2515_write>:

void mcp2515_write(char addr, char data)
{
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	d8 2f       	mov	r29, r24
     5de:	c6 2f       	mov	r28, r22
	spi_select();
     5e0:	41 d0       	rcall	.+130    	; 0x664 <spi_select>
	
	spi_transmit(MCP_WRITE);
     5e2:	82 e0       	ldi	r24, 0x02	; 2
     5e4:	43 d0       	rcall	.+134    	; 0x66c <spi_transmit>
	spi_transmit(addr);
     5e6:	8d 2f       	mov	r24, r29
     5e8:	41 d0       	rcall	.+130    	; 0x66c <spi_transmit>
	spi_transmit(data);
     5ea:	8c 2f       	mov	r24, r28
     5ec:	3f d0       	rcall	.+126    	; 0x66c <spi_transmit>
	
	spi_deselect();
     5ee:	3c d0       	rcall	.+120    	; 0x668 <spi_deselect>
	
}
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret

000005f6 <mcp2515_request_to_send>:

void mcp2515_request_to_send(int reg)
{
     5f6:	cf 93       	push	r28
     5f8:	c8 2f       	mov	r28, r24
	spi_select();
     5fa:	34 d0       	rcall	.+104    	; 0x664 <spi_select>
	
	spi_transmit(reg);
     5fc:	8c 2f       	mov	r24, r28
     5fe:	36 d0       	rcall	.+108    	; 0x66c <spi_transmit>
	
	spi_deselect();
     600:	33 d0       	rcall	.+102    	; 0x668 <spi_deselect>
}
     602:	cf 91       	pop	r28
     604:	08 95       	ret

00000606 <mcp2515_bit_modify>:

void mcp2515_bit_modify(char addr, char mask_byte, char data)
{
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	18 2f       	mov	r17, r24
     60e:	d6 2f       	mov	r29, r22
     610:	c4 2f       	mov	r28, r20
	spi_select();
     612:	28 d0       	rcall	.+80     	; 0x664 <spi_select>
	
	spi_transmit(MCP_BITMOD);
     614:	85 e0       	ldi	r24, 0x05	; 5
     616:	2a d0       	rcall	.+84     	; 0x66c <spi_transmit>
	spi_transmit(addr);
     618:	81 2f       	mov	r24, r17
     61a:	28 d0       	rcall	.+80     	; 0x66c <spi_transmit>
	spi_transmit(mask_byte);
     61c:	8d 2f       	mov	r24, r29
     61e:	26 d0       	rcall	.+76     	; 0x66c <spi_transmit>
	spi_transmit(data);
     620:	8c 2f       	mov	r24, r28
     622:	24 d0       	rcall	.+72     	; 0x66c <spi_transmit>
	
	spi_deselect();
     624:	21 d0       	rcall	.+66     	; 0x668 <spi_deselect>
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	08 95       	ret

0000062e <mcp2515_reset>:

void mcp2515_reset()
{
	spi_select();
     62e:	1a d0       	rcall	.+52     	; 0x664 <spi_select>
	
	spi_transmit(MCP_RESET);
     630:	80 ec       	ldi	r24, 0xC0	; 192
     632:	1c d0       	rcall	.+56     	; 0x66c <spi_transmit>
	
	spi_deselect();
     634:	19 c0       	rjmp	.+50     	; 0x668 <spi_deselect>
     636:	08 95       	ret

00000638 <mcp2515_read_status>:
}

char mcp2515_read_status()
{
     638:	cf 93       	push	r28
	char output;
	spi_select();
     63a:	14 d0       	rcall	.+40     	; 0x664 <spi_select>
	spi_transmit(MCP_READ);
     63c:	83 e0       	ldi	r24, 0x03	; 3
     63e:	16 d0       	rcall	.+44     	; 0x66c <spi_transmit>
	spi_transmit(MCP_CANSTAT);
     640:	8e e0       	ldi	r24, 0x0E	; 14
     642:	14 d0       	rcall	.+40     	; 0x66c <spi_transmit>
	output = spi_receive();
     644:	18 d0       	rcall	.+48     	; 0x676 <spi_receive>
     646:	c8 2f       	mov	r28, r24
	
	spi_deselect();
     648:	0f d0       	rcall	.+30     	; 0x668 <spi_deselect>
	return output;
}
     64a:	8c 2f       	mov	r24, r28
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <mcp2515_init>:
#include "spi_control.h"
#include <stdio.h>

void mcp2515_init(){
	char status;
	spi_init();
     650:	16 d0       	rcall	.+44     	; 0x67e <spi_init>
	mcp2515_reset();
     652:	ed df       	rcall	.-38     	; 0x62e <mcp2515_reset>
	
	status = mcp2515_read_status();
     654:	f1 df       	rcall	.-30     	; 0x638 <mcp2515_read_status>
	if ((status & MODE_MASK) != MODE_CONFIG)
     656:	80 7e       	andi	r24, 0xE0	; 224
     658:	80 38       	cpi	r24, 0x80	; 128
     65a:	19 f0       	breq	.+6      	; 0x662 <mcp2515_init+0x12>
	{
		printf("MCP2515 is not in config mode!\n");
     65c:	81 e3       	ldi	r24, 0x31	; 49
     65e:	92 e0       	ldi	r25, 0x02	; 2
     660:	43 c3       	rjmp	.+1670   	; 0xce8 <puts>
     662:	08 95       	ret

00000664 <spi_select>:
#include "spi_control.h"
#include <stdio.h>

void spi_select()
{
	PORTB &= ~(1<<PB0);
     664:	28 98       	cbi	0x05, 0	; 5
     666:	08 95       	ret

00000668 <spi_deselect>:
}

void spi_deselect()
{
	PORTB |= (1<<PB0);
     668:	28 9a       	sbi	0x05, 0	; 5
     66a:	08 95       	ret

0000066c <spi_transmit>:


void spi_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     66c:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     66e:	0d b4       	in	r0, 0x2d	; 45
     670:	07 fe       	sbrs	r0, 7
     672:	fd cf       	rjmp	.-6      	; 0x66e <spi_transmit+0x2>
	;
}
     674:	08 95       	ret

00000676 <spi_receive>:
	PORTB |= (1<<PB0);
}

char spi_receive()
{
	spi_transmit(0);
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	f9 df       	rcall	.-14     	; 0x66c <spi_transmit>
	return SPDR;
     67a:	8e b5       	in	r24, 0x2e	; 46
}
     67c:	08 95       	ret

0000067e <spi_init>:
}


void spi_init(){
	/* Set MOSI,SCK and SS output, all others input */
	DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<DD_SS);    
     67e:	84 b1       	in	r24, 0x04	; 4
     680:	87 60       	ori	r24, 0x07	; 7
     682:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     684:	81 e5       	ldi	r24, 0x51	; 81
     686:	8c bd       	out	0x2c, r24	; 44
     688:	08 95       	ret

0000068a <i2c_init>:



void i2c_init( void )
{
	TWBR = 0x0C; // Baud
     68a:	8c e0       	ldi	r24, 0x0C	; 12
     68c:	80 93 b8 00 	sts	0x00B8, r24
     690:	08 95       	ret

00000692 <i2c_start>:


char i2c_start(char address)
{
	// reset TWI control register
	TWCR = 0;
     692:	ec eb       	ldi	r30, 0xBC	; 188
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	10 82       	st	Z, r1
	// transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     698:	94 ea       	ldi	r25, 0xA4	; 164
     69a:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     69c:	90 81       	ld	r25, Z
     69e:	99 23       	and	r25, r25
     6a0:	ec f7       	brge	.-6      	; 0x69c <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     6a2:	90 91 b9 00 	lds	r25, 0x00B9
     6a6:	98 7f       	andi	r25, 0xF8	; 248
     6a8:	98 30       	cpi	r25, 0x08	; 8
     6aa:	a1 f4       	brne	.+40     	; 0x6d4 <i2c_start+0x42>
	
	// load slave address into data register
	TWDR = address;
     6ac:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     6b0:	84 e8       	ldi	r24, 0x84	; 132
     6b2:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     6b6:	ec eb       	ldi	r30, 0xBC	; 188
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	80 81       	ld	r24, Z
     6bc:	88 23       	and	r24, r24
     6be:	ec f7       	brge	.-6      	; 0x6ba <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     6c0:	90 91 b9 00 	lds	r25, 0x00B9
     6c4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     6c6:	98 31       	cpi	r25, 0x18	; 24
     6c8:	39 f0       	breq	.+14     	; 0x6d8 <i2c_start+0x46>
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 34       	cpi	r25, 0x40	; 64
     6ce:	29 f4       	brne	.+10     	; 0x6da <i2c_start+0x48>
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
}
     6da:	08 95       	ret

000006dc <i2c_write>:

char i2c_write(char data)
{
	// load data into data register
	TWDR = data;
     6dc:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     6e0:	84 e8       	ldi	r24, 0x84	; 132
     6e2:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     6e6:	ec eb       	ldi	r30, 0xBC	; 188
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	80 81       	ld	r24, Z
     6ec:	88 23       	and	r24, r24
     6ee:	ec f7       	brge	.-6      	; 0x6ea <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     6f0:	90 91 b9 00 	lds	r25, 0x00B9
     6f4:	98 7f       	andi	r25, 0xF8	; 248
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	98 32       	cpi	r25, 0x28	; 40
     6fa:	09 f4       	brne	.+2      	; 0x6fe <i2c_write+0x22>
     6fc:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     6fe:	08 95       	ret

00000700 <i2c_transmit>:

char i2c_transmit(char address, char* data, uint16_t length)
{
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	7b 01       	movw	r14, r22
     710:	8a 01       	movw	r16, r20
	// Start
	if (i2c_start(address | I2C_WRITE)) return 1;
     712:	bf df       	rcall	.-130    	; 0x692 <i2c_start>
     714:	81 11       	cpse	r24, r1
     716:	15 c0       	rjmp	.+42     	; 0x742 <i2c_transmit+0x42>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
     718:	e1 df       	rcall	.-62     	; 0x6dc <i2c_write>
     71a:	d8 2e       	mov	r13, r24
     71c:	81 11       	cpse	r24, r1
     71e:	14 c0       	rjmp	.+40     	; 0x748 <i2c_transmit+0x48>
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
     720:	01 15       	cp	r16, r1
     722:	11 05       	cpc	r17, r1
     724:	51 f0       	breq	.+20     	; 0x73a <i2c_transmit+0x3a>
     726:	e7 01       	movw	r28, r14
     728:	0e 0d       	add	r16, r14
     72a:	1f 1d       	adc	r17, r15
	{
		if (i2c_write(data[i])) return 1;
     72c:	89 91       	ld	r24, Y+
     72e:	d6 df       	rcall	.-84     	; 0x6dc <i2c_write>
     730:	81 11       	cpse	r24, r1
     732:	0d c0       	rjmp	.+26     	; 0x74e <i2c_transmit+0x4e>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
     734:	c0 17       	cp	r28, r16
     736:	d1 07       	cpc	r29, r17
     738:	c9 f7       	brne	.-14     	; 0x72c <i2c_transmit+0x2c>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     73a:	84 e9       	ldi	r24, 0x94	; 148
     73c:	80 93 bc 00 	sts	0x00BC, r24
     740:	08 c0       	rjmp	.+16     	; 0x752 <i2c_transmit+0x52>
}

char i2c_transmit(char address, char* data, uint16_t length)
{
	// Start
	if (i2c_start(address | I2C_WRITE)) return 1;
     742:	dd 24       	eor	r13, r13
     744:	d3 94       	inc	r13
     746:	05 c0       	rjmp	.+10     	; 0x752 <i2c_transmit+0x52>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
     748:	dd 24       	eor	r13, r13
     74a:	d3 94       	inc	r13
     74c:	02 c0       	rjmp	.+4      	; 0x752 <i2c_transmit+0x52>
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     74e:	dd 24       	eor	r13, r13
     750:	d3 94       	inc	r13
	}
	
	i2c_stop();
	
	return 0;
}
     752:	8d 2d       	mov	r24, r13
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	df 90       	pop	r13
     762:	08 95       	ret

00000764 <USART_transmit>:
	fdevopen(USART_transmit,USART_receive);
}

void USART_transmit(unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)))
     764:	e0 ec       	ldi	r30, 0xC0	; 192
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	90 81       	ld	r25, Z
     76a:	95 ff       	sbrs	r25, 5
     76c:	fd cf       	rjmp	.-6      	; 0x768 <USART_transmit+0x4>
		;
	UDR0 = data;
     76e:	80 93 c6 00 	sts	0x00C6, r24
     772:	08 95       	ret

00000774 <USART_receive>:
	
}

unsigned char USART_receive (void){
	
	while( !(UCSR0A & (1<<RXC0)))
     774:	e0 ec       	ldi	r30, 0xC0	; 192
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	88 23       	and	r24, r24
     77c:	ec f7       	brge	.-6      	; 0x778 <USART_receive+0x4>
		;
	return UDR0;
     77e:	80 91 c6 00 	lds	r24, 0x00C6
	
     782:	08 95       	ret

00000784 <USART_init>:
#include "USART_driver.h"
#include <stdio.h>
void USART_init(unsigned int ubrr){

	UBRR0H = (unsigned char)(ubrr>>8);
     784:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;	
     788:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     78c:	88 e1       	ldi	r24, 0x18	; 24
     78e:	80 93 c1 00 	sts	0x00C1, r24
	
	UCSR0C = (3<<UCSZ00); 
     792:	86 e0       	ldi	r24, 0x06	; 6
     794:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(USART_transmit,USART_receive);
     798:	6a eb       	ldi	r22, 0xBA	; 186
     79a:	73 e0       	ldi	r23, 0x03	; 3
     79c:	82 eb       	ldi	r24, 0xB2	; 178
     79e:	93 e0       	ldi	r25, 0x03	; 3
     7a0:	43 c2       	rjmp	.+1158   	; 0xc28 <fdevopen>
     7a2:	08 95       	ret

000007a4 <__subsf3>:
     7a4:	50 58       	subi	r21, 0x80	; 128

000007a6 <__addsf3>:
     7a6:	bb 27       	eor	r27, r27
     7a8:	aa 27       	eor	r26, r26
     7aa:	0e d0       	rcall	.+28     	; 0x7c8 <__addsf3x>
     7ac:	75 c1       	rjmp	.+746    	; 0xa98 <__fp_round>
     7ae:	66 d1       	rcall	.+716    	; 0xa7c <__fp_pscA>
     7b0:	30 f0       	brcs	.+12     	; 0x7be <__addsf3+0x18>
     7b2:	6b d1       	rcall	.+726    	; 0xa8a <__fp_pscB>
     7b4:	20 f0       	brcs	.+8      	; 0x7be <__addsf3+0x18>
     7b6:	31 f4       	brne	.+12     	; 0x7c4 <__addsf3+0x1e>
     7b8:	9f 3f       	cpi	r25, 0xFF	; 255
     7ba:	11 f4       	brne	.+4      	; 0x7c0 <__addsf3+0x1a>
     7bc:	1e f4       	brtc	.+6      	; 0x7c4 <__addsf3+0x1e>
     7be:	5b c1       	rjmp	.+694    	; 0xa76 <__fp_nan>
     7c0:	0e f4       	brtc	.+2      	; 0x7c4 <__addsf3+0x1e>
     7c2:	e0 95       	com	r30
     7c4:	e7 fb       	bst	r30, 7
     7c6:	51 c1       	rjmp	.+674    	; 0xa6a <__fp_inf>

000007c8 <__addsf3x>:
     7c8:	e9 2f       	mov	r30, r25
     7ca:	77 d1       	rcall	.+750    	; 0xaba <__fp_split3>
     7cc:	80 f3       	brcs	.-32     	; 0x7ae <__addsf3+0x8>
     7ce:	ba 17       	cp	r27, r26
     7d0:	62 07       	cpc	r22, r18
     7d2:	73 07       	cpc	r23, r19
     7d4:	84 07       	cpc	r24, r20
     7d6:	95 07       	cpc	r25, r21
     7d8:	18 f0       	brcs	.+6      	; 0x7e0 <__addsf3x+0x18>
     7da:	71 f4       	brne	.+28     	; 0x7f8 <__addsf3x+0x30>
     7dc:	9e f5       	brtc	.+102    	; 0x844 <__addsf3x+0x7c>
     7de:	8f c1       	rjmp	.+798    	; 0xafe <__fp_zero>
     7e0:	0e f4       	brtc	.+2      	; 0x7e4 <__addsf3x+0x1c>
     7e2:	e0 95       	com	r30
     7e4:	0b 2e       	mov	r0, r27
     7e6:	ba 2f       	mov	r27, r26
     7e8:	a0 2d       	mov	r26, r0
     7ea:	0b 01       	movw	r0, r22
     7ec:	b9 01       	movw	r22, r18
     7ee:	90 01       	movw	r18, r0
     7f0:	0c 01       	movw	r0, r24
     7f2:	ca 01       	movw	r24, r20
     7f4:	a0 01       	movw	r20, r0
     7f6:	11 24       	eor	r1, r1
     7f8:	ff 27       	eor	r31, r31
     7fa:	59 1b       	sub	r21, r25
     7fc:	99 f0       	breq	.+38     	; 0x824 <__addsf3x+0x5c>
     7fe:	59 3f       	cpi	r21, 0xF9	; 249
     800:	50 f4       	brcc	.+20     	; 0x816 <__addsf3x+0x4e>
     802:	50 3e       	cpi	r21, 0xE0	; 224
     804:	68 f1       	brcs	.+90     	; 0x860 <__addsf3x+0x98>
     806:	1a 16       	cp	r1, r26
     808:	f0 40       	sbci	r31, 0x00	; 0
     80a:	a2 2f       	mov	r26, r18
     80c:	23 2f       	mov	r18, r19
     80e:	34 2f       	mov	r19, r20
     810:	44 27       	eor	r20, r20
     812:	58 5f       	subi	r21, 0xF8	; 248
     814:	f3 cf       	rjmp	.-26     	; 0x7fc <__addsf3x+0x34>
     816:	46 95       	lsr	r20
     818:	37 95       	ror	r19
     81a:	27 95       	ror	r18
     81c:	a7 95       	ror	r26
     81e:	f0 40       	sbci	r31, 0x00	; 0
     820:	53 95       	inc	r21
     822:	c9 f7       	brne	.-14     	; 0x816 <__addsf3x+0x4e>
     824:	7e f4       	brtc	.+30     	; 0x844 <__addsf3x+0x7c>
     826:	1f 16       	cp	r1, r31
     828:	ba 0b       	sbc	r27, r26
     82a:	62 0b       	sbc	r22, r18
     82c:	73 0b       	sbc	r23, r19
     82e:	84 0b       	sbc	r24, r20
     830:	ba f0       	brmi	.+46     	; 0x860 <__addsf3x+0x98>
     832:	91 50       	subi	r25, 0x01	; 1
     834:	a1 f0       	breq	.+40     	; 0x85e <__addsf3x+0x96>
     836:	ff 0f       	add	r31, r31
     838:	bb 1f       	adc	r27, r27
     83a:	66 1f       	adc	r22, r22
     83c:	77 1f       	adc	r23, r23
     83e:	88 1f       	adc	r24, r24
     840:	c2 f7       	brpl	.-16     	; 0x832 <__addsf3x+0x6a>
     842:	0e c0       	rjmp	.+28     	; 0x860 <__addsf3x+0x98>
     844:	ba 0f       	add	r27, r26
     846:	62 1f       	adc	r22, r18
     848:	73 1f       	adc	r23, r19
     84a:	84 1f       	adc	r24, r20
     84c:	48 f4       	brcc	.+18     	; 0x860 <__addsf3x+0x98>
     84e:	87 95       	ror	r24
     850:	77 95       	ror	r23
     852:	67 95       	ror	r22
     854:	b7 95       	ror	r27
     856:	f7 95       	ror	r31
     858:	9e 3f       	cpi	r25, 0xFE	; 254
     85a:	08 f0       	brcs	.+2      	; 0x85e <__addsf3x+0x96>
     85c:	b3 cf       	rjmp	.-154    	; 0x7c4 <__addsf3+0x1e>
     85e:	93 95       	inc	r25
     860:	88 0f       	add	r24, r24
     862:	08 f0       	brcs	.+2      	; 0x866 <__addsf3x+0x9e>
     864:	99 27       	eor	r25, r25
     866:	ee 0f       	add	r30, r30
     868:	97 95       	ror	r25
     86a:	87 95       	ror	r24
     86c:	08 95       	ret

0000086e <__cmpsf2>:
     86e:	d9 d0       	rcall	.+434    	; 0xa22 <__fp_cmp>
     870:	08 f4       	brcc	.+2      	; 0x874 <__cmpsf2+0x6>
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	08 95       	ret

00000876 <__divsf3>:
     876:	0c d0       	rcall	.+24     	; 0x890 <__divsf3x>
     878:	0f c1       	rjmp	.+542    	; 0xa98 <__fp_round>
     87a:	07 d1       	rcall	.+526    	; 0xa8a <__fp_pscB>
     87c:	40 f0       	brcs	.+16     	; 0x88e <__divsf3+0x18>
     87e:	fe d0       	rcall	.+508    	; 0xa7c <__fp_pscA>
     880:	30 f0       	brcs	.+12     	; 0x88e <__divsf3+0x18>
     882:	21 f4       	brne	.+8      	; 0x88c <__divsf3+0x16>
     884:	5f 3f       	cpi	r21, 0xFF	; 255
     886:	19 f0       	breq	.+6      	; 0x88e <__divsf3+0x18>
     888:	f0 c0       	rjmp	.+480    	; 0xa6a <__fp_inf>
     88a:	51 11       	cpse	r21, r1
     88c:	39 c1       	rjmp	.+626    	; 0xb00 <__fp_szero>
     88e:	f3 c0       	rjmp	.+486    	; 0xa76 <__fp_nan>

00000890 <__divsf3x>:
     890:	14 d1       	rcall	.+552    	; 0xaba <__fp_split3>
     892:	98 f3       	brcs	.-26     	; 0x87a <__divsf3+0x4>

00000894 <__divsf3_pse>:
     894:	99 23       	and	r25, r25
     896:	c9 f3       	breq	.-14     	; 0x88a <__divsf3+0x14>
     898:	55 23       	and	r21, r21
     89a:	b1 f3       	breq	.-20     	; 0x888 <__divsf3+0x12>
     89c:	95 1b       	sub	r25, r21
     89e:	55 0b       	sbc	r21, r21
     8a0:	bb 27       	eor	r27, r27
     8a2:	aa 27       	eor	r26, r26
     8a4:	62 17       	cp	r22, r18
     8a6:	73 07       	cpc	r23, r19
     8a8:	84 07       	cpc	r24, r20
     8aa:	38 f0       	brcs	.+14     	; 0x8ba <__divsf3_pse+0x26>
     8ac:	9f 5f       	subi	r25, 0xFF	; 255
     8ae:	5f 4f       	sbci	r21, 0xFF	; 255
     8b0:	22 0f       	add	r18, r18
     8b2:	33 1f       	adc	r19, r19
     8b4:	44 1f       	adc	r20, r20
     8b6:	aa 1f       	adc	r26, r26
     8b8:	a9 f3       	breq	.-22     	; 0x8a4 <__divsf3_pse+0x10>
     8ba:	33 d0       	rcall	.+102    	; 0x922 <__divsf3_pse+0x8e>
     8bc:	0e 2e       	mov	r0, r30
     8be:	3a f0       	brmi	.+14     	; 0x8ce <__divsf3_pse+0x3a>
     8c0:	e0 e8       	ldi	r30, 0x80	; 128
     8c2:	30 d0       	rcall	.+96     	; 0x924 <__divsf3_pse+0x90>
     8c4:	91 50       	subi	r25, 0x01	; 1
     8c6:	50 40       	sbci	r21, 0x00	; 0
     8c8:	e6 95       	lsr	r30
     8ca:	00 1c       	adc	r0, r0
     8cc:	ca f7       	brpl	.-14     	; 0x8c0 <__divsf3_pse+0x2c>
     8ce:	29 d0       	rcall	.+82     	; 0x922 <__divsf3_pse+0x8e>
     8d0:	fe 2f       	mov	r31, r30
     8d2:	27 d0       	rcall	.+78     	; 0x922 <__divsf3_pse+0x8e>
     8d4:	66 0f       	add	r22, r22
     8d6:	77 1f       	adc	r23, r23
     8d8:	88 1f       	adc	r24, r24
     8da:	bb 1f       	adc	r27, r27
     8dc:	26 17       	cp	r18, r22
     8de:	37 07       	cpc	r19, r23
     8e0:	48 07       	cpc	r20, r24
     8e2:	ab 07       	cpc	r26, r27
     8e4:	b0 e8       	ldi	r27, 0x80	; 128
     8e6:	09 f0       	breq	.+2      	; 0x8ea <__divsf3_pse+0x56>
     8e8:	bb 0b       	sbc	r27, r27
     8ea:	80 2d       	mov	r24, r0
     8ec:	bf 01       	movw	r22, r30
     8ee:	ff 27       	eor	r31, r31
     8f0:	93 58       	subi	r25, 0x83	; 131
     8f2:	5f 4f       	sbci	r21, 0xFF	; 255
     8f4:	2a f0       	brmi	.+10     	; 0x900 <__divsf3_pse+0x6c>
     8f6:	9e 3f       	cpi	r25, 0xFE	; 254
     8f8:	51 05       	cpc	r21, r1
     8fa:	68 f0       	brcs	.+26     	; 0x916 <__divsf3_pse+0x82>
     8fc:	b6 c0       	rjmp	.+364    	; 0xa6a <__fp_inf>
     8fe:	00 c1       	rjmp	.+512    	; 0xb00 <__fp_szero>
     900:	5f 3f       	cpi	r21, 0xFF	; 255
     902:	ec f3       	brlt	.-6      	; 0x8fe <__divsf3_pse+0x6a>
     904:	98 3e       	cpi	r25, 0xE8	; 232
     906:	dc f3       	brlt	.-10     	; 0x8fe <__divsf3_pse+0x6a>
     908:	86 95       	lsr	r24
     90a:	77 95       	ror	r23
     90c:	67 95       	ror	r22
     90e:	b7 95       	ror	r27
     910:	f7 95       	ror	r31
     912:	9f 5f       	subi	r25, 0xFF	; 255
     914:	c9 f7       	brne	.-14     	; 0x908 <__divsf3_pse+0x74>
     916:	88 0f       	add	r24, r24
     918:	91 1d       	adc	r25, r1
     91a:	96 95       	lsr	r25
     91c:	87 95       	ror	r24
     91e:	97 f9       	bld	r25, 7
     920:	08 95       	ret
     922:	e1 e0       	ldi	r30, 0x01	; 1
     924:	66 0f       	add	r22, r22
     926:	77 1f       	adc	r23, r23
     928:	88 1f       	adc	r24, r24
     92a:	bb 1f       	adc	r27, r27
     92c:	62 17       	cp	r22, r18
     92e:	73 07       	cpc	r23, r19
     930:	84 07       	cpc	r24, r20
     932:	ba 07       	cpc	r27, r26
     934:	20 f0       	brcs	.+8      	; 0x93e <__divsf3_pse+0xaa>
     936:	62 1b       	sub	r22, r18
     938:	73 0b       	sbc	r23, r19
     93a:	84 0b       	sbc	r24, r20
     93c:	ba 0b       	sbc	r27, r26
     93e:	ee 1f       	adc	r30, r30
     940:	88 f7       	brcc	.-30     	; 0x924 <__divsf3_pse+0x90>
     942:	e0 95       	com	r30
     944:	08 95       	ret

00000946 <__fixsfsi>:
     946:	04 d0       	rcall	.+8      	; 0x950 <__fixunssfsi>
     948:	68 94       	set
     94a:	b1 11       	cpse	r27, r1
     94c:	d9 c0       	rjmp	.+434    	; 0xb00 <__fp_szero>
     94e:	08 95       	ret

00000950 <__fixunssfsi>:
     950:	bc d0       	rcall	.+376    	; 0xaca <__fp_splitA>
     952:	88 f0       	brcs	.+34     	; 0x976 <__fixunssfsi+0x26>
     954:	9f 57       	subi	r25, 0x7F	; 127
     956:	90 f0       	brcs	.+36     	; 0x97c <__fixunssfsi+0x2c>
     958:	b9 2f       	mov	r27, r25
     95a:	99 27       	eor	r25, r25
     95c:	b7 51       	subi	r27, 0x17	; 23
     95e:	a0 f0       	brcs	.+40     	; 0x988 <__fixunssfsi+0x38>
     960:	d1 f0       	breq	.+52     	; 0x996 <__fixunssfsi+0x46>
     962:	66 0f       	add	r22, r22
     964:	77 1f       	adc	r23, r23
     966:	88 1f       	adc	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	1a f0       	brmi	.+6      	; 0x972 <__fixunssfsi+0x22>
     96c:	ba 95       	dec	r27
     96e:	c9 f7       	brne	.-14     	; 0x962 <__fixunssfsi+0x12>
     970:	12 c0       	rjmp	.+36     	; 0x996 <__fixunssfsi+0x46>
     972:	b1 30       	cpi	r27, 0x01	; 1
     974:	81 f0       	breq	.+32     	; 0x996 <__fixunssfsi+0x46>
     976:	c3 d0       	rcall	.+390    	; 0xafe <__fp_zero>
     978:	b1 e0       	ldi	r27, 0x01	; 1
     97a:	08 95       	ret
     97c:	c0 c0       	rjmp	.+384    	; 0xafe <__fp_zero>
     97e:	67 2f       	mov	r22, r23
     980:	78 2f       	mov	r23, r24
     982:	88 27       	eor	r24, r24
     984:	b8 5f       	subi	r27, 0xF8	; 248
     986:	39 f0       	breq	.+14     	; 0x996 <__fixunssfsi+0x46>
     988:	b9 3f       	cpi	r27, 0xF9	; 249
     98a:	cc f3       	brlt	.-14     	; 0x97e <__fixunssfsi+0x2e>
     98c:	86 95       	lsr	r24
     98e:	77 95       	ror	r23
     990:	67 95       	ror	r22
     992:	b3 95       	inc	r27
     994:	d9 f7       	brne	.-10     	; 0x98c <__fixunssfsi+0x3c>
     996:	3e f4       	brtc	.+14     	; 0x9a6 <__fixunssfsi+0x56>
     998:	90 95       	com	r25
     99a:	80 95       	com	r24
     99c:	70 95       	com	r23
     99e:	61 95       	neg	r22
     9a0:	7f 4f       	sbci	r23, 0xFF	; 255
     9a2:	8f 4f       	sbci	r24, 0xFF	; 255
     9a4:	9f 4f       	sbci	r25, 0xFF	; 255
     9a6:	08 95       	ret

000009a8 <__floatunsisf>:
     9a8:	e8 94       	clt
     9aa:	09 c0       	rjmp	.+18     	; 0x9be <__floatsisf+0x12>

000009ac <__floatsisf>:
     9ac:	97 fb       	bst	r25, 7
     9ae:	3e f4       	brtc	.+14     	; 0x9be <__floatsisf+0x12>
     9b0:	90 95       	com	r25
     9b2:	80 95       	com	r24
     9b4:	70 95       	com	r23
     9b6:	61 95       	neg	r22
     9b8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ba:	8f 4f       	sbci	r24, 0xFF	; 255
     9bc:	9f 4f       	sbci	r25, 0xFF	; 255
     9be:	99 23       	and	r25, r25
     9c0:	a9 f0       	breq	.+42     	; 0x9ec <__floatsisf+0x40>
     9c2:	f9 2f       	mov	r31, r25
     9c4:	96 e9       	ldi	r25, 0x96	; 150
     9c6:	bb 27       	eor	r27, r27
     9c8:	93 95       	inc	r25
     9ca:	f6 95       	lsr	r31
     9cc:	87 95       	ror	r24
     9ce:	77 95       	ror	r23
     9d0:	67 95       	ror	r22
     9d2:	b7 95       	ror	r27
     9d4:	f1 11       	cpse	r31, r1
     9d6:	f8 cf       	rjmp	.-16     	; 0x9c8 <__floatsisf+0x1c>
     9d8:	fa f4       	brpl	.+62     	; 0xa18 <__floatsisf+0x6c>
     9da:	bb 0f       	add	r27, r27
     9dc:	11 f4       	brne	.+4      	; 0x9e2 <__floatsisf+0x36>
     9de:	60 ff       	sbrs	r22, 0
     9e0:	1b c0       	rjmp	.+54     	; 0xa18 <__floatsisf+0x6c>
     9e2:	6f 5f       	subi	r22, 0xFF	; 255
     9e4:	7f 4f       	sbci	r23, 0xFF	; 255
     9e6:	8f 4f       	sbci	r24, 0xFF	; 255
     9e8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ea:	16 c0       	rjmp	.+44     	; 0xa18 <__floatsisf+0x6c>
     9ec:	88 23       	and	r24, r24
     9ee:	11 f0       	breq	.+4      	; 0x9f4 <__floatsisf+0x48>
     9f0:	96 e9       	ldi	r25, 0x96	; 150
     9f2:	11 c0       	rjmp	.+34     	; 0xa16 <__floatsisf+0x6a>
     9f4:	77 23       	and	r23, r23
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__floatsisf+0x54>
     9f8:	9e e8       	ldi	r25, 0x8E	; 142
     9fa:	87 2f       	mov	r24, r23
     9fc:	76 2f       	mov	r23, r22
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <__floatsisf+0x5e>
     a00:	66 23       	and	r22, r22
     a02:	71 f0       	breq	.+28     	; 0xa20 <__floatsisf+0x74>
     a04:	96 e8       	ldi	r25, 0x86	; 134
     a06:	86 2f       	mov	r24, r22
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	2a f0       	brmi	.+10     	; 0xa18 <__floatsisf+0x6c>
     a0e:	9a 95       	dec	r25
     a10:	66 0f       	add	r22, r22
     a12:	77 1f       	adc	r23, r23
     a14:	88 1f       	adc	r24, r24
     a16:	da f7       	brpl	.-10     	; 0xa0e <__floatsisf+0x62>
     a18:	88 0f       	add	r24, r24
     a1a:	96 95       	lsr	r25
     a1c:	87 95       	ror	r24
     a1e:	97 f9       	bld	r25, 7
     a20:	08 95       	ret

00000a22 <__fp_cmp>:
     a22:	99 0f       	add	r25, r25
     a24:	00 08       	sbc	r0, r0
     a26:	55 0f       	add	r21, r21
     a28:	aa 0b       	sbc	r26, r26
     a2a:	e0 e8       	ldi	r30, 0x80	; 128
     a2c:	fe ef       	ldi	r31, 0xFE	; 254
     a2e:	16 16       	cp	r1, r22
     a30:	17 06       	cpc	r1, r23
     a32:	e8 07       	cpc	r30, r24
     a34:	f9 07       	cpc	r31, r25
     a36:	c0 f0       	brcs	.+48     	; 0xa68 <__fp_cmp+0x46>
     a38:	12 16       	cp	r1, r18
     a3a:	13 06       	cpc	r1, r19
     a3c:	e4 07       	cpc	r30, r20
     a3e:	f5 07       	cpc	r31, r21
     a40:	98 f0       	brcs	.+38     	; 0xa68 <__fp_cmp+0x46>
     a42:	62 1b       	sub	r22, r18
     a44:	73 0b       	sbc	r23, r19
     a46:	84 0b       	sbc	r24, r20
     a48:	95 0b       	sbc	r25, r21
     a4a:	39 f4       	brne	.+14     	; 0xa5a <__fp_cmp+0x38>
     a4c:	0a 26       	eor	r0, r26
     a4e:	61 f0       	breq	.+24     	; 0xa68 <__fp_cmp+0x46>
     a50:	23 2b       	or	r18, r19
     a52:	24 2b       	or	r18, r20
     a54:	25 2b       	or	r18, r21
     a56:	21 f4       	brne	.+8      	; 0xa60 <__fp_cmp+0x3e>
     a58:	08 95       	ret
     a5a:	0a 26       	eor	r0, r26
     a5c:	09 f4       	brne	.+2      	; 0xa60 <__fp_cmp+0x3e>
     a5e:	a1 40       	sbci	r26, 0x01	; 1
     a60:	a6 95       	lsr	r26
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	81 1d       	adc	r24, r1
     a66:	81 1d       	adc	r24, r1
     a68:	08 95       	ret

00000a6a <__fp_inf>:
     a6a:	97 f9       	bld	r25, 7
     a6c:	9f 67       	ori	r25, 0x7F	; 127
     a6e:	80 e8       	ldi	r24, 0x80	; 128
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	08 95       	ret

00000a76 <__fp_nan>:
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	80 ec       	ldi	r24, 0xC0	; 192
     a7a:	08 95       	ret

00000a7c <__fp_pscA>:
     a7c:	00 24       	eor	r0, r0
     a7e:	0a 94       	dec	r0
     a80:	16 16       	cp	r1, r22
     a82:	17 06       	cpc	r1, r23
     a84:	18 06       	cpc	r1, r24
     a86:	09 06       	cpc	r0, r25
     a88:	08 95       	ret

00000a8a <__fp_pscB>:
     a8a:	00 24       	eor	r0, r0
     a8c:	0a 94       	dec	r0
     a8e:	12 16       	cp	r1, r18
     a90:	13 06       	cpc	r1, r19
     a92:	14 06       	cpc	r1, r20
     a94:	05 06       	cpc	r0, r21
     a96:	08 95       	ret

00000a98 <__fp_round>:
     a98:	09 2e       	mov	r0, r25
     a9a:	03 94       	inc	r0
     a9c:	00 0c       	add	r0, r0
     a9e:	11 f4       	brne	.+4      	; 0xaa4 <__fp_round+0xc>
     aa0:	88 23       	and	r24, r24
     aa2:	52 f0       	brmi	.+20     	; 0xab8 <__fp_round+0x20>
     aa4:	bb 0f       	add	r27, r27
     aa6:	40 f4       	brcc	.+16     	; 0xab8 <__fp_round+0x20>
     aa8:	bf 2b       	or	r27, r31
     aaa:	11 f4       	brne	.+4      	; 0xab0 <__fp_round+0x18>
     aac:	60 ff       	sbrs	r22, 0
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <__fp_round+0x20>
     ab0:	6f 5f       	subi	r22, 0xFF	; 255
     ab2:	7f 4f       	sbci	r23, 0xFF	; 255
     ab4:	8f 4f       	sbci	r24, 0xFF	; 255
     ab6:	9f 4f       	sbci	r25, 0xFF	; 255
     ab8:	08 95       	ret

00000aba <__fp_split3>:
     aba:	57 fd       	sbrc	r21, 7
     abc:	90 58       	subi	r25, 0x80	; 128
     abe:	44 0f       	add	r20, r20
     ac0:	55 1f       	adc	r21, r21
     ac2:	59 f0       	breq	.+22     	; 0xada <__fp_splitA+0x10>
     ac4:	5f 3f       	cpi	r21, 0xFF	; 255
     ac6:	71 f0       	breq	.+28     	; 0xae4 <__fp_splitA+0x1a>
     ac8:	47 95       	ror	r20

00000aca <__fp_splitA>:
     aca:	88 0f       	add	r24, r24
     acc:	97 fb       	bst	r25, 7
     ace:	99 1f       	adc	r25, r25
     ad0:	61 f0       	breq	.+24     	; 0xaea <__fp_splitA+0x20>
     ad2:	9f 3f       	cpi	r25, 0xFF	; 255
     ad4:	79 f0       	breq	.+30     	; 0xaf4 <__fp_splitA+0x2a>
     ad6:	87 95       	ror	r24
     ad8:	08 95       	ret
     ada:	12 16       	cp	r1, r18
     adc:	13 06       	cpc	r1, r19
     ade:	14 06       	cpc	r1, r20
     ae0:	55 1f       	adc	r21, r21
     ae2:	f2 cf       	rjmp	.-28     	; 0xac8 <__fp_split3+0xe>
     ae4:	46 95       	lsr	r20
     ae6:	f1 df       	rcall	.-30     	; 0xaca <__fp_splitA>
     ae8:	08 c0       	rjmp	.+16     	; 0xafa <__fp_splitA+0x30>
     aea:	16 16       	cp	r1, r22
     aec:	17 06       	cpc	r1, r23
     aee:	18 06       	cpc	r1, r24
     af0:	99 1f       	adc	r25, r25
     af2:	f1 cf       	rjmp	.-30     	; 0xad6 <__fp_splitA+0xc>
     af4:	86 95       	lsr	r24
     af6:	71 05       	cpc	r23, r1
     af8:	61 05       	cpc	r22, r1
     afa:	08 94       	sec
     afc:	08 95       	ret

00000afe <__fp_zero>:
     afe:	e8 94       	clt

00000b00 <__fp_szero>:
     b00:	bb 27       	eor	r27, r27
     b02:	66 27       	eor	r22, r22
     b04:	77 27       	eor	r23, r23
     b06:	cb 01       	movw	r24, r22
     b08:	97 f9       	bld	r25, 7
     b0a:	08 95       	ret

00000b0c <__gesf2>:
     b0c:	8a df       	rcall	.-236    	; 0xa22 <__fp_cmp>
     b0e:	08 f4       	brcc	.+2      	; 0xb12 <__gesf2+0x6>
     b10:	8f ef       	ldi	r24, 0xFF	; 255
     b12:	08 95       	ret

00000b14 <__mulsf3>:
     b14:	0b d0       	rcall	.+22     	; 0xb2c <__mulsf3x>
     b16:	c0 cf       	rjmp	.-128    	; 0xa98 <__fp_round>
     b18:	b1 df       	rcall	.-158    	; 0xa7c <__fp_pscA>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__mulsf3+0x12>
     b1c:	b6 df       	rcall	.-148    	; 0xa8a <__fp_pscB>
     b1e:	18 f0       	brcs	.+6      	; 0xb26 <__mulsf3+0x12>
     b20:	95 23       	and	r25, r21
     b22:	09 f0       	breq	.+2      	; 0xb26 <__mulsf3+0x12>
     b24:	a2 cf       	rjmp	.-188    	; 0xa6a <__fp_inf>
     b26:	a7 cf       	rjmp	.-178    	; 0xa76 <__fp_nan>
     b28:	11 24       	eor	r1, r1
     b2a:	ea cf       	rjmp	.-44     	; 0xb00 <__fp_szero>

00000b2c <__mulsf3x>:
     b2c:	c6 df       	rcall	.-116    	; 0xaba <__fp_split3>
     b2e:	a0 f3       	brcs	.-24     	; 0xb18 <__mulsf3+0x4>

00000b30 <__mulsf3_pse>:
     b30:	95 9f       	mul	r25, r21
     b32:	d1 f3       	breq	.-12     	; 0xb28 <__mulsf3+0x14>
     b34:	95 0f       	add	r25, r21
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	55 1f       	adc	r21, r21
     b3a:	62 9f       	mul	r22, r18
     b3c:	f0 01       	movw	r30, r0
     b3e:	72 9f       	mul	r23, r18
     b40:	bb 27       	eor	r27, r27
     b42:	f0 0d       	add	r31, r0
     b44:	b1 1d       	adc	r27, r1
     b46:	63 9f       	mul	r22, r19
     b48:	aa 27       	eor	r26, r26
     b4a:	f0 0d       	add	r31, r0
     b4c:	b1 1d       	adc	r27, r1
     b4e:	aa 1f       	adc	r26, r26
     b50:	64 9f       	mul	r22, r20
     b52:	66 27       	eor	r22, r22
     b54:	b0 0d       	add	r27, r0
     b56:	a1 1d       	adc	r26, r1
     b58:	66 1f       	adc	r22, r22
     b5a:	82 9f       	mul	r24, r18
     b5c:	22 27       	eor	r18, r18
     b5e:	b0 0d       	add	r27, r0
     b60:	a1 1d       	adc	r26, r1
     b62:	62 1f       	adc	r22, r18
     b64:	73 9f       	mul	r23, r19
     b66:	b0 0d       	add	r27, r0
     b68:	a1 1d       	adc	r26, r1
     b6a:	62 1f       	adc	r22, r18
     b6c:	83 9f       	mul	r24, r19
     b6e:	a0 0d       	add	r26, r0
     b70:	61 1d       	adc	r22, r1
     b72:	22 1f       	adc	r18, r18
     b74:	74 9f       	mul	r23, r20
     b76:	33 27       	eor	r19, r19
     b78:	a0 0d       	add	r26, r0
     b7a:	61 1d       	adc	r22, r1
     b7c:	23 1f       	adc	r18, r19
     b7e:	84 9f       	mul	r24, r20
     b80:	60 0d       	add	r22, r0
     b82:	21 1d       	adc	r18, r1
     b84:	82 2f       	mov	r24, r18
     b86:	76 2f       	mov	r23, r22
     b88:	6a 2f       	mov	r22, r26
     b8a:	11 24       	eor	r1, r1
     b8c:	9f 57       	subi	r25, 0x7F	; 127
     b8e:	50 40       	sbci	r21, 0x00	; 0
     b90:	8a f0       	brmi	.+34     	; 0xbb4 <__mulsf3_pse+0x84>
     b92:	e1 f0       	breq	.+56     	; 0xbcc <__mulsf3_pse+0x9c>
     b94:	88 23       	and	r24, r24
     b96:	4a f0       	brmi	.+18     	; 0xbaa <__mulsf3_pse+0x7a>
     b98:	ee 0f       	add	r30, r30
     b9a:	ff 1f       	adc	r31, r31
     b9c:	bb 1f       	adc	r27, r27
     b9e:	66 1f       	adc	r22, r22
     ba0:	77 1f       	adc	r23, r23
     ba2:	88 1f       	adc	r24, r24
     ba4:	91 50       	subi	r25, 0x01	; 1
     ba6:	50 40       	sbci	r21, 0x00	; 0
     ba8:	a9 f7       	brne	.-22     	; 0xb94 <__mulsf3_pse+0x64>
     baa:	9e 3f       	cpi	r25, 0xFE	; 254
     bac:	51 05       	cpc	r21, r1
     bae:	70 f0       	brcs	.+28     	; 0xbcc <__mulsf3_pse+0x9c>
     bb0:	5c cf       	rjmp	.-328    	; 0xa6a <__fp_inf>
     bb2:	a6 cf       	rjmp	.-180    	; 0xb00 <__fp_szero>
     bb4:	5f 3f       	cpi	r21, 0xFF	; 255
     bb6:	ec f3       	brlt	.-6      	; 0xbb2 <__mulsf3_pse+0x82>
     bb8:	98 3e       	cpi	r25, 0xE8	; 232
     bba:	dc f3       	brlt	.-10     	; 0xbb2 <__mulsf3_pse+0x82>
     bbc:	86 95       	lsr	r24
     bbe:	77 95       	ror	r23
     bc0:	67 95       	ror	r22
     bc2:	b7 95       	ror	r27
     bc4:	f7 95       	ror	r31
     bc6:	e7 95       	ror	r30
     bc8:	9f 5f       	subi	r25, 0xFF	; 255
     bca:	c1 f7       	brne	.-16     	; 0xbbc <__mulsf3_pse+0x8c>
     bcc:	fe 2b       	or	r31, r30
     bce:	88 0f       	add	r24, r24
     bd0:	91 1d       	adc	r25, r1
     bd2:	96 95       	lsr	r25
     bd4:	87 95       	ror	r24
     bd6:	97 f9       	bld	r25, 7
     bd8:	08 95       	ret

00000bda <__divmodhi4>:
     bda:	97 fb       	bst	r25, 7
     bdc:	07 2e       	mov	r0, r23
     bde:	16 f4       	brtc	.+4      	; 0xbe4 <__divmodhi4+0xa>
     be0:	00 94       	com	r0
     be2:	06 d0       	rcall	.+12     	; 0xbf0 <__divmodhi4_neg1>
     be4:	77 fd       	sbrc	r23, 7
     be6:	08 d0       	rcall	.+16     	; 0xbf8 <__divmodhi4_neg2>
     be8:	0b d0       	rcall	.+22     	; 0xc00 <__udivmodhi4>
     bea:	07 fc       	sbrc	r0, 7
     bec:	05 d0       	rcall	.+10     	; 0xbf8 <__divmodhi4_neg2>
     bee:	3e f4       	brtc	.+14     	; 0xbfe <__divmodhi4_exit>

00000bf0 <__divmodhi4_neg1>:
     bf0:	90 95       	com	r25
     bf2:	81 95       	neg	r24
     bf4:	9f 4f       	sbci	r25, 0xFF	; 255
     bf6:	08 95       	ret

00000bf8 <__divmodhi4_neg2>:
     bf8:	70 95       	com	r23
     bfa:	61 95       	neg	r22
     bfc:	7f 4f       	sbci	r23, 0xFF	; 255

00000bfe <__divmodhi4_exit>:
     bfe:	08 95       	ret

00000c00 <__udivmodhi4>:
     c00:	aa 1b       	sub	r26, r26
     c02:	bb 1b       	sub	r27, r27
     c04:	51 e1       	ldi	r21, 0x11	; 17
     c06:	07 c0       	rjmp	.+14     	; 0xc16 <__udivmodhi4_ep>

00000c08 <__udivmodhi4_loop>:
     c08:	aa 1f       	adc	r26, r26
     c0a:	bb 1f       	adc	r27, r27
     c0c:	a6 17       	cp	r26, r22
     c0e:	b7 07       	cpc	r27, r23
     c10:	10 f0       	brcs	.+4      	; 0xc16 <__udivmodhi4_ep>
     c12:	a6 1b       	sub	r26, r22
     c14:	b7 0b       	sbc	r27, r23

00000c16 <__udivmodhi4_ep>:
     c16:	88 1f       	adc	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	5a 95       	dec	r21
     c1c:	a9 f7       	brne	.-22     	; 0xc08 <__udivmodhi4_loop>
     c1e:	80 95       	com	r24
     c20:	90 95       	com	r25
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	08 95       	ret

00000c28 <fdevopen>:
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	ec 01       	movw	r28, r24
     c32:	8b 01       	movw	r16, r22
     c34:	00 97       	sbiw	r24, 0x00	; 0
     c36:	31 f4       	brne	.+12     	; 0xc44 <fdevopen+0x1c>
     c38:	61 15       	cp	r22, r1
     c3a:	71 05       	cpc	r23, r1
     c3c:	19 f4       	brne	.+6      	; 0xc44 <fdevopen+0x1c>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	37 c0       	rjmp	.+110    	; 0xcb2 <fdevopen+0x8a>
     c44:	6e e0       	ldi	r22, 0x0E	; 14
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	68 d2       	rcall	.+1232   	; 0x111e <calloc>
     c4e:	fc 01       	movw	r30, r24
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	a9 f3       	breq	.-22     	; 0xc3e <fdevopen+0x16>
     c54:	80 e8       	ldi	r24, 0x80	; 128
     c56:	83 83       	std	Z+3, r24	; 0x03
     c58:	01 15       	cp	r16, r1
     c5a:	11 05       	cpc	r17, r1
     c5c:	71 f0       	breq	.+28     	; 0xc7a <fdevopen+0x52>
     c5e:	13 87       	std	Z+11, r17	; 0x0b
     c60:	02 87       	std	Z+10, r16	; 0x0a
     c62:	81 e8       	ldi	r24, 0x81	; 129
     c64:	83 83       	std	Z+3, r24	; 0x03
     c66:	80 91 5f 02 	lds	r24, 0x025F
     c6a:	90 91 60 02 	lds	r25, 0x0260
     c6e:	89 2b       	or	r24, r25
     c70:	21 f4       	brne	.+8      	; 0xc7a <fdevopen+0x52>
     c72:	f0 93 60 02 	sts	0x0260, r31
     c76:	e0 93 5f 02 	sts	0x025F, r30
     c7a:	20 97       	sbiw	r28, 0x00	; 0
     c7c:	c9 f0       	breq	.+50     	; 0xcb0 <fdevopen+0x88>
     c7e:	d1 87       	std	Z+9, r29	; 0x09
     c80:	c0 87       	std	Z+8, r28	; 0x08
     c82:	83 81       	ldd	r24, Z+3	; 0x03
     c84:	82 60       	ori	r24, 0x02	; 2
     c86:	83 83       	std	Z+3, r24	; 0x03
     c88:	80 91 61 02 	lds	r24, 0x0261
     c8c:	90 91 62 02 	lds	r25, 0x0262
     c90:	89 2b       	or	r24, r25
     c92:	71 f4       	brne	.+28     	; 0xcb0 <fdevopen+0x88>
     c94:	f0 93 62 02 	sts	0x0262, r31
     c98:	e0 93 61 02 	sts	0x0261, r30
     c9c:	80 91 63 02 	lds	r24, 0x0263
     ca0:	90 91 64 02 	lds	r25, 0x0264
     ca4:	89 2b       	or	r24, r25
     ca6:	21 f4       	brne	.+8      	; 0xcb0 <fdevopen+0x88>
     ca8:	f0 93 64 02 	sts	0x0264, r31
     cac:	e0 93 63 02 	sts	0x0263, r30
     cb0:	cf 01       	movw	r24, r30
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	08 95       	ret

00000cbc <printf>:
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	fe 01       	movw	r30, r28
     cc6:	36 96       	adiw	r30, 0x06	; 6
     cc8:	61 91       	ld	r22, Z+
     cca:	71 91       	ld	r23, Z+
     ccc:	af 01       	movw	r20, r30
     cce:	80 91 61 02 	lds	r24, 0x0261
     cd2:	90 91 62 02 	lds	r25, 0x0262
     cd6:	35 d0       	rcall	.+106    	; 0xd42 <vfprintf>
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	08 95       	ret

00000cde <putchar>:
     cde:	60 91 61 02 	lds	r22, 0x0261
     ce2:	70 91 62 02 	lds	r23, 0x0262
     ce6:	79 c3       	rjmp	.+1778   	; 0x13da <fputc>

00000ce8 <puts>:
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	e0 91 61 02 	lds	r30, 0x0261
     cf4:	f0 91 62 02 	lds	r31, 0x0262
     cf8:	23 81       	ldd	r18, Z+3	; 0x03
     cfa:	21 ff       	sbrs	r18, 1
     cfc:	1b c0       	rjmp	.+54     	; 0xd34 <puts+0x4c>
     cfe:	ec 01       	movw	r28, r24
     d00:	00 e0       	ldi	r16, 0x00	; 0
     d02:	10 e0       	ldi	r17, 0x00	; 0
     d04:	89 91       	ld	r24, Y+
     d06:	60 91 61 02 	lds	r22, 0x0261
     d0a:	70 91 62 02 	lds	r23, 0x0262
     d0e:	db 01       	movw	r26, r22
     d10:	18 96       	adiw	r26, 0x08	; 8
     d12:	ed 91       	ld	r30, X+
     d14:	fc 91       	ld	r31, X
     d16:	19 97       	sbiw	r26, 0x09	; 9
     d18:	88 23       	and	r24, r24
     d1a:	31 f0       	breq	.+12     	; 0xd28 <puts+0x40>
     d1c:	19 95       	eicall
     d1e:	89 2b       	or	r24, r25
     d20:	89 f3       	breq	.-30     	; 0xd04 <puts+0x1c>
     d22:	0f ef       	ldi	r16, 0xFF	; 255
     d24:	1f ef       	ldi	r17, 0xFF	; 255
     d26:	ee cf       	rjmp	.-36     	; 0xd04 <puts+0x1c>
     d28:	8a e0       	ldi	r24, 0x0A	; 10
     d2a:	19 95       	eicall
     d2c:	89 2b       	or	r24, r25
     d2e:	11 f4       	brne	.+4      	; 0xd34 <puts+0x4c>
     d30:	c8 01       	movw	r24, r16
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <puts+0x50>
     d34:	8f ef       	ldi	r24, 0xFF	; 255
     d36:	9f ef       	ldi	r25, 0xFF	; 255
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	08 95       	ret

00000d42 <vfprintf>:
     d42:	2f 92       	push	r2
     d44:	3f 92       	push	r3
     d46:	4f 92       	push	r4
     d48:	5f 92       	push	r5
     d4a:	6f 92       	push	r6
     d4c:	7f 92       	push	r7
     d4e:	8f 92       	push	r8
     d50:	9f 92       	push	r9
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	2c 97       	sbiw	r28, 0x0c	; 12
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	7c 01       	movw	r14, r24
     d78:	6b 01       	movw	r12, r22
     d7a:	8a 01       	movw	r16, r20
     d7c:	fc 01       	movw	r30, r24
     d7e:	17 82       	std	Z+7, r1	; 0x07
     d80:	16 82       	std	Z+6, r1	; 0x06
     d82:	83 81       	ldd	r24, Z+3	; 0x03
     d84:	81 ff       	sbrs	r24, 1
     d86:	b0 c1       	rjmp	.+864    	; 0x10e8 <vfprintf+0x3a6>
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	4c 01       	movw	r8, r24
     d8e:	f7 01       	movw	r30, r14
     d90:	93 81       	ldd	r25, Z+3	; 0x03
     d92:	f6 01       	movw	r30, r12
     d94:	93 fd       	sbrc	r25, 3
     d96:	85 91       	lpm	r24, Z+
     d98:	93 ff       	sbrs	r25, 3
     d9a:	81 91       	ld	r24, Z+
     d9c:	6f 01       	movw	r12, r30
     d9e:	88 23       	and	r24, r24
     da0:	09 f4       	brne	.+2      	; 0xda4 <vfprintf+0x62>
     da2:	9e c1       	rjmp	.+828    	; 0x10e0 <vfprintf+0x39e>
     da4:	85 32       	cpi	r24, 0x25	; 37
     da6:	39 f4       	brne	.+14     	; 0xdb6 <vfprintf+0x74>
     da8:	93 fd       	sbrc	r25, 3
     daa:	85 91       	lpm	r24, Z+
     dac:	93 ff       	sbrs	r25, 3
     dae:	81 91       	ld	r24, Z+
     db0:	6f 01       	movw	r12, r30
     db2:	85 32       	cpi	r24, 0x25	; 37
     db4:	21 f4       	brne	.+8      	; 0xdbe <vfprintf+0x7c>
     db6:	b7 01       	movw	r22, r14
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0f d3       	rcall	.+1566   	; 0x13da <fputc>
     dbc:	e8 cf       	rjmp	.-48     	; 0xd8e <vfprintf+0x4c>
     dbe:	51 2c       	mov	r5, r1
     dc0:	31 2c       	mov	r3, r1
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	20 32       	cpi	r18, 0x20	; 32
     dc6:	a0 f4       	brcc	.+40     	; 0xdf0 <vfprintf+0xae>
     dc8:	8b 32       	cpi	r24, 0x2B	; 43
     dca:	69 f0       	breq	.+26     	; 0xde6 <vfprintf+0xa4>
     dcc:	30 f4       	brcc	.+12     	; 0xdda <vfprintf+0x98>
     dce:	80 32       	cpi	r24, 0x20	; 32
     dd0:	59 f0       	breq	.+22     	; 0xde8 <vfprintf+0xa6>
     dd2:	83 32       	cpi	r24, 0x23	; 35
     dd4:	69 f4       	brne	.+26     	; 0xdf0 <vfprintf+0xae>
     dd6:	20 61       	ori	r18, 0x10	; 16
     dd8:	2c c0       	rjmp	.+88     	; 0xe32 <vfprintf+0xf0>
     dda:	8d 32       	cpi	r24, 0x2D	; 45
     ddc:	39 f0       	breq	.+14     	; 0xdec <vfprintf+0xaa>
     dde:	80 33       	cpi	r24, 0x30	; 48
     de0:	39 f4       	brne	.+14     	; 0xdf0 <vfprintf+0xae>
     de2:	21 60       	ori	r18, 0x01	; 1
     de4:	26 c0       	rjmp	.+76     	; 0xe32 <vfprintf+0xf0>
     de6:	22 60       	ori	r18, 0x02	; 2
     de8:	24 60       	ori	r18, 0x04	; 4
     dea:	23 c0       	rjmp	.+70     	; 0xe32 <vfprintf+0xf0>
     dec:	28 60       	ori	r18, 0x08	; 8
     dee:	21 c0       	rjmp	.+66     	; 0xe32 <vfprintf+0xf0>
     df0:	27 fd       	sbrc	r18, 7
     df2:	27 c0       	rjmp	.+78     	; 0xe42 <vfprintf+0x100>
     df4:	30 ed       	ldi	r19, 0xD0	; 208
     df6:	38 0f       	add	r19, r24
     df8:	3a 30       	cpi	r19, 0x0A	; 10
     dfa:	78 f4       	brcc	.+30     	; 0xe1a <vfprintf+0xd8>
     dfc:	26 ff       	sbrs	r18, 6
     dfe:	06 c0       	rjmp	.+12     	; 0xe0c <vfprintf+0xca>
     e00:	fa e0       	ldi	r31, 0x0A	; 10
     e02:	5f 9e       	mul	r5, r31
     e04:	30 0d       	add	r19, r0
     e06:	11 24       	eor	r1, r1
     e08:	53 2e       	mov	r5, r19
     e0a:	13 c0       	rjmp	.+38     	; 0xe32 <vfprintf+0xf0>
     e0c:	8a e0       	ldi	r24, 0x0A	; 10
     e0e:	38 9e       	mul	r3, r24
     e10:	30 0d       	add	r19, r0
     e12:	11 24       	eor	r1, r1
     e14:	33 2e       	mov	r3, r19
     e16:	20 62       	ori	r18, 0x20	; 32
     e18:	0c c0       	rjmp	.+24     	; 0xe32 <vfprintf+0xf0>
     e1a:	8e 32       	cpi	r24, 0x2E	; 46
     e1c:	21 f4       	brne	.+8      	; 0xe26 <vfprintf+0xe4>
     e1e:	26 fd       	sbrc	r18, 6
     e20:	5f c1       	rjmp	.+702    	; 0x10e0 <vfprintf+0x39e>
     e22:	20 64       	ori	r18, 0x40	; 64
     e24:	06 c0       	rjmp	.+12     	; 0xe32 <vfprintf+0xf0>
     e26:	8c 36       	cpi	r24, 0x6C	; 108
     e28:	11 f4       	brne	.+4      	; 0xe2e <vfprintf+0xec>
     e2a:	20 68       	ori	r18, 0x80	; 128
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <vfprintf+0xf0>
     e2e:	88 36       	cpi	r24, 0x68	; 104
     e30:	41 f4       	brne	.+16     	; 0xe42 <vfprintf+0x100>
     e32:	f6 01       	movw	r30, r12
     e34:	93 fd       	sbrc	r25, 3
     e36:	85 91       	lpm	r24, Z+
     e38:	93 ff       	sbrs	r25, 3
     e3a:	81 91       	ld	r24, Z+
     e3c:	6f 01       	movw	r12, r30
     e3e:	81 11       	cpse	r24, r1
     e40:	c1 cf       	rjmp	.-126    	; 0xdc4 <vfprintf+0x82>
     e42:	98 2f       	mov	r25, r24
     e44:	9f 7d       	andi	r25, 0xDF	; 223
     e46:	95 54       	subi	r25, 0x45	; 69
     e48:	93 30       	cpi	r25, 0x03	; 3
     e4a:	28 f4       	brcc	.+10     	; 0xe56 <vfprintf+0x114>
     e4c:	0c 5f       	subi	r16, 0xFC	; 252
     e4e:	1f 4f       	sbci	r17, 0xFF	; 255
     e50:	ff e3       	ldi	r31, 0x3F	; 63
     e52:	f9 83       	std	Y+1, r31	; 0x01
     e54:	0d c0       	rjmp	.+26     	; 0xe70 <vfprintf+0x12e>
     e56:	83 36       	cpi	r24, 0x63	; 99
     e58:	31 f0       	breq	.+12     	; 0xe66 <vfprintf+0x124>
     e5a:	83 37       	cpi	r24, 0x73	; 115
     e5c:	71 f0       	breq	.+28     	; 0xe7a <vfprintf+0x138>
     e5e:	83 35       	cpi	r24, 0x53	; 83
     e60:	09 f0       	breq	.+2      	; 0xe64 <vfprintf+0x122>
     e62:	57 c0       	rjmp	.+174    	; 0xf12 <vfprintf+0x1d0>
     e64:	21 c0       	rjmp	.+66     	; 0xea8 <vfprintf+0x166>
     e66:	f8 01       	movw	r30, r16
     e68:	80 81       	ld	r24, Z
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	0e 5f       	subi	r16, 0xFE	; 254
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	44 24       	eor	r4, r4
     e72:	43 94       	inc	r4
     e74:	51 2c       	mov	r5, r1
     e76:	54 01       	movw	r10, r8
     e78:	14 c0       	rjmp	.+40     	; 0xea2 <vfprintf+0x160>
     e7a:	38 01       	movw	r6, r16
     e7c:	f2 e0       	ldi	r31, 0x02	; 2
     e7e:	6f 0e       	add	r6, r31
     e80:	71 1c       	adc	r7, r1
     e82:	f8 01       	movw	r30, r16
     e84:	a0 80       	ld	r10, Z
     e86:	b1 80       	ldd	r11, Z+1	; 0x01
     e88:	26 ff       	sbrs	r18, 6
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <vfprintf+0x150>
     e8c:	65 2d       	mov	r22, r5
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <vfprintf+0x154>
     e92:	6f ef       	ldi	r22, 0xFF	; 255
     e94:	7f ef       	ldi	r23, 0xFF	; 255
     e96:	c5 01       	movw	r24, r10
     e98:	2c 87       	std	Y+12, r18	; 0x0c
     e9a:	94 d2       	rcall	.+1320   	; 0x13c4 <strnlen>
     e9c:	2c 01       	movw	r4, r24
     e9e:	83 01       	movw	r16, r6
     ea0:	2c 85       	ldd	r18, Y+12	; 0x0c
     ea2:	2f 77       	andi	r18, 0x7F	; 127
     ea4:	22 2e       	mov	r2, r18
     ea6:	16 c0       	rjmp	.+44     	; 0xed4 <vfprintf+0x192>
     ea8:	38 01       	movw	r6, r16
     eaa:	f2 e0       	ldi	r31, 0x02	; 2
     eac:	6f 0e       	add	r6, r31
     eae:	71 1c       	adc	r7, r1
     eb0:	f8 01       	movw	r30, r16
     eb2:	a0 80       	ld	r10, Z
     eb4:	b1 80       	ldd	r11, Z+1	; 0x01
     eb6:	26 ff       	sbrs	r18, 6
     eb8:	03 c0       	rjmp	.+6      	; 0xec0 <vfprintf+0x17e>
     eba:	65 2d       	mov	r22, r5
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <vfprintf+0x182>
     ec0:	6f ef       	ldi	r22, 0xFF	; 255
     ec2:	7f ef       	ldi	r23, 0xFF	; 255
     ec4:	c5 01       	movw	r24, r10
     ec6:	2c 87       	std	Y+12, r18	; 0x0c
     ec8:	6b d2       	rcall	.+1238   	; 0x13a0 <strnlen_P>
     eca:	2c 01       	movw	r4, r24
     ecc:	2c 85       	ldd	r18, Y+12	; 0x0c
     ece:	20 68       	ori	r18, 0x80	; 128
     ed0:	22 2e       	mov	r2, r18
     ed2:	83 01       	movw	r16, r6
     ed4:	23 fc       	sbrc	r2, 3
     ed6:	19 c0       	rjmp	.+50     	; 0xf0a <vfprintf+0x1c8>
     ed8:	83 2d       	mov	r24, r3
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	48 16       	cp	r4, r24
     ede:	59 06       	cpc	r5, r25
     ee0:	a0 f4       	brcc	.+40     	; 0xf0a <vfprintf+0x1c8>
     ee2:	b7 01       	movw	r22, r14
     ee4:	80 e2       	ldi	r24, 0x20	; 32
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	78 d2       	rcall	.+1264   	; 0x13da <fputc>
     eea:	3a 94       	dec	r3
     eec:	f5 cf       	rjmp	.-22     	; 0xed8 <vfprintf+0x196>
     eee:	f5 01       	movw	r30, r10
     ef0:	27 fc       	sbrc	r2, 7
     ef2:	85 91       	lpm	r24, Z+
     ef4:	27 fe       	sbrs	r2, 7
     ef6:	81 91       	ld	r24, Z+
     ef8:	5f 01       	movw	r10, r30
     efa:	b7 01       	movw	r22, r14
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	6d d2       	rcall	.+1242   	; 0x13da <fputc>
     f00:	31 10       	cpse	r3, r1
     f02:	3a 94       	dec	r3
     f04:	f1 e0       	ldi	r31, 0x01	; 1
     f06:	4f 1a       	sub	r4, r31
     f08:	51 08       	sbc	r5, r1
     f0a:	41 14       	cp	r4, r1
     f0c:	51 04       	cpc	r5, r1
     f0e:	79 f7       	brne	.-34     	; 0xeee <vfprintf+0x1ac>
     f10:	de c0       	rjmp	.+444    	; 0x10ce <vfprintf+0x38c>
     f12:	84 36       	cpi	r24, 0x64	; 100
     f14:	11 f0       	breq	.+4      	; 0xf1a <vfprintf+0x1d8>
     f16:	89 36       	cpi	r24, 0x69	; 105
     f18:	31 f5       	brne	.+76     	; 0xf66 <vfprintf+0x224>
     f1a:	f8 01       	movw	r30, r16
     f1c:	27 ff       	sbrs	r18, 7
     f1e:	07 c0       	rjmp	.+14     	; 0xf2e <vfprintf+0x1ec>
     f20:	60 81       	ld	r22, Z
     f22:	71 81       	ldd	r23, Z+1	; 0x01
     f24:	82 81       	ldd	r24, Z+2	; 0x02
     f26:	93 81       	ldd	r25, Z+3	; 0x03
     f28:	0c 5f       	subi	r16, 0xFC	; 252
     f2a:	1f 4f       	sbci	r17, 0xFF	; 255
     f2c:	08 c0       	rjmp	.+16     	; 0xf3e <vfprintf+0x1fc>
     f2e:	60 81       	ld	r22, Z
     f30:	71 81       	ldd	r23, Z+1	; 0x01
     f32:	88 27       	eor	r24, r24
     f34:	77 fd       	sbrc	r23, 7
     f36:	80 95       	com	r24
     f38:	98 2f       	mov	r25, r24
     f3a:	0e 5f       	subi	r16, 0xFE	; 254
     f3c:	1f 4f       	sbci	r17, 0xFF	; 255
     f3e:	2f 76       	andi	r18, 0x6F	; 111
     f40:	b2 2e       	mov	r11, r18
     f42:	97 ff       	sbrs	r25, 7
     f44:	09 c0       	rjmp	.+18     	; 0xf58 <vfprintf+0x216>
     f46:	90 95       	com	r25
     f48:	80 95       	com	r24
     f4a:	70 95       	com	r23
     f4c:	61 95       	neg	r22
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	8f 4f       	sbci	r24, 0xFF	; 255
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	20 68       	ori	r18, 0x80	; 128
     f56:	b2 2e       	mov	r11, r18
     f58:	2a e0       	ldi	r18, 0x0A	; 10
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	a4 01       	movw	r20, r8
     f5e:	6f d2       	rcall	.+1246   	; 0x143e <__ultoa_invert>
     f60:	a8 2e       	mov	r10, r24
     f62:	a8 18       	sub	r10, r8
     f64:	43 c0       	rjmp	.+134    	; 0xfec <vfprintf+0x2aa>
     f66:	85 37       	cpi	r24, 0x75	; 117
     f68:	29 f4       	brne	.+10     	; 0xf74 <vfprintf+0x232>
     f6a:	2f 7e       	andi	r18, 0xEF	; 239
     f6c:	b2 2e       	mov	r11, r18
     f6e:	2a e0       	ldi	r18, 0x0A	; 10
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	25 c0       	rjmp	.+74     	; 0xfbe <vfprintf+0x27c>
     f74:	f2 2f       	mov	r31, r18
     f76:	f9 7f       	andi	r31, 0xF9	; 249
     f78:	bf 2e       	mov	r11, r31
     f7a:	8f 36       	cpi	r24, 0x6F	; 111
     f7c:	c1 f0       	breq	.+48     	; 0xfae <vfprintf+0x26c>
     f7e:	18 f4       	brcc	.+6      	; 0xf86 <vfprintf+0x244>
     f80:	88 35       	cpi	r24, 0x58	; 88
     f82:	79 f0       	breq	.+30     	; 0xfa2 <vfprintf+0x260>
     f84:	ad c0       	rjmp	.+346    	; 0x10e0 <vfprintf+0x39e>
     f86:	80 37       	cpi	r24, 0x70	; 112
     f88:	19 f0       	breq	.+6      	; 0xf90 <vfprintf+0x24e>
     f8a:	88 37       	cpi	r24, 0x78	; 120
     f8c:	21 f0       	breq	.+8      	; 0xf96 <vfprintf+0x254>
     f8e:	a8 c0       	rjmp	.+336    	; 0x10e0 <vfprintf+0x39e>
     f90:	2f 2f       	mov	r18, r31
     f92:	20 61       	ori	r18, 0x10	; 16
     f94:	b2 2e       	mov	r11, r18
     f96:	b4 fe       	sbrs	r11, 4
     f98:	0d c0       	rjmp	.+26     	; 0xfb4 <vfprintf+0x272>
     f9a:	8b 2d       	mov	r24, r11
     f9c:	84 60       	ori	r24, 0x04	; 4
     f9e:	b8 2e       	mov	r11, r24
     fa0:	09 c0       	rjmp	.+18     	; 0xfb4 <vfprintf+0x272>
     fa2:	24 ff       	sbrs	r18, 4
     fa4:	0a c0       	rjmp	.+20     	; 0xfba <vfprintf+0x278>
     fa6:	9f 2f       	mov	r25, r31
     fa8:	96 60       	ori	r25, 0x06	; 6
     faa:	b9 2e       	mov	r11, r25
     fac:	06 c0       	rjmp	.+12     	; 0xfba <vfprintf+0x278>
     fae:	28 e0       	ldi	r18, 0x08	; 8
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	05 c0       	rjmp	.+10     	; 0xfbe <vfprintf+0x27c>
     fb4:	20 e1       	ldi	r18, 0x10	; 16
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <vfprintf+0x27c>
     fba:	20 e1       	ldi	r18, 0x10	; 16
     fbc:	32 e0       	ldi	r19, 0x02	; 2
     fbe:	f8 01       	movw	r30, r16
     fc0:	b7 fe       	sbrs	r11, 7
     fc2:	07 c0       	rjmp	.+14     	; 0xfd2 <vfprintf+0x290>
     fc4:	60 81       	ld	r22, Z
     fc6:	71 81       	ldd	r23, Z+1	; 0x01
     fc8:	82 81       	ldd	r24, Z+2	; 0x02
     fca:	93 81       	ldd	r25, Z+3	; 0x03
     fcc:	0c 5f       	subi	r16, 0xFC	; 252
     fce:	1f 4f       	sbci	r17, 0xFF	; 255
     fd0:	06 c0       	rjmp	.+12     	; 0xfde <vfprintf+0x29c>
     fd2:	60 81       	ld	r22, Z
     fd4:	71 81       	ldd	r23, Z+1	; 0x01
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 5f       	subi	r16, 0xFE	; 254
     fdc:	1f 4f       	sbci	r17, 0xFF	; 255
     fde:	a4 01       	movw	r20, r8
     fe0:	2e d2       	rcall	.+1116   	; 0x143e <__ultoa_invert>
     fe2:	a8 2e       	mov	r10, r24
     fe4:	a8 18       	sub	r10, r8
     fe6:	fb 2d       	mov	r31, r11
     fe8:	ff 77       	andi	r31, 0x7F	; 127
     fea:	bf 2e       	mov	r11, r31
     fec:	b6 fe       	sbrs	r11, 6
     fee:	0b c0       	rjmp	.+22     	; 0x1006 <vfprintf+0x2c4>
     ff0:	2b 2d       	mov	r18, r11
     ff2:	2e 7f       	andi	r18, 0xFE	; 254
     ff4:	a5 14       	cp	r10, r5
     ff6:	50 f4       	brcc	.+20     	; 0x100c <vfprintf+0x2ca>
     ff8:	b4 fe       	sbrs	r11, 4
     ffa:	0a c0       	rjmp	.+20     	; 0x1010 <vfprintf+0x2ce>
     ffc:	b2 fc       	sbrc	r11, 2
     ffe:	08 c0       	rjmp	.+16     	; 0x1010 <vfprintf+0x2ce>
    1000:	2b 2d       	mov	r18, r11
    1002:	2e 7e       	andi	r18, 0xEE	; 238
    1004:	05 c0       	rjmp	.+10     	; 0x1010 <vfprintf+0x2ce>
    1006:	7a 2c       	mov	r7, r10
    1008:	2b 2d       	mov	r18, r11
    100a:	03 c0       	rjmp	.+6      	; 0x1012 <vfprintf+0x2d0>
    100c:	7a 2c       	mov	r7, r10
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <vfprintf+0x2d0>
    1010:	75 2c       	mov	r7, r5
    1012:	24 ff       	sbrs	r18, 4
    1014:	0d c0       	rjmp	.+26     	; 0x1030 <vfprintf+0x2ee>
    1016:	fe 01       	movw	r30, r28
    1018:	ea 0d       	add	r30, r10
    101a:	f1 1d       	adc	r31, r1
    101c:	80 81       	ld	r24, Z
    101e:	80 33       	cpi	r24, 0x30	; 48
    1020:	11 f4       	brne	.+4      	; 0x1026 <vfprintf+0x2e4>
    1022:	29 7e       	andi	r18, 0xE9	; 233
    1024:	09 c0       	rjmp	.+18     	; 0x1038 <vfprintf+0x2f6>
    1026:	22 ff       	sbrs	r18, 2
    1028:	06 c0       	rjmp	.+12     	; 0x1036 <vfprintf+0x2f4>
    102a:	73 94       	inc	r7
    102c:	73 94       	inc	r7
    102e:	04 c0       	rjmp	.+8      	; 0x1038 <vfprintf+0x2f6>
    1030:	82 2f       	mov	r24, r18
    1032:	86 78       	andi	r24, 0x86	; 134
    1034:	09 f0       	breq	.+2      	; 0x1038 <vfprintf+0x2f6>
    1036:	73 94       	inc	r7
    1038:	23 fd       	sbrc	r18, 3
    103a:	12 c0       	rjmp	.+36     	; 0x1060 <vfprintf+0x31e>
    103c:	20 ff       	sbrs	r18, 0
    103e:	06 c0       	rjmp	.+12     	; 0x104c <vfprintf+0x30a>
    1040:	5a 2c       	mov	r5, r10
    1042:	73 14       	cp	r7, r3
    1044:	18 f4       	brcc	.+6      	; 0x104c <vfprintf+0x30a>
    1046:	53 0c       	add	r5, r3
    1048:	57 18       	sub	r5, r7
    104a:	73 2c       	mov	r7, r3
    104c:	73 14       	cp	r7, r3
    104e:	60 f4       	brcc	.+24     	; 0x1068 <vfprintf+0x326>
    1050:	b7 01       	movw	r22, r14
    1052:	80 e2       	ldi	r24, 0x20	; 32
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	2c 87       	std	Y+12, r18	; 0x0c
    1058:	c0 d1       	rcall	.+896    	; 0x13da <fputc>
    105a:	73 94       	inc	r7
    105c:	2c 85       	ldd	r18, Y+12	; 0x0c
    105e:	f6 cf       	rjmp	.-20     	; 0x104c <vfprintf+0x30a>
    1060:	73 14       	cp	r7, r3
    1062:	10 f4       	brcc	.+4      	; 0x1068 <vfprintf+0x326>
    1064:	37 18       	sub	r3, r7
    1066:	01 c0       	rjmp	.+2      	; 0x106a <vfprintf+0x328>
    1068:	31 2c       	mov	r3, r1
    106a:	24 ff       	sbrs	r18, 4
    106c:	11 c0       	rjmp	.+34     	; 0x1090 <vfprintf+0x34e>
    106e:	b7 01       	movw	r22, r14
    1070:	80 e3       	ldi	r24, 0x30	; 48
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	2c 87       	std	Y+12, r18	; 0x0c
    1076:	b1 d1       	rcall	.+866    	; 0x13da <fputc>
    1078:	2c 85       	ldd	r18, Y+12	; 0x0c
    107a:	22 ff       	sbrs	r18, 2
    107c:	16 c0       	rjmp	.+44     	; 0x10aa <vfprintf+0x368>
    107e:	21 ff       	sbrs	r18, 1
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <vfprintf+0x346>
    1082:	88 e5       	ldi	r24, 0x58	; 88
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 c0       	rjmp	.+4      	; 0x108c <vfprintf+0x34a>
    1088:	88 e7       	ldi	r24, 0x78	; 120
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	b7 01       	movw	r22, r14
    108e:	0c c0       	rjmp	.+24     	; 0x10a8 <vfprintf+0x366>
    1090:	82 2f       	mov	r24, r18
    1092:	86 78       	andi	r24, 0x86	; 134
    1094:	51 f0       	breq	.+20     	; 0x10aa <vfprintf+0x368>
    1096:	21 fd       	sbrc	r18, 1
    1098:	02 c0       	rjmp	.+4      	; 0x109e <vfprintf+0x35c>
    109a:	80 e2       	ldi	r24, 0x20	; 32
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <vfprintf+0x35e>
    109e:	8b e2       	ldi	r24, 0x2B	; 43
    10a0:	27 fd       	sbrc	r18, 7
    10a2:	8d e2       	ldi	r24, 0x2D	; 45
    10a4:	b7 01       	movw	r22, r14
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	98 d1       	rcall	.+816    	; 0x13da <fputc>
    10aa:	a5 14       	cp	r10, r5
    10ac:	30 f4       	brcc	.+12     	; 0x10ba <vfprintf+0x378>
    10ae:	b7 01       	movw	r22, r14
    10b0:	80 e3       	ldi	r24, 0x30	; 48
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	92 d1       	rcall	.+804    	; 0x13da <fputc>
    10b6:	5a 94       	dec	r5
    10b8:	f8 cf       	rjmp	.-16     	; 0x10aa <vfprintf+0x368>
    10ba:	aa 94       	dec	r10
    10bc:	f4 01       	movw	r30, r8
    10be:	ea 0d       	add	r30, r10
    10c0:	f1 1d       	adc	r31, r1
    10c2:	80 81       	ld	r24, Z
    10c4:	b7 01       	movw	r22, r14
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	88 d1       	rcall	.+784    	; 0x13da <fputc>
    10ca:	a1 10       	cpse	r10, r1
    10cc:	f6 cf       	rjmp	.-20     	; 0x10ba <vfprintf+0x378>
    10ce:	33 20       	and	r3, r3
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <vfprintf+0x392>
    10d2:	5d ce       	rjmp	.-838    	; 0xd8e <vfprintf+0x4c>
    10d4:	b7 01       	movw	r22, r14
    10d6:	80 e2       	ldi	r24, 0x20	; 32
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	7f d1       	rcall	.+766    	; 0x13da <fputc>
    10dc:	3a 94       	dec	r3
    10de:	f7 cf       	rjmp	.-18     	; 0x10ce <vfprintf+0x38c>
    10e0:	f7 01       	movw	r30, r14
    10e2:	86 81       	ldd	r24, Z+6	; 0x06
    10e4:	97 81       	ldd	r25, Z+7	; 0x07
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <vfprintf+0x3aa>
    10e8:	8f ef       	ldi	r24, 0xFF	; 255
    10ea:	9f ef       	ldi	r25, 0xFF	; 255
    10ec:	2c 96       	adiw	r28, 0x0c	; 12
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	ff 90       	pop	r15
    1102:	ef 90       	pop	r14
    1104:	df 90       	pop	r13
    1106:	cf 90       	pop	r12
    1108:	bf 90       	pop	r11
    110a:	af 90       	pop	r10
    110c:	9f 90       	pop	r9
    110e:	8f 90       	pop	r8
    1110:	7f 90       	pop	r7
    1112:	6f 90       	pop	r6
    1114:	5f 90       	pop	r5
    1116:	4f 90       	pop	r4
    1118:	3f 90       	pop	r3
    111a:	2f 90       	pop	r2
    111c:	08 95       	ret

0000111e <calloc>:
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	86 9f       	mul	r24, r22
    1128:	80 01       	movw	r16, r0
    112a:	87 9f       	mul	r24, r23
    112c:	10 0d       	add	r17, r0
    112e:	96 9f       	mul	r25, r22
    1130:	10 0d       	add	r17, r0
    1132:	11 24       	eor	r1, r1
    1134:	c8 01       	movw	r24, r16
    1136:	0d d0       	rcall	.+26     	; 0x1152 <malloc>
    1138:	ec 01       	movw	r28, r24
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	21 f0       	breq	.+8      	; 0x1146 <calloc+0x28>
    113e:	a8 01       	movw	r20, r16
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	38 d1       	rcall	.+624    	; 0x13b6 <memset>
    1146:	ce 01       	movw	r24, r28
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	08 95       	ret

00001152 <malloc>:
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	91 05       	cpc	r25, r1
    115a:	10 f4       	brcc	.+4      	; 0x1160 <malloc+0xe>
    115c:	82 e0       	ldi	r24, 0x02	; 2
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	e0 91 67 02 	lds	r30, 0x0267
    1164:	f0 91 68 02 	lds	r31, 0x0268
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	a0 e0       	ldi	r26, 0x00	; 0
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	30 97       	sbiw	r30, 0x00	; 0
    1172:	39 f1       	breq	.+78     	; 0x11c2 <malloc+0x70>
    1174:	40 81       	ld	r20, Z
    1176:	51 81       	ldd	r21, Z+1	; 0x01
    1178:	48 17       	cp	r20, r24
    117a:	59 07       	cpc	r21, r25
    117c:	b8 f0       	brcs	.+46     	; 0x11ac <malloc+0x5a>
    117e:	48 17       	cp	r20, r24
    1180:	59 07       	cpc	r21, r25
    1182:	71 f4       	brne	.+28     	; 0x11a0 <malloc+0x4e>
    1184:	82 81       	ldd	r24, Z+2	; 0x02
    1186:	93 81       	ldd	r25, Z+3	; 0x03
    1188:	10 97       	sbiw	r26, 0x00	; 0
    118a:	29 f0       	breq	.+10     	; 0x1196 <malloc+0x44>
    118c:	13 96       	adiw	r26, 0x03	; 3
    118e:	9c 93       	st	X, r25
    1190:	8e 93       	st	-X, r24
    1192:	12 97       	sbiw	r26, 0x02	; 2
    1194:	2c c0       	rjmp	.+88     	; 0x11ee <malloc+0x9c>
    1196:	90 93 68 02 	sts	0x0268, r25
    119a:	80 93 67 02 	sts	0x0267, r24
    119e:	27 c0       	rjmp	.+78     	; 0x11ee <malloc+0x9c>
    11a0:	21 15       	cp	r18, r1
    11a2:	31 05       	cpc	r19, r1
    11a4:	31 f0       	breq	.+12     	; 0x11b2 <malloc+0x60>
    11a6:	42 17       	cp	r20, r18
    11a8:	53 07       	cpc	r21, r19
    11aa:	18 f0       	brcs	.+6      	; 0x11b2 <malloc+0x60>
    11ac:	a9 01       	movw	r20, r18
    11ae:	db 01       	movw	r26, r22
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <malloc+0x62>
    11b2:	ef 01       	movw	r28, r30
    11b4:	9a 01       	movw	r18, r20
    11b6:	bd 01       	movw	r22, r26
    11b8:	df 01       	movw	r26, r30
    11ba:	02 80       	ldd	r0, Z+2	; 0x02
    11bc:	f3 81       	ldd	r31, Z+3	; 0x03
    11be:	e0 2d       	mov	r30, r0
    11c0:	d7 cf       	rjmp	.-82     	; 0x1170 <malloc+0x1e>
    11c2:	21 15       	cp	r18, r1
    11c4:	31 05       	cpc	r19, r1
    11c6:	f9 f0       	breq	.+62     	; 0x1206 <malloc+0xb4>
    11c8:	28 1b       	sub	r18, r24
    11ca:	39 0b       	sbc	r19, r25
    11cc:	24 30       	cpi	r18, 0x04	; 4
    11ce:	31 05       	cpc	r19, r1
    11d0:	80 f4       	brcc	.+32     	; 0x11f2 <malloc+0xa0>
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	9b 81       	ldd	r25, Y+3	; 0x03
    11d6:	61 15       	cp	r22, r1
    11d8:	71 05       	cpc	r23, r1
    11da:	21 f0       	breq	.+8      	; 0x11e4 <malloc+0x92>
    11dc:	fb 01       	movw	r30, r22
    11de:	93 83       	std	Z+3, r25	; 0x03
    11e0:	82 83       	std	Z+2, r24	; 0x02
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <malloc+0x9a>
    11e4:	90 93 68 02 	sts	0x0268, r25
    11e8:	80 93 67 02 	sts	0x0267, r24
    11ec:	fe 01       	movw	r30, r28
    11ee:	32 96       	adiw	r30, 0x02	; 2
    11f0:	44 c0       	rjmp	.+136    	; 0x127a <malloc+0x128>
    11f2:	fe 01       	movw	r30, r28
    11f4:	e2 0f       	add	r30, r18
    11f6:	f3 1f       	adc	r31, r19
    11f8:	81 93       	st	Z+, r24
    11fa:	91 93       	st	Z+, r25
    11fc:	22 50       	subi	r18, 0x02	; 2
    11fe:	31 09       	sbc	r19, r1
    1200:	39 83       	std	Y+1, r19	; 0x01
    1202:	28 83       	st	Y, r18
    1204:	3a c0       	rjmp	.+116    	; 0x127a <malloc+0x128>
    1206:	20 91 65 02 	lds	r18, 0x0265
    120a:	30 91 66 02 	lds	r19, 0x0266
    120e:	23 2b       	or	r18, r19
    1210:	41 f4       	brne	.+16     	; 0x1222 <malloc+0xd0>
    1212:	20 91 02 02 	lds	r18, 0x0202
    1216:	30 91 03 02 	lds	r19, 0x0203
    121a:	30 93 66 02 	sts	0x0266, r19
    121e:	20 93 65 02 	sts	0x0265, r18
    1222:	20 91 00 02 	lds	r18, 0x0200
    1226:	30 91 01 02 	lds	r19, 0x0201
    122a:	21 15       	cp	r18, r1
    122c:	31 05       	cpc	r19, r1
    122e:	41 f4       	brne	.+16     	; 0x1240 <malloc+0xee>
    1230:	2d b7       	in	r18, 0x3d	; 61
    1232:	3e b7       	in	r19, 0x3e	; 62
    1234:	40 91 04 02 	lds	r20, 0x0204
    1238:	50 91 05 02 	lds	r21, 0x0205
    123c:	24 1b       	sub	r18, r20
    123e:	35 0b       	sbc	r19, r21
    1240:	e0 91 65 02 	lds	r30, 0x0265
    1244:	f0 91 66 02 	lds	r31, 0x0266
    1248:	e2 17       	cp	r30, r18
    124a:	f3 07       	cpc	r31, r19
    124c:	a0 f4       	brcc	.+40     	; 0x1276 <malloc+0x124>
    124e:	2e 1b       	sub	r18, r30
    1250:	3f 0b       	sbc	r19, r31
    1252:	28 17       	cp	r18, r24
    1254:	39 07       	cpc	r19, r25
    1256:	78 f0       	brcs	.+30     	; 0x1276 <malloc+0x124>
    1258:	ac 01       	movw	r20, r24
    125a:	4e 5f       	subi	r20, 0xFE	; 254
    125c:	5f 4f       	sbci	r21, 0xFF	; 255
    125e:	24 17       	cp	r18, r20
    1260:	35 07       	cpc	r19, r21
    1262:	48 f0       	brcs	.+18     	; 0x1276 <malloc+0x124>
    1264:	4e 0f       	add	r20, r30
    1266:	5f 1f       	adc	r21, r31
    1268:	50 93 66 02 	sts	0x0266, r21
    126c:	40 93 65 02 	sts	0x0265, r20
    1270:	81 93       	st	Z+, r24
    1272:	91 93       	st	Z+, r25
    1274:	02 c0       	rjmp	.+4      	; 0x127a <malloc+0x128>
    1276:	e0 e0       	ldi	r30, 0x00	; 0
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	cf 01       	movw	r24, r30
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <free>:
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	09 f4       	brne	.+2      	; 0x128c <free+0xa>
    128a:	87 c0       	rjmp	.+270    	; 0x139a <free+0x118>
    128c:	fc 01       	movw	r30, r24
    128e:	32 97       	sbiw	r30, 0x02	; 2
    1290:	13 82       	std	Z+3, r1	; 0x03
    1292:	12 82       	std	Z+2, r1	; 0x02
    1294:	c0 91 67 02 	lds	r28, 0x0267
    1298:	d0 91 68 02 	lds	r29, 0x0268
    129c:	20 97       	sbiw	r28, 0x00	; 0
    129e:	81 f4       	brne	.+32     	; 0x12c0 <free+0x3e>
    12a0:	20 81       	ld	r18, Z
    12a2:	31 81       	ldd	r19, Z+1	; 0x01
    12a4:	28 0f       	add	r18, r24
    12a6:	39 1f       	adc	r19, r25
    12a8:	80 91 65 02 	lds	r24, 0x0265
    12ac:	90 91 66 02 	lds	r25, 0x0266
    12b0:	82 17       	cp	r24, r18
    12b2:	93 07       	cpc	r25, r19
    12b4:	79 f5       	brne	.+94     	; 0x1314 <free+0x92>
    12b6:	f0 93 66 02 	sts	0x0266, r31
    12ba:	e0 93 65 02 	sts	0x0265, r30
    12be:	6d c0       	rjmp	.+218    	; 0x139a <free+0x118>
    12c0:	de 01       	movw	r26, r28
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	ae 17       	cp	r26, r30
    12c8:	bf 07       	cpc	r27, r31
    12ca:	50 f4       	brcc	.+20     	; 0x12e0 <free+0x5e>
    12cc:	12 96       	adiw	r26, 0x02	; 2
    12ce:	4d 91       	ld	r20, X+
    12d0:	5c 91       	ld	r21, X
    12d2:	13 97       	sbiw	r26, 0x03	; 3
    12d4:	9d 01       	movw	r18, r26
    12d6:	41 15       	cp	r20, r1
    12d8:	51 05       	cpc	r21, r1
    12da:	09 f1       	breq	.+66     	; 0x131e <free+0x9c>
    12dc:	da 01       	movw	r26, r20
    12de:	f3 cf       	rjmp	.-26     	; 0x12c6 <free+0x44>
    12e0:	b3 83       	std	Z+3, r27	; 0x03
    12e2:	a2 83       	std	Z+2, r26	; 0x02
    12e4:	40 81       	ld	r20, Z
    12e6:	51 81       	ldd	r21, Z+1	; 0x01
    12e8:	84 0f       	add	r24, r20
    12ea:	95 1f       	adc	r25, r21
    12ec:	8a 17       	cp	r24, r26
    12ee:	9b 07       	cpc	r25, r27
    12f0:	71 f4       	brne	.+28     	; 0x130e <free+0x8c>
    12f2:	8d 91       	ld	r24, X+
    12f4:	9c 91       	ld	r25, X
    12f6:	11 97       	sbiw	r26, 0x01	; 1
    12f8:	84 0f       	add	r24, r20
    12fa:	95 1f       	adc	r25, r21
    12fc:	02 96       	adiw	r24, 0x02	; 2
    12fe:	91 83       	std	Z+1, r25	; 0x01
    1300:	80 83       	st	Z, r24
    1302:	12 96       	adiw	r26, 0x02	; 2
    1304:	8d 91       	ld	r24, X+
    1306:	9c 91       	ld	r25, X
    1308:	13 97       	sbiw	r26, 0x03	; 3
    130a:	93 83       	std	Z+3, r25	; 0x03
    130c:	82 83       	std	Z+2, r24	; 0x02
    130e:	21 15       	cp	r18, r1
    1310:	31 05       	cpc	r19, r1
    1312:	29 f4       	brne	.+10     	; 0x131e <free+0x9c>
    1314:	f0 93 68 02 	sts	0x0268, r31
    1318:	e0 93 67 02 	sts	0x0267, r30
    131c:	3e c0       	rjmp	.+124    	; 0x139a <free+0x118>
    131e:	d9 01       	movw	r26, r18
    1320:	13 96       	adiw	r26, 0x03	; 3
    1322:	fc 93       	st	X, r31
    1324:	ee 93       	st	-X, r30
    1326:	12 97       	sbiw	r26, 0x02	; 2
    1328:	4d 91       	ld	r20, X+
    132a:	5d 91       	ld	r21, X+
    132c:	a4 0f       	add	r26, r20
    132e:	b5 1f       	adc	r27, r21
    1330:	ea 17       	cp	r30, r26
    1332:	fb 07       	cpc	r31, r27
    1334:	79 f4       	brne	.+30     	; 0x1354 <free+0xd2>
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	84 0f       	add	r24, r20
    133c:	95 1f       	adc	r25, r21
    133e:	02 96       	adiw	r24, 0x02	; 2
    1340:	d9 01       	movw	r26, r18
    1342:	11 96       	adiw	r26, 0x01	; 1
    1344:	9c 93       	st	X, r25
    1346:	8e 93       	st	-X, r24
    1348:	82 81       	ldd	r24, Z+2	; 0x02
    134a:	93 81       	ldd	r25, Z+3	; 0x03
    134c:	13 96       	adiw	r26, 0x03	; 3
    134e:	9c 93       	st	X, r25
    1350:	8e 93       	st	-X, r24
    1352:	12 97       	sbiw	r26, 0x02	; 2
    1354:	e0 e0       	ldi	r30, 0x00	; 0
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	9b 81       	ldd	r25, Y+3	; 0x03
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	19 f0       	breq	.+6      	; 0x1366 <free+0xe4>
    1360:	fe 01       	movw	r30, r28
    1362:	ec 01       	movw	r28, r24
    1364:	f9 cf       	rjmp	.-14     	; 0x1358 <free+0xd6>
    1366:	ce 01       	movw	r24, r28
    1368:	02 96       	adiw	r24, 0x02	; 2
    136a:	28 81       	ld	r18, Y
    136c:	39 81       	ldd	r19, Y+1	; 0x01
    136e:	82 0f       	add	r24, r18
    1370:	93 1f       	adc	r25, r19
    1372:	20 91 65 02 	lds	r18, 0x0265
    1376:	30 91 66 02 	lds	r19, 0x0266
    137a:	28 17       	cp	r18, r24
    137c:	39 07       	cpc	r19, r25
    137e:	69 f4       	brne	.+26     	; 0x139a <free+0x118>
    1380:	30 97       	sbiw	r30, 0x00	; 0
    1382:	29 f4       	brne	.+10     	; 0x138e <free+0x10c>
    1384:	10 92 68 02 	sts	0x0268, r1
    1388:	10 92 67 02 	sts	0x0267, r1
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <free+0x110>
    138e:	13 82       	std	Z+3, r1	; 0x03
    1390:	12 82       	std	Z+2, r1	; 0x02
    1392:	d0 93 66 02 	sts	0x0266, r29
    1396:	c0 93 65 02 	sts	0x0265, r28
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	08 95       	ret

000013a0 <strnlen_P>:
    13a0:	fc 01       	movw	r30, r24
    13a2:	05 90       	lpm	r0, Z+
    13a4:	61 50       	subi	r22, 0x01	; 1
    13a6:	70 40       	sbci	r23, 0x00	; 0
    13a8:	01 10       	cpse	r0, r1
    13aa:	d8 f7       	brcc	.-10     	; 0x13a2 <strnlen_P+0x2>
    13ac:	80 95       	com	r24
    13ae:	90 95       	com	r25
    13b0:	8e 0f       	add	r24, r30
    13b2:	9f 1f       	adc	r25, r31
    13b4:	08 95       	ret

000013b6 <memset>:
    13b6:	dc 01       	movw	r26, r24
    13b8:	01 c0       	rjmp	.+2      	; 0x13bc <memset+0x6>
    13ba:	6d 93       	st	X+, r22
    13bc:	41 50       	subi	r20, 0x01	; 1
    13be:	50 40       	sbci	r21, 0x00	; 0
    13c0:	e0 f7       	brcc	.-8      	; 0x13ba <memset+0x4>
    13c2:	08 95       	ret

000013c4 <strnlen>:
    13c4:	fc 01       	movw	r30, r24
    13c6:	61 50       	subi	r22, 0x01	; 1
    13c8:	70 40       	sbci	r23, 0x00	; 0
    13ca:	01 90       	ld	r0, Z+
    13cc:	01 10       	cpse	r0, r1
    13ce:	d8 f7       	brcc	.-10     	; 0x13c6 <strnlen+0x2>
    13d0:	80 95       	com	r24
    13d2:	90 95       	com	r25
    13d4:	8e 0f       	add	r24, r30
    13d6:	9f 1f       	adc	r25, r31
    13d8:	08 95       	ret

000013da <fputc>:
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	18 2f       	mov	r17, r24
    13e4:	09 2f       	mov	r16, r25
    13e6:	eb 01       	movw	r28, r22
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	81 fd       	sbrc	r24, 1
    13ec:	03 c0       	rjmp	.+6      	; 0x13f4 <fputc+0x1a>
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	9f ef       	ldi	r25, 0xFF	; 255
    13f2:	20 c0       	rjmp	.+64     	; 0x1434 <fputc+0x5a>
    13f4:	82 ff       	sbrs	r24, 2
    13f6:	10 c0       	rjmp	.+32     	; 0x1418 <fputc+0x3e>
    13f8:	4e 81       	ldd	r20, Y+6	; 0x06
    13fa:	5f 81       	ldd	r21, Y+7	; 0x07
    13fc:	2c 81       	ldd	r18, Y+4	; 0x04
    13fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1400:	42 17       	cp	r20, r18
    1402:	53 07       	cpc	r21, r19
    1404:	7c f4       	brge	.+30     	; 0x1424 <fputc+0x4a>
    1406:	e8 81       	ld	r30, Y
    1408:	f9 81       	ldd	r31, Y+1	; 0x01
    140a:	9f 01       	movw	r18, r30
    140c:	2f 5f       	subi	r18, 0xFF	; 255
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	39 83       	std	Y+1, r19	; 0x01
    1412:	28 83       	st	Y, r18
    1414:	10 83       	st	Z, r17
    1416:	06 c0       	rjmp	.+12     	; 0x1424 <fputc+0x4a>
    1418:	e8 85       	ldd	r30, Y+8	; 0x08
    141a:	f9 85       	ldd	r31, Y+9	; 0x09
    141c:	81 2f       	mov	r24, r17
    141e:	19 95       	eicall
    1420:	89 2b       	or	r24, r25
    1422:	29 f7       	brne	.-54     	; 0x13ee <fputc+0x14>
    1424:	2e 81       	ldd	r18, Y+6	; 0x06
    1426:	3f 81       	ldd	r19, Y+7	; 0x07
    1428:	2f 5f       	subi	r18, 0xFF	; 255
    142a:	3f 4f       	sbci	r19, 0xFF	; 255
    142c:	3f 83       	std	Y+7, r19	; 0x07
    142e:	2e 83       	std	Y+6, r18	; 0x06
    1430:	81 2f       	mov	r24, r17
    1432:	90 2f       	mov	r25, r16
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	08 95       	ret

0000143e <__ultoa_invert>:
    143e:	fa 01       	movw	r30, r20
    1440:	aa 27       	eor	r26, r26
    1442:	28 30       	cpi	r18, 0x08	; 8
    1444:	51 f1       	breq	.+84     	; 0x149a <__ultoa_invert+0x5c>
    1446:	20 31       	cpi	r18, 0x10	; 16
    1448:	81 f1       	breq	.+96     	; 0x14aa <__ultoa_invert+0x6c>
    144a:	e8 94       	clt
    144c:	6f 93       	push	r22
    144e:	6e 7f       	andi	r22, 0xFE	; 254
    1450:	6e 5f       	subi	r22, 0xFE	; 254
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	8f 4f       	sbci	r24, 0xFF	; 255
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	af 4f       	sbci	r26, 0xFF	; 255
    145a:	b1 e0       	ldi	r27, 0x01	; 1
    145c:	3e d0       	rcall	.+124    	; 0x14da <__ultoa_invert+0x9c>
    145e:	b4 e0       	ldi	r27, 0x04	; 4
    1460:	3c d0       	rcall	.+120    	; 0x14da <__ultoa_invert+0x9c>
    1462:	67 0f       	add	r22, r23
    1464:	78 1f       	adc	r23, r24
    1466:	89 1f       	adc	r24, r25
    1468:	9a 1f       	adc	r25, r26
    146a:	a1 1d       	adc	r26, r1
    146c:	68 0f       	add	r22, r24
    146e:	79 1f       	adc	r23, r25
    1470:	8a 1f       	adc	r24, r26
    1472:	91 1d       	adc	r25, r1
    1474:	a1 1d       	adc	r26, r1
    1476:	6a 0f       	add	r22, r26
    1478:	71 1d       	adc	r23, r1
    147a:	81 1d       	adc	r24, r1
    147c:	91 1d       	adc	r25, r1
    147e:	a1 1d       	adc	r26, r1
    1480:	20 d0       	rcall	.+64     	; 0x14c2 <__ultoa_invert+0x84>
    1482:	09 f4       	brne	.+2      	; 0x1486 <__ultoa_invert+0x48>
    1484:	68 94       	set
    1486:	3f 91       	pop	r19
    1488:	2a e0       	ldi	r18, 0x0A	; 10
    148a:	26 9f       	mul	r18, r22
    148c:	11 24       	eor	r1, r1
    148e:	30 19       	sub	r19, r0
    1490:	30 5d       	subi	r19, 0xD0	; 208
    1492:	31 93       	st	Z+, r19
    1494:	de f6       	brtc	.-74     	; 0x144c <__ultoa_invert+0xe>
    1496:	cf 01       	movw	r24, r30
    1498:	08 95       	ret
    149a:	46 2f       	mov	r20, r22
    149c:	47 70       	andi	r20, 0x07	; 7
    149e:	40 5d       	subi	r20, 0xD0	; 208
    14a0:	41 93       	st	Z+, r20
    14a2:	b3 e0       	ldi	r27, 0x03	; 3
    14a4:	0f d0       	rcall	.+30     	; 0x14c4 <__ultoa_invert+0x86>
    14a6:	c9 f7       	brne	.-14     	; 0x149a <__ultoa_invert+0x5c>
    14a8:	f6 cf       	rjmp	.-20     	; 0x1496 <__ultoa_invert+0x58>
    14aa:	46 2f       	mov	r20, r22
    14ac:	4f 70       	andi	r20, 0x0F	; 15
    14ae:	40 5d       	subi	r20, 0xD0	; 208
    14b0:	4a 33       	cpi	r20, 0x3A	; 58
    14b2:	18 f0       	brcs	.+6      	; 0x14ba <__ultoa_invert+0x7c>
    14b4:	49 5d       	subi	r20, 0xD9	; 217
    14b6:	31 fd       	sbrc	r19, 1
    14b8:	40 52       	subi	r20, 0x20	; 32
    14ba:	41 93       	st	Z+, r20
    14bc:	02 d0       	rcall	.+4      	; 0x14c2 <__ultoa_invert+0x84>
    14be:	a9 f7       	brne	.-22     	; 0x14aa <__ultoa_invert+0x6c>
    14c0:	ea cf       	rjmp	.-44     	; 0x1496 <__ultoa_invert+0x58>
    14c2:	b4 e0       	ldi	r27, 0x04	; 4
    14c4:	a6 95       	lsr	r26
    14c6:	97 95       	ror	r25
    14c8:	87 95       	ror	r24
    14ca:	77 95       	ror	r23
    14cc:	67 95       	ror	r22
    14ce:	ba 95       	dec	r27
    14d0:	c9 f7       	brne	.-14     	; 0x14c4 <__ultoa_invert+0x86>
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	61 05       	cpc	r22, r1
    14d6:	71 05       	cpc	r23, r1
    14d8:	08 95       	ret
    14da:	9b 01       	movw	r18, r22
    14dc:	ac 01       	movw	r20, r24
    14de:	0a 2e       	mov	r0, r26
    14e0:	06 94       	lsr	r0
    14e2:	57 95       	ror	r21
    14e4:	47 95       	ror	r20
    14e6:	37 95       	ror	r19
    14e8:	27 95       	ror	r18
    14ea:	ba 95       	dec	r27
    14ec:	c9 f7       	brne	.-14     	; 0x14e0 <__ultoa_invert+0xa2>
    14ee:	62 0f       	add	r22, r18
    14f0:	73 1f       	adc	r23, r19
    14f2:	84 1f       	adc	r24, r20
    14f4:	95 1f       	adc	r25, r21
    14f6:	a0 1d       	adc	r26, r0
    14f8:	08 95       	ret

000014fa <_exit>:
    14fa:	f8 94       	cli

000014fc <__stop_program>:
    14fc:	ff cf       	rjmp	.-2      	; 0x14fc <__stop_program>
