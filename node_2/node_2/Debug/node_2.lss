
node_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800200  00000fc2  00001056  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800248  00800248  0000109e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000109e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  000010fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001582  00000000  00000000  000012f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b30  00000000  00000000  00002874  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b16  00000000  00000000  000033a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000408  00000000  00000000  00004ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000a1b4  00000000  00000000  000052c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a6f  00000000  00000000  0000f478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  0000fee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000435d  00000000  00000000  00010067  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ec       	ldi	r30, 0xC2	; 194
  fc:	ff e0       	ldi	r31, 0x0F	; 15
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 34       	cpi	r26, 0x48	; 72
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e4       	ldi	r26, 0x48	; 72
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 35       	cpi	r26, 0x57	; 87
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	10 d0       	rcall	.+32     	; 0x140 <main>
 120:	4e c7       	rjmp	.+3740   	; 0xfbe <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <handle_message>:
}


void handle_message(can_message_t* message)
{
	switch (message->id)
 124:	fc 01       	movw	r30, r24
 126:	20 81       	ld	r18, Z
 128:	2a 36       	cpi	r18, 0x6A	; 106
 12a:	21 f0       	breq	.+8      	; 0x134 <handle_message+0x10>
 12c:	20 37       	cpi	r18, 0x70	; 112
 12e:	31 f4       	brne	.+12     	; 0x13c <handle_message+0x18>
	{
		case 'p' :				// Print
		can_print(message);
 130:	6f c1       	rjmp	.+734    	; 0x410 <can_print>
		break;
 132:	08 95       	ret
		case 'j' :
		motor_drive(message->data[0]);
 134:	fc 01       	movw	r30, r24
 136:	82 81       	ldd	r24, Z+2	; 0x02
 138:	29 c0       	rjmp	.+82     	; 0x18c <motor_drive>
		break;
 13a:	08 95       	ret
		default:
		can_print(message);
 13c:	69 c1       	rjmp	.+722    	; 0x410 <can_print>
 13e:	08 95       	ret

00000140 <main>:


void handle_message(can_message_t* message);

int main (void)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	2a 97       	sbiw	r28, 0x0a	; 10
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
	can_init();
 154:	c6 d0       	rcall	.+396    	; 0x2e2 <can_init>
	servo_init();
 156:	54 d0       	rcall	.+168    	; 0x200 <servo_init>
	init_ADC();
 158:	77 d0       	rcall	.+238    	; 0x248 <init_ADC>
	USART_init(MYUBRR);
 15a:	87 e6       	ldi	r24, 0x67	; 103
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	8f d2       	rcall	.+1310   	; 0x67e <USART_init>
	motor_init();
 160:	35 d0       	rcall	.+106    	; 0x1cc <motor_init>
	
	can_message_t message;
	
	
	DDRF = 0xFF; // MJ1 output
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	80 bb       	out	0x10, r24	; 16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	89 ef       	ldi	r24, 0xF9	; 249
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x2c>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x36>
 176:	00 00       	nop
	{

		
		_delay_ms(20);
		/*    TESTING    */
		if (can_get_message(&message) == 1)
 178:	ce 01       	movw	r24, r28
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	23 d1       	rcall	.+582    	; 0x3c4 <can_get_message>
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	19 f4       	brne	.+6      	; 0x188 <main+0x48>
		{
			handle_message(&message);
 182:	ce 01       	movw	r24, r28
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	ce df       	rcall	.-100    	; 0x124 <handle_message>
		}
		check_and_report_goal();
 188:	7d d0       	rcall	.+250    	; 0x284 <check_and_report_goal>
		
		can_get_message(&msg);
		val = msg.data[0]*5 + 1500;
		servo_write(val);
		*/
	}
 18a:	ed cf       	rjmp	.-38     	; 0x166 <main+0x26>

0000018c <motor_drive>:
{
	
	
	
	// Set direction
	if(joystick_x < 0){
 18c:	88 23       	and	r24, r24
 18e:	14 f4       	brge	.+4      	; 0x194 <motor_drive+0x8>
		PORTF &= ~(1 << PF3);
 190:	8b 98       	cbi	0x11, 3	; 17
 192:	01 c0       	rjmp	.+2      	; 0x196 <motor_drive+0xa>
	}
	else{
		PORTF |= (1 << PF3);
 194:	8b 9a       	sbi	0x11, 3	; 17
	}
	
	// Set speed
	motor_speed = (char)((abs((float)joystick_x)*255)/100);
 196:	28 2f       	mov	r18, r24
 198:	33 27       	eor	r19, r19
 19a:	27 fd       	sbrc	r18, 7
 19c:	30 95       	com	r19
 19e:	33 23       	and	r19, r19
 1a0:	1c f4       	brge	.+6      	; 0x1a8 <motor_drive+0x1c>
 1a2:	31 95       	neg	r19
 1a4:	21 95       	neg	r18
 1a6:	31 09       	sbc	r19, r1
 1a8:	4f ef       	ldi	r20, 0xFF	; 255
 1aa:	42 9f       	mul	r20, r18
 1ac:	c0 01       	movw	r24, r0
 1ae:	43 9f       	mul	r20, r19
 1b0:	90 0d       	add	r25, r0
 1b2:	11 24       	eor	r1, r1
 1b4:	64 e6       	ldi	r22, 0x64	; 100
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	72 d2       	rcall	.+1252   	; 0x69e <__divmodhi4>
 1ba:	60 93 4c 02 	sts	0x024C, r22
	i2c_transmit(0x50, &motor_speed,1);
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	6c e4       	ldi	r22, 0x4C	; 76
 1c4:	72 e0       	ldi	r23, 0x02	; 2
 1c6:	80 e5       	ldi	r24, 0x50	; 80
 1c8:	18 c2       	rjmp	.+1072   	; 0x5fa <i2c_transmit>
 1ca:	08 95       	ret

000001cc <motor_init>:
char motor_speed;

void motor_init(void)
{
	
	i2c_init();
 1cc:	db d1       	rcall	.+950    	; 0x584 <i2c_init>
	DDRF = 0xff;
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	80 bb       	out	0x10, r24	; 16
	DDRK = 0x00;
 1d2:	10 92 07 01 	sts	0x0107, r1
	
	PORTF |= (1 << PF4); // Enable motor
 1d6:	8c 9a       	sbi	0x11, 4	; 17
	
	//Move to known reference point
	motor_drive(-50);
 1d8:	8e ec       	ldi	r24, 0xCE	; 206
 1da:	d8 df       	rcall	.-80     	; 0x18c <motor_drive>
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	8d e2       	ldi	r24, 0x2D	; 45
 1e0:	92 e2       	ldi	r25, 0x22	; 34
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <motor_init+0x16>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <motor_init+0x20>
 1ec:	00 00       	nop
	_delay_ms(700);
	motor_drive(0);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	cd df       	rcall	.-102    	; 0x18c <motor_drive>
	
	//Toggle reset encoder
	PORTF &= ~(1 << PF6);
 1f2:	8e 98       	cbi	0x11, 6	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	2a e1       	ldi	r18, 0x1A	; 26
 1f6:	2a 95       	dec	r18
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <motor_init+0x2a>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <motor_init+0x30>
	_delay_us(5);
	PORTF |= (1 << PF6);
 1fc:	8e 9a       	sbi	0x11, 6	; 17
 1fe:	08 95       	ret

00000200 <servo_init>:

void servo_init(void)
{

	// Fast PWM mode		
	TCCR1A |=  (1 << WGM11); 
 200:	e0 e8       	ldi	r30, 0x80	; 128
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	82 60       	ori	r24, 0x02	; 2
 208:	80 83       	st	Z, r24
	TCCR1B |=  (1 << WGM13) | (1 << WGM12);	
 20a:	a1 e8       	ldi	r26, 0x81	; 129
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	8c 91       	ld	r24, X
 210:	88 61       	ori	r24, 0x18	; 24
 212:	8c 93       	st	X, r24
	
	
	// Prescale
	TCCR1B |= (1 << CS11);
 214:	8c 91       	ld	r24, X
 216:	82 60       	ori	r24, 0x02	; 2
 218:	8c 93       	st	X, r24
	TCCR1B &= ~(1 << CS12) & ~(1 << CS10);	
 21a:	8c 91       	ld	r24, X
 21c:	8a 7f       	andi	r24, 0xFA	; 250
 21e:	8c 93       	st	X, r24
	
	// Clear OC2A on compare match, set OC2A at BOTTOM			
	TCCR1A |= (1 << COM1A1);
 220:	80 81       	ld	r24, Z
 222:	80 68       	ori	r24, 0x80	; 128
 224:	80 83       	st	Z, r24
	TCCR1A &= ~(1 << COM1A0);
 226:	80 81       	ld	r24, Z
 228:	8f 7b       	andi	r24, 0xBF	; 191
 22a:	80 83       	st	Z, r24
	// TOP Value
	ICR1 = TOP_VALUE;
 22c:	80 e4       	ldi	r24, 0x40	; 64
 22e:	9c e9       	ldi	r25, 0x9C	; 156
 230:	90 93 87 00 	sts	0x0087, r25
 234:	80 93 86 00 	sts	0x0086, r24
	
	// Compare register
	OCR1A = us_to_compare(900);
 238:	88 e0       	ldi	r24, 0x08	; 8
 23a:	97 e0       	ldi	r25, 0x07	; 7
 23c:	90 93 89 00 	sts	0x0089, r25
 240:	80 93 88 00 	sts	0x0088, r24
	
	// Enable output
	DDRB |= (1 << PB6);
 244:	26 9a       	sbi	0x04, 6	; 4
 246:	08 95       	ret

00000248 <init_ADC>:
int recent_goal_counter = 0;

can_message_t goal_msg = {'g',1,"aaaaaaaa"};

void init_ADC(){
	DDRF &= ~(1 << PF0);
 248:	80 98       	cbi	0x10, 0	; 16
	//ADMUX &= 0xe0;
	ADCSRA |= (1 << ADEN) | (1 << ADATE)  | (1 << ADSC) | (1 << ADPS2) |(1 << ADIE)| (1 << ADPS1) | (1 << ADPS0);
 24a:	ea e7       	ldi	r30, 0x7A	; 122
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	8f 6e       	ori	r24, 0xEF	; 239
 252:	80 83       	st	Z, r24
	//ADCH //lese fra
	//ADCL //lese fra
	ADMUX  |= (1 <<REFS0) | (1 <<ADLAR);
 254:	ec e7       	ldi	r30, 0x7C	; 124
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	80 66       	ori	r24, 0x60	; 96
 25c:	80 83       	st	Z, r24
 25e:	08 95       	ret

00000260 <ADC_read>:

uint8_t ADC_read(){
	int mean = 0; int i = 0;
	int nsamples = 4;
	for (i = 0; i <nsamples; i++){
		mean = mean + ADCH;
 260:	e9 e7       	ldi	r30, 0x79	; 121
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	20 81       	ld	r18, Z
 266:	80 81       	ld	r24, Z
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	82 0f       	add	r24, r18
 26c:	91 1d       	adc	r25, r1
 26e:	20 81       	ld	r18, Z
 270:	82 0f       	add	r24, r18
 272:	91 1d       	adc	r25, r1
 274:	20 81       	ld	r18, Z
 276:	82 0f       	add	r24, r18
 278:	91 1d       	adc	r25, r1
	}
	mean = mean/nsamples;
 27a:	95 95       	asr	r25
 27c:	87 95       	ror	r24
 27e:	95 95       	asr	r25
 280:	87 95       	ror	r24
	return mean;
}
 282:	08 95       	ret

00000284 <check_and_report_goal>:

void check_and_report_goal( void ){
	
	int threshold = 40;
	
	if (recent_goal == 0)
 284:	80 91 4a 02 	lds	r24, 0x024A
 288:	90 91 4b 02 	lds	r25, 0x024B
 28c:	89 2b       	or	r24, r25
 28e:	79 f4       	brne	.+30     	; 0x2ae <check_and_report_goal+0x2a>
	{
		goal_msg.data[0] = ADC_read();
 290:	e7 df       	rcall	.-50     	; 0x260 <ADC_read>
 292:	80 93 08 02 	sts	0x0208, r24
		
		if(goal_msg.data[0] < threshold){
 296:	88 32       	cpi	r24, 0x28	; 40
 298:	1c f5       	brge	.+70     	; 0x2e0 <check_and_report_goal+0x5c>
			recent_goal = 1;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	90 93 4b 02 	sts	0x024B, r25
 2a2:	80 93 4a 02 	sts	0x024A, r24
			can_message_send(&goal_msg);
 2a6:	86 e0       	ldi	r24, 0x06	; 6
 2a8:	92 e0       	ldi	r25, 0x02	; 2
 2aa:	29 c0       	rjmp	.+82     	; 0x2fe <can_message_send>
 2ac:	08 95       	ret
		}

	}
	else // recent_goal == 1 
	{
		recent_goal_counter += 1;
 2ae:	80 91 48 02 	lds	r24, 0x0248
 2b2:	90 91 49 02 	lds	r25, 0x0249
 2b6:	01 96       	adiw	r24, 0x01	; 1
		if (recent_goal_counter > 1000/40)
 2b8:	8a 31       	cpi	r24, 0x1A	; 26
 2ba:	91 05       	cpc	r25, r1
 2bc:	2c f4       	brge	.+10     	; 0x2c8 <check_and_report_goal+0x44>
		}

	}
	else // recent_goal == 1 
	{
		recent_goal_counter += 1;
 2be:	90 93 49 02 	sts	0x0249, r25
 2c2:	80 93 48 02 	sts	0x0248, r24
 2c6:	08 95       	ret
		if (recent_goal_counter > 1000/40)
		{
			recent_goal_counter = 0;
 2c8:	10 92 49 02 	sts	0x0249, r1
 2cc:	10 92 48 02 	sts	0x0248, r1
			if (ADC_read() > threshold){
 2d0:	c7 df       	rcall	.-114    	; 0x260 <ADC_read>
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	89 97       	sbiw	r24, 0x29	; 41
 2d6:	24 f0       	brlt	.+8      	; 0x2e0 <check_and_report_goal+0x5c>
				recent_goal = 0;
 2d8:	10 92 4b 02 	sts	0x024B, r1
 2dc:	10 92 4a 02 	sts	0x024A, r1
 2e0:	08 95       	ret

000002e2 <can_init>:


void can_init()
{
	
	mcp2515_init();
 2e2:	33 d1       	rcall	.+614    	; 0x54a <mcp2515_init>
	
	mcp2515_bit_modify(MCP_RXF0SIDH, 0xff , 0x00);
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	6f ef       	ldi	r22, 0xFF	; 255
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0a d1       	rcall	.+532    	; 0x500 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXF0SIDL, 0xE0 , 0x00);
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	60 ee       	ldi	r22, 0xE0	; 224
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	06 d1       	rcall	.+524    	; 0x500 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, 0xE0 , MODE_NORMAL);
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	60 ee       	ldi	r22, 0xE0	; 224
 2f8:	8f e0       	ldi	r24, 0x0F	; 15
 2fa:	02 c1       	rjmp	.+516    	; 0x500 <mcp2515_bit_modify>
 2fc:	08 95       	ret

000002fe <can_message_send>:
	
}


void can_message_send(can_message_t *message)
{
 2fe:	ef 92       	push	r14
 300:	ff 92       	push	r15
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	7c 01       	movw	r14, r24
	int i;
	
	// ID
	mcp2515_write(MCP_TXB0CTRL + 1,message->id);
 30c:	fc 01       	movw	r30, r24
 30e:	60 81       	ld	r22, Z
 310:	81 e3       	ldi	r24, 0x31	; 49
 312:	df d0       	rcall	.+446    	; 0x4d2 <mcp2515_write>
	mcp2515_write(0x32,0x00);
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	82 e3       	ldi	r24, 0x32	; 50
 318:	dc d0       	rcall	.+440    	; 0x4d2 <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
 31a:	f7 01       	movw	r30, r14
 31c:	61 81       	ldd	r22, Z+1	; 0x01
 31e:	85 e3       	ldi	r24, 0x35	; 53
 320:	d8 d0       	rcall	.+432    	; 0x4d2 <mcp2515_write>
	
	// Data
	for (i = 0; i< message->length; i++){
 322:	f7 01       	movw	r30, r14
 324:	81 81       	ldd	r24, Z+1	; 0x01
 326:	18 16       	cp	r1, r24
 328:	a4 f4       	brge	.+40     	; 0x352 <can_message_send+0x54>
 32a:	87 01       	movw	r16, r14
 32c:	0e 5f       	subi	r16, 0xFE	; 254
 32e:	1f 4f       	sbci	r17, 0xFF	; 255
 330:	c0 e0       	ldi	r28, 0x00	; 0
 332:	d0 e0       	ldi	r29, 0x00	; 0
		mcp2515_write(MCP_TXB0CTRL + 6 + i, (message->data[i]) );
 334:	f8 01       	movw	r30, r16
 336:	61 91       	ld	r22, Z+
 338:	8f 01       	movw	r16, r30
 33a:	8c 2f       	mov	r24, r28
 33c:	8a 5c       	subi	r24, 0xCA	; 202
 33e:	c9 d0       	rcall	.+402    	; 0x4d2 <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
	
	// Data
	for (i = 0; i< message->length; i++){
 340:	21 96       	adiw	r28, 0x01	; 1
 342:	f7 01       	movw	r30, r14
 344:	21 81       	ldd	r18, Z+1	; 0x01
 346:	33 27       	eor	r19, r19
 348:	27 fd       	sbrc	r18, 7
 34a:	30 95       	com	r19
 34c:	c2 17       	cp	r28, r18
 34e:	d3 07       	cpc	r29, r19
 350:	8c f3       	brlt	.-30     	; 0x334 <can_message_send+0x36>
		mcp2515_write(MCP_TXB0CTRL + 6 + i, (message->data[i]) );
	}
	
	mcp2515_request_to_send(MCP_RTS_TX0);
 352:	81 e8       	ldi	r24, 0x81	; 129
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	cc d0       	rcall	.+408    	; 0x4f0 <mcp2515_request_to_send>
}
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	ff 90       	pop	r15
 362:	ef 90       	pop	r14
 364:	08 95       	ret

00000366 <can_message_receive>:

void can_message_receive(can_message_t* message, int buffer)
{
 366:	ef 92       	push	r14
 368:	ff 92       	push	r15
 36a:	0f 93       	push	r16
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	8c 01       	movw	r16, r24
 374:	e6 2e       	mov	r14, r22
	char i;
	
	// ID
	message->id = mcp2515_read(MCP_RXB0CTRL+buffer + 1);
 376:	81 e6       	ldi	r24, 0x61	; 97
 378:	86 0f       	add	r24, r22
 37a:	9e d0       	rcall	.+316    	; 0x4b8 <mcp2515_read>
 37c:	f8 01       	movw	r30, r16
 37e:	80 83       	st	Z, r24
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
 380:	85 e6       	ldi	r24, 0x65	; 101
 382:	8e 0d       	add	r24, r14
 384:	99 d0       	rcall	.+306    	; 0x4b8 <mcp2515_read>
 386:	f8 01       	movw	r30, r16
 388:	81 83       	std	Z+1, r24	; 0x01
	
	// Data
	for(i=0;i<message->length;i++)
 38a:	18 16       	cp	r1, r24
 38c:	a4 f4       	brge	.+40     	; 0x3b6 <can_message_receive+0x50>
 38e:	c0 e0       	ldi	r28, 0x00	; 0
 390:	d0 e0       	ldi	r29, 0x00	; 0
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
 392:	f6 e6       	ldi	r31, 0x66	; 102
 394:	ef 0e       	add	r14, r31
 396:	fc 2e       	mov	r15, r28
 398:	8c 2f       	mov	r24, r28
 39a:	8e 0d       	add	r24, r14
 39c:	8d d0       	rcall	.+282    	; 0x4b8 <mcp2515_read>
 39e:	f8 01       	movw	r30, r16
 3a0:	ec 0f       	add	r30, r28
 3a2:	f1 1d       	adc	r31, r1
 3a4:	c7 fd       	sbrc	r28, 7
 3a6:	fa 95       	dec	r31
 3a8:	82 83       	std	Z+2, r24	; 0x02
 3aa:	f3 94       	inc	r15
 3ac:	21 96       	adiw	r28, 0x01	; 1
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
	
	// Data
	for(i=0;i<message->length;i++)
 3ae:	f8 01       	movw	r30, r16
 3b0:	81 81       	ldd	r24, Z+1	; 0x01
 3b2:	f8 16       	cp	r15, r24
 3b4:	84 f3       	brlt	.-32     	; 0x396 <can_message_receive+0x30>
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
	}
	
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	ff 90       	pop	r15
 3c0:	ef 90       	pop	r14
 3c2:	08 95       	ret

000003c4 <can_get_message>:

int can_get_message(can_message_t* message)
{
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	ec 01       	movw	r28, r24
	
	if ((mcp2515_read(MCP_CANINTF) & 0x01) == 0x01)
 3ca:	8c e2       	ldi	r24, 0x2C	; 44
 3cc:	75 d0       	rcall	.+234    	; 0x4b8 <mcp2515_read>
 3ce:	80 ff       	sbrs	r24, 0
 3d0:	0b c0       	rjmp	.+22     	; 0x3e8 <can_get_message+0x24>
	{
		can_message_receive(message,0);
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	ce 01       	movw	r24, r28
 3d8:	c6 df       	rcall	.-116    	; 0x366 <can_message_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x01,0x00);
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	8c e2       	ldi	r24, 0x2C	; 44
 3e0:	8f d0       	rcall	.+286    	; 0x500 <mcp2515_bit_modify>
		return 1;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	11 c0       	rjmp	.+34     	; 0x40a <can_get_message+0x46>
	}
	else if ((mcp2515_read(MCP_CANINTF) & 0x02) == 0x02)
 3e8:	8c e2       	ldi	r24, 0x2C	; 44
 3ea:	66 d0       	rcall	.+204    	; 0x4b8 <mcp2515_read>
 3ec:	81 ff       	sbrs	r24, 1
 3ee:	0b c0       	rjmp	.+22     	; 0x406 <can_get_message+0x42>
	{
		can_message_receive(message,1);
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	ce 01       	movw	r24, r28
 3f6:	b7 df       	rcall	.-146    	; 0x366 <can_message_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x02,0x00);
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	62 e0       	ldi	r22, 0x02	; 2
 3fc:	8c e2       	ldi	r24, 0x2C	; 44
 3fe:	80 d0       	rcall	.+256    	; 0x500 <mcp2515_bit_modify>
		return 1;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <can_get_message+0x46>
	}
	else
	{
		return 0;
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <can_print>:


void can_print(can_message_t* msg)
{
 410:	cf 92       	push	r12
 412:	df 92       	push	r13
 414:	ef 92       	push	r14
 416:	ff 92       	push	r15
 418:	0f 93       	push	r16
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	6c 01       	movw	r12, r24
	printf("ID: %c ,Length: %d, ",msg->id,msg->length);
 422:	fc 01       	movw	r30, r24
 424:	21 81       	ldd	r18, Z+1	; 0x01
 426:	82 2f       	mov	r24, r18
 428:	99 27       	eor	r25, r25
 42a:	87 fd       	sbrc	r24, 7
 42c:	90 95       	com	r25
 42e:	9f 93       	push	r25
 430:	2f 93       	push	r18
 432:	20 81       	ld	r18, Z
 434:	82 2f       	mov	r24, r18
 436:	99 27       	eor	r25, r25
 438:	87 fd       	sbrc	r24, 7
 43a:	90 95       	com	r25
 43c:	9f 93       	push	r25
 43e:	2f 93       	push	r18
 440:	80 e1       	ldi	r24, 0x10	; 16
 442:	92 e0       	ldi	r25, 0x02	; 2
 444:	9f 93       	push	r25
 446:	8f 93       	push	r24
 448:	9b d1       	rcall	.+822    	; 0x780 <printf>
	int i ;
	for (i=0; i<msg->length;i++)
 44a:	0f 90       	pop	r0
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	f6 01       	movw	r30, r12
 458:	81 81       	ldd	r24, Z+1	; 0x01
 45a:	18 16       	cp	r1, r24
 45c:	0c f5       	brge	.+66     	; 0x4a0 <can_print+0x90>
 45e:	76 01       	movw	r14, r12
 460:	f2 e0       	ldi	r31, 0x02	; 2
 462:	ef 0e       	add	r14, r31
 464:	f1 1c       	adc	r15, r1
 466:	c0 e0       	ldi	r28, 0x00	; 0
 468:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("%i", msg->data[i]);
 46a:	05 e2       	ldi	r16, 0x25	; 37
 46c:	12 e0       	ldi	r17, 0x02	; 2
 46e:	f7 01       	movw	r30, r14
 470:	21 91       	ld	r18, Z+
 472:	7f 01       	movw	r14, r30
 474:	82 2f       	mov	r24, r18
 476:	99 27       	eor	r25, r25
 478:	87 fd       	sbrc	r24, 7
 47a:	90 95       	com	r25
 47c:	9f 93       	push	r25
 47e:	2f 93       	push	r18
 480:	1f 93       	push	r17
 482:	0f 93       	push	r16
 484:	7d d1       	rcall	.+762    	; 0x780 <printf>

void can_print(can_message_t* msg)
{
	printf("ID: %c ,Length: %d, ",msg->id,msg->length);
	int i ;
	for (i=0; i<msg->length;i++)
 486:	21 96       	adiw	r28, 0x01	; 1
 488:	f6 01       	movw	r30, r12
 48a:	21 81       	ldd	r18, Z+1	; 0x01
 48c:	33 27       	eor	r19, r19
 48e:	27 fd       	sbrc	r18, 7
 490:	30 95       	com	r19
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	0f 90       	pop	r0
 49a:	c2 17       	cp	r28, r18
 49c:	d3 07       	cpc	r29, r19
 49e:	3c f3       	brlt	.-50     	; 0x46e <can_print+0x5e>
	{
		printf("%i", msg->data[i]);
	}
	printf("\n");
 4a0:	8a e0       	ldi	r24, 0x0A	; 10
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	7e d1       	rcall	.+764    	; 0x7a2 <putchar>
}
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	df 90       	pop	r13
 4b4:	cf 90       	pop	r12
 4b6:	08 95       	ret

000004b8 <mcp2515_read>:
		printf("MCP2515 is not in config mode!\n");
	}
	
	
}
char mcp2515_read (char addr){
 4b8:	cf 93       	push	r28
 4ba:	c8 2f       	mov	r28, r24
	char result;
	
	spi_select();
 4bc:	50 d0       	rcall	.+160    	; 0x55e <spi_select>
	
	spi_transmit(MCP_READ);
 4be:	83 e0       	ldi	r24, 0x03	; 3
 4c0:	52 d0       	rcall	.+164    	; 0x566 <spi_transmit>
	spi_transmit(addr);
 4c2:	8c 2f       	mov	r24, r28
 4c4:	50 d0       	rcall	.+160    	; 0x566 <spi_transmit>
	result = spi_receive();
 4c6:	54 d0       	rcall	.+168    	; 0x570 <spi_receive>
 4c8:	c8 2f       	mov	r28, r24
	
	spi_deselect();
 4ca:	4b d0       	rcall	.+150    	; 0x562 <spi_deselect>
	
	return result;
}
 4cc:	8c 2f       	mov	r24, r28
 4ce:	cf 91       	pop	r28
 4d0:	08 95       	ret

000004d2 <mcp2515_write>:

void mcp2515_write(char addr, char data)
{
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	d8 2f       	mov	r29, r24
 4d8:	c6 2f       	mov	r28, r22
	spi_select();
 4da:	41 d0       	rcall	.+130    	; 0x55e <spi_select>
	
	spi_transmit(MCP_WRITE);
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	43 d0       	rcall	.+134    	; 0x566 <spi_transmit>
	spi_transmit(addr);
 4e0:	8d 2f       	mov	r24, r29
 4e2:	41 d0       	rcall	.+130    	; 0x566 <spi_transmit>
	spi_transmit(data);
 4e4:	8c 2f       	mov	r24, r28
 4e6:	3f d0       	rcall	.+126    	; 0x566 <spi_transmit>
	
	spi_deselect();
 4e8:	3c d0       	rcall	.+120    	; 0x562 <spi_deselect>
	
}
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <mcp2515_request_to_send>:

void mcp2515_request_to_send(int reg)
{
 4f0:	cf 93       	push	r28
 4f2:	c8 2f       	mov	r28, r24
	spi_select();
 4f4:	34 d0       	rcall	.+104    	; 0x55e <spi_select>
	
	spi_transmit(reg);
 4f6:	8c 2f       	mov	r24, r28
 4f8:	36 d0       	rcall	.+108    	; 0x566 <spi_transmit>
	
	spi_deselect();
 4fa:	33 d0       	rcall	.+102    	; 0x562 <spi_deselect>
}
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <mcp2515_bit_modify>:

void mcp2515_bit_modify(char addr, char mask_byte, char data)
{
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	18 2f       	mov	r17, r24
 508:	d6 2f       	mov	r29, r22
 50a:	c4 2f       	mov	r28, r20
	spi_select();
 50c:	28 d0       	rcall	.+80     	; 0x55e <spi_select>
	
	spi_transmit(MCP_BITMOD);
 50e:	85 e0       	ldi	r24, 0x05	; 5
 510:	2a d0       	rcall	.+84     	; 0x566 <spi_transmit>
	spi_transmit(addr);
 512:	81 2f       	mov	r24, r17
 514:	28 d0       	rcall	.+80     	; 0x566 <spi_transmit>
	spi_transmit(mask_byte);
 516:	8d 2f       	mov	r24, r29
 518:	26 d0       	rcall	.+76     	; 0x566 <spi_transmit>
	spi_transmit(data);
 51a:	8c 2f       	mov	r24, r28
 51c:	24 d0       	rcall	.+72     	; 0x566 <spi_transmit>
	
	spi_deselect();
 51e:	21 d0       	rcall	.+66     	; 0x562 <spi_deselect>
}
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	08 95       	ret

00000528 <mcp2515_reset>:

void mcp2515_reset()
{
	spi_select();
 528:	1a d0       	rcall	.+52     	; 0x55e <spi_select>
	
	spi_transmit(MCP_RESET);
 52a:	80 ec       	ldi	r24, 0xC0	; 192
 52c:	1c d0       	rcall	.+56     	; 0x566 <spi_transmit>
	
	spi_deselect();
 52e:	19 c0       	rjmp	.+50     	; 0x562 <spi_deselect>
 530:	08 95       	ret

00000532 <mcp2515_read_status>:
}

char mcp2515_read_status()
{
 532:	cf 93       	push	r28
	char output;
	spi_select();
 534:	14 d0       	rcall	.+40     	; 0x55e <spi_select>
	spi_transmit(MCP_READ);
 536:	83 e0       	ldi	r24, 0x03	; 3
 538:	16 d0       	rcall	.+44     	; 0x566 <spi_transmit>
	spi_transmit(MCP_CANSTAT);
 53a:	8e e0       	ldi	r24, 0x0E	; 14
 53c:	14 d0       	rcall	.+40     	; 0x566 <spi_transmit>
	output = spi_receive();
 53e:	18 d0       	rcall	.+48     	; 0x570 <spi_receive>
 540:	c8 2f       	mov	r28, r24
	
	spi_deselect();
 542:	0f d0       	rcall	.+30     	; 0x562 <spi_deselect>
	return output;
}
 544:	8c 2f       	mov	r24, r28
 546:	cf 91       	pop	r28
 548:	08 95       	ret

0000054a <mcp2515_init>:
#include "spi_control.h"
#include <stdio.h>

void mcp2515_init(){
	char status;
	spi_init();
 54a:	16 d0       	rcall	.+44     	; 0x578 <spi_init>
	mcp2515_reset();
 54c:	ed df       	rcall	.-38     	; 0x528 <mcp2515_reset>
	
	status = mcp2515_read_status();
 54e:	f1 df       	rcall	.-30     	; 0x532 <mcp2515_read_status>
	if ((status & MODE_MASK) != MODE_CONFIG)
 550:	80 7e       	andi	r24, 0xE0	; 224
 552:	80 38       	cpi	r24, 0x80	; 128
 554:	19 f0       	breq	.+6      	; 0x55c <mcp2515_init+0x12>
	{
		printf("MCP2515 is not in config mode!\n");
 556:	88 e2       	ldi	r24, 0x28	; 40
 558:	92 e0       	ldi	r25, 0x02	; 2
 55a:	28 c1       	rjmp	.+592    	; 0x7ac <puts>
 55c:	08 95       	ret

0000055e <spi_select>:
#include "spi_control.h"
#include <stdio.h>

void spi_select()
{
	PORTB &= ~(1<<PB0);
 55e:	28 98       	cbi	0x05, 0	; 5
 560:	08 95       	ret

00000562 <spi_deselect>:
}

void spi_deselect()
{
	PORTB |= (1<<PB0);
 562:	28 9a       	sbi	0x05, 0	; 5
 564:	08 95       	ret

00000566 <spi_transmit>:


void spi_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
 566:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 568:	0d b4       	in	r0, 0x2d	; 45
 56a:	07 fe       	sbrs	r0, 7
 56c:	fd cf       	rjmp	.-6      	; 0x568 <spi_transmit+0x2>
	;
}
 56e:	08 95       	ret

00000570 <spi_receive>:
	PORTB |= (1<<PB0);
}

char spi_receive()
{
	spi_transmit(0);
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	f9 df       	rcall	.-14     	; 0x566 <spi_transmit>
	return SPDR;
 574:	8e b5       	in	r24, 0x2e	; 46
}
 576:	08 95       	ret

00000578 <spi_init>:
}


void spi_init(){
	/* Set MOSI,SCK and SS output, all others input */
	DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<DD_SS);    
 578:	84 b1       	in	r24, 0x04	; 4
 57a:	87 60       	ori	r24, 0x07	; 7
 57c:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 57e:	81 e5       	ldi	r24, 0x51	; 81
 580:	8c bd       	out	0x2c, r24	; 44
 582:	08 95       	ret

00000584 <i2c_init>:



void i2c_init( void )
{
	TWBR = 0x0C; // Baud
 584:	8c e0       	ldi	r24, 0x0C	; 12
 586:	80 93 b8 00 	sts	0x00B8, r24
 58a:	08 95       	ret

0000058c <i2c_start>:


char i2c_start(char address)
{
	// reset TWI control register
	TWCR = 0;
 58c:	ec eb       	ldi	r30, 0xBC	; 188
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	10 82       	st	Z, r1
	// transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 592:	94 ea       	ldi	r25, 0xA4	; 164
 594:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 596:	90 81       	ld	r25, Z
 598:	99 23       	and	r25, r25
 59a:	ec f7       	brge	.-6      	; 0x596 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 59c:	90 91 b9 00 	lds	r25, 0x00B9
 5a0:	98 7f       	andi	r25, 0xF8	; 248
 5a2:	98 30       	cpi	r25, 0x08	; 8
 5a4:	a1 f4       	brne	.+40     	; 0x5ce <i2c_start+0x42>
	
	// load slave address into data register
	TWDR = address;
 5a6:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
 5aa:	84 e8       	ldi	r24, 0x84	; 132
 5ac:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 5b0:	ec eb       	ldi	r30, 0xBC	; 188
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	88 23       	and	r24, r24
 5b8:	ec f7       	brge	.-6      	; 0x5b4 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
 5ba:	90 91 b9 00 	lds	r25, 0x00B9
 5be:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 5c0:	98 31       	cpi	r25, 0x18	; 24
 5c2:	39 f0       	breq	.+14     	; 0x5d2 <i2c_start+0x46>
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 34       	cpi	r25, 0x40	; 64
 5c8:	29 f4       	brne	.+10     	; 0x5d4 <i2c_start+0x48>
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
 5d2:	80 e0       	ldi	r24, 0x00	; 0
}
 5d4:	08 95       	ret

000005d6 <i2c_write>:

char i2c_write(char data)
{
	// load data into data register
	TWDR = data;
 5d6:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 5da:	84 e8       	ldi	r24, 0x84	; 132
 5dc:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 5e0:	ec eb       	ldi	r30, 0xBC	; 188
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	88 23       	and	r24, r24
 5e8:	ec f7       	brge	.-6      	; 0x5e4 <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 5ea:	90 91 b9 00 	lds	r25, 0x00B9
 5ee:	98 7f       	andi	r25, 0xF8	; 248
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	98 32       	cpi	r25, 0x28	; 40
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <i2c_write+0x22>
 5f6:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
 5f8:	08 95       	ret

000005fa <i2c_transmit>:

char i2c_transmit(char address, char* data, uint16_t length)
{
 5fa:	df 92       	push	r13
 5fc:	ef 92       	push	r14
 5fe:	ff 92       	push	r15
 600:	0f 93       	push	r16
 602:	1f 93       	push	r17
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	7b 01       	movw	r14, r22
 60a:	8a 01       	movw	r16, r20
	// Start
	if (i2c_start(address | I2C_WRITE)) return 1;
 60c:	bf df       	rcall	.-130    	; 0x58c <i2c_start>
 60e:	81 11       	cpse	r24, r1
 610:	15 c0       	rjmp	.+42     	; 0x63c <i2c_transmit+0x42>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
 612:	e1 df       	rcall	.-62     	; 0x5d6 <i2c_write>
 614:	d8 2e       	mov	r13, r24
 616:	81 11       	cpse	r24, r1
 618:	14 c0       	rjmp	.+40     	; 0x642 <i2c_transmit+0x48>
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
 61a:	01 15       	cp	r16, r1
 61c:	11 05       	cpc	r17, r1
 61e:	51 f0       	breq	.+20     	; 0x634 <i2c_transmit+0x3a>
 620:	e7 01       	movw	r28, r14
 622:	0e 0d       	add	r16, r14
 624:	1f 1d       	adc	r17, r15
	{
		if (i2c_write(data[i])) return 1;
 626:	89 91       	ld	r24, Y+
 628:	d6 df       	rcall	.-84     	; 0x5d6 <i2c_write>
 62a:	81 11       	cpse	r24, r1
 62c:	0d c0       	rjmp	.+26     	; 0x648 <i2c_transmit+0x4e>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
 62e:	c0 17       	cp	r28, r16
 630:	d1 07       	cpc	r29, r17
 632:	c9 f7       	brne	.-14     	; 0x626 <i2c_transmit+0x2c>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 634:	84 e9       	ldi	r24, 0x94	; 148
 636:	80 93 bc 00 	sts	0x00BC, r24
 63a:	08 c0       	rjmp	.+16     	; 0x64c <i2c_transmit+0x52>
}

char i2c_transmit(char address, char* data, uint16_t length)
{
	// Start
	if (i2c_start(address | I2C_WRITE)) return 1;
 63c:	dd 24       	eor	r13, r13
 63e:	d3 94       	inc	r13
 640:	05 c0       	rjmp	.+10     	; 0x64c <i2c_transmit+0x52>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
 642:	dd 24       	eor	r13, r13
 644:	d3 94       	inc	r13
 646:	02 c0       	rjmp	.+4      	; 0x64c <i2c_transmit+0x52>
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 648:	dd 24       	eor	r13, r13
 64a:	d3 94       	inc	r13
	}
	
	i2c_stop();
	
	return 0;
}
 64c:	8d 2d       	mov	r24, r13
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	1f 91       	pop	r17
 654:	0f 91       	pop	r16
 656:	ff 90       	pop	r15
 658:	ef 90       	pop	r14
 65a:	df 90       	pop	r13
 65c:	08 95       	ret

0000065e <USART_transmit>:
	fdevopen(USART_transmit,USART_receive);
}

void USART_transmit(unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)))
 65e:	e0 ec       	ldi	r30, 0xC0	; 192
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	90 81       	ld	r25, Z
 664:	95 ff       	sbrs	r25, 5
 666:	fd cf       	rjmp	.-6      	; 0x662 <USART_transmit+0x4>
		;
	UDR0 = data;
 668:	80 93 c6 00 	sts	0x00C6, r24
 66c:	08 95       	ret

0000066e <USART_receive>:
	
}

unsigned char USART_receive (void){
	
	while( !(UCSR0A & (1<<RXC0)))
 66e:	e0 ec       	ldi	r30, 0xC0	; 192
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	80 81       	ld	r24, Z
 674:	88 23       	and	r24, r24
 676:	ec f7       	brge	.-6      	; 0x672 <USART_receive+0x4>
		;
	return UDR0;
 678:	80 91 c6 00 	lds	r24, 0x00C6
	
 67c:	08 95       	ret

0000067e <USART_init>:
#include "USART_driver.h"
#include <stdio.h>
void USART_init(unsigned int ubrr){

	UBRR0H = (unsigned char)(ubrr>>8);
 67e:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;	
 682:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 686:	88 e1       	ldi	r24, 0x18	; 24
 688:	80 93 c1 00 	sts	0x00C1, r24
	
	UCSR0C = (3<<UCSZ00); 
 68c:	86 e0       	ldi	r24, 0x06	; 6
 68e:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(USART_transmit,USART_receive);
 692:	67 e3       	ldi	r22, 0x37	; 55
 694:	73 e0       	ldi	r23, 0x03	; 3
 696:	8f e2       	ldi	r24, 0x2F	; 47
 698:	93 e0       	ldi	r25, 0x03	; 3
 69a:	28 c0       	rjmp	.+80     	; 0x6ec <fdevopen>
 69c:	08 95       	ret

0000069e <__divmodhi4>:
 69e:	97 fb       	bst	r25, 7
 6a0:	07 2e       	mov	r0, r23
 6a2:	16 f4       	brtc	.+4      	; 0x6a8 <__divmodhi4+0xa>
 6a4:	00 94       	com	r0
 6a6:	06 d0       	rcall	.+12     	; 0x6b4 <__divmodhi4_neg1>
 6a8:	77 fd       	sbrc	r23, 7
 6aa:	08 d0       	rcall	.+16     	; 0x6bc <__divmodhi4_neg2>
 6ac:	0b d0       	rcall	.+22     	; 0x6c4 <__udivmodhi4>
 6ae:	07 fc       	sbrc	r0, 7
 6b0:	05 d0       	rcall	.+10     	; 0x6bc <__divmodhi4_neg2>
 6b2:	3e f4       	brtc	.+14     	; 0x6c2 <__divmodhi4_exit>

000006b4 <__divmodhi4_neg1>:
 6b4:	90 95       	com	r25
 6b6:	81 95       	neg	r24
 6b8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ba:	08 95       	ret

000006bc <__divmodhi4_neg2>:
 6bc:	70 95       	com	r23
 6be:	61 95       	neg	r22
 6c0:	7f 4f       	sbci	r23, 0xFF	; 255

000006c2 <__divmodhi4_exit>:
 6c2:	08 95       	ret

000006c4 <__udivmodhi4>:
 6c4:	aa 1b       	sub	r26, r26
 6c6:	bb 1b       	sub	r27, r27
 6c8:	51 e1       	ldi	r21, 0x11	; 17
 6ca:	07 c0       	rjmp	.+14     	; 0x6da <__udivmodhi4_ep>

000006cc <__udivmodhi4_loop>:
 6cc:	aa 1f       	adc	r26, r26
 6ce:	bb 1f       	adc	r27, r27
 6d0:	a6 17       	cp	r26, r22
 6d2:	b7 07       	cpc	r27, r23
 6d4:	10 f0       	brcs	.+4      	; 0x6da <__udivmodhi4_ep>
 6d6:	a6 1b       	sub	r26, r22
 6d8:	b7 0b       	sbc	r27, r23

000006da <__udivmodhi4_ep>:
 6da:	88 1f       	adc	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	5a 95       	dec	r21
 6e0:	a9 f7       	brne	.-22     	; 0x6cc <__udivmodhi4_loop>
 6e2:	80 95       	com	r24
 6e4:	90 95       	com	r25
 6e6:	bc 01       	movw	r22, r24
 6e8:	cd 01       	movw	r24, r26
 6ea:	08 95       	ret

000006ec <fdevopen>:
 6ec:	0f 93       	push	r16
 6ee:	1f 93       	push	r17
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	ec 01       	movw	r28, r24
 6f6:	8b 01       	movw	r16, r22
 6f8:	00 97       	sbiw	r24, 0x00	; 0
 6fa:	31 f4       	brne	.+12     	; 0x708 <fdevopen+0x1c>
 6fc:	61 15       	cp	r22, r1
 6fe:	71 05       	cpc	r23, r1
 700:	19 f4       	brne	.+6      	; 0x708 <fdevopen+0x1c>
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	37 c0       	rjmp	.+110    	; 0x776 <fdevopen+0x8a>
 708:	6e e0       	ldi	r22, 0x0E	; 14
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	68 d2       	rcall	.+1232   	; 0xbe2 <calloc>
 712:	fc 01       	movw	r30, r24
 714:	00 97       	sbiw	r24, 0x00	; 0
 716:	a9 f3       	breq	.-22     	; 0x702 <fdevopen+0x16>
 718:	80 e8       	ldi	r24, 0x80	; 128
 71a:	83 83       	std	Z+3, r24	; 0x03
 71c:	01 15       	cp	r16, r1
 71e:	11 05       	cpc	r17, r1
 720:	71 f0       	breq	.+28     	; 0x73e <fdevopen+0x52>
 722:	13 87       	std	Z+11, r17	; 0x0b
 724:	02 87       	std	Z+10, r16	; 0x0a
 726:	81 e8       	ldi	r24, 0x81	; 129
 728:	83 83       	std	Z+3, r24	; 0x03
 72a:	80 91 4d 02 	lds	r24, 0x024D
 72e:	90 91 4e 02 	lds	r25, 0x024E
 732:	89 2b       	or	r24, r25
 734:	21 f4       	brne	.+8      	; 0x73e <fdevopen+0x52>
 736:	f0 93 4e 02 	sts	0x024E, r31
 73a:	e0 93 4d 02 	sts	0x024D, r30
 73e:	20 97       	sbiw	r28, 0x00	; 0
 740:	c9 f0       	breq	.+50     	; 0x774 <fdevopen+0x88>
 742:	d1 87       	std	Z+9, r29	; 0x09
 744:	c0 87       	std	Z+8, r28	; 0x08
 746:	83 81       	ldd	r24, Z+3	; 0x03
 748:	82 60       	ori	r24, 0x02	; 2
 74a:	83 83       	std	Z+3, r24	; 0x03
 74c:	80 91 4f 02 	lds	r24, 0x024F
 750:	90 91 50 02 	lds	r25, 0x0250
 754:	89 2b       	or	r24, r25
 756:	71 f4       	brne	.+28     	; 0x774 <fdevopen+0x88>
 758:	f0 93 50 02 	sts	0x0250, r31
 75c:	e0 93 4f 02 	sts	0x024F, r30
 760:	80 91 51 02 	lds	r24, 0x0251
 764:	90 91 52 02 	lds	r25, 0x0252
 768:	89 2b       	or	r24, r25
 76a:	21 f4       	brne	.+8      	; 0x774 <fdevopen+0x88>
 76c:	f0 93 52 02 	sts	0x0252, r31
 770:	e0 93 51 02 	sts	0x0251, r30
 774:	cf 01       	movw	r24, r30
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	1f 91       	pop	r17
 77c:	0f 91       	pop	r16
 77e:	08 95       	ret

00000780 <printf>:
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
 788:	fe 01       	movw	r30, r28
 78a:	36 96       	adiw	r30, 0x06	; 6
 78c:	61 91       	ld	r22, Z+
 78e:	71 91       	ld	r23, Z+
 790:	af 01       	movw	r20, r30
 792:	80 91 4f 02 	lds	r24, 0x024F
 796:	90 91 50 02 	lds	r25, 0x0250
 79a:	35 d0       	rcall	.+106    	; 0x806 <vfprintf>
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	08 95       	ret

000007a2 <putchar>:
 7a2:	60 91 4f 02 	lds	r22, 0x024F
 7a6:	70 91 50 02 	lds	r23, 0x0250
 7aa:	79 c3       	rjmp	.+1778   	; 0xe9e <fputc>

000007ac <puts>:
 7ac:	0f 93       	push	r16
 7ae:	1f 93       	push	r17
 7b0:	cf 93       	push	r28
 7b2:	df 93       	push	r29
 7b4:	e0 91 4f 02 	lds	r30, 0x024F
 7b8:	f0 91 50 02 	lds	r31, 0x0250
 7bc:	23 81       	ldd	r18, Z+3	; 0x03
 7be:	21 ff       	sbrs	r18, 1
 7c0:	1b c0       	rjmp	.+54     	; 0x7f8 <puts+0x4c>
 7c2:	ec 01       	movw	r28, r24
 7c4:	00 e0       	ldi	r16, 0x00	; 0
 7c6:	10 e0       	ldi	r17, 0x00	; 0
 7c8:	89 91       	ld	r24, Y+
 7ca:	60 91 4f 02 	lds	r22, 0x024F
 7ce:	70 91 50 02 	lds	r23, 0x0250
 7d2:	db 01       	movw	r26, r22
 7d4:	18 96       	adiw	r26, 0x08	; 8
 7d6:	ed 91       	ld	r30, X+
 7d8:	fc 91       	ld	r31, X
 7da:	19 97       	sbiw	r26, 0x09	; 9
 7dc:	88 23       	and	r24, r24
 7de:	31 f0       	breq	.+12     	; 0x7ec <puts+0x40>
 7e0:	19 95       	eicall
 7e2:	89 2b       	or	r24, r25
 7e4:	89 f3       	breq	.-30     	; 0x7c8 <puts+0x1c>
 7e6:	0f ef       	ldi	r16, 0xFF	; 255
 7e8:	1f ef       	ldi	r17, 0xFF	; 255
 7ea:	ee cf       	rjmp	.-36     	; 0x7c8 <puts+0x1c>
 7ec:	8a e0       	ldi	r24, 0x0A	; 10
 7ee:	19 95       	eicall
 7f0:	89 2b       	or	r24, r25
 7f2:	11 f4       	brne	.+4      	; 0x7f8 <puts+0x4c>
 7f4:	c8 01       	movw	r24, r16
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <puts+0x50>
 7f8:	8f ef       	ldi	r24, 0xFF	; 255
 7fa:	9f ef       	ldi	r25, 0xFF	; 255
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	1f 91       	pop	r17
 802:	0f 91       	pop	r16
 804:	08 95       	ret

00000806 <vfprintf>:
 806:	2f 92       	push	r2
 808:	3f 92       	push	r3
 80a:	4f 92       	push	r4
 80c:	5f 92       	push	r5
 80e:	6f 92       	push	r6
 810:	7f 92       	push	r7
 812:	8f 92       	push	r8
 814:	9f 92       	push	r9
 816:	af 92       	push	r10
 818:	bf 92       	push	r11
 81a:	cf 92       	push	r12
 81c:	df 92       	push	r13
 81e:	ef 92       	push	r14
 820:	ff 92       	push	r15
 822:	0f 93       	push	r16
 824:	1f 93       	push	r17
 826:	cf 93       	push	r28
 828:	df 93       	push	r29
 82a:	cd b7       	in	r28, 0x3d	; 61
 82c:	de b7       	in	r29, 0x3e	; 62
 82e:	2c 97       	sbiw	r28, 0x0c	; 12
 830:	0f b6       	in	r0, 0x3f	; 63
 832:	f8 94       	cli
 834:	de bf       	out	0x3e, r29	; 62
 836:	0f be       	out	0x3f, r0	; 63
 838:	cd bf       	out	0x3d, r28	; 61
 83a:	7c 01       	movw	r14, r24
 83c:	6b 01       	movw	r12, r22
 83e:	8a 01       	movw	r16, r20
 840:	fc 01       	movw	r30, r24
 842:	17 82       	std	Z+7, r1	; 0x07
 844:	16 82       	std	Z+6, r1	; 0x06
 846:	83 81       	ldd	r24, Z+3	; 0x03
 848:	81 ff       	sbrs	r24, 1
 84a:	b0 c1       	rjmp	.+864    	; 0xbac <vfprintf+0x3a6>
 84c:	ce 01       	movw	r24, r28
 84e:	01 96       	adiw	r24, 0x01	; 1
 850:	4c 01       	movw	r8, r24
 852:	f7 01       	movw	r30, r14
 854:	93 81       	ldd	r25, Z+3	; 0x03
 856:	f6 01       	movw	r30, r12
 858:	93 fd       	sbrc	r25, 3
 85a:	85 91       	lpm	r24, Z+
 85c:	93 ff       	sbrs	r25, 3
 85e:	81 91       	ld	r24, Z+
 860:	6f 01       	movw	r12, r30
 862:	88 23       	and	r24, r24
 864:	09 f4       	brne	.+2      	; 0x868 <vfprintf+0x62>
 866:	9e c1       	rjmp	.+828    	; 0xba4 <vfprintf+0x39e>
 868:	85 32       	cpi	r24, 0x25	; 37
 86a:	39 f4       	brne	.+14     	; 0x87a <vfprintf+0x74>
 86c:	93 fd       	sbrc	r25, 3
 86e:	85 91       	lpm	r24, Z+
 870:	93 ff       	sbrs	r25, 3
 872:	81 91       	ld	r24, Z+
 874:	6f 01       	movw	r12, r30
 876:	85 32       	cpi	r24, 0x25	; 37
 878:	21 f4       	brne	.+8      	; 0x882 <vfprintf+0x7c>
 87a:	b7 01       	movw	r22, r14
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0f d3       	rcall	.+1566   	; 0xe9e <fputc>
 880:	e8 cf       	rjmp	.-48     	; 0x852 <vfprintf+0x4c>
 882:	51 2c       	mov	r5, r1
 884:	31 2c       	mov	r3, r1
 886:	20 e0       	ldi	r18, 0x00	; 0
 888:	20 32       	cpi	r18, 0x20	; 32
 88a:	a0 f4       	brcc	.+40     	; 0x8b4 <vfprintf+0xae>
 88c:	8b 32       	cpi	r24, 0x2B	; 43
 88e:	69 f0       	breq	.+26     	; 0x8aa <vfprintf+0xa4>
 890:	30 f4       	brcc	.+12     	; 0x89e <vfprintf+0x98>
 892:	80 32       	cpi	r24, 0x20	; 32
 894:	59 f0       	breq	.+22     	; 0x8ac <vfprintf+0xa6>
 896:	83 32       	cpi	r24, 0x23	; 35
 898:	69 f4       	brne	.+26     	; 0x8b4 <vfprintf+0xae>
 89a:	20 61       	ori	r18, 0x10	; 16
 89c:	2c c0       	rjmp	.+88     	; 0x8f6 <vfprintf+0xf0>
 89e:	8d 32       	cpi	r24, 0x2D	; 45
 8a0:	39 f0       	breq	.+14     	; 0x8b0 <vfprintf+0xaa>
 8a2:	80 33       	cpi	r24, 0x30	; 48
 8a4:	39 f4       	brne	.+14     	; 0x8b4 <vfprintf+0xae>
 8a6:	21 60       	ori	r18, 0x01	; 1
 8a8:	26 c0       	rjmp	.+76     	; 0x8f6 <vfprintf+0xf0>
 8aa:	22 60       	ori	r18, 0x02	; 2
 8ac:	24 60       	ori	r18, 0x04	; 4
 8ae:	23 c0       	rjmp	.+70     	; 0x8f6 <vfprintf+0xf0>
 8b0:	28 60       	ori	r18, 0x08	; 8
 8b2:	21 c0       	rjmp	.+66     	; 0x8f6 <vfprintf+0xf0>
 8b4:	27 fd       	sbrc	r18, 7
 8b6:	27 c0       	rjmp	.+78     	; 0x906 <vfprintf+0x100>
 8b8:	30 ed       	ldi	r19, 0xD0	; 208
 8ba:	38 0f       	add	r19, r24
 8bc:	3a 30       	cpi	r19, 0x0A	; 10
 8be:	78 f4       	brcc	.+30     	; 0x8de <vfprintf+0xd8>
 8c0:	26 ff       	sbrs	r18, 6
 8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <vfprintf+0xca>
 8c4:	fa e0       	ldi	r31, 0x0A	; 10
 8c6:	5f 9e       	mul	r5, r31
 8c8:	30 0d       	add	r19, r0
 8ca:	11 24       	eor	r1, r1
 8cc:	53 2e       	mov	r5, r19
 8ce:	13 c0       	rjmp	.+38     	; 0x8f6 <vfprintf+0xf0>
 8d0:	8a e0       	ldi	r24, 0x0A	; 10
 8d2:	38 9e       	mul	r3, r24
 8d4:	30 0d       	add	r19, r0
 8d6:	11 24       	eor	r1, r1
 8d8:	33 2e       	mov	r3, r19
 8da:	20 62       	ori	r18, 0x20	; 32
 8dc:	0c c0       	rjmp	.+24     	; 0x8f6 <vfprintf+0xf0>
 8de:	8e 32       	cpi	r24, 0x2E	; 46
 8e0:	21 f4       	brne	.+8      	; 0x8ea <vfprintf+0xe4>
 8e2:	26 fd       	sbrc	r18, 6
 8e4:	5f c1       	rjmp	.+702    	; 0xba4 <vfprintf+0x39e>
 8e6:	20 64       	ori	r18, 0x40	; 64
 8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <vfprintf+0xf0>
 8ea:	8c 36       	cpi	r24, 0x6C	; 108
 8ec:	11 f4       	brne	.+4      	; 0x8f2 <vfprintf+0xec>
 8ee:	20 68       	ori	r18, 0x80	; 128
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <vfprintf+0xf0>
 8f2:	88 36       	cpi	r24, 0x68	; 104
 8f4:	41 f4       	brne	.+16     	; 0x906 <vfprintf+0x100>
 8f6:	f6 01       	movw	r30, r12
 8f8:	93 fd       	sbrc	r25, 3
 8fa:	85 91       	lpm	r24, Z+
 8fc:	93 ff       	sbrs	r25, 3
 8fe:	81 91       	ld	r24, Z+
 900:	6f 01       	movw	r12, r30
 902:	81 11       	cpse	r24, r1
 904:	c1 cf       	rjmp	.-126    	; 0x888 <vfprintf+0x82>
 906:	98 2f       	mov	r25, r24
 908:	9f 7d       	andi	r25, 0xDF	; 223
 90a:	95 54       	subi	r25, 0x45	; 69
 90c:	93 30       	cpi	r25, 0x03	; 3
 90e:	28 f4       	brcc	.+10     	; 0x91a <vfprintf+0x114>
 910:	0c 5f       	subi	r16, 0xFC	; 252
 912:	1f 4f       	sbci	r17, 0xFF	; 255
 914:	ff e3       	ldi	r31, 0x3F	; 63
 916:	f9 83       	std	Y+1, r31	; 0x01
 918:	0d c0       	rjmp	.+26     	; 0x934 <vfprintf+0x12e>
 91a:	83 36       	cpi	r24, 0x63	; 99
 91c:	31 f0       	breq	.+12     	; 0x92a <vfprintf+0x124>
 91e:	83 37       	cpi	r24, 0x73	; 115
 920:	71 f0       	breq	.+28     	; 0x93e <vfprintf+0x138>
 922:	83 35       	cpi	r24, 0x53	; 83
 924:	09 f0       	breq	.+2      	; 0x928 <vfprintf+0x122>
 926:	57 c0       	rjmp	.+174    	; 0x9d6 <vfprintf+0x1d0>
 928:	21 c0       	rjmp	.+66     	; 0x96c <vfprintf+0x166>
 92a:	f8 01       	movw	r30, r16
 92c:	80 81       	ld	r24, Z
 92e:	89 83       	std	Y+1, r24	; 0x01
 930:	0e 5f       	subi	r16, 0xFE	; 254
 932:	1f 4f       	sbci	r17, 0xFF	; 255
 934:	44 24       	eor	r4, r4
 936:	43 94       	inc	r4
 938:	51 2c       	mov	r5, r1
 93a:	54 01       	movw	r10, r8
 93c:	14 c0       	rjmp	.+40     	; 0x966 <vfprintf+0x160>
 93e:	38 01       	movw	r6, r16
 940:	f2 e0       	ldi	r31, 0x02	; 2
 942:	6f 0e       	add	r6, r31
 944:	71 1c       	adc	r7, r1
 946:	f8 01       	movw	r30, r16
 948:	a0 80       	ld	r10, Z
 94a:	b1 80       	ldd	r11, Z+1	; 0x01
 94c:	26 ff       	sbrs	r18, 6
 94e:	03 c0       	rjmp	.+6      	; 0x956 <vfprintf+0x150>
 950:	65 2d       	mov	r22, r5
 952:	70 e0       	ldi	r23, 0x00	; 0
 954:	02 c0       	rjmp	.+4      	; 0x95a <vfprintf+0x154>
 956:	6f ef       	ldi	r22, 0xFF	; 255
 958:	7f ef       	ldi	r23, 0xFF	; 255
 95a:	c5 01       	movw	r24, r10
 95c:	2c 87       	std	Y+12, r18	; 0x0c
 95e:	94 d2       	rcall	.+1320   	; 0xe88 <strnlen>
 960:	2c 01       	movw	r4, r24
 962:	83 01       	movw	r16, r6
 964:	2c 85       	ldd	r18, Y+12	; 0x0c
 966:	2f 77       	andi	r18, 0x7F	; 127
 968:	22 2e       	mov	r2, r18
 96a:	16 c0       	rjmp	.+44     	; 0x998 <vfprintf+0x192>
 96c:	38 01       	movw	r6, r16
 96e:	f2 e0       	ldi	r31, 0x02	; 2
 970:	6f 0e       	add	r6, r31
 972:	71 1c       	adc	r7, r1
 974:	f8 01       	movw	r30, r16
 976:	a0 80       	ld	r10, Z
 978:	b1 80       	ldd	r11, Z+1	; 0x01
 97a:	26 ff       	sbrs	r18, 6
 97c:	03 c0       	rjmp	.+6      	; 0x984 <vfprintf+0x17e>
 97e:	65 2d       	mov	r22, r5
 980:	70 e0       	ldi	r23, 0x00	; 0
 982:	02 c0       	rjmp	.+4      	; 0x988 <vfprintf+0x182>
 984:	6f ef       	ldi	r22, 0xFF	; 255
 986:	7f ef       	ldi	r23, 0xFF	; 255
 988:	c5 01       	movw	r24, r10
 98a:	2c 87       	std	Y+12, r18	; 0x0c
 98c:	6b d2       	rcall	.+1238   	; 0xe64 <strnlen_P>
 98e:	2c 01       	movw	r4, r24
 990:	2c 85       	ldd	r18, Y+12	; 0x0c
 992:	20 68       	ori	r18, 0x80	; 128
 994:	22 2e       	mov	r2, r18
 996:	83 01       	movw	r16, r6
 998:	23 fc       	sbrc	r2, 3
 99a:	19 c0       	rjmp	.+50     	; 0x9ce <vfprintf+0x1c8>
 99c:	83 2d       	mov	r24, r3
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	48 16       	cp	r4, r24
 9a2:	59 06       	cpc	r5, r25
 9a4:	a0 f4       	brcc	.+40     	; 0x9ce <vfprintf+0x1c8>
 9a6:	b7 01       	movw	r22, r14
 9a8:	80 e2       	ldi	r24, 0x20	; 32
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	78 d2       	rcall	.+1264   	; 0xe9e <fputc>
 9ae:	3a 94       	dec	r3
 9b0:	f5 cf       	rjmp	.-22     	; 0x99c <vfprintf+0x196>
 9b2:	f5 01       	movw	r30, r10
 9b4:	27 fc       	sbrc	r2, 7
 9b6:	85 91       	lpm	r24, Z+
 9b8:	27 fe       	sbrs	r2, 7
 9ba:	81 91       	ld	r24, Z+
 9bc:	5f 01       	movw	r10, r30
 9be:	b7 01       	movw	r22, r14
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	6d d2       	rcall	.+1242   	; 0xe9e <fputc>
 9c4:	31 10       	cpse	r3, r1
 9c6:	3a 94       	dec	r3
 9c8:	f1 e0       	ldi	r31, 0x01	; 1
 9ca:	4f 1a       	sub	r4, r31
 9cc:	51 08       	sbc	r5, r1
 9ce:	41 14       	cp	r4, r1
 9d0:	51 04       	cpc	r5, r1
 9d2:	79 f7       	brne	.-34     	; 0x9b2 <vfprintf+0x1ac>
 9d4:	de c0       	rjmp	.+444    	; 0xb92 <vfprintf+0x38c>
 9d6:	84 36       	cpi	r24, 0x64	; 100
 9d8:	11 f0       	breq	.+4      	; 0x9de <vfprintf+0x1d8>
 9da:	89 36       	cpi	r24, 0x69	; 105
 9dc:	31 f5       	brne	.+76     	; 0xa2a <vfprintf+0x224>
 9de:	f8 01       	movw	r30, r16
 9e0:	27 ff       	sbrs	r18, 7
 9e2:	07 c0       	rjmp	.+14     	; 0x9f2 <vfprintf+0x1ec>
 9e4:	60 81       	ld	r22, Z
 9e6:	71 81       	ldd	r23, Z+1	; 0x01
 9e8:	82 81       	ldd	r24, Z+2	; 0x02
 9ea:	93 81       	ldd	r25, Z+3	; 0x03
 9ec:	0c 5f       	subi	r16, 0xFC	; 252
 9ee:	1f 4f       	sbci	r17, 0xFF	; 255
 9f0:	08 c0       	rjmp	.+16     	; 0xa02 <vfprintf+0x1fc>
 9f2:	60 81       	ld	r22, Z
 9f4:	71 81       	ldd	r23, Z+1	; 0x01
 9f6:	88 27       	eor	r24, r24
 9f8:	77 fd       	sbrc	r23, 7
 9fa:	80 95       	com	r24
 9fc:	98 2f       	mov	r25, r24
 9fe:	0e 5f       	subi	r16, 0xFE	; 254
 a00:	1f 4f       	sbci	r17, 0xFF	; 255
 a02:	2f 76       	andi	r18, 0x6F	; 111
 a04:	b2 2e       	mov	r11, r18
 a06:	97 ff       	sbrs	r25, 7
 a08:	09 c0       	rjmp	.+18     	; 0xa1c <vfprintf+0x216>
 a0a:	90 95       	com	r25
 a0c:	80 95       	com	r24
 a0e:	70 95       	com	r23
 a10:	61 95       	neg	r22
 a12:	7f 4f       	sbci	r23, 0xFF	; 255
 a14:	8f 4f       	sbci	r24, 0xFF	; 255
 a16:	9f 4f       	sbci	r25, 0xFF	; 255
 a18:	20 68       	ori	r18, 0x80	; 128
 a1a:	b2 2e       	mov	r11, r18
 a1c:	2a e0       	ldi	r18, 0x0A	; 10
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	a4 01       	movw	r20, r8
 a22:	6f d2       	rcall	.+1246   	; 0xf02 <__ultoa_invert>
 a24:	a8 2e       	mov	r10, r24
 a26:	a8 18       	sub	r10, r8
 a28:	43 c0       	rjmp	.+134    	; 0xab0 <vfprintf+0x2aa>
 a2a:	85 37       	cpi	r24, 0x75	; 117
 a2c:	29 f4       	brne	.+10     	; 0xa38 <vfprintf+0x232>
 a2e:	2f 7e       	andi	r18, 0xEF	; 239
 a30:	b2 2e       	mov	r11, r18
 a32:	2a e0       	ldi	r18, 0x0A	; 10
 a34:	30 e0       	ldi	r19, 0x00	; 0
 a36:	25 c0       	rjmp	.+74     	; 0xa82 <vfprintf+0x27c>
 a38:	f2 2f       	mov	r31, r18
 a3a:	f9 7f       	andi	r31, 0xF9	; 249
 a3c:	bf 2e       	mov	r11, r31
 a3e:	8f 36       	cpi	r24, 0x6F	; 111
 a40:	c1 f0       	breq	.+48     	; 0xa72 <vfprintf+0x26c>
 a42:	18 f4       	brcc	.+6      	; 0xa4a <vfprintf+0x244>
 a44:	88 35       	cpi	r24, 0x58	; 88
 a46:	79 f0       	breq	.+30     	; 0xa66 <vfprintf+0x260>
 a48:	ad c0       	rjmp	.+346    	; 0xba4 <vfprintf+0x39e>
 a4a:	80 37       	cpi	r24, 0x70	; 112
 a4c:	19 f0       	breq	.+6      	; 0xa54 <vfprintf+0x24e>
 a4e:	88 37       	cpi	r24, 0x78	; 120
 a50:	21 f0       	breq	.+8      	; 0xa5a <vfprintf+0x254>
 a52:	a8 c0       	rjmp	.+336    	; 0xba4 <vfprintf+0x39e>
 a54:	2f 2f       	mov	r18, r31
 a56:	20 61       	ori	r18, 0x10	; 16
 a58:	b2 2e       	mov	r11, r18
 a5a:	b4 fe       	sbrs	r11, 4
 a5c:	0d c0       	rjmp	.+26     	; 0xa78 <vfprintf+0x272>
 a5e:	8b 2d       	mov	r24, r11
 a60:	84 60       	ori	r24, 0x04	; 4
 a62:	b8 2e       	mov	r11, r24
 a64:	09 c0       	rjmp	.+18     	; 0xa78 <vfprintf+0x272>
 a66:	24 ff       	sbrs	r18, 4
 a68:	0a c0       	rjmp	.+20     	; 0xa7e <vfprintf+0x278>
 a6a:	9f 2f       	mov	r25, r31
 a6c:	96 60       	ori	r25, 0x06	; 6
 a6e:	b9 2e       	mov	r11, r25
 a70:	06 c0       	rjmp	.+12     	; 0xa7e <vfprintf+0x278>
 a72:	28 e0       	ldi	r18, 0x08	; 8
 a74:	30 e0       	ldi	r19, 0x00	; 0
 a76:	05 c0       	rjmp	.+10     	; 0xa82 <vfprintf+0x27c>
 a78:	20 e1       	ldi	r18, 0x10	; 16
 a7a:	30 e0       	ldi	r19, 0x00	; 0
 a7c:	02 c0       	rjmp	.+4      	; 0xa82 <vfprintf+0x27c>
 a7e:	20 e1       	ldi	r18, 0x10	; 16
 a80:	32 e0       	ldi	r19, 0x02	; 2
 a82:	f8 01       	movw	r30, r16
 a84:	b7 fe       	sbrs	r11, 7
 a86:	07 c0       	rjmp	.+14     	; 0xa96 <vfprintf+0x290>
 a88:	60 81       	ld	r22, Z
 a8a:	71 81       	ldd	r23, Z+1	; 0x01
 a8c:	82 81       	ldd	r24, Z+2	; 0x02
 a8e:	93 81       	ldd	r25, Z+3	; 0x03
 a90:	0c 5f       	subi	r16, 0xFC	; 252
 a92:	1f 4f       	sbci	r17, 0xFF	; 255
 a94:	06 c0       	rjmp	.+12     	; 0xaa2 <vfprintf+0x29c>
 a96:	60 81       	ld	r22, Z
 a98:	71 81       	ldd	r23, Z+1	; 0x01
 a9a:	80 e0       	ldi	r24, 0x00	; 0
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	0e 5f       	subi	r16, 0xFE	; 254
 aa0:	1f 4f       	sbci	r17, 0xFF	; 255
 aa2:	a4 01       	movw	r20, r8
 aa4:	2e d2       	rcall	.+1116   	; 0xf02 <__ultoa_invert>
 aa6:	a8 2e       	mov	r10, r24
 aa8:	a8 18       	sub	r10, r8
 aaa:	fb 2d       	mov	r31, r11
 aac:	ff 77       	andi	r31, 0x7F	; 127
 aae:	bf 2e       	mov	r11, r31
 ab0:	b6 fe       	sbrs	r11, 6
 ab2:	0b c0       	rjmp	.+22     	; 0xaca <vfprintf+0x2c4>
 ab4:	2b 2d       	mov	r18, r11
 ab6:	2e 7f       	andi	r18, 0xFE	; 254
 ab8:	a5 14       	cp	r10, r5
 aba:	50 f4       	brcc	.+20     	; 0xad0 <vfprintf+0x2ca>
 abc:	b4 fe       	sbrs	r11, 4
 abe:	0a c0       	rjmp	.+20     	; 0xad4 <vfprintf+0x2ce>
 ac0:	b2 fc       	sbrc	r11, 2
 ac2:	08 c0       	rjmp	.+16     	; 0xad4 <vfprintf+0x2ce>
 ac4:	2b 2d       	mov	r18, r11
 ac6:	2e 7e       	andi	r18, 0xEE	; 238
 ac8:	05 c0       	rjmp	.+10     	; 0xad4 <vfprintf+0x2ce>
 aca:	7a 2c       	mov	r7, r10
 acc:	2b 2d       	mov	r18, r11
 ace:	03 c0       	rjmp	.+6      	; 0xad6 <vfprintf+0x2d0>
 ad0:	7a 2c       	mov	r7, r10
 ad2:	01 c0       	rjmp	.+2      	; 0xad6 <vfprintf+0x2d0>
 ad4:	75 2c       	mov	r7, r5
 ad6:	24 ff       	sbrs	r18, 4
 ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <vfprintf+0x2ee>
 ada:	fe 01       	movw	r30, r28
 adc:	ea 0d       	add	r30, r10
 ade:	f1 1d       	adc	r31, r1
 ae0:	80 81       	ld	r24, Z
 ae2:	80 33       	cpi	r24, 0x30	; 48
 ae4:	11 f4       	brne	.+4      	; 0xaea <vfprintf+0x2e4>
 ae6:	29 7e       	andi	r18, 0xE9	; 233
 ae8:	09 c0       	rjmp	.+18     	; 0xafc <vfprintf+0x2f6>
 aea:	22 ff       	sbrs	r18, 2
 aec:	06 c0       	rjmp	.+12     	; 0xafa <vfprintf+0x2f4>
 aee:	73 94       	inc	r7
 af0:	73 94       	inc	r7
 af2:	04 c0       	rjmp	.+8      	; 0xafc <vfprintf+0x2f6>
 af4:	82 2f       	mov	r24, r18
 af6:	86 78       	andi	r24, 0x86	; 134
 af8:	09 f0       	breq	.+2      	; 0xafc <vfprintf+0x2f6>
 afa:	73 94       	inc	r7
 afc:	23 fd       	sbrc	r18, 3
 afe:	12 c0       	rjmp	.+36     	; 0xb24 <vfprintf+0x31e>
 b00:	20 ff       	sbrs	r18, 0
 b02:	06 c0       	rjmp	.+12     	; 0xb10 <vfprintf+0x30a>
 b04:	5a 2c       	mov	r5, r10
 b06:	73 14       	cp	r7, r3
 b08:	18 f4       	brcc	.+6      	; 0xb10 <vfprintf+0x30a>
 b0a:	53 0c       	add	r5, r3
 b0c:	57 18       	sub	r5, r7
 b0e:	73 2c       	mov	r7, r3
 b10:	73 14       	cp	r7, r3
 b12:	60 f4       	brcc	.+24     	; 0xb2c <vfprintf+0x326>
 b14:	b7 01       	movw	r22, r14
 b16:	80 e2       	ldi	r24, 0x20	; 32
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	2c 87       	std	Y+12, r18	; 0x0c
 b1c:	c0 d1       	rcall	.+896    	; 0xe9e <fputc>
 b1e:	73 94       	inc	r7
 b20:	2c 85       	ldd	r18, Y+12	; 0x0c
 b22:	f6 cf       	rjmp	.-20     	; 0xb10 <vfprintf+0x30a>
 b24:	73 14       	cp	r7, r3
 b26:	10 f4       	brcc	.+4      	; 0xb2c <vfprintf+0x326>
 b28:	37 18       	sub	r3, r7
 b2a:	01 c0       	rjmp	.+2      	; 0xb2e <vfprintf+0x328>
 b2c:	31 2c       	mov	r3, r1
 b2e:	24 ff       	sbrs	r18, 4
 b30:	11 c0       	rjmp	.+34     	; 0xb54 <vfprintf+0x34e>
 b32:	b7 01       	movw	r22, r14
 b34:	80 e3       	ldi	r24, 0x30	; 48
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	2c 87       	std	Y+12, r18	; 0x0c
 b3a:	b1 d1       	rcall	.+866    	; 0xe9e <fputc>
 b3c:	2c 85       	ldd	r18, Y+12	; 0x0c
 b3e:	22 ff       	sbrs	r18, 2
 b40:	16 c0       	rjmp	.+44     	; 0xb6e <vfprintf+0x368>
 b42:	21 ff       	sbrs	r18, 1
 b44:	03 c0       	rjmp	.+6      	; 0xb4c <vfprintf+0x346>
 b46:	88 e5       	ldi	r24, 0x58	; 88
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	02 c0       	rjmp	.+4      	; 0xb50 <vfprintf+0x34a>
 b4c:	88 e7       	ldi	r24, 0x78	; 120
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	b7 01       	movw	r22, r14
 b52:	0c c0       	rjmp	.+24     	; 0xb6c <vfprintf+0x366>
 b54:	82 2f       	mov	r24, r18
 b56:	86 78       	andi	r24, 0x86	; 134
 b58:	51 f0       	breq	.+20     	; 0xb6e <vfprintf+0x368>
 b5a:	21 fd       	sbrc	r18, 1
 b5c:	02 c0       	rjmp	.+4      	; 0xb62 <vfprintf+0x35c>
 b5e:	80 e2       	ldi	r24, 0x20	; 32
 b60:	01 c0       	rjmp	.+2      	; 0xb64 <vfprintf+0x35e>
 b62:	8b e2       	ldi	r24, 0x2B	; 43
 b64:	27 fd       	sbrc	r18, 7
 b66:	8d e2       	ldi	r24, 0x2D	; 45
 b68:	b7 01       	movw	r22, r14
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	98 d1       	rcall	.+816    	; 0xe9e <fputc>
 b6e:	a5 14       	cp	r10, r5
 b70:	30 f4       	brcc	.+12     	; 0xb7e <vfprintf+0x378>
 b72:	b7 01       	movw	r22, r14
 b74:	80 e3       	ldi	r24, 0x30	; 48
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	92 d1       	rcall	.+804    	; 0xe9e <fputc>
 b7a:	5a 94       	dec	r5
 b7c:	f8 cf       	rjmp	.-16     	; 0xb6e <vfprintf+0x368>
 b7e:	aa 94       	dec	r10
 b80:	f4 01       	movw	r30, r8
 b82:	ea 0d       	add	r30, r10
 b84:	f1 1d       	adc	r31, r1
 b86:	80 81       	ld	r24, Z
 b88:	b7 01       	movw	r22, r14
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	88 d1       	rcall	.+784    	; 0xe9e <fputc>
 b8e:	a1 10       	cpse	r10, r1
 b90:	f6 cf       	rjmp	.-20     	; 0xb7e <vfprintf+0x378>
 b92:	33 20       	and	r3, r3
 b94:	09 f4       	brne	.+2      	; 0xb98 <vfprintf+0x392>
 b96:	5d ce       	rjmp	.-838    	; 0x852 <vfprintf+0x4c>
 b98:	b7 01       	movw	r22, r14
 b9a:	80 e2       	ldi	r24, 0x20	; 32
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	7f d1       	rcall	.+766    	; 0xe9e <fputc>
 ba0:	3a 94       	dec	r3
 ba2:	f7 cf       	rjmp	.-18     	; 0xb92 <vfprintf+0x38c>
 ba4:	f7 01       	movw	r30, r14
 ba6:	86 81       	ldd	r24, Z+6	; 0x06
 ba8:	97 81       	ldd	r25, Z+7	; 0x07
 baa:	02 c0       	rjmp	.+4      	; 0xbb0 <vfprintf+0x3aa>
 bac:	8f ef       	ldi	r24, 0xFF	; 255
 bae:	9f ef       	ldi	r25, 0xFF	; 255
 bb0:	2c 96       	adiw	r28, 0x0c	; 12
 bb2:	0f b6       	in	r0, 0x3f	; 63
 bb4:	f8 94       	cli
 bb6:	de bf       	out	0x3e, r29	; 62
 bb8:	0f be       	out	0x3f, r0	; 63
 bba:	cd bf       	out	0x3d, r28	; 61
 bbc:	df 91       	pop	r29
 bbe:	cf 91       	pop	r28
 bc0:	1f 91       	pop	r17
 bc2:	0f 91       	pop	r16
 bc4:	ff 90       	pop	r15
 bc6:	ef 90       	pop	r14
 bc8:	df 90       	pop	r13
 bca:	cf 90       	pop	r12
 bcc:	bf 90       	pop	r11
 bce:	af 90       	pop	r10
 bd0:	9f 90       	pop	r9
 bd2:	8f 90       	pop	r8
 bd4:	7f 90       	pop	r7
 bd6:	6f 90       	pop	r6
 bd8:	5f 90       	pop	r5
 bda:	4f 90       	pop	r4
 bdc:	3f 90       	pop	r3
 bde:	2f 90       	pop	r2
 be0:	08 95       	ret

00000be2 <calloc>:
 be2:	0f 93       	push	r16
 be4:	1f 93       	push	r17
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
 bea:	86 9f       	mul	r24, r22
 bec:	80 01       	movw	r16, r0
 bee:	87 9f       	mul	r24, r23
 bf0:	10 0d       	add	r17, r0
 bf2:	96 9f       	mul	r25, r22
 bf4:	10 0d       	add	r17, r0
 bf6:	11 24       	eor	r1, r1
 bf8:	c8 01       	movw	r24, r16
 bfa:	0d d0       	rcall	.+26     	; 0xc16 <malloc>
 bfc:	ec 01       	movw	r28, r24
 bfe:	00 97       	sbiw	r24, 0x00	; 0
 c00:	21 f0       	breq	.+8      	; 0xc0a <calloc+0x28>
 c02:	a8 01       	movw	r20, r16
 c04:	60 e0       	ldi	r22, 0x00	; 0
 c06:	70 e0       	ldi	r23, 0x00	; 0
 c08:	38 d1       	rcall	.+624    	; 0xe7a <memset>
 c0a:	ce 01       	movw	r24, r28
 c0c:	df 91       	pop	r29
 c0e:	cf 91       	pop	r28
 c10:	1f 91       	pop	r17
 c12:	0f 91       	pop	r16
 c14:	08 95       	ret

00000c16 <malloc>:
 c16:	cf 93       	push	r28
 c18:	df 93       	push	r29
 c1a:	82 30       	cpi	r24, 0x02	; 2
 c1c:	91 05       	cpc	r25, r1
 c1e:	10 f4       	brcc	.+4      	; 0xc24 <malloc+0xe>
 c20:	82 e0       	ldi	r24, 0x02	; 2
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	e0 91 55 02 	lds	r30, 0x0255
 c28:	f0 91 56 02 	lds	r31, 0x0256
 c2c:	20 e0       	ldi	r18, 0x00	; 0
 c2e:	30 e0       	ldi	r19, 0x00	; 0
 c30:	a0 e0       	ldi	r26, 0x00	; 0
 c32:	b0 e0       	ldi	r27, 0x00	; 0
 c34:	30 97       	sbiw	r30, 0x00	; 0
 c36:	39 f1       	breq	.+78     	; 0xc86 <malloc+0x70>
 c38:	40 81       	ld	r20, Z
 c3a:	51 81       	ldd	r21, Z+1	; 0x01
 c3c:	48 17       	cp	r20, r24
 c3e:	59 07       	cpc	r21, r25
 c40:	b8 f0       	brcs	.+46     	; 0xc70 <malloc+0x5a>
 c42:	48 17       	cp	r20, r24
 c44:	59 07       	cpc	r21, r25
 c46:	71 f4       	brne	.+28     	; 0xc64 <malloc+0x4e>
 c48:	82 81       	ldd	r24, Z+2	; 0x02
 c4a:	93 81       	ldd	r25, Z+3	; 0x03
 c4c:	10 97       	sbiw	r26, 0x00	; 0
 c4e:	29 f0       	breq	.+10     	; 0xc5a <malloc+0x44>
 c50:	13 96       	adiw	r26, 0x03	; 3
 c52:	9c 93       	st	X, r25
 c54:	8e 93       	st	-X, r24
 c56:	12 97       	sbiw	r26, 0x02	; 2
 c58:	2c c0       	rjmp	.+88     	; 0xcb2 <malloc+0x9c>
 c5a:	90 93 56 02 	sts	0x0256, r25
 c5e:	80 93 55 02 	sts	0x0255, r24
 c62:	27 c0       	rjmp	.+78     	; 0xcb2 <malloc+0x9c>
 c64:	21 15       	cp	r18, r1
 c66:	31 05       	cpc	r19, r1
 c68:	31 f0       	breq	.+12     	; 0xc76 <malloc+0x60>
 c6a:	42 17       	cp	r20, r18
 c6c:	53 07       	cpc	r21, r19
 c6e:	18 f0       	brcs	.+6      	; 0xc76 <malloc+0x60>
 c70:	a9 01       	movw	r20, r18
 c72:	db 01       	movw	r26, r22
 c74:	01 c0       	rjmp	.+2      	; 0xc78 <malloc+0x62>
 c76:	ef 01       	movw	r28, r30
 c78:	9a 01       	movw	r18, r20
 c7a:	bd 01       	movw	r22, r26
 c7c:	df 01       	movw	r26, r30
 c7e:	02 80       	ldd	r0, Z+2	; 0x02
 c80:	f3 81       	ldd	r31, Z+3	; 0x03
 c82:	e0 2d       	mov	r30, r0
 c84:	d7 cf       	rjmp	.-82     	; 0xc34 <malloc+0x1e>
 c86:	21 15       	cp	r18, r1
 c88:	31 05       	cpc	r19, r1
 c8a:	f9 f0       	breq	.+62     	; 0xcca <malloc+0xb4>
 c8c:	28 1b       	sub	r18, r24
 c8e:	39 0b       	sbc	r19, r25
 c90:	24 30       	cpi	r18, 0x04	; 4
 c92:	31 05       	cpc	r19, r1
 c94:	80 f4       	brcc	.+32     	; 0xcb6 <malloc+0xa0>
 c96:	8a 81       	ldd	r24, Y+2	; 0x02
 c98:	9b 81       	ldd	r25, Y+3	; 0x03
 c9a:	61 15       	cp	r22, r1
 c9c:	71 05       	cpc	r23, r1
 c9e:	21 f0       	breq	.+8      	; 0xca8 <malloc+0x92>
 ca0:	fb 01       	movw	r30, r22
 ca2:	93 83       	std	Z+3, r25	; 0x03
 ca4:	82 83       	std	Z+2, r24	; 0x02
 ca6:	04 c0       	rjmp	.+8      	; 0xcb0 <malloc+0x9a>
 ca8:	90 93 56 02 	sts	0x0256, r25
 cac:	80 93 55 02 	sts	0x0255, r24
 cb0:	fe 01       	movw	r30, r28
 cb2:	32 96       	adiw	r30, 0x02	; 2
 cb4:	44 c0       	rjmp	.+136    	; 0xd3e <malloc+0x128>
 cb6:	fe 01       	movw	r30, r28
 cb8:	e2 0f       	add	r30, r18
 cba:	f3 1f       	adc	r31, r19
 cbc:	81 93       	st	Z+, r24
 cbe:	91 93       	st	Z+, r25
 cc0:	22 50       	subi	r18, 0x02	; 2
 cc2:	31 09       	sbc	r19, r1
 cc4:	39 83       	std	Y+1, r19	; 0x01
 cc6:	28 83       	st	Y, r18
 cc8:	3a c0       	rjmp	.+116    	; 0xd3e <malloc+0x128>
 cca:	20 91 53 02 	lds	r18, 0x0253
 cce:	30 91 54 02 	lds	r19, 0x0254
 cd2:	23 2b       	or	r18, r19
 cd4:	41 f4       	brne	.+16     	; 0xce6 <malloc+0xd0>
 cd6:	20 91 02 02 	lds	r18, 0x0202
 cda:	30 91 03 02 	lds	r19, 0x0203
 cde:	30 93 54 02 	sts	0x0254, r19
 ce2:	20 93 53 02 	sts	0x0253, r18
 ce6:	20 91 00 02 	lds	r18, 0x0200
 cea:	30 91 01 02 	lds	r19, 0x0201
 cee:	21 15       	cp	r18, r1
 cf0:	31 05       	cpc	r19, r1
 cf2:	41 f4       	brne	.+16     	; 0xd04 <malloc+0xee>
 cf4:	2d b7       	in	r18, 0x3d	; 61
 cf6:	3e b7       	in	r19, 0x3e	; 62
 cf8:	40 91 04 02 	lds	r20, 0x0204
 cfc:	50 91 05 02 	lds	r21, 0x0205
 d00:	24 1b       	sub	r18, r20
 d02:	35 0b       	sbc	r19, r21
 d04:	e0 91 53 02 	lds	r30, 0x0253
 d08:	f0 91 54 02 	lds	r31, 0x0254
 d0c:	e2 17       	cp	r30, r18
 d0e:	f3 07       	cpc	r31, r19
 d10:	a0 f4       	brcc	.+40     	; 0xd3a <malloc+0x124>
 d12:	2e 1b       	sub	r18, r30
 d14:	3f 0b       	sbc	r19, r31
 d16:	28 17       	cp	r18, r24
 d18:	39 07       	cpc	r19, r25
 d1a:	78 f0       	brcs	.+30     	; 0xd3a <malloc+0x124>
 d1c:	ac 01       	movw	r20, r24
 d1e:	4e 5f       	subi	r20, 0xFE	; 254
 d20:	5f 4f       	sbci	r21, 0xFF	; 255
 d22:	24 17       	cp	r18, r20
 d24:	35 07       	cpc	r19, r21
 d26:	48 f0       	brcs	.+18     	; 0xd3a <malloc+0x124>
 d28:	4e 0f       	add	r20, r30
 d2a:	5f 1f       	adc	r21, r31
 d2c:	50 93 54 02 	sts	0x0254, r21
 d30:	40 93 53 02 	sts	0x0253, r20
 d34:	81 93       	st	Z+, r24
 d36:	91 93       	st	Z+, r25
 d38:	02 c0       	rjmp	.+4      	; 0xd3e <malloc+0x128>
 d3a:	e0 e0       	ldi	r30, 0x00	; 0
 d3c:	f0 e0       	ldi	r31, 0x00	; 0
 d3e:	cf 01       	movw	r24, r30
 d40:	df 91       	pop	r29
 d42:	cf 91       	pop	r28
 d44:	08 95       	ret

00000d46 <free>:
 d46:	cf 93       	push	r28
 d48:	df 93       	push	r29
 d4a:	00 97       	sbiw	r24, 0x00	; 0
 d4c:	09 f4       	brne	.+2      	; 0xd50 <free+0xa>
 d4e:	87 c0       	rjmp	.+270    	; 0xe5e <free+0x118>
 d50:	fc 01       	movw	r30, r24
 d52:	32 97       	sbiw	r30, 0x02	; 2
 d54:	13 82       	std	Z+3, r1	; 0x03
 d56:	12 82       	std	Z+2, r1	; 0x02
 d58:	c0 91 55 02 	lds	r28, 0x0255
 d5c:	d0 91 56 02 	lds	r29, 0x0256
 d60:	20 97       	sbiw	r28, 0x00	; 0
 d62:	81 f4       	brne	.+32     	; 0xd84 <free+0x3e>
 d64:	20 81       	ld	r18, Z
 d66:	31 81       	ldd	r19, Z+1	; 0x01
 d68:	28 0f       	add	r18, r24
 d6a:	39 1f       	adc	r19, r25
 d6c:	80 91 53 02 	lds	r24, 0x0253
 d70:	90 91 54 02 	lds	r25, 0x0254
 d74:	82 17       	cp	r24, r18
 d76:	93 07       	cpc	r25, r19
 d78:	79 f5       	brne	.+94     	; 0xdd8 <free+0x92>
 d7a:	f0 93 54 02 	sts	0x0254, r31
 d7e:	e0 93 53 02 	sts	0x0253, r30
 d82:	6d c0       	rjmp	.+218    	; 0xe5e <free+0x118>
 d84:	de 01       	movw	r26, r28
 d86:	20 e0       	ldi	r18, 0x00	; 0
 d88:	30 e0       	ldi	r19, 0x00	; 0
 d8a:	ae 17       	cp	r26, r30
 d8c:	bf 07       	cpc	r27, r31
 d8e:	50 f4       	brcc	.+20     	; 0xda4 <free+0x5e>
 d90:	12 96       	adiw	r26, 0x02	; 2
 d92:	4d 91       	ld	r20, X+
 d94:	5c 91       	ld	r21, X
 d96:	13 97       	sbiw	r26, 0x03	; 3
 d98:	9d 01       	movw	r18, r26
 d9a:	41 15       	cp	r20, r1
 d9c:	51 05       	cpc	r21, r1
 d9e:	09 f1       	breq	.+66     	; 0xde2 <free+0x9c>
 da0:	da 01       	movw	r26, r20
 da2:	f3 cf       	rjmp	.-26     	; 0xd8a <free+0x44>
 da4:	b3 83       	std	Z+3, r27	; 0x03
 da6:	a2 83       	std	Z+2, r26	; 0x02
 da8:	40 81       	ld	r20, Z
 daa:	51 81       	ldd	r21, Z+1	; 0x01
 dac:	84 0f       	add	r24, r20
 dae:	95 1f       	adc	r25, r21
 db0:	8a 17       	cp	r24, r26
 db2:	9b 07       	cpc	r25, r27
 db4:	71 f4       	brne	.+28     	; 0xdd2 <free+0x8c>
 db6:	8d 91       	ld	r24, X+
 db8:	9c 91       	ld	r25, X
 dba:	11 97       	sbiw	r26, 0x01	; 1
 dbc:	84 0f       	add	r24, r20
 dbe:	95 1f       	adc	r25, r21
 dc0:	02 96       	adiw	r24, 0x02	; 2
 dc2:	91 83       	std	Z+1, r25	; 0x01
 dc4:	80 83       	st	Z, r24
 dc6:	12 96       	adiw	r26, 0x02	; 2
 dc8:	8d 91       	ld	r24, X+
 dca:	9c 91       	ld	r25, X
 dcc:	13 97       	sbiw	r26, 0x03	; 3
 dce:	93 83       	std	Z+3, r25	; 0x03
 dd0:	82 83       	std	Z+2, r24	; 0x02
 dd2:	21 15       	cp	r18, r1
 dd4:	31 05       	cpc	r19, r1
 dd6:	29 f4       	brne	.+10     	; 0xde2 <free+0x9c>
 dd8:	f0 93 56 02 	sts	0x0256, r31
 ddc:	e0 93 55 02 	sts	0x0255, r30
 de0:	3e c0       	rjmp	.+124    	; 0xe5e <free+0x118>
 de2:	d9 01       	movw	r26, r18
 de4:	13 96       	adiw	r26, 0x03	; 3
 de6:	fc 93       	st	X, r31
 de8:	ee 93       	st	-X, r30
 dea:	12 97       	sbiw	r26, 0x02	; 2
 dec:	4d 91       	ld	r20, X+
 dee:	5d 91       	ld	r21, X+
 df0:	a4 0f       	add	r26, r20
 df2:	b5 1f       	adc	r27, r21
 df4:	ea 17       	cp	r30, r26
 df6:	fb 07       	cpc	r31, r27
 df8:	79 f4       	brne	.+30     	; 0xe18 <free+0xd2>
 dfa:	80 81       	ld	r24, Z
 dfc:	91 81       	ldd	r25, Z+1	; 0x01
 dfe:	84 0f       	add	r24, r20
 e00:	95 1f       	adc	r25, r21
 e02:	02 96       	adiw	r24, 0x02	; 2
 e04:	d9 01       	movw	r26, r18
 e06:	11 96       	adiw	r26, 0x01	; 1
 e08:	9c 93       	st	X, r25
 e0a:	8e 93       	st	-X, r24
 e0c:	82 81       	ldd	r24, Z+2	; 0x02
 e0e:	93 81       	ldd	r25, Z+3	; 0x03
 e10:	13 96       	adiw	r26, 0x03	; 3
 e12:	9c 93       	st	X, r25
 e14:	8e 93       	st	-X, r24
 e16:	12 97       	sbiw	r26, 0x02	; 2
 e18:	e0 e0       	ldi	r30, 0x00	; 0
 e1a:	f0 e0       	ldi	r31, 0x00	; 0
 e1c:	8a 81       	ldd	r24, Y+2	; 0x02
 e1e:	9b 81       	ldd	r25, Y+3	; 0x03
 e20:	00 97       	sbiw	r24, 0x00	; 0
 e22:	19 f0       	breq	.+6      	; 0xe2a <free+0xe4>
 e24:	fe 01       	movw	r30, r28
 e26:	ec 01       	movw	r28, r24
 e28:	f9 cf       	rjmp	.-14     	; 0xe1c <free+0xd6>
 e2a:	ce 01       	movw	r24, r28
 e2c:	02 96       	adiw	r24, 0x02	; 2
 e2e:	28 81       	ld	r18, Y
 e30:	39 81       	ldd	r19, Y+1	; 0x01
 e32:	82 0f       	add	r24, r18
 e34:	93 1f       	adc	r25, r19
 e36:	20 91 53 02 	lds	r18, 0x0253
 e3a:	30 91 54 02 	lds	r19, 0x0254
 e3e:	28 17       	cp	r18, r24
 e40:	39 07       	cpc	r19, r25
 e42:	69 f4       	brne	.+26     	; 0xe5e <free+0x118>
 e44:	30 97       	sbiw	r30, 0x00	; 0
 e46:	29 f4       	brne	.+10     	; 0xe52 <free+0x10c>
 e48:	10 92 56 02 	sts	0x0256, r1
 e4c:	10 92 55 02 	sts	0x0255, r1
 e50:	02 c0       	rjmp	.+4      	; 0xe56 <free+0x110>
 e52:	13 82       	std	Z+3, r1	; 0x03
 e54:	12 82       	std	Z+2, r1	; 0x02
 e56:	d0 93 54 02 	sts	0x0254, r29
 e5a:	c0 93 53 02 	sts	0x0253, r28
 e5e:	df 91       	pop	r29
 e60:	cf 91       	pop	r28
 e62:	08 95       	ret

00000e64 <strnlen_P>:
 e64:	fc 01       	movw	r30, r24
 e66:	05 90       	lpm	r0, Z+
 e68:	61 50       	subi	r22, 0x01	; 1
 e6a:	70 40       	sbci	r23, 0x00	; 0
 e6c:	01 10       	cpse	r0, r1
 e6e:	d8 f7       	brcc	.-10     	; 0xe66 <strnlen_P+0x2>
 e70:	80 95       	com	r24
 e72:	90 95       	com	r25
 e74:	8e 0f       	add	r24, r30
 e76:	9f 1f       	adc	r25, r31
 e78:	08 95       	ret

00000e7a <memset>:
 e7a:	dc 01       	movw	r26, r24
 e7c:	01 c0       	rjmp	.+2      	; 0xe80 <memset+0x6>
 e7e:	6d 93       	st	X+, r22
 e80:	41 50       	subi	r20, 0x01	; 1
 e82:	50 40       	sbci	r21, 0x00	; 0
 e84:	e0 f7       	brcc	.-8      	; 0xe7e <memset+0x4>
 e86:	08 95       	ret

00000e88 <strnlen>:
 e88:	fc 01       	movw	r30, r24
 e8a:	61 50       	subi	r22, 0x01	; 1
 e8c:	70 40       	sbci	r23, 0x00	; 0
 e8e:	01 90       	ld	r0, Z+
 e90:	01 10       	cpse	r0, r1
 e92:	d8 f7       	brcc	.-10     	; 0xe8a <strnlen+0x2>
 e94:	80 95       	com	r24
 e96:	90 95       	com	r25
 e98:	8e 0f       	add	r24, r30
 e9a:	9f 1f       	adc	r25, r31
 e9c:	08 95       	ret

00000e9e <fputc>:
 e9e:	0f 93       	push	r16
 ea0:	1f 93       	push	r17
 ea2:	cf 93       	push	r28
 ea4:	df 93       	push	r29
 ea6:	18 2f       	mov	r17, r24
 ea8:	09 2f       	mov	r16, r25
 eaa:	eb 01       	movw	r28, r22
 eac:	8b 81       	ldd	r24, Y+3	; 0x03
 eae:	81 fd       	sbrc	r24, 1
 eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <fputc+0x1a>
 eb2:	8f ef       	ldi	r24, 0xFF	; 255
 eb4:	9f ef       	ldi	r25, 0xFF	; 255
 eb6:	20 c0       	rjmp	.+64     	; 0xef8 <fputc+0x5a>
 eb8:	82 ff       	sbrs	r24, 2
 eba:	10 c0       	rjmp	.+32     	; 0xedc <fputc+0x3e>
 ebc:	4e 81       	ldd	r20, Y+6	; 0x06
 ebe:	5f 81       	ldd	r21, Y+7	; 0x07
 ec0:	2c 81       	ldd	r18, Y+4	; 0x04
 ec2:	3d 81       	ldd	r19, Y+5	; 0x05
 ec4:	42 17       	cp	r20, r18
 ec6:	53 07       	cpc	r21, r19
 ec8:	7c f4       	brge	.+30     	; 0xee8 <fputc+0x4a>
 eca:	e8 81       	ld	r30, Y
 ecc:	f9 81       	ldd	r31, Y+1	; 0x01
 ece:	9f 01       	movw	r18, r30
 ed0:	2f 5f       	subi	r18, 0xFF	; 255
 ed2:	3f 4f       	sbci	r19, 0xFF	; 255
 ed4:	39 83       	std	Y+1, r19	; 0x01
 ed6:	28 83       	st	Y, r18
 ed8:	10 83       	st	Z, r17
 eda:	06 c0       	rjmp	.+12     	; 0xee8 <fputc+0x4a>
 edc:	e8 85       	ldd	r30, Y+8	; 0x08
 ede:	f9 85       	ldd	r31, Y+9	; 0x09
 ee0:	81 2f       	mov	r24, r17
 ee2:	19 95       	eicall
 ee4:	89 2b       	or	r24, r25
 ee6:	29 f7       	brne	.-54     	; 0xeb2 <fputc+0x14>
 ee8:	2e 81       	ldd	r18, Y+6	; 0x06
 eea:	3f 81       	ldd	r19, Y+7	; 0x07
 eec:	2f 5f       	subi	r18, 0xFF	; 255
 eee:	3f 4f       	sbci	r19, 0xFF	; 255
 ef0:	3f 83       	std	Y+7, r19	; 0x07
 ef2:	2e 83       	std	Y+6, r18	; 0x06
 ef4:	81 2f       	mov	r24, r17
 ef6:	90 2f       	mov	r25, r16
 ef8:	df 91       	pop	r29
 efa:	cf 91       	pop	r28
 efc:	1f 91       	pop	r17
 efe:	0f 91       	pop	r16
 f00:	08 95       	ret

00000f02 <__ultoa_invert>:
 f02:	fa 01       	movw	r30, r20
 f04:	aa 27       	eor	r26, r26
 f06:	28 30       	cpi	r18, 0x08	; 8
 f08:	51 f1       	breq	.+84     	; 0xf5e <__ultoa_invert+0x5c>
 f0a:	20 31       	cpi	r18, 0x10	; 16
 f0c:	81 f1       	breq	.+96     	; 0xf6e <__ultoa_invert+0x6c>
 f0e:	e8 94       	clt
 f10:	6f 93       	push	r22
 f12:	6e 7f       	andi	r22, 0xFE	; 254
 f14:	6e 5f       	subi	r22, 0xFE	; 254
 f16:	7f 4f       	sbci	r23, 0xFF	; 255
 f18:	8f 4f       	sbci	r24, 0xFF	; 255
 f1a:	9f 4f       	sbci	r25, 0xFF	; 255
 f1c:	af 4f       	sbci	r26, 0xFF	; 255
 f1e:	b1 e0       	ldi	r27, 0x01	; 1
 f20:	3e d0       	rcall	.+124    	; 0xf9e <__ultoa_invert+0x9c>
 f22:	b4 e0       	ldi	r27, 0x04	; 4
 f24:	3c d0       	rcall	.+120    	; 0xf9e <__ultoa_invert+0x9c>
 f26:	67 0f       	add	r22, r23
 f28:	78 1f       	adc	r23, r24
 f2a:	89 1f       	adc	r24, r25
 f2c:	9a 1f       	adc	r25, r26
 f2e:	a1 1d       	adc	r26, r1
 f30:	68 0f       	add	r22, r24
 f32:	79 1f       	adc	r23, r25
 f34:	8a 1f       	adc	r24, r26
 f36:	91 1d       	adc	r25, r1
 f38:	a1 1d       	adc	r26, r1
 f3a:	6a 0f       	add	r22, r26
 f3c:	71 1d       	adc	r23, r1
 f3e:	81 1d       	adc	r24, r1
 f40:	91 1d       	adc	r25, r1
 f42:	a1 1d       	adc	r26, r1
 f44:	20 d0       	rcall	.+64     	; 0xf86 <__ultoa_invert+0x84>
 f46:	09 f4       	brne	.+2      	; 0xf4a <__ultoa_invert+0x48>
 f48:	68 94       	set
 f4a:	3f 91       	pop	r19
 f4c:	2a e0       	ldi	r18, 0x0A	; 10
 f4e:	26 9f       	mul	r18, r22
 f50:	11 24       	eor	r1, r1
 f52:	30 19       	sub	r19, r0
 f54:	30 5d       	subi	r19, 0xD0	; 208
 f56:	31 93       	st	Z+, r19
 f58:	de f6       	brtc	.-74     	; 0xf10 <__ultoa_invert+0xe>
 f5a:	cf 01       	movw	r24, r30
 f5c:	08 95       	ret
 f5e:	46 2f       	mov	r20, r22
 f60:	47 70       	andi	r20, 0x07	; 7
 f62:	40 5d       	subi	r20, 0xD0	; 208
 f64:	41 93       	st	Z+, r20
 f66:	b3 e0       	ldi	r27, 0x03	; 3
 f68:	0f d0       	rcall	.+30     	; 0xf88 <__ultoa_invert+0x86>
 f6a:	c9 f7       	brne	.-14     	; 0xf5e <__ultoa_invert+0x5c>
 f6c:	f6 cf       	rjmp	.-20     	; 0xf5a <__ultoa_invert+0x58>
 f6e:	46 2f       	mov	r20, r22
 f70:	4f 70       	andi	r20, 0x0F	; 15
 f72:	40 5d       	subi	r20, 0xD0	; 208
 f74:	4a 33       	cpi	r20, 0x3A	; 58
 f76:	18 f0       	brcs	.+6      	; 0xf7e <__ultoa_invert+0x7c>
 f78:	49 5d       	subi	r20, 0xD9	; 217
 f7a:	31 fd       	sbrc	r19, 1
 f7c:	40 52       	subi	r20, 0x20	; 32
 f7e:	41 93       	st	Z+, r20
 f80:	02 d0       	rcall	.+4      	; 0xf86 <__ultoa_invert+0x84>
 f82:	a9 f7       	brne	.-22     	; 0xf6e <__ultoa_invert+0x6c>
 f84:	ea cf       	rjmp	.-44     	; 0xf5a <__ultoa_invert+0x58>
 f86:	b4 e0       	ldi	r27, 0x04	; 4
 f88:	a6 95       	lsr	r26
 f8a:	97 95       	ror	r25
 f8c:	87 95       	ror	r24
 f8e:	77 95       	ror	r23
 f90:	67 95       	ror	r22
 f92:	ba 95       	dec	r27
 f94:	c9 f7       	brne	.-14     	; 0xf88 <__ultoa_invert+0x86>
 f96:	00 97       	sbiw	r24, 0x00	; 0
 f98:	61 05       	cpc	r22, r1
 f9a:	71 05       	cpc	r23, r1
 f9c:	08 95       	ret
 f9e:	9b 01       	movw	r18, r22
 fa0:	ac 01       	movw	r20, r24
 fa2:	0a 2e       	mov	r0, r26
 fa4:	06 94       	lsr	r0
 fa6:	57 95       	ror	r21
 fa8:	47 95       	ror	r20
 faa:	37 95       	ror	r19
 fac:	27 95       	ror	r18
 fae:	ba 95       	dec	r27
 fb0:	c9 f7       	brne	.-14     	; 0xfa4 <__ultoa_invert+0xa2>
 fb2:	62 0f       	add	r22, r18
 fb4:	73 1f       	adc	r23, r19
 fb6:	84 1f       	adc	r24, r20
 fb8:	95 1f       	adc	r25, r21
 fba:	a0 1d       	adc	r26, r0
 fbc:	08 95       	ret

00000fbe <_exit>:
 fbe:	f8 94       	cli

00000fc0 <__stop_program>:
 fc0:	ff cf       	rjmp	.-2      	; 0xfc0 <__stop_program>
