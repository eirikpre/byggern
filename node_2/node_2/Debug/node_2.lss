
node_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800200  00001644  000016d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001644  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080023e  0080023e  00001716  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000248  00000000  00000000  00001772  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001804  00000000  00000000  000019ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c80  00000000  00000000  000031be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f78  00000000  00000000  00003e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004bc  00000000  00000000  00005db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00009f12  00000000  00000000  00006274  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cb4  00000000  00000000  00010186  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  00010e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004539  00000000  00000000  00010fea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e4       	ldi	r30, 0x44	; 68
      fc:	f6 e1       	ldi	r31, 0x16	; 22
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 33       	cpi	r26, 0x3E	; 62
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	ae e3       	ldi	r26, 0x3E	; 62
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 35       	cpi	r26, 0x5A	; 90
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	d3 d3       	rcall	.+1958   	; 0x8c6 <main>
     120:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <init_ADC>:
#include "ADC.h"
#include <avr/io.h>

void init_ADC(){
	DDRF &= ~(1 << PF0);
     126:	80 98       	cbi	0x10, 0	; 16

	ADCSRA |= (1 << ADEN) | (1 << ADATE)  | (1 << ADSC) | (1 << ADPS2) |(1 << ADIE)| (1 << ADPS1) | (1 << ADPS0);
     128:	ea e7       	ldi	r30, 0x7A	; 122
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	80 81       	ld	r24, Z
     12e:	8f 6e       	ori	r24, 0xEF	; 239
     130:	80 83       	st	Z, r24
	ADMUX  |= (1 <<REFS0) | (1 <<ADLAR);
     132:	ec e7       	ldi	r30, 0x7C	; 124
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	80 66       	ori	r24, 0x60	; 96
     13a:	80 83       	st	Z, r24
     13c:	08 95       	ret

0000013e <ADC_read>:

char ADC_read( void ){
	int mean = 0; int i = 0;
	int nsamples = 4;
	for (i = 0; i <nsamples; i++){
		mean = mean + ADCH;
     13e:	e9 e7       	ldi	r30, 0x79	; 121
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	20 81       	ld	r18, Z
     144:	80 81       	ld	r24, Z
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	82 0f       	add	r24, r18
     14a:	91 1d       	adc	r25, r1
     14c:	20 81       	ld	r18, Z
     14e:	82 0f       	add	r24, r18
     150:	91 1d       	adc	r25, r1
     152:	20 81       	ld	r18, Z
     154:	82 0f       	add	r24, r18
     156:	91 1d       	adc	r25, r1
	}
	mean = mean/nsamples;
     158:	95 95       	asr	r25
     15a:	87 95       	ror	r24
     15c:	95 95       	asr	r25
     15e:	87 95       	ror	r24
	return mean;
}
     160:	08 95       	ret

00000162 <can_init>:


void can_init()
{
	
	mcp2515_init();
     162:	a0 d1       	rcall	.+832    	; 0x4a4 <mcp2515_init>
	
	mcp2515_bit_modify(MCP_RXF0SIDH, 0xff , 0x00);
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	6f ef       	ldi	r22, 0xFF	; 255
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	77 d1       	rcall	.+750    	; 0x45a <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXF0SIDL, 0xE0 , 0x00);
     16c:	40 e0       	ldi	r20, 0x00	; 0
     16e:	60 ee       	ldi	r22, 0xE0	; 224
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	73 d1       	rcall	.+742    	; 0x45a <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, 0xE0 , MODE_NORMAL);
     174:	40 e0       	ldi	r20, 0x00	; 0
     176:	60 ee       	ldi	r22, 0xE0	; 224
     178:	8f e0       	ldi	r24, 0x0F	; 15
     17a:	6f c1       	rjmp	.+734    	; 0x45a <mcp2515_bit_modify>
     17c:	08 95       	ret

0000017e <can_message_send>:
	
}


void can_message_send(can_message_t *message)
{
     17e:	ef 92       	push	r14
     180:	ff 92       	push	r15
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	7c 01       	movw	r14, r24
	int i;
	
	// ID
	mcp2515_write(MCP_TXB0CTRL + 1,message->id);
     18c:	fc 01       	movw	r30, r24
     18e:	60 81       	ld	r22, Z
     190:	81 e3       	ldi	r24, 0x31	; 49
     192:	4c d1       	rcall	.+664    	; 0x42c <mcp2515_write>
	mcp2515_write(0x32,0x00);
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	82 e3       	ldi	r24, 0x32	; 50
     198:	49 d1       	rcall	.+658    	; 0x42c <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
     19a:	f7 01       	movw	r30, r14
     19c:	61 81       	ldd	r22, Z+1	; 0x01
     19e:	85 e3       	ldi	r24, 0x35	; 53
     1a0:	45 d1       	rcall	.+650    	; 0x42c <mcp2515_write>
	
	// Data
	for (i = 0; i< message->length; i++){
     1a2:	f7 01       	movw	r30, r14
     1a4:	81 81       	ldd	r24, Z+1	; 0x01
     1a6:	18 16       	cp	r1, r24
     1a8:	a4 f4       	brge	.+40     	; 0x1d2 <can_message_send+0x54>
     1aa:	87 01       	movw	r16, r14
     1ac:	0e 5f       	subi	r16, 0xFE	; 254
     1ae:	1f 4f       	sbci	r17, 0xFF	; 255
     1b0:	c0 e0       	ldi	r28, 0x00	; 0
     1b2:	d0 e0       	ldi	r29, 0x00	; 0
		mcp2515_write(MCP_TXB0CTRL + 6 + i, (message->data[i]) );
     1b4:	f8 01       	movw	r30, r16
     1b6:	61 91       	ld	r22, Z+
     1b8:	8f 01       	movw	r16, r30
     1ba:	8c 2f       	mov	r24, r28
     1bc:	8a 5c       	subi	r24, 0xCA	; 202
     1be:	36 d1       	rcall	.+620    	; 0x42c <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
	
	// Data
	for (i = 0; i< message->length; i++){
     1c0:	21 96       	adiw	r28, 0x01	; 1
     1c2:	f7 01       	movw	r30, r14
     1c4:	21 81       	ldd	r18, Z+1	; 0x01
     1c6:	33 27       	eor	r19, r19
     1c8:	27 fd       	sbrc	r18, 7
     1ca:	30 95       	com	r19
     1cc:	c2 17       	cp	r28, r18
     1ce:	d3 07       	cpc	r29, r19
     1d0:	8c f3       	brlt	.-30     	; 0x1b4 <can_message_send+0x36>
		mcp2515_write(MCP_TXB0CTRL + 6 + i, (message->data[i]) );
	}
	
	mcp2515_request_to_send(MCP_RTS_TX0);
     1d2:	81 e8       	ldi	r24, 0x81	; 129
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	39 d1       	rcall	.+626    	; 0x44a <mcp2515_request_to_send>
}
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	1f 91       	pop	r17
     1de:	0f 91       	pop	r16
     1e0:	ff 90       	pop	r15
     1e2:	ef 90       	pop	r14
     1e4:	08 95       	ret

000001e6 <can_message_receive>:

void can_message_receive(can_message_t* message, int buffer)
{
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	8c 01       	movw	r16, r24
     1f4:	e6 2e       	mov	r14, r22
	char i;
	
	// ID
	message->id = mcp2515_read(MCP_RXB0CTRL+buffer + 1);
     1f6:	81 e6       	ldi	r24, 0x61	; 97
     1f8:	86 0f       	add	r24, r22
     1fa:	0b d1       	rcall	.+534    	; 0x412 <mcp2515_read>
     1fc:	f8 01       	movw	r30, r16
     1fe:	80 83       	st	Z, r24
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
     200:	85 e6       	ldi	r24, 0x65	; 101
     202:	8e 0d       	add	r24, r14
     204:	06 d1       	rcall	.+524    	; 0x412 <mcp2515_read>
     206:	f8 01       	movw	r30, r16
     208:	81 83       	std	Z+1, r24	; 0x01
	
	// Data
	for(i=0;i<message->length;i++)
     20a:	18 16       	cp	r1, r24
     20c:	a4 f4       	brge	.+40     	; 0x236 <can_message_receive+0x50>
     20e:	c0 e0       	ldi	r28, 0x00	; 0
     210:	d0 e0       	ldi	r29, 0x00	; 0
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
     212:	f6 e6       	ldi	r31, 0x66	; 102
     214:	ef 0e       	add	r14, r31
     216:	fc 2e       	mov	r15, r28
     218:	8c 2f       	mov	r24, r28
     21a:	8e 0d       	add	r24, r14
     21c:	fa d0       	rcall	.+500    	; 0x412 <mcp2515_read>
     21e:	f8 01       	movw	r30, r16
     220:	ec 0f       	add	r30, r28
     222:	f1 1d       	adc	r31, r1
     224:	c7 fd       	sbrc	r28, 7
     226:	fa 95       	dec	r31
     228:	82 83       	std	Z+2, r24	; 0x02
     22a:	f3 94       	inc	r15
     22c:	21 96       	adiw	r28, 0x01	; 1
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
	
	// Data
	for(i=0;i<message->length;i++)
     22e:	f8 01       	movw	r30, r16
     230:	81 81       	ldd	r24, Z+1	; 0x01
     232:	f8 16       	cp	r15, r24
     234:	84 f3       	brlt	.-32     	; 0x216 <can_message_receive+0x30>
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
	}
	
}
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	ff 90       	pop	r15
     240:	ef 90       	pop	r14
     242:	08 95       	ret

00000244 <can_get_message>:

int can_get_message(can_message_t* message)
{
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	ec 01       	movw	r28, r24
	
	if ((mcp2515_read(MCP_CANINTF) & 0x01) == 0x01)
     24a:	8c e2       	ldi	r24, 0x2C	; 44
     24c:	e2 d0       	rcall	.+452    	; 0x412 <mcp2515_read>
     24e:	80 ff       	sbrs	r24, 0
     250:	0b c0       	rjmp	.+22     	; 0x268 <can_get_message+0x24>
	{
		can_message_receive(message,0);
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	ce 01       	movw	r24, r28
     258:	c6 df       	rcall	.-116    	; 0x1e6 <can_message_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x01,0x00);
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	8c e2       	ldi	r24, 0x2C	; 44
     260:	fc d0       	rcall	.+504    	; 0x45a <mcp2515_bit_modify>
		return 1;
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	11 c0       	rjmp	.+34     	; 0x28a <can_get_message+0x46>
	}
	else if ((mcp2515_read(MCP_CANINTF) & 0x02) == 0x02)
     268:	8c e2       	ldi	r24, 0x2C	; 44
     26a:	d3 d0       	rcall	.+422    	; 0x412 <mcp2515_read>
     26c:	81 ff       	sbrs	r24, 1
     26e:	0b c0       	rjmp	.+22     	; 0x286 <can_get_message+0x42>
	{
		can_message_receive(message,1);
     270:	61 e0       	ldi	r22, 0x01	; 1
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	ce 01       	movw	r24, r28
     276:	b7 df       	rcall	.-146    	; 0x1e6 <can_message_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x02,0x00);
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	62 e0       	ldi	r22, 0x02	; 2
     27c:	8c e2       	ldi	r24, 0x2C	; 44
     27e:	ed d0       	rcall	.+474    	; 0x45a <mcp2515_bit_modify>
		return 1;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	02 c0       	rjmp	.+4      	; 0x28a <can_get_message+0x46>
	}
	else
	{
		return 0;
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	08 95       	ret

00000290 <can_print>:


void can_print(can_message_t* msg)
{
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	6c 01       	movw	r12, r24
	printf("ID: %c ,Length: %d, ",msg->id,msg->length);
     2a2:	fc 01       	movw	r30, r24
     2a4:	21 81       	ldd	r18, Z+1	; 0x01
     2a6:	82 2f       	mov	r24, r18
     2a8:	99 27       	eor	r25, r25
     2aa:	87 fd       	sbrc	r24, 7
     2ac:	90 95       	com	r25
     2ae:	9f 93       	push	r25
     2b0:	2f 93       	push	r18
     2b2:	20 81       	ld	r18, Z
     2b4:	82 2f       	mov	r24, r18
     2b6:	99 27       	eor	r25, r25
     2b8:	87 fd       	sbrc	r24, 7
     2ba:	90 95       	com	r25
     2bc:	9f 93       	push	r25
     2be:	2f 93       	push	r18
     2c0:	86 e0       	ldi	r24, 0x06	; 6
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	9f 93       	push	r25
     2c6:	8f 93       	push	r24
     2c8:	9c d5       	rcall	.+2872   	; 0xe02 <printf>
	int i ;
	for (i=0; i<msg->length;i++)
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	f6 01       	movw	r30, r12
     2d8:	81 81       	ldd	r24, Z+1	; 0x01
     2da:	18 16       	cp	r1, r24
     2dc:	0c f5       	brge	.+66     	; 0x320 <can_print+0x90>
     2de:	76 01       	movw	r14, r12
     2e0:	f2 e0       	ldi	r31, 0x02	; 2
     2e2:	ef 0e       	add	r14, r31
     2e4:	f1 1c       	adc	r15, r1
     2e6:	c0 e0       	ldi	r28, 0x00	; 0
     2e8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("%i", msg->data[i]);
     2ea:	0b e1       	ldi	r16, 0x1B	; 27
     2ec:	12 e0       	ldi	r17, 0x02	; 2
     2ee:	f7 01       	movw	r30, r14
     2f0:	21 91       	ld	r18, Z+
     2f2:	7f 01       	movw	r14, r30
     2f4:	82 2f       	mov	r24, r18
     2f6:	99 27       	eor	r25, r25
     2f8:	87 fd       	sbrc	r24, 7
     2fa:	90 95       	com	r25
     2fc:	9f 93       	push	r25
     2fe:	2f 93       	push	r18
     300:	1f 93       	push	r17
     302:	0f 93       	push	r16
     304:	7e d5       	rcall	.+2812   	; 0xe02 <printf>

void can_print(can_message_t* msg)
{
	printf("ID: %c ,Length: %d, ",msg->id,msg->length);
	int i ;
	for (i=0; i<msg->length;i++)
     306:	21 96       	adiw	r28, 0x01	; 1
     308:	f6 01       	movw	r30, r12
     30a:	21 81       	ldd	r18, Z+1	; 0x01
     30c:	33 27       	eor	r19, r19
     30e:	27 fd       	sbrc	r18, 7
     310:	30 95       	com	r19
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	c2 17       	cp	r28, r18
     31c:	d3 07       	cpc	r29, r19
     31e:	3c f3       	brlt	.-50     	; 0x2ee <can_print+0x5e>
	{
		printf("%i", msg->data[i]);
	}
	printf("\n");
     320:	8a e0       	ldi	r24, 0x0A	; 10
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	7f d5       	rcall	.+2814   	; 0xe24 <putchar>
}
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	1f 91       	pop	r17
     32c:	0f 91       	pop	r16
     32e:	ff 90       	pop	r15
     330:	ef 90       	pop	r14
     332:	df 90       	pop	r13
     334:	cf 90       	pop	r12
     336:	08 95       	ret

00000338 <i2c_init>:



void i2c_init( void )
{
	TWBR = 0x0C; // Baud
     338:	8c e0       	ldi	r24, 0x0C	; 12
     33a:	80 93 b8 00 	sts	0x00B8, r24
     33e:	08 95       	ret

00000340 <i2c_start>:


char i2c_start(char address)
{
	// reset TWI control register
	TWCR = 0;
     340:	ec eb       	ldi	r30, 0xBC	; 188
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	10 82       	st	Z, r1
	// transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     346:	94 ea       	ldi	r25, 0xA4	; 164
     348:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     34a:	90 81       	ld	r25, Z
     34c:	99 23       	and	r25, r25
     34e:	ec f7       	brge	.-6      	; 0x34a <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     350:	90 91 b9 00 	lds	r25, 0x00B9
     354:	98 7f       	andi	r25, 0xF8	; 248
     356:	98 30       	cpi	r25, 0x08	; 8
     358:	a1 f4       	brne	.+40     	; 0x382 <i2c_start+0x42>
	
	// load slave address into data register
	TWDR = address;
     35a:	80 93 bb 00 	sts	0x00BB, r24
	
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     35e:	84 e8       	ldi	r24, 0x84	; 132
     360:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     364:	ec eb       	ldi	r30, 0xBC	; 188
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	88 23       	and	r24, r24
     36c:	ec f7       	brge	.-6      	; 0x368 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     36e:	90 91 b9 00 	lds	r25, 0x00B9
     372:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     374:	98 31       	cpi	r25, 0x18	; 24
     376:	39 f0       	breq	.+14     	; 0x386 <i2c_start+0x46>
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	90 34       	cpi	r25, 0x40	; 64
     37c:	29 f4       	brne	.+10     	; 0x388 <i2c_start+0x48>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
     386:	80 e0       	ldi	r24, 0x00	; 0
}
     388:	08 95       	ret

0000038a <i2c_write>:

char i2c_write(char data)
{
	// load data into data register
	TWDR = data;
     38a:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     38e:	84 e8       	ldi	r24, 0x84	; 132
     390:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     394:	ec eb       	ldi	r30, 0xBC	; 188
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
     39a:	88 23       	and	r24, r24
     39c:	ec f7       	brge	.-6      	; 0x398 <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     39e:	90 91 b9 00 	lds	r25, 0x00B9
     3a2:	98 7f       	andi	r25, 0xF8	; 248
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	98 32       	cpi	r25, 0x28	; 40
     3a8:	09 f4       	brne	.+2      	; 0x3ac <i2c_write+0x22>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     3ac:	08 95       	ret

000003ae <i2c_transmit>:

char i2c_transmit(char address, char* data, uint16_t length)
{
     3ae:	df 92       	push	r13
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	7b 01       	movw	r14, r22
     3be:	8a 01       	movw	r16, r20
	// Start
	if (i2c_start(address | I2C_WRITE)) return 1;
     3c0:	bf df       	rcall	.-130    	; 0x340 <i2c_start>
     3c2:	81 11       	cpse	r24, r1
     3c4:	15 c0       	rjmp	.+42     	; 0x3f0 <i2c_transmit+0x42>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
     3c6:	e1 df       	rcall	.-62     	; 0x38a <i2c_write>
     3c8:	d8 2e       	mov	r13, r24
     3ca:	81 11       	cpse	r24, r1
     3cc:	14 c0       	rjmp	.+40     	; 0x3f6 <i2c_transmit+0x48>
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
     3ce:	01 15       	cp	r16, r1
     3d0:	11 05       	cpc	r17, r1
     3d2:	51 f0       	breq	.+20     	; 0x3e8 <i2c_transmit+0x3a>
     3d4:	e7 01       	movw	r28, r14
     3d6:	0e 0d       	add	r16, r14
     3d8:	1f 1d       	adc	r17, r15
	{
		if (i2c_write(data[i])) return 1;
     3da:	89 91       	ld	r24, Y+
     3dc:	d6 df       	rcall	.-84     	; 0x38a <i2c_write>
     3de:	81 11       	cpse	r24, r1
     3e0:	0d c0       	rjmp	.+26     	; 0x3fc <i2c_transmit+0x4e>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
     3e2:	c0 17       	cp	r28, r16
     3e4:	d1 07       	cpc	r29, r17
     3e6:	c9 f7       	brne	.-14     	; 0x3da <i2c_transmit+0x2c>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     3e8:	84 e9       	ldi	r24, 0x94	; 148
     3ea:	80 93 bc 00 	sts	0x00BC, r24
     3ee:	08 c0       	rjmp	.+16     	; 0x400 <i2c_transmit+0x52>
}

char i2c_transmit(char address, char* data, uint16_t length)
{
	// Start
	if (i2c_start(address | I2C_WRITE)) return 1;
     3f0:	dd 24       	eor	r13, r13
     3f2:	d3 94       	inc	r13
     3f4:	05 c0       	rjmp	.+10     	; 0x400 <i2c_transmit+0x52>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
     3f6:	dd 24       	eor	r13, r13
     3f8:	d3 94       	inc	r13
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <i2c_transmit+0x52>
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     3fc:	dd 24       	eor	r13, r13
     3fe:	d3 94       	inc	r13
	}
	
	i2c_stop();
	
	return 0;
}
     400:	8d 2d       	mov	r24, r13
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	df 90       	pop	r13
     410:	08 95       	ret

00000412 <mcp2515_read>:
		printf("MCP2515 is not in config mode!\n");
	}
	
	
}
char mcp2515_read (char addr){
     412:	cf 93       	push	r28
     414:	c8 2f       	mov	r28, r24
	char result;
	
	spi_select();
     416:	79 d1       	rcall	.+754    	; 0x70a <spi_select>
	
	spi_transmit(MCP_READ);
     418:	83 e0       	ldi	r24, 0x03	; 3
     41a:	7b d1       	rcall	.+758    	; 0x712 <spi_transmit>
	spi_transmit(addr);
     41c:	8c 2f       	mov	r24, r28
     41e:	79 d1       	rcall	.+754    	; 0x712 <spi_transmit>
	result = spi_receive();
     420:	7d d1       	rcall	.+762    	; 0x71c <spi_receive>
     422:	c8 2f       	mov	r28, r24
	
	spi_deselect();
     424:	74 d1       	rcall	.+744    	; 0x70e <spi_deselect>
	
	return result;
}
     426:	8c 2f       	mov	r24, r28
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <mcp2515_write>:

void mcp2515_write(char addr, char data)
{
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	d8 2f       	mov	r29, r24
     432:	c6 2f       	mov	r28, r22
	spi_select();
     434:	6a d1       	rcall	.+724    	; 0x70a <spi_select>
	
	spi_transmit(MCP_WRITE);
     436:	82 e0       	ldi	r24, 0x02	; 2
     438:	6c d1       	rcall	.+728    	; 0x712 <spi_transmit>
	spi_transmit(addr);
     43a:	8d 2f       	mov	r24, r29
     43c:	6a d1       	rcall	.+724    	; 0x712 <spi_transmit>
	spi_transmit(data);
     43e:	8c 2f       	mov	r24, r28
     440:	68 d1       	rcall	.+720    	; 0x712 <spi_transmit>
	
	spi_deselect();
     442:	65 d1       	rcall	.+714    	; 0x70e <spi_deselect>
	
}
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <mcp2515_request_to_send>:

void mcp2515_request_to_send(int reg)
{
     44a:	cf 93       	push	r28
     44c:	c8 2f       	mov	r28, r24
	spi_select();
     44e:	5d d1       	rcall	.+698    	; 0x70a <spi_select>
	
	spi_transmit(reg);
     450:	8c 2f       	mov	r24, r28
     452:	5f d1       	rcall	.+702    	; 0x712 <spi_transmit>
	
	spi_deselect();
     454:	5c d1       	rcall	.+696    	; 0x70e <spi_deselect>
}
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <mcp2515_bit_modify>:

void mcp2515_bit_modify(char addr, char mask_byte, char data)
{
     45a:	1f 93       	push	r17
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	18 2f       	mov	r17, r24
     462:	d6 2f       	mov	r29, r22
     464:	c4 2f       	mov	r28, r20
	spi_select();
     466:	51 d1       	rcall	.+674    	; 0x70a <spi_select>
	
	spi_transmit(MCP_BITMOD);
     468:	85 e0       	ldi	r24, 0x05	; 5
     46a:	53 d1       	rcall	.+678    	; 0x712 <spi_transmit>
	spi_transmit(addr);
     46c:	81 2f       	mov	r24, r17
     46e:	51 d1       	rcall	.+674    	; 0x712 <spi_transmit>
	spi_transmit(mask_byte);
     470:	8d 2f       	mov	r24, r29
     472:	4f d1       	rcall	.+670    	; 0x712 <spi_transmit>
	spi_transmit(data);
     474:	8c 2f       	mov	r24, r28
     476:	4d d1       	rcall	.+666    	; 0x712 <spi_transmit>
	
	spi_deselect();
     478:	4a d1       	rcall	.+660    	; 0x70e <spi_deselect>
}
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	08 95       	ret

00000482 <mcp2515_reset>:

void mcp2515_reset()
{
	spi_select();
     482:	43 d1       	rcall	.+646    	; 0x70a <spi_select>
	
	spi_transmit(MCP_RESET);
     484:	80 ec       	ldi	r24, 0xC0	; 192
     486:	45 d1       	rcall	.+650    	; 0x712 <spi_transmit>
	
	spi_deselect();
     488:	42 c1       	rjmp	.+644    	; 0x70e <spi_deselect>
     48a:	08 95       	ret

0000048c <mcp2515_read_status>:
}

char mcp2515_read_status()
{
     48c:	cf 93       	push	r28
	char output;
	spi_select();
     48e:	3d d1       	rcall	.+634    	; 0x70a <spi_select>
	spi_transmit(MCP_READ);
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	3f d1       	rcall	.+638    	; 0x712 <spi_transmit>
	spi_transmit(MCP_CANSTAT);
     494:	8e e0       	ldi	r24, 0x0E	; 14
     496:	3d d1       	rcall	.+634    	; 0x712 <spi_transmit>
	output = spi_receive();
     498:	41 d1       	rcall	.+642    	; 0x71c <spi_receive>
     49a:	c8 2f       	mov	r28, r24
	
	spi_deselect();
     49c:	38 d1       	rcall	.+624    	; 0x70e <spi_deselect>
	return output;
}
     49e:	8c 2f       	mov	r24, r28
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <mcp2515_init>:
#include "spi_control.h"
#include <stdio.h>

void mcp2515_init(){
	char status;
	spi_init();
     4a4:	3f d1       	rcall	.+638    	; 0x724 <spi_init>
	mcp2515_reset();
     4a6:	ed df       	rcall	.-38     	; 0x482 <mcp2515_reset>
	
	status = mcp2515_read_status();
     4a8:	f1 df       	rcall	.-30     	; 0x48c <mcp2515_read_status>
	if ((status & MODE_MASK) != MODE_CONFIG)
     4aa:	80 7e       	andi	r24, 0xE0	; 224
     4ac:	80 38       	cpi	r24, 0x80	; 128
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <mcp2515_init+0x12>
	{
		printf("MCP2515 is not in config mode!\n");
     4b0:	8e e1       	ldi	r24, 0x1E	; 30
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	bc c4       	rjmp	.+2424   	; 0xe2e <puts>
     4b6:	08 95       	ret

000004b8 <motor_drive>:

	motor_drive(to_motor*2);
}

void motor_drive( char joystick_x )
{
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	1f 92       	push	r1
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
	// Set direction
	if(joystick_x < 0){
     4c2:	88 23       	and	r24, r24
     4c4:	14 f4       	brge	.+4      	; 0x4ca <motor_drive+0x12>
		PORTF &= ~(1 << PF3);
     4c6:	8b 98       	cbi	0x11, 3	; 17
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <motor_drive+0x14>
	}
	else{
		PORTF |= (1 << PF3);
     4ca:	8b 9a       	sbi	0x11, 3	; 17
	}
	// Set speed
	char motor_speed = (char)((abs((float)joystick_x)*150)/100);
     4cc:	28 2f       	mov	r18, r24
     4ce:	33 27       	eor	r19, r19
     4d0:	27 fd       	sbrc	r18, 7
     4d2:	30 95       	com	r19
     4d4:	33 23       	and	r19, r19
     4d6:	1c f4       	brge	.+6      	; 0x4de <motor_drive+0x26>
     4d8:	31 95       	neg	r19
     4da:	21 95       	neg	r18
     4dc:	31 09       	sbc	r19, r1
     4de:	46 e9       	ldi	r20, 0x96	; 150
     4e0:	42 9f       	mul	r20, r18
     4e2:	c0 01       	movw	r24, r0
     4e4:	43 9f       	mul	r20, r19
     4e6:	90 0d       	add	r25, r0
     4e8:	11 24       	eor	r1, r1
     4ea:	64 e6       	ldi	r22, 0x64	; 100
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	18 d4       	rcall	.+2096   	; 0xd20 <__divmodhi4>
	if (motor_speed > 50) motor_speed = 70;
     4f0:	63 33       	cpi	r22, 0x33	; 51
     4f2:	14 f4       	brge	.+4      	; 0x4f8 <motor_drive+0x40>
	}
	else{
		PORTF |= (1 << PF3);
	}
	// Set speed
	char motor_speed = (char)((abs((float)joystick_x)*150)/100);
     4f4:	69 83       	std	Y+1, r22	; 0x01
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <motor_drive+0x44>
	if (motor_speed > 50) motor_speed = 70;
     4f8:	86 e4       	ldi	r24, 0x46	; 70
     4fa:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_transmit(0x50, &motor_speed,1);
     4fc:	41 e0       	ldi	r20, 0x01	; 1
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	be 01       	movw	r22, r28
     502:	6f 5f       	subi	r22, 0xFF	; 255
     504:	7f 4f       	sbci	r23, 0xFF	; 255
     506:	80 e5       	ldi	r24, 0x50	; 80
     508:	52 df       	rcall	.-348    	; 0x3ae <i2c_transmit>
}
     50a:	0f 90       	pop	r0
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <reverse>:

uint8_t	reverse(uint8_t x)
{
	x = (((x & 0xaa) >> 1) | ((x & 0x55) << 1));
     512:	28 2f       	mov	r18, r24
     514:	25 75       	andi	r18, 0x55	; 85
     516:	22 0f       	add	r18, r18
     518:	98 2f       	mov	r25, r24
     51a:	9a 7a       	andi	r25, 0xAA	; 170
     51c:	96 95       	lsr	r25
     51e:	92 2b       	or	r25, r18
	x = (((x & 0xcc) >> 2) | ((x & 0x33) << 2));
     520:	29 2f       	mov	r18, r25
     522:	23 73       	andi	r18, 0x33	; 51
     524:	22 0f       	add	r18, r18
     526:	22 0f       	add	r18, r18
     528:	89 2f       	mov	r24, r25
     52a:	8c 7c       	andi	r24, 0xCC	; 204
     52c:	86 95       	lsr	r24
     52e:	86 95       	lsr	r24
     530:	82 2b       	or	r24, r18
	x = (((x & 0xf0) >> 4) | ((x & 0x0f) << 4));
	return x;
}
     532:	82 95       	swap	r24
     534:	08 95       	ret

00000536 <encoder_read>:
	
	ref_pos = encoder_read();
}

uint16_t encoder_read( void )
{
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
	uint8_t high,low;
	PORTF &= ~(1 << PF7); // !OE = 0
     53a:	8f 98       	cbi	0x11, 7	; 17
	PORTF &= ~(1 << PF5); // SET = 0 // For MSB
     53c:	8d 98       	cbi	0x11, 5	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     53e:	4a e6       	ldi	r20, 0x6A	; 106
     540:	4a 95       	dec	r20
     542:	f1 f7       	brne	.-4      	; 0x540 <encoder_read+0xa>
     544:	00 c0       	rjmp	.+0      	; 0x546 <encoder_read+0x10>
	_delay_us(20);
	high = PINK;
     546:	80 91 06 01 	lds	r24, 0x0106
	
	PORTF |= (1 << PF5);	//SET = 1 // For LSB
     54a:	8d 9a       	sbi	0x11, 5	; 17
     54c:	5a e6       	ldi	r21, 0x6A	; 106
     54e:	5a 95       	dec	r21
     550:	f1 f7       	brne	.-4      	; 0x54e <encoder_read+0x18>
     552:	00 c0       	rjmp	.+0      	; 0x554 <encoder_read+0x1e>
	_delay_us(20); 
	low = PINK;
     554:	d0 91 06 01 	lds	r29, 0x0106
	PORTF |= (1 << PF7); // !OE = 1
     558:	8f 9a       	sbi	0x11, 7	; 17
	
	high = reverse(high);
     55a:	db df       	rcall	.-74     	; 0x512 <reverse>
     55c:	c8 2f       	mov	r28, r24
	low = reverse(low);
     55e:	8d 2f       	mov	r24, r29
     560:	d8 df       	rcall	.-80     	; 0x512 <reverse>
	
	return (high << 8) + low;
     562:	2c 2f       	mov	r18, r28
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	32 2f       	mov	r19, r18
     568:	22 27       	eor	r18, r18
}
     56a:	a9 01       	movw	r20, r18
     56c:	48 0f       	add	r20, r24
     56e:	51 1d       	adc	r21, r1
     570:	ca 01       	movw	r24, r20
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <motor_init>:
uint8_t	reverse(uint8_t x);

void motor_init(void)
{
	
	i2c_init();
     578:	df de       	rcall	.-578    	; 0x338 <i2c_init>
	DDRF = 0xFF; // MJ1 output
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	80 bb       	out	0x10, r24	; 16
	DDRK = 0x00;
     57e:	10 92 07 01 	sts	0x0107, r1
	
	PORTF |= (1 << PF4); // Enable motor
     582:	8c 9a       	sbi	0x11, 4	; 17
	
	//Move to known reference point
	motor_drive(-50);
     584:	8e ec       	ldi	r24, 0xCE	; 206
     586:	98 df       	rcall	.-208    	; 0x4b8 <motor_drive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     588:	2f ef       	ldi	r18, 0xFF	; 255
     58a:	83 ed       	ldi	r24, 0xD3	; 211
     58c:	90 e3       	ldi	r25, 0x30	; 48
     58e:	21 50       	subi	r18, 0x01	; 1
     590:	80 40       	sbci	r24, 0x00	; 0
     592:	90 40       	sbci	r25, 0x00	; 0
     594:	e1 f7       	brne	.-8      	; 0x58e <motor_init+0x16>
     596:	00 c0       	rjmp	.+0      	; 0x598 <motor_init+0x20>
     598:	00 00       	nop
	_delay_ms(1000);
	motor_drive(0);
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	8d df       	rcall	.-230    	; 0x4b8 <motor_drive>
	
	//Toggle reset encoder
	PORTF &= ~(1 << PF6);
     59e:	8e 98       	cbi	0x11, 6	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a0:	2a e1       	ldi	r18, 0x1A	; 26
     5a2:	2a 95       	dec	r18
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <motor_init+0x2a>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <motor_init+0x30>
	_delay_us(5);
	PORTF |= (1 << PF6);
     5a8:	8e 9a       	sbi	0x11, 6	; 17
	
	ref_pos = encoder_read();
     5aa:	c5 df       	rcall	.-118    	; 0x536 <encoder_read>
     5ac:	90 93 45 02 	sts	0x0245, r25
     5b0:	80 93 44 02 	sts	0x0244, r24
     5b4:	08 95       	ret

000005b6 <position_controller>:
	
	return (high << 8) + low;
}

void position_controller( char pos )
{
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	18 2f       	mov	r17, r24
	int16_t rotations = encoder_read();
     5c6:	b7 df       	rcall	.-146    	; 0x536 <encoder_read>
     5c8:	ec 01       	movw	r28, r24
	int16_t prefered_rotations = ref_pos + ( ( (int32_t)pos ) * 8000.0) / 255;
     5ca:	60 91 44 02 	lds	r22, 0x0244
     5ce:	70 91 45 02 	lds	r23, 0x0245
     5d2:	88 27       	eor	r24, r24
     5d4:	77 fd       	sbrc	r23, 7
     5d6:	80 95       	com	r24
     5d8:	98 2f       	mov	r25, r24
     5da:	8b d2       	rcall	.+1302   	; 0xaf2 <__floatsisf>
     5dc:	6b 01       	movw	r12, r22
     5de:	7c 01       	movw	r14, r24
     5e0:	61 2f       	mov	r22, r17
     5e2:	77 27       	eor	r23, r23
     5e4:	67 fd       	sbrc	r22, 7
     5e6:	70 95       	com	r23
     5e8:	87 2f       	mov	r24, r23
     5ea:	97 2f       	mov	r25, r23
     5ec:	82 d2       	rcall	.+1284   	; 0xaf2 <__floatsisf>
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	4a ef       	ldi	r20, 0xFA	; 250
     5f4:	55 e4       	ldi	r21, 0x45	; 69
     5f6:	31 d3       	rcall	.+1634   	; 0xc5a <__mulsf3>
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	4f e7       	ldi	r20, 0x7F	; 127
     5fe:	53 e4       	ldi	r21, 0x43	; 67
     600:	dd d1       	rcall	.+954    	; 0x9bc <__divsf3>
     602:	9b 01       	movw	r18, r22
     604:	ac 01       	movw	r20, r24
     606:	c7 01       	movw	r24, r14
     608:	b6 01       	movw	r22, r12
     60a:	70 d1       	rcall	.+736    	; 0x8ec <__addsf3>
     60c:	3f d2       	rcall	.+1150   	; 0xa8c <__fixsfsi>
	int16_t error = -prefered_rotations + rotations;
     60e:	c6 1b       	sub	r28, r22
     610:	d7 0b       	sbc	r29, r23
	char to_motor = error >> 6;
     612:	ce 01       	movw	r24, r28
     614:	08 2e       	mov	r0, r24
     616:	89 2f       	mov	r24, r25
     618:	00 0c       	add	r0, r0
     61a:	88 1f       	adc	r24, r24
     61c:	99 0b       	sbc	r25, r25
     61e:	00 0c       	add	r0, r0
     620:	88 1f       	adc	r24, r24
     622:	99 1f       	adc	r25, r25

	motor_drive(to_motor*2);
     624:	88 0f       	add	r24, r24
     626:	48 df       	rcall	.-368    	; 0x4b8 <motor_drive>
}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	df 90       	pop	r13
     634:	cf 90       	pop	r12
     636:	08 95       	ret

00000638 <servo_init>:
}

int us_to_compare(float us)
{
	return ( (us / 20000.0 ) * TOP_VALUE );
}
     638:	e0 e8       	ldi	r30, 0x80	; 128
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	82 60       	ori	r24, 0x02	; 2
     640:	80 83       	st	Z, r24
     642:	a1 e8       	ldi	r26, 0x81	; 129
     644:	b0 e0       	ldi	r27, 0x00	; 0
     646:	8c 91       	ld	r24, X
     648:	88 61       	ori	r24, 0x18	; 24
     64a:	8c 93       	st	X, r24
     64c:	8c 91       	ld	r24, X
     64e:	82 60       	ori	r24, 0x02	; 2
     650:	8c 93       	st	X, r24
     652:	8c 91       	ld	r24, X
     654:	8a 7f       	andi	r24, 0xFA	; 250
     656:	8c 93       	st	X, r24
     658:	80 81       	ld	r24, Z
     65a:	80 68       	ori	r24, 0x80	; 128
     65c:	80 83       	st	Z, r24
     65e:	80 81       	ld	r24, Z
     660:	8f 7b       	andi	r24, 0xBF	; 191
     662:	80 83       	st	Z, r24
     664:	80 e4       	ldi	r24, 0x40	; 64
     666:	9c e9       	ldi	r25, 0x9C	; 156
     668:	90 93 87 00 	sts	0x0087, r25
     66c:	80 93 86 00 	sts	0x0086, r24
     670:	88 eb       	ldi	r24, 0xB8	; 184
     672:	9b e0       	ldi	r25, 0x0B	; 11
     674:	90 93 89 00 	sts	0x0089, r25
     678:	80 93 88 00 	sts	0x0088, r24
     67c:	25 9a       	sbi	0x04, 5	; 4
     67e:	08 95       	ret

00000680 <servo_write>:

void servo_write(float val)
{
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	6b 01       	movw	r12, r22
     68a:	7c 01       	movw	r14, r24
	if(val > 950.0 && val < 2050.0)
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e8       	ldi	r19, 0x80	; 128
     690:	4d e6       	ldi	r20, 0x6D	; 109
     692:	54 e4       	ldi	r21, 0x44	; 68
     694:	de d2       	rcall	.+1468   	; 0xc52 <__gesf2>
     696:	18 16       	cp	r1, r24
     698:	24 f5       	brge	.+72     	; 0x6e2 <servo_write+0x62>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e2       	ldi	r19, 0x20	; 32
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	55 e4       	ldi	r21, 0x45	; 69
     6a2:	c7 01       	movw	r24, r14
     6a4:	b6 01       	movw	r22, r12
     6a6:	86 d1       	rcall	.+780    	; 0x9b4 <__cmpsf2>
     6a8:	88 23       	and	r24, r24
     6aa:	dc f4       	brge	.+54     	; 0x6e2 <servo_write+0x62>
	DDRB |= (1 << PB5);
}

int us_to_compare(float us)
{
	return ( (us / 20000.0 ) * TOP_VALUE );
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e4       	ldi	r19, 0x40	; 64
     6b0:	4c e9       	ldi	r20, 0x9C	; 156
     6b2:	56 e4       	ldi	r21, 0x46	; 70
     6b4:	c7 01       	movw	r24, r14
     6b6:	b6 01       	movw	r22, r12
     6b8:	81 d1       	rcall	.+770    	; 0x9bc <__divsf3>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	34 e2       	ldi	r19, 0x24	; 36
     6be:	44 e7       	ldi	r20, 0x74	; 116
     6c0:	5b e4       	ldi	r21, 0x4B	; 75
     6c2:	cb d2       	rcall	.+1430   	; 0xc5a <__mulsf3>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	5e e3       	ldi	r21, 0x3E	; 62
     6cc:	c6 d2       	rcall	.+1420   	; 0xc5a <__mulsf3>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	48 e4       	ldi	r20, 0x48	; 72
     6d4:	52 e4       	ldi	r21, 0x42	; 66
     6d6:	72 d1       	rcall	.+740    	; 0x9bc <__divsf3>
     6d8:	d9 d1       	rcall	.+946    	; 0xa8c <__fixsfsi>

void servo_write(float val)
{
	if(val > 950.0 && val < 2050.0)
	{
		OCR1A = us_to_compare(val);
     6da:	70 93 89 00 	sts	0x0089, r23
     6de:	60 93 88 00 	sts	0x0088, r22
	}
}
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	08 95       	ret

000006ec <init_solenoid>:
#include <util/delay.h>
#include "solenoid.h"

void init_solenoid(void)
{
	DDRC |= (1 << PC0);
     6ec:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= (1 << PC0);
     6ee:	40 9a       	sbi	0x08, 0	; 8
     6f0:	08 95       	ret

000006f2 <solenoid_shoot>:
}

void solenoid_shoot(void)
{
	PORTC &= ~(1 << PC0);
     6f2:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6f4:	2f e7       	ldi	r18, 0x7F	; 127
     6f6:	89 ea       	ldi	r24, 0xA9	; 169
     6f8:	93 e0       	ldi	r25, 0x03	; 3
     6fa:	21 50       	subi	r18, 0x01	; 1
     6fc:	80 40       	sbci	r24, 0x00	; 0
     6fe:	90 40       	sbci	r25, 0x00	; 0
     700:	e1 f7       	brne	.-8      	; 0x6fa <solenoid_shoot+0x8>
     702:	00 c0       	rjmp	.+0      	; 0x704 <solenoid_shoot+0x12>
     704:	00 00       	nop
	_delay_ms(75);
	PORTC |= (1 << PC0);
     706:	40 9a       	sbi	0x08, 0	; 8
     708:	08 95       	ret

0000070a <spi_select>:
#include "spi_control.h"
#include <stdio.h>

void spi_select()
{
	PORTB &= ~(1<<PB0);
     70a:	28 98       	cbi	0x05, 0	; 5
     70c:	08 95       	ret

0000070e <spi_deselect>:
}

void spi_deselect()
{
	PORTB |= (1<<PB0);
     70e:	28 9a       	sbi	0x05, 0	; 5
     710:	08 95       	ret

00000712 <spi_transmit>:


void spi_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     712:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     714:	0d b4       	in	r0, 0x2d	; 45
     716:	07 fe       	sbrs	r0, 7
     718:	fd cf       	rjmp	.-6      	; 0x714 <spi_transmit+0x2>
	;
}
     71a:	08 95       	ret

0000071c <spi_receive>:
	PORTB |= (1<<PB0);
}

char spi_receive()
{
	spi_transmit(0);
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	f9 df       	rcall	.-14     	; 0x712 <spi_transmit>
	return SPDR;
     720:	8e b5       	in	r24, 0x2e	; 46
}
     722:	08 95       	ret

00000724 <spi_init>:
}


void spi_init(){
	/* Set MOSI,SCK and SS output, all others input */
	DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<DD_SS);    
     724:	84 b1       	in	r24, 0x04	; 4
     726:	87 60       	ori	r24, 0x07	; 7
     728:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     72a:	81 e5       	ldi	r24, 0x51	; 81
     72c:	8c bd       	out	0x2c, r24	; 44
     72e:	08 95       	ret

00000730 <USART_transmit>:
	fdevopen(USART_transmit,USART_receive);
}

void USART_transmit(unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)))
     730:	e0 ec       	ldi	r30, 0xC0	; 192
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	90 81       	ld	r25, Z
     736:	95 ff       	sbrs	r25, 5
     738:	fd cf       	rjmp	.-6      	; 0x734 <USART_transmit+0x4>
		;
	UDR0 = data;
     73a:	80 93 c6 00 	sts	0x00C6, r24
     73e:	08 95       	ret

00000740 <USART_receive>:
	
}

unsigned char USART_receive (void){
	
	while( !(UCSR0A & (1<<RXC0)))
     740:	e0 ec       	ldi	r30, 0xC0	; 192
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	88 23       	and	r24, r24
     748:	ec f7       	brge	.-6      	; 0x744 <USART_receive+0x4>
		;
	return UDR0;
     74a:	80 91 c6 00 	lds	r24, 0x00C6
	
     74e:	08 95       	ret

00000750 <USART_init>:
#include "USART_driver.h"
#include <stdio.h>
void USART_init(unsigned int ubrr){

	UBRR0H = (unsigned char)(ubrr>>8);
     750:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;	
     754:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     758:	88 e1       	ldi	r24, 0x18	; 24
     75a:	80 93 c1 00 	sts	0x00C1, r24
	
	UCSR0C = (3<<UCSZ00); 
     75e:	86 e0       	ldi	r24, 0x06	; 6
     760:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(USART_transmit,USART_receive);
     764:	60 ea       	ldi	r22, 0xA0	; 160
     766:	73 e0       	ldi	r23, 0x03	; 3
     768:	88 e9       	ldi	r24, 0x98	; 152
     76a:	93 e0       	ldi	r25, 0x03	; 3
     76c:	00 c3       	rjmp	.+1536   	; 0xd6e <fdevopen>
     76e:	08 95       	ret

00000770 <check_and_report_goal>:
#include <stdlib.h>
#include "goal.h"
#include "driver/ADC.h"
#include "driver/can_com.h"

void check_and_report_goal( void ){
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	2a 97       	sbiw	r28, 0x0a	; 10
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
	int threshold = 4;
	static int recent_goal = 0;
	static int recent_goal_counter = 0;
	can_message_t goal_msg = {'g',0};
     784:	fe 01       	movw	r30, r28
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	8a e0       	ldi	r24, 0x0A	; 10
     78a:	df 01       	movw	r26, r30
     78c:	1d 92       	st	X+, r1
     78e:	8a 95       	dec	r24
     790:	e9 f7       	brne	.-6      	; 0x78c <check_and_report_goal+0x1c>
     792:	87 e6       	ldi	r24, 0x67	; 103
     794:	89 83       	std	Y+1, r24	; 0x01
	
	if (recent_goal == 0)
     796:	80 91 40 02 	lds	r24, 0x0240
     79a:	90 91 41 02 	lds	r25, 0x0241
     79e:	89 2b       	or	r24, r25
     7a0:	71 f4       	brne	.+28     	; 0x7be <check_and_report_goal+0x4e>
	{
		goal_msg.data[0] = ADC_read();
     7a2:	cd dc       	rcall	.-1638   	; 0x13e <ADC_read>
     7a4:	8b 83       	std	Y+3, r24	; 0x03
		if(goal_msg.data[0] < threshold)
     7a6:	84 30       	cpi	r24, 0x04	; 4
     7a8:	14 f5       	brge	.+68     	; 0x7ee <check_and_report_goal+0x7e>
		{
			recent_goal = 1;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	90 93 41 02 	sts	0x0241, r25
     7b2:	80 93 40 02 	sts	0x0240, r24
			can_message_send(&goal_msg);
     7b6:	ce 01       	movw	r24, r28
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	e1 dc       	rcall	.-1598   	; 0x17e <can_message_send>
     7bc:	18 c0       	rjmp	.+48     	; 0x7ee <check_and_report_goal+0x7e>
		}
	}
	else
	{
		recent_goal_counter += 1;
     7be:	80 91 3e 02 	lds	r24, 0x023E
     7c2:	90 91 3f 02 	lds	r25, 0x023F
     7c6:	01 96       	adiw	r24, 0x01	; 1
		if (recent_goal_counter > 1000/40)
     7c8:	8a 31       	cpi	r24, 0x1A	; 26
     7ca:	91 05       	cpc	r25, r1
     7cc:	2c f4       	brge	.+10     	; 0x7d8 <check_and_report_goal+0x68>
			can_message_send(&goal_msg);
		}
	}
	else
	{
		recent_goal_counter += 1;
     7ce:	90 93 3f 02 	sts	0x023F, r25
     7d2:	80 93 3e 02 	sts	0x023E, r24
     7d6:	0b c0       	rjmp	.+22     	; 0x7ee <check_and_report_goal+0x7e>
		if (recent_goal_counter > 1000/40)
		{
			recent_goal_counter = 0;
     7d8:	10 92 3f 02 	sts	0x023F, r1
     7dc:	10 92 3e 02 	sts	0x023E, r1
			if (ADC_read() > threshold){
     7e0:	ae dc       	rcall	.-1700   	; 0x13e <ADC_read>
     7e2:	85 30       	cpi	r24, 0x05	; 5
     7e4:	24 f0       	brlt	.+8      	; 0x7ee <check_and_report_goal+0x7e>
				recent_goal = 0;
     7e6:	10 92 41 02 	sts	0x0241, r1
     7ea:	10 92 40 02 	sts	0x0240, r1
			}
		}
	}
     7ee:	2a 96       	adiw	r28, 0x0a	; 10
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <handle_message>:
	}
}

 
void handle_message(can_message_t* message)
{
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	ec 01       	movw	r28, r24
	static int TOUCH_JOY_MODE = 0;
	switch (message->id)
     806:	88 81       	ld	r24, Y
     808:	80 37       	cpi	r24, 0x70	; 112
     80a:	71 f0       	breq	.+28     	; 0x828 <handle_message+0x28>
     80c:	34 f4       	brge	.+12     	; 0x81a <handle_message+0x1a>
     80e:	8a 36       	cpi	r24, 0x6A	; 106
     810:	71 f0       	breq	.+28     	; 0x82e <handle_message+0x2e>
     812:	8d 36       	cpi	r24, 0x6D	; 109
     814:	09 f4       	brne	.+2      	; 0x818 <handle_message+0x18>
     816:	48 c0       	rjmp	.+144    	; 0x8a8 <handle_message+0xa8>
     818:	51 c0       	rjmp	.+162    	; 0x8bc <handle_message+0xbc>
     81a:	83 37       	cpi	r24, 0x73	; 115
     81c:	09 f4       	brne	.+2      	; 0x820 <handle_message+0x20>
     81e:	38 c0       	rjmp	.+112    	; 0x890 <handle_message+0x90>
     820:	84 37       	cpi	r24, 0x74	; 116
     822:	09 f4       	brne	.+2      	; 0x826 <handle_message+0x26>
     824:	37 c0       	rjmp	.+110    	; 0x894 <handle_message+0x94>
     826:	4a c0       	rjmp	.+148    	; 0x8bc <handle_message+0xbc>
	{
		case 'p' :				// Print
			can_print(message);
     828:	ce 01       	movw	r24, r28
     82a:	32 dd       	rcall	.-1436   	; 0x290 <can_print>
			break;
     82c:	49 c0       	rjmp	.+146    	; 0x8c0 <handle_message+0xc0>
		case 'j' :
			if(TOUCH_JOY_MODE == 0){
     82e:	80 91 42 02 	lds	r24, 0x0242
     832:	90 91 43 02 	lds	r25, 0x0243
     836:	89 2b       	or	r24, r25
     838:	a9 f4       	brne	.+42     	; 0x864 <handle_message+0x64>
				servo_write( message->data[1] * 5.0 + 1450 );	//	Y - value
     83a:	6b 81       	ldd	r22, Y+3	; 0x03
     83c:	77 27       	eor	r23, r23
     83e:	67 fd       	sbrc	r22, 7
     840:	70 95       	com	r23
     842:	87 2f       	mov	r24, r23
     844:	97 2f       	mov	r25, r23
     846:	55 d1       	rcall	.+682    	; 0xaf2 <__floatsisf>
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	40 ea       	ldi	r20, 0xA0	; 160
     84e:	50 e4       	ldi	r21, 0x40	; 64
     850:	04 d2       	rcall	.+1032   	; 0xc5a <__mulsf3>
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e4       	ldi	r19, 0x40	; 64
     856:	45 eb       	ldi	r20, 0xB5	; 181
     858:	54 e4       	ldi	r21, 0x44	; 68
     85a:	48 d0       	rcall	.+144    	; 0x8ec <__addsf3>
     85c:	11 df       	rcall	.-478    	; 0x680 <servo_write>
				motor_drive( message->data[0] );
     85e:	8a 81       	ldd	r24, Y+2	; 0x02
     860:	2b de       	rcall	.-938    	; 0x4b8 <motor_drive>
     862:	2e c0       	rjmp	.+92     	; 0x8c0 <handle_message+0xc0>
			}
			else
			{
				servo_write( - message->data[0] * 5.0 + 1450 );	//	X - value
     864:	6a 81       	ldd	r22, Y+2	; 0x02
     866:	77 27       	eor	r23, r23
     868:	61 95       	neg	r22
     86a:	0c f4       	brge	.+2      	; 0x86e <handle_message+0x6e>
     86c:	70 95       	com	r23
     86e:	88 27       	eor	r24, r24
     870:	77 fd       	sbrc	r23, 7
     872:	80 95       	com	r24
     874:	98 2f       	mov	r25, r24
     876:	3d d1       	rcall	.+634    	; 0xaf2 <__floatsisf>
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 ea       	ldi	r20, 0xA0	; 160
     87e:	50 e4       	ldi	r21, 0x40	; 64
     880:	ec d1       	rcall	.+984    	; 0xc5a <__mulsf3>
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e4       	ldi	r19, 0x40	; 64
     886:	45 eb       	ldi	r20, 0xB5	; 181
     888:	54 e4       	ldi	r21, 0x44	; 68
     88a:	30 d0       	rcall	.+96     	; 0x8ec <__addsf3>
     88c:	f9 de       	rcall	.-526    	; 0x680 <servo_write>
     88e:	18 c0       	rjmp	.+48     	; 0x8c0 <handle_message+0xc0>
			}
			break;
		case 's' :
			solenoid_shoot();
     890:	30 df       	rcall	.-416    	; 0x6f2 <solenoid_shoot>
			break;
     892:	16 c0       	rjmp	.+44     	; 0x8c0 <handle_message+0xc0>
		case 't' :	
			if(TOUCH_JOY_MODE == 1){
     894:	80 91 42 02 	lds	r24, 0x0242
     898:	90 91 43 02 	lds	r25, 0x0243
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	81 f4       	brne	.+32     	; 0x8c0 <handle_message+0xc0>
				position_controller( -message->data[0] );				//	X - value
     8a0:	8a 81       	ldd	r24, Y+2	; 0x02
     8a2:	81 95       	neg	r24
     8a4:	88 de       	rcall	.-752    	; 0x5b6 <position_controller>
     8a6:	0c c0       	rjmp	.+24     	; 0x8c0 <handle_message+0xc0>
			}
			break;
			
		case 'm' : 
			TOUCH_JOY_MODE = message->data[0];
     8a8:	8a 81       	ldd	r24, Y+2	; 0x02
     8aa:	99 27       	eor	r25, r25
     8ac:	87 fd       	sbrc	r24, 7
     8ae:	90 95       	com	r25
     8b0:	90 93 43 02 	sts	0x0243, r25
     8b4:	80 93 42 02 	sts	0x0242, r24
			// Reset motor when new game with touch-slider
			motor_init();
     8b8:	5f de       	rcall	.-834    	; 0x578 <motor_init>
			break;
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <handle_message+0xc0>
			
		default:
			can_print(message);
     8bc:	ce 01       	movw	r24, r28
     8be:	e8 dc       	rcall	.-1584   	; 0x290 <can_print>
			break;
	}
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <main>:

void handle_message(can_message_t* message);

int main (void)
{
	can_init();
     8c6:	4d dc       	rcall	.-1894   	; 0x162 <can_init>
	servo_init();
     8c8:	b7 de       	rcall	.-658    	; 0x638 <servo_init>
	init_ADC();
     8ca:	2d dc       	rcall	.-1958   	; 0x126 <init_ADC>
	USART_init(MYUBRR);
     8cc:	87 e6       	ldi	r24, 0x67	; 103
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	3f df       	rcall	.-386    	; 0x750 <USART_init>
	motor_init();
     8d2:	52 de       	rcall	.-860    	; 0x578 <motor_init>
	init_solenoid();
     8d4:	0b df       	rcall	.-490    	; 0x6ec <init_solenoid>

	

	while (1)
	{
		if (can_get_message(&message) == 1)
     8d6:	86 e4       	ldi	r24, 0x46	; 70
     8d8:	92 e0       	ldi	r25, 0x02	; 2
     8da:	b4 dc       	rcall	.-1688   	; 0x244 <can_get_message>
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	19 f4       	brne	.+6      	; 0x8e6 <main+0x20>
		{
			handle_message(&message);
     8e0:	86 e4       	ldi	r24, 0x46	; 70
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	8d df       	rcall	.-230    	; 0x800 <handle_message>
		}
		check_and_report_goal();
     8e6:	44 df       	rcall	.-376    	; 0x770 <check_and_report_goal>
	}
     8e8:	f6 cf       	rjmp	.-20     	; 0x8d6 <main+0x10>

000008ea <__subsf3>:
     8ea:	50 58       	subi	r21, 0x80	; 128

000008ec <__addsf3>:
     8ec:	bb 27       	eor	r27, r27
     8ee:	aa 27       	eor	r26, r26
     8f0:	0e d0       	rcall	.+28     	; 0x90e <__addsf3x>
     8f2:	75 c1       	rjmp	.+746    	; 0xbde <__fp_round>
     8f4:	66 d1       	rcall	.+716    	; 0xbc2 <__fp_pscA>
     8f6:	30 f0       	brcs	.+12     	; 0x904 <__addsf3+0x18>
     8f8:	6b d1       	rcall	.+726    	; 0xbd0 <__fp_pscB>
     8fa:	20 f0       	brcs	.+8      	; 0x904 <__addsf3+0x18>
     8fc:	31 f4       	brne	.+12     	; 0x90a <__addsf3+0x1e>
     8fe:	9f 3f       	cpi	r25, 0xFF	; 255
     900:	11 f4       	brne	.+4      	; 0x906 <__addsf3+0x1a>
     902:	1e f4       	brtc	.+6      	; 0x90a <__addsf3+0x1e>
     904:	5b c1       	rjmp	.+694    	; 0xbbc <__fp_nan>
     906:	0e f4       	brtc	.+2      	; 0x90a <__addsf3+0x1e>
     908:	e0 95       	com	r30
     90a:	e7 fb       	bst	r30, 7
     90c:	51 c1       	rjmp	.+674    	; 0xbb0 <__fp_inf>

0000090e <__addsf3x>:
     90e:	e9 2f       	mov	r30, r25
     910:	77 d1       	rcall	.+750    	; 0xc00 <__fp_split3>
     912:	80 f3       	brcs	.-32     	; 0x8f4 <__addsf3+0x8>
     914:	ba 17       	cp	r27, r26
     916:	62 07       	cpc	r22, r18
     918:	73 07       	cpc	r23, r19
     91a:	84 07       	cpc	r24, r20
     91c:	95 07       	cpc	r25, r21
     91e:	18 f0       	brcs	.+6      	; 0x926 <__addsf3x+0x18>
     920:	71 f4       	brne	.+28     	; 0x93e <__addsf3x+0x30>
     922:	9e f5       	brtc	.+102    	; 0x98a <__addsf3x+0x7c>
     924:	8f c1       	rjmp	.+798    	; 0xc44 <__fp_zero>
     926:	0e f4       	brtc	.+2      	; 0x92a <__addsf3x+0x1c>
     928:	e0 95       	com	r30
     92a:	0b 2e       	mov	r0, r27
     92c:	ba 2f       	mov	r27, r26
     92e:	a0 2d       	mov	r26, r0
     930:	0b 01       	movw	r0, r22
     932:	b9 01       	movw	r22, r18
     934:	90 01       	movw	r18, r0
     936:	0c 01       	movw	r0, r24
     938:	ca 01       	movw	r24, r20
     93a:	a0 01       	movw	r20, r0
     93c:	11 24       	eor	r1, r1
     93e:	ff 27       	eor	r31, r31
     940:	59 1b       	sub	r21, r25
     942:	99 f0       	breq	.+38     	; 0x96a <__addsf3x+0x5c>
     944:	59 3f       	cpi	r21, 0xF9	; 249
     946:	50 f4       	brcc	.+20     	; 0x95c <__addsf3x+0x4e>
     948:	50 3e       	cpi	r21, 0xE0	; 224
     94a:	68 f1       	brcs	.+90     	; 0x9a6 <__addsf3x+0x98>
     94c:	1a 16       	cp	r1, r26
     94e:	f0 40       	sbci	r31, 0x00	; 0
     950:	a2 2f       	mov	r26, r18
     952:	23 2f       	mov	r18, r19
     954:	34 2f       	mov	r19, r20
     956:	44 27       	eor	r20, r20
     958:	58 5f       	subi	r21, 0xF8	; 248
     95a:	f3 cf       	rjmp	.-26     	; 0x942 <__addsf3x+0x34>
     95c:	46 95       	lsr	r20
     95e:	37 95       	ror	r19
     960:	27 95       	ror	r18
     962:	a7 95       	ror	r26
     964:	f0 40       	sbci	r31, 0x00	; 0
     966:	53 95       	inc	r21
     968:	c9 f7       	brne	.-14     	; 0x95c <__addsf3x+0x4e>
     96a:	7e f4       	brtc	.+30     	; 0x98a <__addsf3x+0x7c>
     96c:	1f 16       	cp	r1, r31
     96e:	ba 0b       	sbc	r27, r26
     970:	62 0b       	sbc	r22, r18
     972:	73 0b       	sbc	r23, r19
     974:	84 0b       	sbc	r24, r20
     976:	ba f0       	brmi	.+46     	; 0x9a6 <__addsf3x+0x98>
     978:	91 50       	subi	r25, 0x01	; 1
     97a:	a1 f0       	breq	.+40     	; 0x9a4 <__addsf3x+0x96>
     97c:	ff 0f       	add	r31, r31
     97e:	bb 1f       	adc	r27, r27
     980:	66 1f       	adc	r22, r22
     982:	77 1f       	adc	r23, r23
     984:	88 1f       	adc	r24, r24
     986:	c2 f7       	brpl	.-16     	; 0x978 <__addsf3x+0x6a>
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__addsf3x+0x98>
     98a:	ba 0f       	add	r27, r26
     98c:	62 1f       	adc	r22, r18
     98e:	73 1f       	adc	r23, r19
     990:	84 1f       	adc	r24, r20
     992:	48 f4       	brcc	.+18     	; 0x9a6 <__addsf3x+0x98>
     994:	87 95       	ror	r24
     996:	77 95       	ror	r23
     998:	67 95       	ror	r22
     99a:	b7 95       	ror	r27
     99c:	f7 95       	ror	r31
     99e:	9e 3f       	cpi	r25, 0xFE	; 254
     9a0:	08 f0       	brcs	.+2      	; 0x9a4 <__addsf3x+0x96>
     9a2:	b3 cf       	rjmp	.-154    	; 0x90a <__addsf3+0x1e>
     9a4:	93 95       	inc	r25
     9a6:	88 0f       	add	r24, r24
     9a8:	08 f0       	brcs	.+2      	; 0x9ac <__addsf3x+0x9e>
     9aa:	99 27       	eor	r25, r25
     9ac:	ee 0f       	add	r30, r30
     9ae:	97 95       	ror	r25
     9b0:	87 95       	ror	r24
     9b2:	08 95       	ret

000009b4 <__cmpsf2>:
     9b4:	d9 d0       	rcall	.+434    	; 0xb68 <__fp_cmp>
     9b6:	08 f4       	brcc	.+2      	; 0x9ba <__cmpsf2+0x6>
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	08 95       	ret

000009bc <__divsf3>:
     9bc:	0c d0       	rcall	.+24     	; 0x9d6 <__divsf3x>
     9be:	0f c1       	rjmp	.+542    	; 0xbde <__fp_round>
     9c0:	07 d1       	rcall	.+526    	; 0xbd0 <__fp_pscB>
     9c2:	40 f0       	brcs	.+16     	; 0x9d4 <__divsf3+0x18>
     9c4:	fe d0       	rcall	.+508    	; 0xbc2 <__fp_pscA>
     9c6:	30 f0       	brcs	.+12     	; 0x9d4 <__divsf3+0x18>
     9c8:	21 f4       	brne	.+8      	; 0x9d2 <__divsf3+0x16>
     9ca:	5f 3f       	cpi	r21, 0xFF	; 255
     9cc:	19 f0       	breq	.+6      	; 0x9d4 <__divsf3+0x18>
     9ce:	f0 c0       	rjmp	.+480    	; 0xbb0 <__fp_inf>
     9d0:	51 11       	cpse	r21, r1
     9d2:	39 c1       	rjmp	.+626    	; 0xc46 <__fp_szero>
     9d4:	f3 c0       	rjmp	.+486    	; 0xbbc <__fp_nan>

000009d6 <__divsf3x>:
     9d6:	14 d1       	rcall	.+552    	; 0xc00 <__fp_split3>
     9d8:	98 f3       	brcs	.-26     	; 0x9c0 <__divsf3+0x4>

000009da <__divsf3_pse>:
     9da:	99 23       	and	r25, r25
     9dc:	c9 f3       	breq	.-14     	; 0x9d0 <__divsf3+0x14>
     9de:	55 23       	and	r21, r21
     9e0:	b1 f3       	breq	.-20     	; 0x9ce <__divsf3+0x12>
     9e2:	95 1b       	sub	r25, r21
     9e4:	55 0b       	sbc	r21, r21
     9e6:	bb 27       	eor	r27, r27
     9e8:	aa 27       	eor	r26, r26
     9ea:	62 17       	cp	r22, r18
     9ec:	73 07       	cpc	r23, r19
     9ee:	84 07       	cpc	r24, r20
     9f0:	38 f0       	brcs	.+14     	; 0xa00 <__divsf3_pse+0x26>
     9f2:	9f 5f       	subi	r25, 0xFF	; 255
     9f4:	5f 4f       	sbci	r21, 0xFF	; 255
     9f6:	22 0f       	add	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	44 1f       	adc	r20, r20
     9fc:	aa 1f       	adc	r26, r26
     9fe:	a9 f3       	breq	.-22     	; 0x9ea <__divsf3_pse+0x10>
     a00:	33 d0       	rcall	.+102    	; 0xa68 <__divsf3_pse+0x8e>
     a02:	0e 2e       	mov	r0, r30
     a04:	3a f0       	brmi	.+14     	; 0xa14 <__divsf3_pse+0x3a>
     a06:	e0 e8       	ldi	r30, 0x80	; 128
     a08:	30 d0       	rcall	.+96     	; 0xa6a <__divsf3_pse+0x90>
     a0a:	91 50       	subi	r25, 0x01	; 1
     a0c:	50 40       	sbci	r21, 0x00	; 0
     a0e:	e6 95       	lsr	r30
     a10:	00 1c       	adc	r0, r0
     a12:	ca f7       	brpl	.-14     	; 0xa06 <__divsf3_pse+0x2c>
     a14:	29 d0       	rcall	.+82     	; 0xa68 <__divsf3_pse+0x8e>
     a16:	fe 2f       	mov	r31, r30
     a18:	27 d0       	rcall	.+78     	; 0xa68 <__divsf3_pse+0x8e>
     a1a:	66 0f       	add	r22, r22
     a1c:	77 1f       	adc	r23, r23
     a1e:	88 1f       	adc	r24, r24
     a20:	bb 1f       	adc	r27, r27
     a22:	26 17       	cp	r18, r22
     a24:	37 07       	cpc	r19, r23
     a26:	48 07       	cpc	r20, r24
     a28:	ab 07       	cpc	r26, r27
     a2a:	b0 e8       	ldi	r27, 0x80	; 128
     a2c:	09 f0       	breq	.+2      	; 0xa30 <__divsf3_pse+0x56>
     a2e:	bb 0b       	sbc	r27, r27
     a30:	80 2d       	mov	r24, r0
     a32:	bf 01       	movw	r22, r30
     a34:	ff 27       	eor	r31, r31
     a36:	93 58       	subi	r25, 0x83	; 131
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	2a f0       	brmi	.+10     	; 0xa46 <__divsf3_pse+0x6c>
     a3c:	9e 3f       	cpi	r25, 0xFE	; 254
     a3e:	51 05       	cpc	r21, r1
     a40:	68 f0       	brcs	.+26     	; 0xa5c <__divsf3_pse+0x82>
     a42:	b6 c0       	rjmp	.+364    	; 0xbb0 <__fp_inf>
     a44:	00 c1       	rjmp	.+512    	; 0xc46 <__fp_szero>
     a46:	5f 3f       	cpi	r21, 0xFF	; 255
     a48:	ec f3       	brlt	.-6      	; 0xa44 <__divsf3_pse+0x6a>
     a4a:	98 3e       	cpi	r25, 0xE8	; 232
     a4c:	dc f3       	brlt	.-10     	; 0xa44 <__divsf3_pse+0x6a>
     a4e:	86 95       	lsr	r24
     a50:	77 95       	ror	r23
     a52:	67 95       	ror	r22
     a54:	b7 95       	ror	r27
     a56:	f7 95       	ror	r31
     a58:	9f 5f       	subi	r25, 0xFF	; 255
     a5a:	c9 f7       	brne	.-14     	; 0xa4e <__divsf3_pse+0x74>
     a5c:	88 0f       	add	r24, r24
     a5e:	91 1d       	adc	r25, r1
     a60:	96 95       	lsr	r25
     a62:	87 95       	ror	r24
     a64:	97 f9       	bld	r25, 7
     a66:	08 95       	ret
     a68:	e1 e0       	ldi	r30, 0x01	; 1
     a6a:	66 0f       	add	r22, r22
     a6c:	77 1f       	adc	r23, r23
     a6e:	88 1f       	adc	r24, r24
     a70:	bb 1f       	adc	r27, r27
     a72:	62 17       	cp	r22, r18
     a74:	73 07       	cpc	r23, r19
     a76:	84 07       	cpc	r24, r20
     a78:	ba 07       	cpc	r27, r26
     a7a:	20 f0       	brcs	.+8      	; 0xa84 <__divsf3_pse+0xaa>
     a7c:	62 1b       	sub	r22, r18
     a7e:	73 0b       	sbc	r23, r19
     a80:	84 0b       	sbc	r24, r20
     a82:	ba 0b       	sbc	r27, r26
     a84:	ee 1f       	adc	r30, r30
     a86:	88 f7       	brcc	.-30     	; 0xa6a <__divsf3_pse+0x90>
     a88:	e0 95       	com	r30
     a8a:	08 95       	ret

00000a8c <__fixsfsi>:
     a8c:	04 d0       	rcall	.+8      	; 0xa96 <__fixunssfsi>
     a8e:	68 94       	set
     a90:	b1 11       	cpse	r27, r1
     a92:	d9 c0       	rjmp	.+434    	; 0xc46 <__fp_szero>
     a94:	08 95       	ret

00000a96 <__fixunssfsi>:
     a96:	bc d0       	rcall	.+376    	; 0xc10 <__fp_splitA>
     a98:	88 f0       	brcs	.+34     	; 0xabc <__fixunssfsi+0x26>
     a9a:	9f 57       	subi	r25, 0x7F	; 127
     a9c:	90 f0       	brcs	.+36     	; 0xac2 <__fixunssfsi+0x2c>
     a9e:	b9 2f       	mov	r27, r25
     aa0:	99 27       	eor	r25, r25
     aa2:	b7 51       	subi	r27, 0x17	; 23
     aa4:	a0 f0       	brcs	.+40     	; 0xace <__fixunssfsi+0x38>
     aa6:	d1 f0       	breq	.+52     	; 0xadc <__fixunssfsi+0x46>
     aa8:	66 0f       	add	r22, r22
     aaa:	77 1f       	adc	r23, r23
     aac:	88 1f       	adc	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	1a f0       	brmi	.+6      	; 0xab8 <__fixunssfsi+0x22>
     ab2:	ba 95       	dec	r27
     ab4:	c9 f7       	brne	.-14     	; 0xaa8 <__fixunssfsi+0x12>
     ab6:	12 c0       	rjmp	.+36     	; 0xadc <__fixunssfsi+0x46>
     ab8:	b1 30       	cpi	r27, 0x01	; 1
     aba:	81 f0       	breq	.+32     	; 0xadc <__fixunssfsi+0x46>
     abc:	c3 d0       	rcall	.+390    	; 0xc44 <__fp_zero>
     abe:	b1 e0       	ldi	r27, 0x01	; 1
     ac0:	08 95       	ret
     ac2:	c0 c0       	rjmp	.+384    	; 0xc44 <__fp_zero>
     ac4:	67 2f       	mov	r22, r23
     ac6:	78 2f       	mov	r23, r24
     ac8:	88 27       	eor	r24, r24
     aca:	b8 5f       	subi	r27, 0xF8	; 248
     acc:	39 f0       	breq	.+14     	; 0xadc <__fixunssfsi+0x46>
     ace:	b9 3f       	cpi	r27, 0xF9	; 249
     ad0:	cc f3       	brlt	.-14     	; 0xac4 <__fixunssfsi+0x2e>
     ad2:	86 95       	lsr	r24
     ad4:	77 95       	ror	r23
     ad6:	67 95       	ror	r22
     ad8:	b3 95       	inc	r27
     ada:	d9 f7       	brne	.-10     	; 0xad2 <__fixunssfsi+0x3c>
     adc:	3e f4       	brtc	.+14     	; 0xaec <__fixunssfsi+0x56>
     ade:	90 95       	com	r25
     ae0:	80 95       	com	r24
     ae2:	70 95       	com	r23
     ae4:	61 95       	neg	r22
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	8f 4f       	sbci	r24, 0xFF	; 255
     aea:	9f 4f       	sbci	r25, 0xFF	; 255
     aec:	08 95       	ret

00000aee <__floatunsisf>:
     aee:	e8 94       	clt
     af0:	09 c0       	rjmp	.+18     	; 0xb04 <__floatsisf+0x12>

00000af2 <__floatsisf>:
     af2:	97 fb       	bst	r25, 7
     af4:	3e f4       	brtc	.+14     	; 0xb04 <__floatsisf+0x12>
     af6:	90 95       	com	r25
     af8:	80 95       	com	r24
     afa:	70 95       	com	r23
     afc:	61 95       	neg	r22
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	8f 4f       	sbci	r24, 0xFF	; 255
     b02:	9f 4f       	sbci	r25, 0xFF	; 255
     b04:	99 23       	and	r25, r25
     b06:	a9 f0       	breq	.+42     	; 0xb32 <__floatsisf+0x40>
     b08:	f9 2f       	mov	r31, r25
     b0a:	96 e9       	ldi	r25, 0x96	; 150
     b0c:	bb 27       	eor	r27, r27
     b0e:	93 95       	inc	r25
     b10:	f6 95       	lsr	r31
     b12:	87 95       	ror	r24
     b14:	77 95       	ror	r23
     b16:	67 95       	ror	r22
     b18:	b7 95       	ror	r27
     b1a:	f1 11       	cpse	r31, r1
     b1c:	f8 cf       	rjmp	.-16     	; 0xb0e <__floatsisf+0x1c>
     b1e:	fa f4       	brpl	.+62     	; 0xb5e <__floatsisf+0x6c>
     b20:	bb 0f       	add	r27, r27
     b22:	11 f4       	brne	.+4      	; 0xb28 <__floatsisf+0x36>
     b24:	60 ff       	sbrs	r22, 0
     b26:	1b c0       	rjmp	.+54     	; 0xb5e <__floatsisf+0x6c>
     b28:	6f 5f       	subi	r22, 0xFF	; 255
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	8f 4f       	sbci	r24, 0xFF	; 255
     b2e:	9f 4f       	sbci	r25, 0xFF	; 255
     b30:	16 c0       	rjmp	.+44     	; 0xb5e <__floatsisf+0x6c>
     b32:	88 23       	and	r24, r24
     b34:	11 f0       	breq	.+4      	; 0xb3a <__floatsisf+0x48>
     b36:	96 e9       	ldi	r25, 0x96	; 150
     b38:	11 c0       	rjmp	.+34     	; 0xb5c <__floatsisf+0x6a>
     b3a:	77 23       	and	r23, r23
     b3c:	21 f0       	breq	.+8      	; 0xb46 <__floatsisf+0x54>
     b3e:	9e e8       	ldi	r25, 0x8E	; 142
     b40:	87 2f       	mov	r24, r23
     b42:	76 2f       	mov	r23, r22
     b44:	05 c0       	rjmp	.+10     	; 0xb50 <__floatsisf+0x5e>
     b46:	66 23       	and	r22, r22
     b48:	71 f0       	breq	.+28     	; 0xb66 <__floatsisf+0x74>
     b4a:	96 e8       	ldi	r25, 0x86	; 134
     b4c:	86 2f       	mov	r24, r22
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	2a f0       	brmi	.+10     	; 0xb5e <__floatsisf+0x6c>
     b54:	9a 95       	dec	r25
     b56:	66 0f       	add	r22, r22
     b58:	77 1f       	adc	r23, r23
     b5a:	88 1f       	adc	r24, r24
     b5c:	da f7       	brpl	.-10     	; 0xb54 <__floatsisf+0x62>
     b5e:	88 0f       	add	r24, r24
     b60:	96 95       	lsr	r25
     b62:	87 95       	ror	r24
     b64:	97 f9       	bld	r25, 7
     b66:	08 95       	ret

00000b68 <__fp_cmp>:
     b68:	99 0f       	add	r25, r25
     b6a:	00 08       	sbc	r0, r0
     b6c:	55 0f       	add	r21, r21
     b6e:	aa 0b       	sbc	r26, r26
     b70:	e0 e8       	ldi	r30, 0x80	; 128
     b72:	fe ef       	ldi	r31, 0xFE	; 254
     b74:	16 16       	cp	r1, r22
     b76:	17 06       	cpc	r1, r23
     b78:	e8 07       	cpc	r30, r24
     b7a:	f9 07       	cpc	r31, r25
     b7c:	c0 f0       	brcs	.+48     	; 0xbae <__fp_cmp+0x46>
     b7e:	12 16       	cp	r1, r18
     b80:	13 06       	cpc	r1, r19
     b82:	e4 07       	cpc	r30, r20
     b84:	f5 07       	cpc	r31, r21
     b86:	98 f0       	brcs	.+38     	; 0xbae <__fp_cmp+0x46>
     b88:	62 1b       	sub	r22, r18
     b8a:	73 0b       	sbc	r23, r19
     b8c:	84 0b       	sbc	r24, r20
     b8e:	95 0b       	sbc	r25, r21
     b90:	39 f4       	brne	.+14     	; 0xba0 <__fp_cmp+0x38>
     b92:	0a 26       	eor	r0, r26
     b94:	61 f0       	breq	.+24     	; 0xbae <__fp_cmp+0x46>
     b96:	23 2b       	or	r18, r19
     b98:	24 2b       	or	r18, r20
     b9a:	25 2b       	or	r18, r21
     b9c:	21 f4       	brne	.+8      	; 0xba6 <__fp_cmp+0x3e>
     b9e:	08 95       	ret
     ba0:	0a 26       	eor	r0, r26
     ba2:	09 f4       	brne	.+2      	; 0xba6 <__fp_cmp+0x3e>
     ba4:	a1 40       	sbci	r26, 0x01	; 1
     ba6:	a6 95       	lsr	r26
     ba8:	8f ef       	ldi	r24, 0xFF	; 255
     baa:	81 1d       	adc	r24, r1
     bac:	81 1d       	adc	r24, r1
     bae:	08 95       	ret

00000bb0 <__fp_inf>:
     bb0:	97 f9       	bld	r25, 7
     bb2:	9f 67       	ori	r25, 0x7F	; 127
     bb4:	80 e8       	ldi	r24, 0x80	; 128
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	08 95       	ret

00000bbc <__fp_nan>:
     bbc:	9f ef       	ldi	r25, 0xFF	; 255
     bbe:	80 ec       	ldi	r24, 0xC0	; 192
     bc0:	08 95       	ret

00000bc2 <__fp_pscA>:
     bc2:	00 24       	eor	r0, r0
     bc4:	0a 94       	dec	r0
     bc6:	16 16       	cp	r1, r22
     bc8:	17 06       	cpc	r1, r23
     bca:	18 06       	cpc	r1, r24
     bcc:	09 06       	cpc	r0, r25
     bce:	08 95       	ret

00000bd0 <__fp_pscB>:
     bd0:	00 24       	eor	r0, r0
     bd2:	0a 94       	dec	r0
     bd4:	12 16       	cp	r1, r18
     bd6:	13 06       	cpc	r1, r19
     bd8:	14 06       	cpc	r1, r20
     bda:	05 06       	cpc	r0, r21
     bdc:	08 95       	ret

00000bde <__fp_round>:
     bde:	09 2e       	mov	r0, r25
     be0:	03 94       	inc	r0
     be2:	00 0c       	add	r0, r0
     be4:	11 f4       	brne	.+4      	; 0xbea <__fp_round+0xc>
     be6:	88 23       	and	r24, r24
     be8:	52 f0       	brmi	.+20     	; 0xbfe <__fp_round+0x20>
     bea:	bb 0f       	add	r27, r27
     bec:	40 f4       	brcc	.+16     	; 0xbfe <__fp_round+0x20>
     bee:	bf 2b       	or	r27, r31
     bf0:	11 f4       	brne	.+4      	; 0xbf6 <__fp_round+0x18>
     bf2:	60 ff       	sbrs	r22, 0
     bf4:	04 c0       	rjmp	.+8      	; 0xbfe <__fp_round+0x20>
     bf6:	6f 5f       	subi	r22, 0xFF	; 255
     bf8:	7f 4f       	sbci	r23, 0xFF	; 255
     bfa:	8f 4f       	sbci	r24, 0xFF	; 255
     bfc:	9f 4f       	sbci	r25, 0xFF	; 255
     bfe:	08 95       	ret

00000c00 <__fp_split3>:
     c00:	57 fd       	sbrc	r21, 7
     c02:	90 58       	subi	r25, 0x80	; 128
     c04:	44 0f       	add	r20, r20
     c06:	55 1f       	adc	r21, r21
     c08:	59 f0       	breq	.+22     	; 0xc20 <__fp_splitA+0x10>
     c0a:	5f 3f       	cpi	r21, 0xFF	; 255
     c0c:	71 f0       	breq	.+28     	; 0xc2a <__fp_splitA+0x1a>
     c0e:	47 95       	ror	r20

00000c10 <__fp_splitA>:
     c10:	88 0f       	add	r24, r24
     c12:	97 fb       	bst	r25, 7
     c14:	99 1f       	adc	r25, r25
     c16:	61 f0       	breq	.+24     	; 0xc30 <__fp_splitA+0x20>
     c18:	9f 3f       	cpi	r25, 0xFF	; 255
     c1a:	79 f0       	breq	.+30     	; 0xc3a <__fp_splitA+0x2a>
     c1c:	87 95       	ror	r24
     c1e:	08 95       	ret
     c20:	12 16       	cp	r1, r18
     c22:	13 06       	cpc	r1, r19
     c24:	14 06       	cpc	r1, r20
     c26:	55 1f       	adc	r21, r21
     c28:	f2 cf       	rjmp	.-28     	; 0xc0e <__fp_split3+0xe>
     c2a:	46 95       	lsr	r20
     c2c:	f1 df       	rcall	.-30     	; 0xc10 <__fp_splitA>
     c2e:	08 c0       	rjmp	.+16     	; 0xc40 <__fp_splitA+0x30>
     c30:	16 16       	cp	r1, r22
     c32:	17 06       	cpc	r1, r23
     c34:	18 06       	cpc	r1, r24
     c36:	99 1f       	adc	r25, r25
     c38:	f1 cf       	rjmp	.-30     	; 0xc1c <__fp_splitA+0xc>
     c3a:	86 95       	lsr	r24
     c3c:	71 05       	cpc	r23, r1
     c3e:	61 05       	cpc	r22, r1
     c40:	08 94       	sec
     c42:	08 95       	ret

00000c44 <__fp_zero>:
     c44:	e8 94       	clt

00000c46 <__fp_szero>:
     c46:	bb 27       	eor	r27, r27
     c48:	66 27       	eor	r22, r22
     c4a:	77 27       	eor	r23, r23
     c4c:	cb 01       	movw	r24, r22
     c4e:	97 f9       	bld	r25, 7
     c50:	08 95       	ret

00000c52 <__gesf2>:
     c52:	8a df       	rcall	.-236    	; 0xb68 <__fp_cmp>
     c54:	08 f4       	brcc	.+2      	; 0xc58 <__gesf2+0x6>
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	08 95       	ret

00000c5a <__mulsf3>:
     c5a:	0b d0       	rcall	.+22     	; 0xc72 <__mulsf3x>
     c5c:	c0 cf       	rjmp	.-128    	; 0xbde <__fp_round>
     c5e:	b1 df       	rcall	.-158    	; 0xbc2 <__fp_pscA>
     c60:	28 f0       	brcs	.+10     	; 0xc6c <__mulsf3+0x12>
     c62:	b6 df       	rcall	.-148    	; 0xbd0 <__fp_pscB>
     c64:	18 f0       	brcs	.+6      	; 0xc6c <__mulsf3+0x12>
     c66:	95 23       	and	r25, r21
     c68:	09 f0       	breq	.+2      	; 0xc6c <__mulsf3+0x12>
     c6a:	a2 cf       	rjmp	.-188    	; 0xbb0 <__fp_inf>
     c6c:	a7 cf       	rjmp	.-178    	; 0xbbc <__fp_nan>
     c6e:	11 24       	eor	r1, r1
     c70:	ea cf       	rjmp	.-44     	; 0xc46 <__fp_szero>

00000c72 <__mulsf3x>:
     c72:	c6 df       	rcall	.-116    	; 0xc00 <__fp_split3>
     c74:	a0 f3       	brcs	.-24     	; 0xc5e <__mulsf3+0x4>

00000c76 <__mulsf3_pse>:
     c76:	95 9f       	mul	r25, r21
     c78:	d1 f3       	breq	.-12     	; 0xc6e <__mulsf3+0x14>
     c7a:	95 0f       	add	r25, r21
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	55 1f       	adc	r21, r21
     c80:	62 9f       	mul	r22, r18
     c82:	f0 01       	movw	r30, r0
     c84:	72 9f       	mul	r23, r18
     c86:	bb 27       	eor	r27, r27
     c88:	f0 0d       	add	r31, r0
     c8a:	b1 1d       	adc	r27, r1
     c8c:	63 9f       	mul	r22, r19
     c8e:	aa 27       	eor	r26, r26
     c90:	f0 0d       	add	r31, r0
     c92:	b1 1d       	adc	r27, r1
     c94:	aa 1f       	adc	r26, r26
     c96:	64 9f       	mul	r22, r20
     c98:	66 27       	eor	r22, r22
     c9a:	b0 0d       	add	r27, r0
     c9c:	a1 1d       	adc	r26, r1
     c9e:	66 1f       	adc	r22, r22
     ca0:	82 9f       	mul	r24, r18
     ca2:	22 27       	eor	r18, r18
     ca4:	b0 0d       	add	r27, r0
     ca6:	a1 1d       	adc	r26, r1
     ca8:	62 1f       	adc	r22, r18
     caa:	73 9f       	mul	r23, r19
     cac:	b0 0d       	add	r27, r0
     cae:	a1 1d       	adc	r26, r1
     cb0:	62 1f       	adc	r22, r18
     cb2:	83 9f       	mul	r24, r19
     cb4:	a0 0d       	add	r26, r0
     cb6:	61 1d       	adc	r22, r1
     cb8:	22 1f       	adc	r18, r18
     cba:	74 9f       	mul	r23, r20
     cbc:	33 27       	eor	r19, r19
     cbe:	a0 0d       	add	r26, r0
     cc0:	61 1d       	adc	r22, r1
     cc2:	23 1f       	adc	r18, r19
     cc4:	84 9f       	mul	r24, r20
     cc6:	60 0d       	add	r22, r0
     cc8:	21 1d       	adc	r18, r1
     cca:	82 2f       	mov	r24, r18
     ccc:	76 2f       	mov	r23, r22
     cce:	6a 2f       	mov	r22, r26
     cd0:	11 24       	eor	r1, r1
     cd2:	9f 57       	subi	r25, 0x7F	; 127
     cd4:	50 40       	sbci	r21, 0x00	; 0
     cd6:	8a f0       	brmi	.+34     	; 0xcfa <__mulsf3_pse+0x84>
     cd8:	e1 f0       	breq	.+56     	; 0xd12 <__mulsf3_pse+0x9c>
     cda:	88 23       	and	r24, r24
     cdc:	4a f0       	brmi	.+18     	; 0xcf0 <__mulsf3_pse+0x7a>
     cde:	ee 0f       	add	r30, r30
     ce0:	ff 1f       	adc	r31, r31
     ce2:	bb 1f       	adc	r27, r27
     ce4:	66 1f       	adc	r22, r22
     ce6:	77 1f       	adc	r23, r23
     ce8:	88 1f       	adc	r24, r24
     cea:	91 50       	subi	r25, 0x01	; 1
     cec:	50 40       	sbci	r21, 0x00	; 0
     cee:	a9 f7       	brne	.-22     	; 0xcda <__mulsf3_pse+0x64>
     cf0:	9e 3f       	cpi	r25, 0xFE	; 254
     cf2:	51 05       	cpc	r21, r1
     cf4:	70 f0       	brcs	.+28     	; 0xd12 <__mulsf3_pse+0x9c>
     cf6:	5c cf       	rjmp	.-328    	; 0xbb0 <__fp_inf>
     cf8:	a6 cf       	rjmp	.-180    	; 0xc46 <__fp_szero>
     cfa:	5f 3f       	cpi	r21, 0xFF	; 255
     cfc:	ec f3       	brlt	.-6      	; 0xcf8 <__mulsf3_pse+0x82>
     cfe:	98 3e       	cpi	r25, 0xE8	; 232
     d00:	dc f3       	brlt	.-10     	; 0xcf8 <__mulsf3_pse+0x82>
     d02:	86 95       	lsr	r24
     d04:	77 95       	ror	r23
     d06:	67 95       	ror	r22
     d08:	b7 95       	ror	r27
     d0a:	f7 95       	ror	r31
     d0c:	e7 95       	ror	r30
     d0e:	9f 5f       	subi	r25, 0xFF	; 255
     d10:	c1 f7       	brne	.-16     	; 0xd02 <__mulsf3_pse+0x8c>
     d12:	fe 2b       	or	r31, r30
     d14:	88 0f       	add	r24, r24
     d16:	91 1d       	adc	r25, r1
     d18:	96 95       	lsr	r25
     d1a:	87 95       	ror	r24
     d1c:	97 f9       	bld	r25, 7
     d1e:	08 95       	ret

00000d20 <__divmodhi4>:
     d20:	97 fb       	bst	r25, 7
     d22:	07 2e       	mov	r0, r23
     d24:	16 f4       	brtc	.+4      	; 0xd2a <__divmodhi4+0xa>
     d26:	00 94       	com	r0
     d28:	06 d0       	rcall	.+12     	; 0xd36 <__divmodhi4_neg1>
     d2a:	77 fd       	sbrc	r23, 7
     d2c:	08 d0       	rcall	.+16     	; 0xd3e <__divmodhi4_neg2>
     d2e:	0b d0       	rcall	.+22     	; 0xd46 <__udivmodhi4>
     d30:	07 fc       	sbrc	r0, 7
     d32:	05 d0       	rcall	.+10     	; 0xd3e <__divmodhi4_neg2>
     d34:	3e f4       	brtc	.+14     	; 0xd44 <__divmodhi4_exit>

00000d36 <__divmodhi4_neg1>:
     d36:	90 95       	com	r25
     d38:	81 95       	neg	r24
     d3a:	9f 4f       	sbci	r25, 0xFF	; 255
     d3c:	08 95       	ret

00000d3e <__divmodhi4_neg2>:
     d3e:	70 95       	com	r23
     d40:	61 95       	neg	r22
     d42:	7f 4f       	sbci	r23, 0xFF	; 255

00000d44 <__divmodhi4_exit>:
     d44:	08 95       	ret

00000d46 <__udivmodhi4>:
     d46:	aa 1b       	sub	r26, r26
     d48:	bb 1b       	sub	r27, r27
     d4a:	51 e1       	ldi	r21, 0x11	; 17
     d4c:	07 c0       	rjmp	.+14     	; 0xd5c <__udivmodhi4_ep>

00000d4e <__udivmodhi4_loop>:
     d4e:	aa 1f       	adc	r26, r26
     d50:	bb 1f       	adc	r27, r27
     d52:	a6 17       	cp	r26, r22
     d54:	b7 07       	cpc	r27, r23
     d56:	10 f0       	brcs	.+4      	; 0xd5c <__udivmodhi4_ep>
     d58:	a6 1b       	sub	r26, r22
     d5a:	b7 0b       	sbc	r27, r23

00000d5c <__udivmodhi4_ep>:
     d5c:	88 1f       	adc	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	5a 95       	dec	r21
     d62:	a9 f7       	brne	.-22     	; 0xd4e <__udivmodhi4_loop>
     d64:	80 95       	com	r24
     d66:	90 95       	com	r25
     d68:	bc 01       	movw	r22, r24
     d6a:	cd 01       	movw	r24, r26
     d6c:	08 95       	ret

00000d6e <fdevopen>:
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	ec 01       	movw	r28, r24
     d78:	8b 01       	movw	r16, r22
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	31 f4       	brne	.+12     	; 0xd8a <fdevopen+0x1c>
     d7e:	61 15       	cp	r22, r1
     d80:	71 05       	cpc	r23, r1
     d82:	19 f4       	brne	.+6      	; 0xd8a <fdevopen+0x1c>
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <fdevopen+0x8a>
     d8a:	6e e0       	ldi	r22, 0x0E	; 14
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	68 d2       	rcall	.+1232   	; 0x1264 <calloc>
     d94:	fc 01       	movw	r30, r24
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	a9 f3       	breq	.-22     	; 0xd84 <fdevopen+0x16>
     d9a:	80 e8       	ldi	r24, 0x80	; 128
     d9c:	83 83       	std	Z+3, r24	; 0x03
     d9e:	01 15       	cp	r16, r1
     da0:	11 05       	cpc	r17, r1
     da2:	71 f0       	breq	.+28     	; 0xdc0 <fdevopen+0x52>
     da4:	13 87       	std	Z+11, r17	; 0x0b
     da6:	02 87       	std	Z+10, r16	; 0x0a
     da8:	81 e8       	ldi	r24, 0x81	; 129
     daa:	83 83       	std	Z+3, r24	; 0x03
     dac:	80 91 50 02 	lds	r24, 0x0250
     db0:	90 91 51 02 	lds	r25, 0x0251
     db4:	89 2b       	or	r24, r25
     db6:	21 f4       	brne	.+8      	; 0xdc0 <fdevopen+0x52>
     db8:	f0 93 51 02 	sts	0x0251, r31
     dbc:	e0 93 50 02 	sts	0x0250, r30
     dc0:	20 97       	sbiw	r28, 0x00	; 0
     dc2:	c9 f0       	breq	.+50     	; 0xdf6 <fdevopen+0x88>
     dc4:	d1 87       	std	Z+9, r29	; 0x09
     dc6:	c0 87       	std	Z+8, r28	; 0x08
     dc8:	83 81       	ldd	r24, Z+3	; 0x03
     dca:	82 60       	ori	r24, 0x02	; 2
     dcc:	83 83       	std	Z+3, r24	; 0x03
     dce:	80 91 52 02 	lds	r24, 0x0252
     dd2:	90 91 53 02 	lds	r25, 0x0253
     dd6:	89 2b       	or	r24, r25
     dd8:	71 f4       	brne	.+28     	; 0xdf6 <fdevopen+0x88>
     dda:	f0 93 53 02 	sts	0x0253, r31
     dde:	e0 93 52 02 	sts	0x0252, r30
     de2:	80 91 54 02 	lds	r24, 0x0254
     de6:	90 91 55 02 	lds	r25, 0x0255
     dea:	89 2b       	or	r24, r25
     dec:	21 f4       	brne	.+8      	; 0xdf6 <fdevopen+0x88>
     dee:	f0 93 55 02 	sts	0x0255, r31
     df2:	e0 93 54 02 	sts	0x0254, r30
     df6:	cf 01       	movw	r24, r30
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <printf>:
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	fe 01       	movw	r30, r28
     e0c:	36 96       	adiw	r30, 0x06	; 6
     e0e:	61 91       	ld	r22, Z+
     e10:	71 91       	ld	r23, Z+
     e12:	af 01       	movw	r20, r30
     e14:	80 91 52 02 	lds	r24, 0x0252
     e18:	90 91 53 02 	lds	r25, 0x0253
     e1c:	35 d0       	rcall	.+106    	; 0xe88 <vfprintf>
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <putchar>:
     e24:	60 91 52 02 	lds	r22, 0x0252
     e28:	70 91 53 02 	lds	r23, 0x0253
     e2c:	79 c3       	rjmp	.+1778   	; 0x1520 <fputc>

00000e2e <puts>:
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	e0 91 52 02 	lds	r30, 0x0252
     e3a:	f0 91 53 02 	lds	r31, 0x0253
     e3e:	23 81       	ldd	r18, Z+3	; 0x03
     e40:	21 ff       	sbrs	r18, 1
     e42:	1b c0       	rjmp	.+54     	; 0xe7a <puts+0x4c>
     e44:	ec 01       	movw	r28, r24
     e46:	00 e0       	ldi	r16, 0x00	; 0
     e48:	10 e0       	ldi	r17, 0x00	; 0
     e4a:	89 91       	ld	r24, Y+
     e4c:	60 91 52 02 	lds	r22, 0x0252
     e50:	70 91 53 02 	lds	r23, 0x0253
     e54:	db 01       	movw	r26, r22
     e56:	18 96       	adiw	r26, 0x08	; 8
     e58:	ed 91       	ld	r30, X+
     e5a:	fc 91       	ld	r31, X
     e5c:	19 97       	sbiw	r26, 0x09	; 9
     e5e:	88 23       	and	r24, r24
     e60:	31 f0       	breq	.+12     	; 0xe6e <puts+0x40>
     e62:	19 95       	eicall
     e64:	89 2b       	or	r24, r25
     e66:	89 f3       	breq	.-30     	; 0xe4a <puts+0x1c>
     e68:	0f ef       	ldi	r16, 0xFF	; 255
     e6a:	1f ef       	ldi	r17, 0xFF	; 255
     e6c:	ee cf       	rjmp	.-36     	; 0xe4a <puts+0x1c>
     e6e:	8a e0       	ldi	r24, 0x0A	; 10
     e70:	19 95       	eicall
     e72:	89 2b       	or	r24, r25
     e74:	11 f4       	brne	.+4      	; 0xe7a <puts+0x4c>
     e76:	c8 01       	movw	r24, r16
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <puts+0x50>
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	9f ef       	ldi	r25, 0xFF	; 255
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	08 95       	ret

00000e88 <vfprintf>:
     e88:	2f 92       	push	r2
     e8a:	3f 92       	push	r3
     e8c:	4f 92       	push	r4
     e8e:	5f 92       	push	r5
     e90:	6f 92       	push	r6
     e92:	7f 92       	push	r7
     e94:	8f 92       	push	r8
     e96:	9f 92       	push	r9
     e98:	af 92       	push	r10
     e9a:	bf 92       	push	r11
     e9c:	cf 92       	push	r12
     e9e:	df 92       	push	r13
     ea0:	ef 92       	push	r14
     ea2:	ff 92       	push	r15
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	2c 97       	sbiw	r28, 0x0c	; 12
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	7c 01       	movw	r14, r24
     ebe:	6b 01       	movw	r12, r22
     ec0:	8a 01       	movw	r16, r20
     ec2:	fc 01       	movw	r30, r24
     ec4:	17 82       	std	Z+7, r1	; 0x07
     ec6:	16 82       	std	Z+6, r1	; 0x06
     ec8:	83 81       	ldd	r24, Z+3	; 0x03
     eca:	81 ff       	sbrs	r24, 1
     ecc:	b0 c1       	rjmp	.+864    	; 0x122e <vfprintf+0x3a6>
     ece:	ce 01       	movw	r24, r28
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	4c 01       	movw	r8, r24
     ed4:	f7 01       	movw	r30, r14
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
     ed8:	f6 01       	movw	r30, r12
     eda:	93 fd       	sbrc	r25, 3
     edc:	85 91       	lpm	r24, Z+
     ede:	93 ff       	sbrs	r25, 3
     ee0:	81 91       	ld	r24, Z+
     ee2:	6f 01       	movw	r12, r30
     ee4:	88 23       	and	r24, r24
     ee6:	09 f4       	brne	.+2      	; 0xeea <vfprintf+0x62>
     ee8:	9e c1       	rjmp	.+828    	; 0x1226 <vfprintf+0x39e>
     eea:	85 32       	cpi	r24, 0x25	; 37
     eec:	39 f4       	brne	.+14     	; 0xefc <vfprintf+0x74>
     eee:	93 fd       	sbrc	r25, 3
     ef0:	85 91       	lpm	r24, Z+
     ef2:	93 ff       	sbrs	r25, 3
     ef4:	81 91       	ld	r24, Z+
     ef6:	6f 01       	movw	r12, r30
     ef8:	85 32       	cpi	r24, 0x25	; 37
     efa:	21 f4       	brne	.+8      	; 0xf04 <vfprintf+0x7c>
     efc:	b7 01       	movw	r22, r14
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0f d3       	rcall	.+1566   	; 0x1520 <fputc>
     f02:	e8 cf       	rjmp	.-48     	; 0xed4 <vfprintf+0x4c>
     f04:	51 2c       	mov	r5, r1
     f06:	31 2c       	mov	r3, r1
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	20 32       	cpi	r18, 0x20	; 32
     f0c:	a0 f4       	brcc	.+40     	; 0xf36 <vfprintf+0xae>
     f0e:	8b 32       	cpi	r24, 0x2B	; 43
     f10:	69 f0       	breq	.+26     	; 0xf2c <vfprintf+0xa4>
     f12:	30 f4       	brcc	.+12     	; 0xf20 <vfprintf+0x98>
     f14:	80 32       	cpi	r24, 0x20	; 32
     f16:	59 f0       	breq	.+22     	; 0xf2e <vfprintf+0xa6>
     f18:	83 32       	cpi	r24, 0x23	; 35
     f1a:	69 f4       	brne	.+26     	; 0xf36 <vfprintf+0xae>
     f1c:	20 61       	ori	r18, 0x10	; 16
     f1e:	2c c0       	rjmp	.+88     	; 0xf78 <vfprintf+0xf0>
     f20:	8d 32       	cpi	r24, 0x2D	; 45
     f22:	39 f0       	breq	.+14     	; 0xf32 <vfprintf+0xaa>
     f24:	80 33       	cpi	r24, 0x30	; 48
     f26:	39 f4       	brne	.+14     	; 0xf36 <vfprintf+0xae>
     f28:	21 60       	ori	r18, 0x01	; 1
     f2a:	26 c0       	rjmp	.+76     	; 0xf78 <vfprintf+0xf0>
     f2c:	22 60       	ori	r18, 0x02	; 2
     f2e:	24 60       	ori	r18, 0x04	; 4
     f30:	23 c0       	rjmp	.+70     	; 0xf78 <vfprintf+0xf0>
     f32:	28 60       	ori	r18, 0x08	; 8
     f34:	21 c0       	rjmp	.+66     	; 0xf78 <vfprintf+0xf0>
     f36:	27 fd       	sbrc	r18, 7
     f38:	27 c0       	rjmp	.+78     	; 0xf88 <vfprintf+0x100>
     f3a:	30 ed       	ldi	r19, 0xD0	; 208
     f3c:	38 0f       	add	r19, r24
     f3e:	3a 30       	cpi	r19, 0x0A	; 10
     f40:	78 f4       	brcc	.+30     	; 0xf60 <vfprintf+0xd8>
     f42:	26 ff       	sbrs	r18, 6
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <vfprintf+0xca>
     f46:	fa e0       	ldi	r31, 0x0A	; 10
     f48:	5f 9e       	mul	r5, r31
     f4a:	30 0d       	add	r19, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	53 2e       	mov	r5, r19
     f50:	13 c0       	rjmp	.+38     	; 0xf78 <vfprintf+0xf0>
     f52:	8a e0       	ldi	r24, 0x0A	; 10
     f54:	38 9e       	mul	r3, r24
     f56:	30 0d       	add	r19, r0
     f58:	11 24       	eor	r1, r1
     f5a:	33 2e       	mov	r3, r19
     f5c:	20 62       	ori	r18, 0x20	; 32
     f5e:	0c c0       	rjmp	.+24     	; 0xf78 <vfprintf+0xf0>
     f60:	8e 32       	cpi	r24, 0x2E	; 46
     f62:	21 f4       	brne	.+8      	; 0xf6c <vfprintf+0xe4>
     f64:	26 fd       	sbrc	r18, 6
     f66:	5f c1       	rjmp	.+702    	; 0x1226 <vfprintf+0x39e>
     f68:	20 64       	ori	r18, 0x40	; 64
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <vfprintf+0xf0>
     f6c:	8c 36       	cpi	r24, 0x6C	; 108
     f6e:	11 f4       	brne	.+4      	; 0xf74 <vfprintf+0xec>
     f70:	20 68       	ori	r18, 0x80	; 128
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <vfprintf+0xf0>
     f74:	88 36       	cpi	r24, 0x68	; 104
     f76:	41 f4       	brne	.+16     	; 0xf88 <vfprintf+0x100>
     f78:	f6 01       	movw	r30, r12
     f7a:	93 fd       	sbrc	r25, 3
     f7c:	85 91       	lpm	r24, Z+
     f7e:	93 ff       	sbrs	r25, 3
     f80:	81 91       	ld	r24, Z+
     f82:	6f 01       	movw	r12, r30
     f84:	81 11       	cpse	r24, r1
     f86:	c1 cf       	rjmp	.-126    	; 0xf0a <vfprintf+0x82>
     f88:	98 2f       	mov	r25, r24
     f8a:	9f 7d       	andi	r25, 0xDF	; 223
     f8c:	95 54       	subi	r25, 0x45	; 69
     f8e:	93 30       	cpi	r25, 0x03	; 3
     f90:	28 f4       	brcc	.+10     	; 0xf9c <vfprintf+0x114>
     f92:	0c 5f       	subi	r16, 0xFC	; 252
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
     f96:	ff e3       	ldi	r31, 0x3F	; 63
     f98:	f9 83       	std	Y+1, r31	; 0x01
     f9a:	0d c0       	rjmp	.+26     	; 0xfb6 <vfprintf+0x12e>
     f9c:	83 36       	cpi	r24, 0x63	; 99
     f9e:	31 f0       	breq	.+12     	; 0xfac <vfprintf+0x124>
     fa0:	83 37       	cpi	r24, 0x73	; 115
     fa2:	71 f0       	breq	.+28     	; 0xfc0 <vfprintf+0x138>
     fa4:	83 35       	cpi	r24, 0x53	; 83
     fa6:	09 f0       	breq	.+2      	; 0xfaa <vfprintf+0x122>
     fa8:	57 c0       	rjmp	.+174    	; 0x1058 <vfprintf+0x1d0>
     faa:	21 c0       	rjmp	.+66     	; 0xfee <vfprintf+0x166>
     fac:	f8 01       	movw	r30, r16
     fae:	80 81       	ld	r24, Z
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	0e 5f       	subi	r16, 0xFE	; 254
     fb4:	1f 4f       	sbci	r17, 0xFF	; 255
     fb6:	44 24       	eor	r4, r4
     fb8:	43 94       	inc	r4
     fba:	51 2c       	mov	r5, r1
     fbc:	54 01       	movw	r10, r8
     fbe:	14 c0       	rjmp	.+40     	; 0xfe8 <vfprintf+0x160>
     fc0:	38 01       	movw	r6, r16
     fc2:	f2 e0       	ldi	r31, 0x02	; 2
     fc4:	6f 0e       	add	r6, r31
     fc6:	71 1c       	adc	r7, r1
     fc8:	f8 01       	movw	r30, r16
     fca:	a0 80       	ld	r10, Z
     fcc:	b1 80       	ldd	r11, Z+1	; 0x01
     fce:	26 ff       	sbrs	r18, 6
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <vfprintf+0x150>
     fd2:	65 2d       	mov	r22, r5
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <vfprintf+0x154>
     fd8:	6f ef       	ldi	r22, 0xFF	; 255
     fda:	7f ef       	ldi	r23, 0xFF	; 255
     fdc:	c5 01       	movw	r24, r10
     fde:	2c 87       	std	Y+12, r18	; 0x0c
     fe0:	94 d2       	rcall	.+1320   	; 0x150a <strnlen>
     fe2:	2c 01       	movw	r4, r24
     fe4:	83 01       	movw	r16, r6
     fe6:	2c 85       	ldd	r18, Y+12	; 0x0c
     fe8:	2f 77       	andi	r18, 0x7F	; 127
     fea:	22 2e       	mov	r2, r18
     fec:	16 c0       	rjmp	.+44     	; 0x101a <vfprintf+0x192>
     fee:	38 01       	movw	r6, r16
     ff0:	f2 e0       	ldi	r31, 0x02	; 2
     ff2:	6f 0e       	add	r6, r31
     ff4:	71 1c       	adc	r7, r1
     ff6:	f8 01       	movw	r30, r16
     ff8:	a0 80       	ld	r10, Z
     ffa:	b1 80       	ldd	r11, Z+1	; 0x01
     ffc:	26 ff       	sbrs	r18, 6
     ffe:	03 c0       	rjmp	.+6      	; 0x1006 <vfprintf+0x17e>
    1000:	65 2d       	mov	r22, r5
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	02 c0       	rjmp	.+4      	; 0x100a <vfprintf+0x182>
    1006:	6f ef       	ldi	r22, 0xFF	; 255
    1008:	7f ef       	ldi	r23, 0xFF	; 255
    100a:	c5 01       	movw	r24, r10
    100c:	2c 87       	std	Y+12, r18	; 0x0c
    100e:	6b d2       	rcall	.+1238   	; 0x14e6 <strnlen_P>
    1010:	2c 01       	movw	r4, r24
    1012:	2c 85       	ldd	r18, Y+12	; 0x0c
    1014:	20 68       	ori	r18, 0x80	; 128
    1016:	22 2e       	mov	r2, r18
    1018:	83 01       	movw	r16, r6
    101a:	23 fc       	sbrc	r2, 3
    101c:	19 c0       	rjmp	.+50     	; 0x1050 <vfprintf+0x1c8>
    101e:	83 2d       	mov	r24, r3
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	48 16       	cp	r4, r24
    1024:	59 06       	cpc	r5, r25
    1026:	a0 f4       	brcc	.+40     	; 0x1050 <vfprintf+0x1c8>
    1028:	b7 01       	movw	r22, r14
    102a:	80 e2       	ldi	r24, 0x20	; 32
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	78 d2       	rcall	.+1264   	; 0x1520 <fputc>
    1030:	3a 94       	dec	r3
    1032:	f5 cf       	rjmp	.-22     	; 0x101e <vfprintf+0x196>
    1034:	f5 01       	movw	r30, r10
    1036:	27 fc       	sbrc	r2, 7
    1038:	85 91       	lpm	r24, Z+
    103a:	27 fe       	sbrs	r2, 7
    103c:	81 91       	ld	r24, Z+
    103e:	5f 01       	movw	r10, r30
    1040:	b7 01       	movw	r22, r14
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	6d d2       	rcall	.+1242   	; 0x1520 <fputc>
    1046:	31 10       	cpse	r3, r1
    1048:	3a 94       	dec	r3
    104a:	f1 e0       	ldi	r31, 0x01	; 1
    104c:	4f 1a       	sub	r4, r31
    104e:	51 08       	sbc	r5, r1
    1050:	41 14       	cp	r4, r1
    1052:	51 04       	cpc	r5, r1
    1054:	79 f7       	brne	.-34     	; 0x1034 <vfprintf+0x1ac>
    1056:	de c0       	rjmp	.+444    	; 0x1214 <vfprintf+0x38c>
    1058:	84 36       	cpi	r24, 0x64	; 100
    105a:	11 f0       	breq	.+4      	; 0x1060 <vfprintf+0x1d8>
    105c:	89 36       	cpi	r24, 0x69	; 105
    105e:	31 f5       	brne	.+76     	; 0x10ac <vfprintf+0x224>
    1060:	f8 01       	movw	r30, r16
    1062:	27 ff       	sbrs	r18, 7
    1064:	07 c0       	rjmp	.+14     	; 0x1074 <vfprintf+0x1ec>
    1066:	60 81       	ld	r22, Z
    1068:	71 81       	ldd	r23, Z+1	; 0x01
    106a:	82 81       	ldd	r24, Z+2	; 0x02
    106c:	93 81       	ldd	r25, Z+3	; 0x03
    106e:	0c 5f       	subi	r16, 0xFC	; 252
    1070:	1f 4f       	sbci	r17, 0xFF	; 255
    1072:	08 c0       	rjmp	.+16     	; 0x1084 <vfprintf+0x1fc>
    1074:	60 81       	ld	r22, Z
    1076:	71 81       	ldd	r23, Z+1	; 0x01
    1078:	88 27       	eor	r24, r24
    107a:	77 fd       	sbrc	r23, 7
    107c:	80 95       	com	r24
    107e:	98 2f       	mov	r25, r24
    1080:	0e 5f       	subi	r16, 0xFE	; 254
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	2f 76       	andi	r18, 0x6F	; 111
    1086:	b2 2e       	mov	r11, r18
    1088:	97 ff       	sbrs	r25, 7
    108a:	09 c0       	rjmp	.+18     	; 0x109e <vfprintf+0x216>
    108c:	90 95       	com	r25
    108e:	80 95       	com	r24
    1090:	70 95       	com	r23
    1092:	61 95       	neg	r22
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	8f 4f       	sbci	r24, 0xFF	; 255
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	20 68       	ori	r18, 0x80	; 128
    109c:	b2 2e       	mov	r11, r18
    109e:	2a e0       	ldi	r18, 0x0A	; 10
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	a4 01       	movw	r20, r8
    10a4:	6f d2       	rcall	.+1246   	; 0x1584 <__ultoa_invert>
    10a6:	a8 2e       	mov	r10, r24
    10a8:	a8 18       	sub	r10, r8
    10aa:	43 c0       	rjmp	.+134    	; 0x1132 <vfprintf+0x2aa>
    10ac:	85 37       	cpi	r24, 0x75	; 117
    10ae:	29 f4       	brne	.+10     	; 0x10ba <vfprintf+0x232>
    10b0:	2f 7e       	andi	r18, 0xEF	; 239
    10b2:	b2 2e       	mov	r11, r18
    10b4:	2a e0       	ldi	r18, 0x0A	; 10
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	25 c0       	rjmp	.+74     	; 0x1104 <vfprintf+0x27c>
    10ba:	f2 2f       	mov	r31, r18
    10bc:	f9 7f       	andi	r31, 0xF9	; 249
    10be:	bf 2e       	mov	r11, r31
    10c0:	8f 36       	cpi	r24, 0x6F	; 111
    10c2:	c1 f0       	breq	.+48     	; 0x10f4 <vfprintf+0x26c>
    10c4:	18 f4       	brcc	.+6      	; 0x10cc <vfprintf+0x244>
    10c6:	88 35       	cpi	r24, 0x58	; 88
    10c8:	79 f0       	breq	.+30     	; 0x10e8 <vfprintf+0x260>
    10ca:	ad c0       	rjmp	.+346    	; 0x1226 <vfprintf+0x39e>
    10cc:	80 37       	cpi	r24, 0x70	; 112
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <vfprintf+0x24e>
    10d0:	88 37       	cpi	r24, 0x78	; 120
    10d2:	21 f0       	breq	.+8      	; 0x10dc <vfprintf+0x254>
    10d4:	a8 c0       	rjmp	.+336    	; 0x1226 <vfprintf+0x39e>
    10d6:	2f 2f       	mov	r18, r31
    10d8:	20 61       	ori	r18, 0x10	; 16
    10da:	b2 2e       	mov	r11, r18
    10dc:	b4 fe       	sbrs	r11, 4
    10de:	0d c0       	rjmp	.+26     	; 0x10fa <vfprintf+0x272>
    10e0:	8b 2d       	mov	r24, r11
    10e2:	84 60       	ori	r24, 0x04	; 4
    10e4:	b8 2e       	mov	r11, r24
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <vfprintf+0x272>
    10e8:	24 ff       	sbrs	r18, 4
    10ea:	0a c0       	rjmp	.+20     	; 0x1100 <vfprintf+0x278>
    10ec:	9f 2f       	mov	r25, r31
    10ee:	96 60       	ori	r25, 0x06	; 6
    10f0:	b9 2e       	mov	r11, r25
    10f2:	06 c0       	rjmp	.+12     	; 0x1100 <vfprintf+0x278>
    10f4:	28 e0       	ldi	r18, 0x08	; 8
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	05 c0       	rjmp	.+10     	; 0x1104 <vfprintf+0x27c>
    10fa:	20 e1       	ldi	r18, 0x10	; 16
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <vfprintf+0x27c>
    1100:	20 e1       	ldi	r18, 0x10	; 16
    1102:	32 e0       	ldi	r19, 0x02	; 2
    1104:	f8 01       	movw	r30, r16
    1106:	b7 fe       	sbrs	r11, 7
    1108:	07 c0       	rjmp	.+14     	; 0x1118 <vfprintf+0x290>
    110a:	60 81       	ld	r22, Z
    110c:	71 81       	ldd	r23, Z+1	; 0x01
    110e:	82 81       	ldd	r24, Z+2	; 0x02
    1110:	93 81       	ldd	r25, Z+3	; 0x03
    1112:	0c 5f       	subi	r16, 0xFC	; 252
    1114:	1f 4f       	sbci	r17, 0xFF	; 255
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <vfprintf+0x29c>
    1118:	60 81       	ld	r22, Z
    111a:	71 81       	ldd	r23, Z+1	; 0x01
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 5f       	subi	r16, 0xFE	; 254
    1122:	1f 4f       	sbci	r17, 0xFF	; 255
    1124:	a4 01       	movw	r20, r8
    1126:	2e d2       	rcall	.+1116   	; 0x1584 <__ultoa_invert>
    1128:	a8 2e       	mov	r10, r24
    112a:	a8 18       	sub	r10, r8
    112c:	fb 2d       	mov	r31, r11
    112e:	ff 77       	andi	r31, 0x7F	; 127
    1130:	bf 2e       	mov	r11, r31
    1132:	b6 fe       	sbrs	r11, 6
    1134:	0b c0       	rjmp	.+22     	; 0x114c <vfprintf+0x2c4>
    1136:	2b 2d       	mov	r18, r11
    1138:	2e 7f       	andi	r18, 0xFE	; 254
    113a:	a5 14       	cp	r10, r5
    113c:	50 f4       	brcc	.+20     	; 0x1152 <vfprintf+0x2ca>
    113e:	b4 fe       	sbrs	r11, 4
    1140:	0a c0       	rjmp	.+20     	; 0x1156 <vfprintf+0x2ce>
    1142:	b2 fc       	sbrc	r11, 2
    1144:	08 c0       	rjmp	.+16     	; 0x1156 <vfprintf+0x2ce>
    1146:	2b 2d       	mov	r18, r11
    1148:	2e 7e       	andi	r18, 0xEE	; 238
    114a:	05 c0       	rjmp	.+10     	; 0x1156 <vfprintf+0x2ce>
    114c:	7a 2c       	mov	r7, r10
    114e:	2b 2d       	mov	r18, r11
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <vfprintf+0x2d0>
    1152:	7a 2c       	mov	r7, r10
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <vfprintf+0x2d0>
    1156:	75 2c       	mov	r7, r5
    1158:	24 ff       	sbrs	r18, 4
    115a:	0d c0       	rjmp	.+26     	; 0x1176 <vfprintf+0x2ee>
    115c:	fe 01       	movw	r30, r28
    115e:	ea 0d       	add	r30, r10
    1160:	f1 1d       	adc	r31, r1
    1162:	80 81       	ld	r24, Z
    1164:	80 33       	cpi	r24, 0x30	; 48
    1166:	11 f4       	brne	.+4      	; 0x116c <vfprintf+0x2e4>
    1168:	29 7e       	andi	r18, 0xE9	; 233
    116a:	09 c0       	rjmp	.+18     	; 0x117e <vfprintf+0x2f6>
    116c:	22 ff       	sbrs	r18, 2
    116e:	06 c0       	rjmp	.+12     	; 0x117c <vfprintf+0x2f4>
    1170:	73 94       	inc	r7
    1172:	73 94       	inc	r7
    1174:	04 c0       	rjmp	.+8      	; 0x117e <vfprintf+0x2f6>
    1176:	82 2f       	mov	r24, r18
    1178:	86 78       	andi	r24, 0x86	; 134
    117a:	09 f0       	breq	.+2      	; 0x117e <vfprintf+0x2f6>
    117c:	73 94       	inc	r7
    117e:	23 fd       	sbrc	r18, 3
    1180:	12 c0       	rjmp	.+36     	; 0x11a6 <vfprintf+0x31e>
    1182:	20 ff       	sbrs	r18, 0
    1184:	06 c0       	rjmp	.+12     	; 0x1192 <vfprintf+0x30a>
    1186:	5a 2c       	mov	r5, r10
    1188:	73 14       	cp	r7, r3
    118a:	18 f4       	brcc	.+6      	; 0x1192 <vfprintf+0x30a>
    118c:	53 0c       	add	r5, r3
    118e:	57 18       	sub	r5, r7
    1190:	73 2c       	mov	r7, r3
    1192:	73 14       	cp	r7, r3
    1194:	60 f4       	brcc	.+24     	; 0x11ae <vfprintf+0x326>
    1196:	b7 01       	movw	r22, r14
    1198:	80 e2       	ldi	r24, 0x20	; 32
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	2c 87       	std	Y+12, r18	; 0x0c
    119e:	c0 d1       	rcall	.+896    	; 0x1520 <fputc>
    11a0:	73 94       	inc	r7
    11a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    11a4:	f6 cf       	rjmp	.-20     	; 0x1192 <vfprintf+0x30a>
    11a6:	73 14       	cp	r7, r3
    11a8:	10 f4       	brcc	.+4      	; 0x11ae <vfprintf+0x326>
    11aa:	37 18       	sub	r3, r7
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <vfprintf+0x328>
    11ae:	31 2c       	mov	r3, r1
    11b0:	24 ff       	sbrs	r18, 4
    11b2:	11 c0       	rjmp	.+34     	; 0x11d6 <vfprintf+0x34e>
    11b4:	b7 01       	movw	r22, r14
    11b6:	80 e3       	ldi	r24, 0x30	; 48
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	2c 87       	std	Y+12, r18	; 0x0c
    11bc:	b1 d1       	rcall	.+866    	; 0x1520 <fputc>
    11be:	2c 85       	ldd	r18, Y+12	; 0x0c
    11c0:	22 ff       	sbrs	r18, 2
    11c2:	16 c0       	rjmp	.+44     	; 0x11f0 <vfprintf+0x368>
    11c4:	21 ff       	sbrs	r18, 1
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <vfprintf+0x346>
    11c8:	88 e5       	ldi	r24, 0x58	; 88
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <vfprintf+0x34a>
    11ce:	88 e7       	ldi	r24, 0x78	; 120
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	b7 01       	movw	r22, r14
    11d4:	0c c0       	rjmp	.+24     	; 0x11ee <vfprintf+0x366>
    11d6:	82 2f       	mov	r24, r18
    11d8:	86 78       	andi	r24, 0x86	; 134
    11da:	51 f0       	breq	.+20     	; 0x11f0 <vfprintf+0x368>
    11dc:	21 fd       	sbrc	r18, 1
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <vfprintf+0x35c>
    11e0:	80 e2       	ldi	r24, 0x20	; 32
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <vfprintf+0x35e>
    11e4:	8b e2       	ldi	r24, 0x2B	; 43
    11e6:	27 fd       	sbrc	r18, 7
    11e8:	8d e2       	ldi	r24, 0x2D	; 45
    11ea:	b7 01       	movw	r22, r14
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	98 d1       	rcall	.+816    	; 0x1520 <fputc>
    11f0:	a5 14       	cp	r10, r5
    11f2:	30 f4       	brcc	.+12     	; 0x1200 <vfprintf+0x378>
    11f4:	b7 01       	movw	r22, r14
    11f6:	80 e3       	ldi	r24, 0x30	; 48
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	92 d1       	rcall	.+804    	; 0x1520 <fputc>
    11fc:	5a 94       	dec	r5
    11fe:	f8 cf       	rjmp	.-16     	; 0x11f0 <vfprintf+0x368>
    1200:	aa 94       	dec	r10
    1202:	f4 01       	movw	r30, r8
    1204:	ea 0d       	add	r30, r10
    1206:	f1 1d       	adc	r31, r1
    1208:	80 81       	ld	r24, Z
    120a:	b7 01       	movw	r22, r14
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	88 d1       	rcall	.+784    	; 0x1520 <fputc>
    1210:	a1 10       	cpse	r10, r1
    1212:	f6 cf       	rjmp	.-20     	; 0x1200 <vfprintf+0x378>
    1214:	33 20       	and	r3, r3
    1216:	09 f4       	brne	.+2      	; 0x121a <vfprintf+0x392>
    1218:	5d ce       	rjmp	.-838    	; 0xed4 <vfprintf+0x4c>
    121a:	b7 01       	movw	r22, r14
    121c:	80 e2       	ldi	r24, 0x20	; 32
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	7f d1       	rcall	.+766    	; 0x1520 <fputc>
    1222:	3a 94       	dec	r3
    1224:	f7 cf       	rjmp	.-18     	; 0x1214 <vfprintf+0x38c>
    1226:	f7 01       	movw	r30, r14
    1228:	86 81       	ldd	r24, Z+6	; 0x06
    122a:	97 81       	ldd	r25, Z+7	; 0x07
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <vfprintf+0x3aa>
    122e:	8f ef       	ldi	r24, 0xFF	; 255
    1230:	9f ef       	ldi	r25, 0xFF	; 255
    1232:	2c 96       	adiw	r28, 0x0c	; 12
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	ef 90       	pop	r14
    124a:	df 90       	pop	r13
    124c:	cf 90       	pop	r12
    124e:	bf 90       	pop	r11
    1250:	af 90       	pop	r10
    1252:	9f 90       	pop	r9
    1254:	8f 90       	pop	r8
    1256:	7f 90       	pop	r7
    1258:	6f 90       	pop	r6
    125a:	5f 90       	pop	r5
    125c:	4f 90       	pop	r4
    125e:	3f 90       	pop	r3
    1260:	2f 90       	pop	r2
    1262:	08 95       	ret

00001264 <calloc>:
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	86 9f       	mul	r24, r22
    126e:	80 01       	movw	r16, r0
    1270:	87 9f       	mul	r24, r23
    1272:	10 0d       	add	r17, r0
    1274:	96 9f       	mul	r25, r22
    1276:	10 0d       	add	r17, r0
    1278:	11 24       	eor	r1, r1
    127a:	c8 01       	movw	r24, r16
    127c:	0d d0       	rcall	.+26     	; 0x1298 <malloc>
    127e:	ec 01       	movw	r28, r24
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	21 f0       	breq	.+8      	; 0x128c <calloc+0x28>
    1284:	a8 01       	movw	r20, r16
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	38 d1       	rcall	.+624    	; 0x14fc <memset>
    128c:	ce 01       	movw	r24, r28
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	08 95       	ret

00001298 <malloc>:
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	82 30       	cpi	r24, 0x02	; 2
    129e:	91 05       	cpc	r25, r1
    12a0:	10 f4       	brcc	.+4      	; 0x12a6 <malloc+0xe>
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	e0 91 58 02 	lds	r30, 0x0258
    12aa:	f0 91 59 02 	lds	r31, 0x0259
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	a0 e0       	ldi	r26, 0x00	; 0
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	30 97       	sbiw	r30, 0x00	; 0
    12b8:	39 f1       	breq	.+78     	; 0x1308 <malloc+0x70>
    12ba:	40 81       	ld	r20, Z
    12bc:	51 81       	ldd	r21, Z+1	; 0x01
    12be:	48 17       	cp	r20, r24
    12c0:	59 07       	cpc	r21, r25
    12c2:	b8 f0       	brcs	.+46     	; 0x12f2 <malloc+0x5a>
    12c4:	48 17       	cp	r20, r24
    12c6:	59 07       	cpc	r21, r25
    12c8:	71 f4       	brne	.+28     	; 0x12e6 <malloc+0x4e>
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	93 81       	ldd	r25, Z+3	; 0x03
    12ce:	10 97       	sbiw	r26, 0x00	; 0
    12d0:	29 f0       	breq	.+10     	; 0x12dc <malloc+0x44>
    12d2:	13 96       	adiw	r26, 0x03	; 3
    12d4:	9c 93       	st	X, r25
    12d6:	8e 93       	st	-X, r24
    12d8:	12 97       	sbiw	r26, 0x02	; 2
    12da:	2c c0       	rjmp	.+88     	; 0x1334 <malloc+0x9c>
    12dc:	90 93 59 02 	sts	0x0259, r25
    12e0:	80 93 58 02 	sts	0x0258, r24
    12e4:	27 c0       	rjmp	.+78     	; 0x1334 <malloc+0x9c>
    12e6:	21 15       	cp	r18, r1
    12e8:	31 05       	cpc	r19, r1
    12ea:	31 f0       	breq	.+12     	; 0x12f8 <malloc+0x60>
    12ec:	42 17       	cp	r20, r18
    12ee:	53 07       	cpc	r21, r19
    12f0:	18 f0       	brcs	.+6      	; 0x12f8 <malloc+0x60>
    12f2:	a9 01       	movw	r20, r18
    12f4:	db 01       	movw	r26, r22
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <malloc+0x62>
    12f8:	ef 01       	movw	r28, r30
    12fa:	9a 01       	movw	r18, r20
    12fc:	bd 01       	movw	r22, r26
    12fe:	df 01       	movw	r26, r30
    1300:	02 80       	ldd	r0, Z+2	; 0x02
    1302:	f3 81       	ldd	r31, Z+3	; 0x03
    1304:	e0 2d       	mov	r30, r0
    1306:	d7 cf       	rjmp	.-82     	; 0x12b6 <malloc+0x1e>
    1308:	21 15       	cp	r18, r1
    130a:	31 05       	cpc	r19, r1
    130c:	f9 f0       	breq	.+62     	; 0x134c <malloc+0xb4>
    130e:	28 1b       	sub	r18, r24
    1310:	39 0b       	sbc	r19, r25
    1312:	24 30       	cpi	r18, 0x04	; 4
    1314:	31 05       	cpc	r19, r1
    1316:	80 f4       	brcc	.+32     	; 0x1338 <malloc+0xa0>
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	9b 81       	ldd	r25, Y+3	; 0x03
    131c:	61 15       	cp	r22, r1
    131e:	71 05       	cpc	r23, r1
    1320:	21 f0       	breq	.+8      	; 0x132a <malloc+0x92>
    1322:	fb 01       	movw	r30, r22
    1324:	93 83       	std	Z+3, r25	; 0x03
    1326:	82 83       	std	Z+2, r24	; 0x02
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <malloc+0x9a>
    132a:	90 93 59 02 	sts	0x0259, r25
    132e:	80 93 58 02 	sts	0x0258, r24
    1332:	fe 01       	movw	r30, r28
    1334:	32 96       	adiw	r30, 0x02	; 2
    1336:	44 c0       	rjmp	.+136    	; 0x13c0 <malloc+0x128>
    1338:	fe 01       	movw	r30, r28
    133a:	e2 0f       	add	r30, r18
    133c:	f3 1f       	adc	r31, r19
    133e:	81 93       	st	Z+, r24
    1340:	91 93       	st	Z+, r25
    1342:	22 50       	subi	r18, 0x02	; 2
    1344:	31 09       	sbc	r19, r1
    1346:	39 83       	std	Y+1, r19	; 0x01
    1348:	28 83       	st	Y, r18
    134a:	3a c0       	rjmp	.+116    	; 0x13c0 <malloc+0x128>
    134c:	20 91 56 02 	lds	r18, 0x0256
    1350:	30 91 57 02 	lds	r19, 0x0257
    1354:	23 2b       	or	r18, r19
    1356:	41 f4       	brne	.+16     	; 0x1368 <malloc+0xd0>
    1358:	20 91 02 02 	lds	r18, 0x0202
    135c:	30 91 03 02 	lds	r19, 0x0203
    1360:	30 93 57 02 	sts	0x0257, r19
    1364:	20 93 56 02 	sts	0x0256, r18
    1368:	20 91 00 02 	lds	r18, 0x0200
    136c:	30 91 01 02 	lds	r19, 0x0201
    1370:	21 15       	cp	r18, r1
    1372:	31 05       	cpc	r19, r1
    1374:	41 f4       	brne	.+16     	; 0x1386 <malloc+0xee>
    1376:	2d b7       	in	r18, 0x3d	; 61
    1378:	3e b7       	in	r19, 0x3e	; 62
    137a:	40 91 04 02 	lds	r20, 0x0204
    137e:	50 91 05 02 	lds	r21, 0x0205
    1382:	24 1b       	sub	r18, r20
    1384:	35 0b       	sbc	r19, r21
    1386:	e0 91 56 02 	lds	r30, 0x0256
    138a:	f0 91 57 02 	lds	r31, 0x0257
    138e:	e2 17       	cp	r30, r18
    1390:	f3 07       	cpc	r31, r19
    1392:	a0 f4       	brcc	.+40     	; 0x13bc <malloc+0x124>
    1394:	2e 1b       	sub	r18, r30
    1396:	3f 0b       	sbc	r19, r31
    1398:	28 17       	cp	r18, r24
    139a:	39 07       	cpc	r19, r25
    139c:	78 f0       	brcs	.+30     	; 0x13bc <malloc+0x124>
    139e:	ac 01       	movw	r20, r24
    13a0:	4e 5f       	subi	r20, 0xFE	; 254
    13a2:	5f 4f       	sbci	r21, 0xFF	; 255
    13a4:	24 17       	cp	r18, r20
    13a6:	35 07       	cpc	r19, r21
    13a8:	48 f0       	brcs	.+18     	; 0x13bc <malloc+0x124>
    13aa:	4e 0f       	add	r20, r30
    13ac:	5f 1f       	adc	r21, r31
    13ae:	50 93 57 02 	sts	0x0257, r21
    13b2:	40 93 56 02 	sts	0x0256, r20
    13b6:	81 93       	st	Z+, r24
    13b8:	91 93       	st	Z+, r25
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <malloc+0x128>
    13bc:	e0 e0       	ldi	r30, 0x00	; 0
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	cf 01       	movw	r24, r30
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

000013c8 <free>:
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <free+0xa>
    13d0:	87 c0       	rjmp	.+270    	; 0x14e0 <free+0x118>
    13d2:	fc 01       	movw	r30, r24
    13d4:	32 97       	sbiw	r30, 0x02	; 2
    13d6:	13 82       	std	Z+3, r1	; 0x03
    13d8:	12 82       	std	Z+2, r1	; 0x02
    13da:	c0 91 58 02 	lds	r28, 0x0258
    13de:	d0 91 59 02 	lds	r29, 0x0259
    13e2:	20 97       	sbiw	r28, 0x00	; 0
    13e4:	81 f4       	brne	.+32     	; 0x1406 <free+0x3e>
    13e6:	20 81       	ld	r18, Z
    13e8:	31 81       	ldd	r19, Z+1	; 0x01
    13ea:	28 0f       	add	r18, r24
    13ec:	39 1f       	adc	r19, r25
    13ee:	80 91 56 02 	lds	r24, 0x0256
    13f2:	90 91 57 02 	lds	r25, 0x0257
    13f6:	82 17       	cp	r24, r18
    13f8:	93 07       	cpc	r25, r19
    13fa:	79 f5       	brne	.+94     	; 0x145a <free+0x92>
    13fc:	f0 93 57 02 	sts	0x0257, r31
    1400:	e0 93 56 02 	sts	0x0256, r30
    1404:	6d c0       	rjmp	.+218    	; 0x14e0 <free+0x118>
    1406:	de 01       	movw	r26, r28
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	ae 17       	cp	r26, r30
    140e:	bf 07       	cpc	r27, r31
    1410:	50 f4       	brcc	.+20     	; 0x1426 <free+0x5e>
    1412:	12 96       	adiw	r26, 0x02	; 2
    1414:	4d 91       	ld	r20, X+
    1416:	5c 91       	ld	r21, X
    1418:	13 97       	sbiw	r26, 0x03	; 3
    141a:	9d 01       	movw	r18, r26
    141c:	41 15       	cp	r20, r1
    141e:	51 05       	cpc	r21, r1
    1420:	09 f1       	breq	.+66     	; 0x1464 <free+0x9c>
    1422:	da 01       	movw	r26, r20
    1424:	f3 cf       	rjmp	.-26     	; 0x140c <free+0x44>
    1426:	b3 83       	std	Z+3, r27	; 0x03
    1428:	a2 83       	std	Z+2, r26	; 0x02
    142a:	40 81       	ld	r20, Z
    142c:	51 81       	ldd	r21, Z+1	; 0x01
    142e:	84 0f       	add	r24, r20
    1430:	95 1f       	adc	r25, r21
    1432:	8a 17       	cp	r24, r26
    1434:	9b 07       	cpc	r25, r27
    1436:	71 f4       	brne	.+28     	; 0x1454 <free+0x8c>
    1438:	8d 91       	ld	r24, X+
    143a:	9c 91       	ld	r25, X
    143c:	11 97       	sbiw	r26, 0x01	; 1
    143e:	84 0f       	add	r24, r20
    1440:	95 1f       	adc	r25, r21
    1442:	02 96       	adiw	r24, 0x02	; 2
    1444:	91 83       	std	Z+1, r25	; 0x01
    1446:	80 83       	st	Z, r24
    1448:	12 96       	adiw	r26, 0x02	; 2
    144a:	8d 91       	ld	r24, X+
    144c:	9c 91       	ld	r25, X
    144e:	13 97       	sbiw	r26, 0x03	; 3
    1450:	93 83       	std	Z+3, r25	; 0x03
    1452:	82 83       	std	Z+2, r24	; 0x02
    1454:	21 15       	cp	r18, r1
    1456:	31 05       	cpc	r19, r1
    1458:	29 f4       	brne	.+10     	; 0x1464 <free+0x9c>
    145a:	f0 93 59 02 	sts	0x0259, r31
    145e:	e0 93 58 02 	sts	0x0258, r30
    1462:	3e c0       	rjmp	.+124    	; 0x14e0 <free+0x118>
    1464:	d9 01       	movw	r26, r18
    1466:	13 96       	adiw	r26, 0x03	; 3
    1468:	fc 93       	st	X, r31
    146a:	ee 93       	st	-X, r30
    146c:	12 97       	sbiw	r26, 0x02	; 2
    146e:	4d 91       	ld	r20, X+
    1470:	5d 91       	ld	r21, X+
    1472:	a4 0f       	add	r26, r20
    1474:	b5 1f       	adc	r27, r21
    1476:	ea 17       	cp	r30, r26
    1478:	fb 07       	cpc	r31, r27
    147a:	79 f4       	brne	.+30     	; 0x149a <free+0xd2>
    147c:	80 81       	ld	r24, Z
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	84 0f       	add	r24, r20
    1482:	95 1f       	adc	r25, r21
    1484:	02 96       	adiw	r24, 0x02	; 2
    1486:	d9 01       	movw	r26, r18
    1488:	11 96       	adiw	r26, 0x01	; 1
    148a:	9c 93       	st	X, r25
    148c:	8e 93       	st	-X, r24
    148e:	82 81       	ldd	r24, Z+2	; 0x02
    1490:	93 81       	ldd	r25, Z+3	; 0x03
    1492:	13 96       	adiw	r26, 0x03	; 3
    1494:	9c 93       	st	X, r25
    1496:	8e 93       	st	-X, r24
    1498:	12 97       	sbiw	r26, 0x02	; 2
    149a:	e0 e0       	ldi	r30, 0x00	; 0
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	9b 81       	ldd	r25, Y+3	; 0x03
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	19 f0       	breq	.+6      	; 0x14ac <free+0xe4>
    14a6:	fe 01       	movw	r30, r28
    14a8:	ec 01       	movw	r28, r24
    14aa:	f9 cf       	rjmp	.-14     	; 0x149e <free+0xd6>
    14ac:	ce 01       	movw	r24, r28
    14ae:	02 96       	adiw	r24, 0x02	; 2
    14b0:	28 81       	ld	r18, Y
    14b2:	39 81       	ldd	r19, Y+1	; 0x01
    14b4:	82 0f       	add	r24, r18
    14b6:	93 1f       	adc	r25, r19
    14b8:	20 91 56 02 	lds	r18, 0x0256
    14bc:	30 91 57 02 	lds	r19, 0x0257
    14c0:	28 17       	cp	r18, r24
    14c2:	39 07       	cpc	r19, r25
    14c4:	69 f4       	brne	.+26     	; 0x14e0 <free+0x118>
    14c6:	30 97       	sbiw	r30, 0x00	; 0
    14c8:	29 f4       	brne	.+10     	; 0x14d4 <free+0x10c>
    14ca:	10 92 59 02 	sts	0x0259, r1
    14ce:	10 92 58 02 	sts	0x0258, r1
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <free+0x110>
    14d4:	13 82       	std	Z+3, r1	; 0x03
    14d6:	12 82       	std	Z+2, r1	; 0x02
    14d8:	d0 93 57 02 	sts	0x0257, r29
    14dc:	c0 93 56 02 	sts	0x0256, r28
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	08 95       	ret

000014e6 <strnlen_P>:
    14e6:	fc 01       	movw	r30, r24
    14e8:	05 90       	lpm	r0, Z+
    14ea:	61 50       	subi	r22, 0x01	; 1
    14ec:	70 40       	sbci	r23, 0x00	; 0
    14ee:	01 10       	cpse	r0, r1
    14f0:	d8 f7       	brcc	.-10     	; 0x14e8 <strnlen_P+0x2>
    14f2:	80 95       	com	r24
    14f4:	90 95       	com	r25
    14f6:	8e 0f       	add	r24, r30
    14f8:	9f 1f       	adc	r25, r31
    14fa:	08 95       	ret

000014fc <memset>:
    14fc:	dc 01       	movw	r26, r24
    14fe:	01 c0       	rjmp	.+2      	; 0x1502 <memset+0x6>
    1500:	6d 93       	st	X+, r22
    1502:	41 50       	subi	r20, 0x01	; 1
    1504:	50 40       	sbci	r21, 0x00	; 0
    1506:	e0 f7       	brcc	.-8      	; 0x1500 <memset+0x4>
    1508:	08 95       	ret

0000150a <strnlen>:
    150a:	fc 01       	movw	r30, r24
    150c:	61 50       	subi	r22, 0x01	; 1
    150e:	70 40       	sbci	r23, 0x00	; 0
    1510:	01 90       	ld	r0, Z+
    1512:	01 10       	cpse	r0, r1
    1514:	d8 f7       	brcc	.-10     	; 0x150c <strnlen+0x2>
    1516:	80 95       	com	r24
    1518:	90 95       	com	r25
    151a:	8e 0f       	add	r24, r30
    151c:	9f 1f       	adc	r25, r31
    151e:	08 95       	ret

00001520 <fputc>:
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	18 2f       	mov	r17, r24
    152a:	09 2f       	mov	r16, r25
    152c:	eb 01       	movw	r28, r22
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	81 fd       	sbrc	r24, 1
    1532:	03 c0       	rjmp	.+6      	; 0x153a <fputc+0x1a>
    1534:	8f ef       	ldi	r24, 0xFF	; 255
    1536:	9f ef       	ldi	r25, 0xFF	; 255
    1538:	20 c0       	rjmp	.+64     	; 0x157a <fputc+0x5a>
    153a:	82 ff       	sbrs	r24, 2
    153c:	10 c0       	rjmp	.+32     	; 0x155e <fputc+0x3e>
    153e:	4e 81       	ldd	r20, Y+6	; 0x06
    1540:	5f 81       	ldd	r21, Y+7	; 0x07
    1542:	2c 81       	ldd	r18, Y+4	; 0x04
    1544:	3d 81       	ldd	r19, Y+5	; 0x05
    1546:	42 17       	cp	r20, r18
    1548:	53 07       	cpc	r21, r19
    154a:	7c f4       	brge	.+30     	; 0x156a <fputc+0x4a>
    154c:	e8 81       	ld	r30, Y
    154e:	f9 81       	ldd	r31, Y+1	; 0x01
    1550:	9f 01       	movw	r18, r30
    1552:	2f 5f       	subi	r18, 0xFF	; 255
    1554:	3f 4f       	sbci	r19, 0xFF	; 255
    1556:	39 83       	std	Y+1, r19	; 0x01
    1558:	28 83       	st	Y, r18
    155a:	10 83       	st	Z, r17
    155c:	06 c0       	rjmp	.+12     	; 0x156a <fputc+0x4a>
    155e:	e8 85       	ldd	r30, Y+8	; 0x08
    1560:	f9 85       	ldd	r31, Y+9	; 0x09
    1562:	81 2f       	mov	r24, r17
    1564:	19 95       	eicall
    1566:	89 2b       	or	r24, r25
    1568:	29 f7       	brne	.-54     	; 0x1534 <fputc+0x14>
    156a:	2e 81       	ldd	r18, Y+6	; 0x06
    156c:	3f 81       	ldd	r19, Y+7	; 0x07
    156e:	2f 5f       	subi	r18, 0xFF	; 255
    1570:	3f 4f       	sbci	r19, 0xFF	; 255
    1572:	3f 83       	std	Y+7, r19	; 0x07
    1574:	2e 83       	std	Y+6, r18	; 0x06
    1576:	81 2f       	mov	r24, r17
    1578:	90 2f       	mov	r25, r16
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	08 95       	ret

00001584 <__ultoa_invert>:
    1584:	fa 01       	movw	r30, r20
    1586:	aa 27       	eor	r26, r26
    1588:	28 30       	cpi	r18, 0x08	; 8
    158a:	51 f1       	breq	.+84     	; 0x15e0 <__ultoa_invert+0x5c>
    158c:	20 31       	cpi	r18, 0x10	; 16
    158e:	81 f1       	breq	.+96     	; 0x15f0 <__ultoa_invert+0x6c>
    1590:	e8 94       	clt
    1592:	6f 93       	push	r22
    1594:	6e 7f       	andi	r22, 0xFE	; 254
    1596:	6e 5f       	subi	r22, 0xFE	; 254
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	8f 4f       	sbci	r24, 0xFF	; 255
    159c:	9f 4f       	sbci	r25, 0xFF	; 255
    159e:	af 4f       	sbci	r26, 0xFF	; 255
    15a0:	b1 e0       	ldi	r27, 0x01	; 1
    15a2:	3e d0       	rcall	.+124    	; 0x1620 <__ultoa_invert+0x9c>
    15a4:	b4 e0       	ldi	r27, 0x04	; 4
    15a6:	3c d0       	rcall	.+120    	; 0x1620 <__ultoa_invert+0x9c>
    15a8:	67 0f       	add	r22, r23
    15aa:	78 1f       	adc	r23, r24
    15ac:	89 1f       	adc	r24, r25
    15ae:	9a 1f       	adc	r25, r26
    15b0:	a1 1d       	adc	r26, r1
    15b2:	68 0f       	add	r22, r24
    15b4:	79 1f       	adc	r23, r25
    15b6:	8a 1f       	adc	r24, r26
    15b8:	91 1d       	adc	r25, r1
    15ba:	a1 1d       	adc	r26, r1
    15bc:	6a 0f       	add	r22, r26
    15be:	71 1d       	adc	r23, r1
    15c0:	81 1d       	adc	r24, r1
    15c2:	91 1d       	adc	r25, r1
    15c4:	a1 1d       	adc	r26, r1
    15c6:	20 d0       	rcall	.+64     	; 0x1608 <__ultoa_invert+0x84>
    15c8:	09 f4       	brne	.+2      	; 0x15cc <__ultoa_invert+0x48>
    15ca:	68 94       	set
    15cc:	3f 91       	pop	r19
    15ce:	2a e0       	ldi	r18, 0x0A	; 10
    15d0:	26 9f       	mul	r18, r22
    15d2:	11 24       	eor	r1, r1
    15d4:	30 19       	sub	r19, r0
    15d6:	30 5d       	subi	r19, 0xD0	; 208
    15d8:	31 93       	st	Z+, r19
    15da:	de f6       	brtc	.-74     	; 0x1592 <__ultoa_invert+0xe>
    15dc:	cf 01       	movw	r24, r30
    15de:	08 95       	ret
    15e0:	46 2f       	mov	r20, r22
    15e2:	47 70       	andi	r20, 0x07	; 7
    15e4:	40 5d       	subi	r20, 0xD0	; 208
    15e6:	41 93       	st	Z+, r20
    15e8:	b3 e0       	ldi	r27, 0x03	; 3
    15ea:	0f d0       	rcall	.+30     	; 0x160a <__ultoa_invert+0x86>
    15ec:	c9 f7       	brne	.-14     	; 0x15e0 <__ultoa_invert+0x5c>
    15ee:	f6 cf       	rjmp	.-20     	; 0x15dc <__ultoa_invert+0x58>
    15f0:	46 2f       	mov	r20, r22
    15f2:	4f 70       	andi	r20, 0x0F	; 15
    15f4:	40 5d       	subi	r20, 0xD0	; 208
    15f6:	4a 33       	cpi	r20, 0x3A	; 58
    15f8:	18 f0       	brcs	.+6      	; 0x1600 <__ultoa_invert+0x7c>
    15fa:	49 5d       	subi	r20, 0xD9	; 217
    15fc:	31 fd       	sbrc	r19, 1
    15fe:	40 52       	subi	r20, 0x20	; 32
    1600:	41 93       	st	Z+, r20
    1602:	02 d0       	rcall	.+4      	; 0x1608 <__ultoa_invert+0x84>
    1604:	a9 f7       	brne	.-22     	; 0x15f0 <__ultoa_invert+0x6c>
    1606:	ea cf       	rjmp	.-44     	; 0x15dc <__ultoa_invert+0x58>
    1608:	b4 e0       	ldi	r27, 0x04	; 4
    160a:	a6 95       	lsr	r26
    160c:	97 95       	ror	r25
    160e:	87 95       	ror	r24
    1610:	77 95       	ror	r23
    1612:	67 95       	ror	r22
    1614:	ba 95       	dec	r27
    1616:	c9 f7       	brne	.-14     	; 0x160a <__ultoa_invert+0x86>
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	61 05       	cpc	r22, r1
    161c:	71 05       	cpc	r23, r1
    161e:	08 95       	ret
    1620:	9b 01       	movw	r18, r22
    1622:	ac 01       	movw	r20, r24
    1624:	0a 2e       	mov	r0, r26
    1626:	06 94       	lsr	r0
    1628:	57 95       	ror	r21
    162a:	47 95       	ror	r20
    162c:	37 95       	ror	r19
    162e:	27 95       	ror	r18
    1630:	ba 95       	dec	r27
    1632:	c9 f7       	brne	.-14     	; 0x1626 <__ultoa_invert+0xa2>
    1634:	62 0f       	add	r22, r18
    1636:	73 1f       	adc	r23, r19
    1638:	84 1f       	adc	r24, r20
    163a:	95 1f       	adc	r25, r21
    163c:	a0 1d       	adc	r26, r0
    163e:	08 95       	ret

00001640 <_exit>:
    1640:	f8 94       	cli

00001642 <__stop_program>:
    1642:	ff cf       	rjmp	.-2      	; 0x1642 <__stop_program>
