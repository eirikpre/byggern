
node_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800200  00001638  000016cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001638  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080023e  0080023e  0000170a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000170a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000248  00000000  00000000  00001766  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001804  00000000  00000000  000019ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c80  00000000  00000000  000031b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f78  00000000  00000000  00003e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004bc  00000000  00000000  00005dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00009f12  00000000  00000000  00006268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cb4  00000000  00000000  0001017a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  00010e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004539  00000000  00000000  00010fde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e3       	ldi	r30, 0x38	; 56
      fc:	f6 e1       	ldi	r31, 0x16	; 22
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 33       	cpi	r26, 0x3E	; 62
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	ae e3       	ldi	r26, 0x3E	; 62
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 35       	cpi	r26, 0x5A	; 90
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	cd d3       	rcall	.+1946   	; 0x8ba <main>
     120:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <init_ADC>:
#include "ADC.h"
#include <avr/io.h>

void init_ADC(){
	DDRF &= ~(1 << PF0);
     126:	80 98       	cbi	0x10, 0	; 16

	ADCSRA |= (1 << ADEN) | (1 << ADATE)  | (1 << ADSC) | (1 << ADPS2) |(1 << ADIE)| (1 << ADPS1) | (1 << ADPS0);
     128:	ea e7       	ldi	r30, 0x7A	; 122
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	80 81       	ld	r24, Z
     12e:	8f 6e       	ori	r24, 0xEF	; 239
     130:	80 83       	st	Z, r24
	ADMUX  |= (1 <<REFS0) | (1 <<ADLAR);
     132:	ec e7       	ldi	r30, 0x7C	; 124
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	80 66       	ori	r24, 0x60	; 96
     13a:	80 83       	st	Z, r24
     13c:	08 95       	ret

0000013e <ADC_read>:

char ADC_read( void ){
	int mean = 0; int i = 0;
	int nsamples = 4;
	for (i = 0; i <nsamples; i++){
		mean = mean + ADCH;
     13e:	e9 e7       	ldi	r30, 0x79	; 121
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	20 81       	ld	r18, Z
     144:	80 81       	ld	r24, Z
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	82 0f       	add	r24, r18
     14a:	91 1d       	adc	r25, r1
     14c:	20 81       	ld	r18, Z
     14e:	82 0f       	add	r24, r18
     150:	91 1d       	adc	r25, r1
     152:	20 81       	ld	r18, Z
     154:	82 0f       	add	r24, r18
     156:	91 1d       	adc	r25, r1
	}
	mean = mean/nsamples;
     158:	95 95       	asr	r25
     15a:	87 95       	ror	r24
     15c:	95 95       	asr	r25
     15e:	87 95       	ror	r24
	return mean;
}
     160:	08 95       	ret

00000162 <can_init>:


void can_init()
{
	
	mcp2515_init();
     162:	a0 d1       	rcall	.+832    	; 0x4a4 <mcp2515_init>
	
	mcp2515_bit_modify(MCP_RXF0SIDH, 0xff , 0x00);
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	6f ef       	ldi	r22, 0xFF	; 255
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	77 d1       	rcall	.+750    	; 0x45a <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXF0SIDL, 0xE0 , 0x00);
     16c:	40 e0       	ldi	r20, 0x00	; 0
     16e:	60 ee       	ldi	r22, 0xE0	; 224
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	73 d1       	rcall	.+742    	; 0x45a <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANCTRL, 0xE0 , MODE_NORMAL);
     174:	40 e0       	ldi	r20, 0x00	; 0
     176:	60 ee       	ldi	r22, 0xE0	; 224
     178:	8f e0       	ldi	r24, 0x0F	; 15
     17a:	6f c1       	rjmp	.+734    	; 0x45a <mcp2515_bit_modify>
     17c:	08 95       	ret

0000017e <can_message_send>:
	
}


void can_message_send(can_message_t *message)
{
     17e:	ef 92       	push	r14
     180:	ff 92       	push	r15
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	7c 01       	movw	r14, r24
	int i;
	
	// ID
	mcp2515_write(MCP_TXB0CTRL + 1,message->id);
     18c:	fc 01       	movw	r30, r24
     18e:	60 81       	ld	r22, Z
     190:	81 e3       	ldi	r24, 0x31	; 49
     192:	4c d1       	rcall	.+664    	; 0x42c <mcp2515_write>
	mcp2515_write(0x32,0x00);
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	82 e3       	ldi	r24, 0x32	; 50
     198:	49 d1       	rcall	.+658    	; 0x42c <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
     19a:	f7 01       	movw	r30, r14
     19c:	61 81       	ldd	r22, Z+1	; 0x01
     19e:	85 e3       	ldi	r24, 0x35	; 53
     1a0:	45 d1       	rcall	.+650    	; 0x42c <mcp2515_write>
	
	// Data
	for (i = 0; i< message->length; i++){
     1a2:	f7 01       	movw	r30, r14
     1a4:	81 81       	ldd	r24, Z+1	; 0x01
     1a6:	18 16       	cp	r1, r24
     1a8:	a4 f4       	brge	.+40     	; 0x1d2 <can_message_send+0x54>
     1aa:	87 01       	movw	r16, r14
     1ac:	0e 5f       	subi	r16, 0xFE	; 254
     1ae:	1f 4f       	sbci	r17, 0xFF	; 255
     1b0:	c0 e0       	ldi	r28, 0x00	; 0
     1b2:	d0 e0       	ldi	r29, 0x00	; 0
		mcp2515_write(MCP_TXB0CTRL + 6 + i, (message->data[i]) );
     1b4:	f8 01       	movw	r30, r16
     1b6:	61 91       	ld	r22, Z+
     1b8:	8f 01       	movw	r16, r30
     1ba:	8c 2f       	mov	r24, r28
     1bc:	8a 5c       	subi	r24, 0xCA	; 202
     1be:	36 d1       	rcall	.+620    	; 0x42c <mcp2515_write>
	
	//Length
	mcp2515_write(MCP_TXB0CTRL + 5,message->length);
	
	// Data
	for (i = 0; i< message->length; i++){
     1c0:	21 96       	adiw	r28, 0x01	; 1
     1c2:	f7 01       	movw	r30, r14
     1c4:	21 81       	ldd	r18, Z+1	; 0x01
     1c6:	33 27       	eor	r19, r19
     1c8:	27 fd       	sbrc	r18, 7
     1ca:	30 95       	com	r19
     1cc:	c2 17       	cp	r28, r18
     1ce:	d3 07       	cpc	r29, r19
     1d0:	8c f3       	brlt	.-30     	; 0x1b4 <can_message_send+0x36>
		mcp2515_write(MCP_TXB0CTRL + 6 + i, (message->data[i]) );
	}
	
	mcp2515_request_to_send(MCP_RTS_TX0);
     1d2:	81 e8       	ldi	r24, 0x81	; 129
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	39 d1       	rcall	.+626    	; 0x44a <mcp2515_request_to_send>
}
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	1f 91       	pop	r17
     1de:	0f 91       	pop	r16
     1e0:	ff 90       	pop	r15
     1e2:	ef 90       	pop	r14
     1e4:	08 95       	ret

000001e6 <can_message_receive>:

void can_message_receive(can_message_t* message, int buffer)
{
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	8c 01       	movw	r16, r24
     1f4:	e6 2e       	mov	r14, r22
	char i;
	
	// ID
	message->id = mcp2515_read(MCP_RXB0CTRL+buffer + 1);
     1f6:	81 e6       	ldi	r24, 0x61	; 97
     1f8:	86 0f       	add	r24, r22
     1fa:	0b d1       	rcall	.+534    	; 0x412 <mcp2515_read>
     1fc:	f8 01       	movw	r30, r16
     1fe:	80 83       	st	Z, r24
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
     200:	85 e6       	ldi	r24, 0x65	; 101
     202:	8e 0d       	add	r24, r14
     204:	06 d1       	rcall	.+524    	; 0x412 <mcp2515_read>
     206:	f8 01       	movw	r30, r16
     208:	81 83       	std	Z+1, r24	; 0x01
	
	// Data
	for(i=0;i<message->length;i++)
     20a:	18 16       	cp	r1, r24
     20c:	a4 f4       	brge	.+40     	; 0x236 <can_message_receive+0x50>
     20e:	c0 e0       	ldi	r28, 0x00	; 0
     210:	d0 e0       	ldi	r29, 0x00	; 0
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
     212:	f6 e6       	ldi	r31, 0x66	; 102
     214:	ef 0e       	add	r14, r31
     216:	fc 2e       	mov	r15, r28
     218:	8c 2f       	mov	r24, r28
     21a:	8e 0d       	add	r24, r14
     21c:	fa d0       	rcall	.+500    	; 0x412 <mcp2515_read>
     21e:	f8 01       	movw	r30, r16
     220:	ec 0f       	add	r30, r28
     222:	f1 1d       	adc	r31, r1
     224:	c7 fd       	sbrc	r28, 7
     226:	fa 95       	dec	r31
     228:	82 83       	std	Z+2, r24	; 0x02
     22a:	f3 94       	inc	r15
     22c:	21 96       	adiw	r28, 0x01	; 1
	
	// Length
	message->length = mcp2515_read(MCP_RXB0CTRL+buffer + 5);
	
	// Data
	for(i=0;i<message->length;i++)
     22e:	f8 01       	movw	r30, r16
     230:	81 81       	ldd	r24, Z+1	; 0x01
     232:	f8 16       	cp	r15, r24
     234:	84 f3       	brlt	.-32     	; 0x216 <can_message_receive+0x30>
	{
		*((message->data)+i)  = mcp2515_read(MCP_RXB0CTRL+buffer + 6 + i );
	}
	
}
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	ff 90       	pop	r15
     240:	ef 90       	pop	r14
     242:	08 95       	ret

00000244 <can_get_message>:

int can_get_message(can_message_t* message)
{
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	ec 01       	movw	r28, r24
	
	if ((mcp2515_read(MCP_CANINTF) & 0x01) == 0x01)
     24a:	8c e2       	ldi	r24, 0x2C	; 44
     24c:	e2 d0       	rcall	.+452    	; 0x412 <mcp2515_read>
     24e:	80 ff       	sbrs	r24, 0
     250:	0b c0       	rjmp	.+22     	; 0x268 <can_get_message+0x24>
	{
		can_message_receive(message,0);
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	ce 01       	movw	r24, r28
     258:	c6 df       	rcall	.-116    	; 0x1e6 <can_message_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x01,0x00);
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	8c e2       	ldi	r24, 0x2C	; 44
     260:	fc d0       	rcall	.+504    	; 0x45a <mcp2515_bit_modify>
		return 1;
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	11 c0       	rjmp	.+34     	; 0x28a <can_get_message+0x46>
	}
	else if ((mcp2515_read(MCP_CANINTF) & 0x02) == 0x02)
     268:	8c e2       	ldi	r24, 0x2C	; 44
     26a:	d3 d0       	rcall	.+422    	; 0x412 <mcp2515_read>
     26c:	81 ff       	sbrs	r24, 1
     26e:	0b c0       	rjmp	.+22     	; 0x286 <can_get_message+0x42>
	{
		can_message_receive(message,1);
     270:	61 e0       	ldi	r22, 0x01	; 1
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	ce 01       	movw	r24, r28
     276:	b7 df       	rcall	.-146    	; 0x1e6 <can_message_receive>
		mcp2515_bit_modify(MCP_CANINTF,0x02,0x00);
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	62 e0       	ldi	r22, 0x02	; 2
     27c:	8c e2       	ldi	r24, 0x2C	; 44
     27e:	ed d0       	rcall	.+474    	; 0x45a <mcp2515_bit_modify>
		return 1;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	02 c0       	rjmp	.+4      	; 0x28a <can_get_message+0x46>
	}
	else
	{
		return 0;
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	08 95       	ret

00000290 <can_print>:


void can_print(can_message_t* msg)
{
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	6c 01       	movw	r12, r24
	printf("ID: %c ,Length: %d, ",msg->id,msg->length);
     2a2:	fc 01       	movw	r30, r24
     2a4:	21 81       	ldd	r18, Z+1	; 0x01
     2a6:	82 2f       	mov	r24, r18
     2a8:	99 27       	eor	r25, r25
     2aa:	87 fd       	sbrc	r24, 7
     2ac:	90 95       	com	r25
     2ae:	9f 93       	push	r25
     2b0:	2f 93       	push	r18
     2b2:	20 81       	ld	r18, Z
     2b4:	82 2f       	mov	r24, r18
     2b6:	99 27       	eor	r25, r25
     2b8:	87 fd       	sbrc	r24, 7
     2ba:	90 95       	com	r25
     2bc:	9f 93       	push	r25
     2be:	2f 93       	push	r18
     2c0:	86 e0       	ldi	r24, 0x06	; 6
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	9f 93       	push	r25
     2c6:	8f 93       	push	r24
     2c8:	96 d5       	rcall	.+2860   	; 0xdf6 <printf>
	int i ;
	for (i=0; i<msg->length;i++)
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	f6 01       	movw	r30, r12
     2d8:	81 81       	ldd	r24, Z+1	; 0x01
     2da:	18 16       	cp	r1, r24
     2dc:	0c f5       	brge	.+66     	; 0x320 <can_print+0x90>
     2de:	76 01       	movw	r14, r12
     2e0:	f2 e0       	ldi	r31, 0x02	; 2
     2e2:	ef 0e       	add	r14, r31
     2e4:	f1 1c       	adc	r15, r1
     2e6:	c0 e0       	ldi	r28, 0x00	; 0
     2e8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("%i", msg->data[i]);
     2ea:	0b e1       	ldi	r16, 0x1B	; 27
     2ec:	12 e0       	ldi	r17, 0x02	; 2
     2ee:	f7 01       	movw	r30, r14
     2f0:	21 91       	ld	r18, Z+
     2f2:	7f 01       	movw	r14, r30
     2f4:	82 2f       	mov	r24, r18
     2f6:	99 27       	eor	r25, r25
     2f8:	87 fd       	sbrc	r24, 7
     2fa:	90 95       	com	r25
     2fc:	9f 93       	push	r25
     2fe:	2f 93       	push	r18
     300:	1f 93       	push	r17
     302:	0f 93       	push	r16
     304:	78 d5       	rcall	.+2800   	; 0xdf6 <printf>

void can_print(can_message_t* msg)
{
	printf("ID: %c ,Length: %d, ",msg->id,msg->length);
	int i ;
	for (i=0; i<msg->length;i++)
     306:	21 96       	adiw	r28, 0x01	; 1
     308:	f6 01       	movw	r30, r12
     30a:	21 81       	ldd	r18, Z+1	; 0x01
     30c:	33 27       	eor	r19, r19
     30e:	27 fd       	sbrc	r18, 7
     310:	30 95       	com	r19
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	c2 17       	cp	r28, r18
     31c:	d3 07       	cpc	r29, r19
     31e:	3c f3       	brlt	.-50     	; 0x2ee <can_print+0x5e>
	{
		printf("%i", msg->data[i]);
	}
	printf("\n");
     320:	8a e0       	ldi	r24, 0x0A	; 10
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	79 d5       	rcall	.+2802   	; 0xe18 <putchar>
}
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	1f 91       	pop	r17
     32c:	0f 91       	pop	r16
     32e:	ff 90       	pop	r15
     330:	ef 90       	pop	r14
     332:	df 90       	pop	r13
     334:	cf 90       	pop	r12
     336:	08 95       	ret

00000338 <i2c_init>:



void i2c_init( void )
{
	TWBR = 0x0C; // Baud
     338:	8c e0       	ldi	r24, 0x0C	; 12
     33a:	80 93 b8 00 	sts	0x00B8, r24
     33e:	08 95       	ret

00000340 <i2c_start>:


char i2c_start(char address)
{
	// reset TWI control register
	TWCR = 0;
     340:	ec eb       	ldi	r30, 0xBC	; 188
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	10 82       	st	Z, r1
	// transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     346:	94 ea       	ldi	r25, 0xA4	; 164
     348:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     34a:	90 81       	ld	r25, Z
     34c:	99 23       	and	r25, r25
     34e:	ec f7       	brge	.-6      	; 0x34a <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     350:	90 91 b9 00 	lds	r25, 0x00B9
     354:	98 7f       	andi	r25, 0xF8	; 248
     356:	98 30       	cpi	r25, 0x08	; 8
     358:	a1 f4       	brne	.+40     	; 0x382 <i2c_start+0x42>
	
	// load slave address into data register
	TWDR = address;
     35a:	80 93 bb 00 	sts	0x00BB, r24
	
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     35e:	84 e8       	ldi	r24, 0x84	; 132
     360:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     364:	ec eb       	ldi	r30, 0xBC	; 188
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	88 23       	and	r24, r24
     36c:	ec f7       	brge	.-6      	; 0x368 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     36e:	90 91 b9 00 	lds	r25, 0x00B9
     372:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     374:	98 31       	cpi	r25, 0x18	; 24
     376:	39 f0       	breq	.+14     	; 0x386 <i2c_start+0x46>
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	90 34       	cpi	r25, 0x40	; 64
     37c:	29 f4       	brne	.+10     	; 0x388 <i2c_start+0x48>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
     386:	80 e0       	ldi	r24, 0x00	; 0
}
     388:	08 95       	ret

0000038a <i2c_write>:

char i2c_write(char data)
{
	// load data into data register
	TWDR = data;
     38a:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     38e:	84 e8       	ldi	r24, 0x84	; 132
     390:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     394:	ec eb       	ldi	r30, 0xBC	; 188
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
     39a:	88 23       	and	r24, r24
     39c:	ec f7       	brge	.-6      	; 0x398 <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     39e:	90 91 b9 00 	lds	r25, 0x00B9
     3a2:	98 7f       	andi	r25, 0xF8	; 248
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	98 32       	cpi	r25, 0x28	; 40
     3a8:	09 f4       	brne	.+2      	; 0x3ac <i2c_write+0x22>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
     3ac:	08 95       	ret

000003ae <i2c_transmit>:

char i2c_transmit(char address, char* data, uint16_t length)
{
     3ae:	df 92       	push	r13
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	7b 01       	movw	r14, r22
     3be:	8a 01       	movw	r16, r20
	// Start
	if (i2c_start(address | I2C_WRITE)) return 1;
     3c0:	bf df       	rcall	.-130    	; 0x340 <i2c_start>
     3c2:	81 11       	cpse	r24, r1
     3c4:	15 c0       	rjmp	.+42     	; 0x3f0 <i2c_transmit+0x42>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
     3c6:	e1 df       	rcall	.-62     	; 0x38a <i2c_write>
     3c8:	d8 2e       	mov	r13, r24
     3ca:	81 11       	cpse	r24, r1
     3cc:	14 c0       	rjmp	.+40     	; 0x3f6 <i2c_transmit+0x48>
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
     3ce:	01 15       	cp	r16, r1
     3d0:	11 05       	cpc	r17, r1
     3d2:	51 f0       	breq	.+20     	; 0x3e8 <i2c_transmit+0x3a>
     3d4:	e7 01       	movw	r28, r14
     3d6:	0e 0d       	add	r16, r14
     3d8:	1f 1d       	adc	r17, r15
	{
		if (i2c_write(data[i])) return 1;
     3da:	89 91       	ld	r24, Y+
     3dc:	d6 df       	rcall	.-84     	; 0x38a <i2c_write>
     3de:	81 11       	cpse	r24, r1
     3e0:	0d c0       	rjmp	.+26     	; 0x3fc <i2c_transmit+0x4e>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
     3e2:	c0 17       	cp	r28, r16
     3e4:	d1 07       	cpc	r29, r17
     3e6:	c9 f7       	brne	.-14     	; 0x3da <i2c_transmit+0x2c>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     3e8:	84 e9       	ldi	r24, 0x94	; 148
     3ea:	80 93 bc 00 	sts	0x00BC, r24
     3ee:	08 c0       	rjmp	.+16     	; 0x400 <i2c_transmit+0x52>
}

char i2c_transmit(char address, char* data, uint16_t length)
{
	// Start
	if (i2c_start(address | I2C_WRITE)) return 1;
     3f0:	dd 24       	eor	r13, r13
     3f2:	d3 94       	inc	r13
     3f4:	05 c0       	rjmp	.+10     	; 0x400 <i2c_transmit+0x52>
	
	//Command byte
	if (i2c_write(0x00)) return 1;
     3f6:	dd 24       	eor	r13, r13
     3f8:	d3 94       	inc	r13
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <i2c_transmit+0x52>
	
	//Send data
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
     3fc:	dd 24       	eor	r13, r13
     3fe:	d3 94       	inc	r13
	}
	
	i2c_stop();
	
	return 0;
}
     400:	8d 2d       	mov	r24, r13
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	df 90       	pop	r13
     410:	08 95       	ret

00000412 <mcp2515_read>:
		printf("MCP2515 is not in config mode!\n");
	}
	
	
}
char mcp2515_read (char addr){
     412:	cf 93       	push	r28
     414:	c8 2f       	mov	r28, r24
	char result;
	
	spi_select();
     416:	79 d1       	rcall	.+754    	; 0x70a <spi_select>
	
	spi_transmit(MCP_READ);
     418:	83 e0       	ldi	r24, 0x03	; 3
     41a:	7b d1       	rcall	.+758    	; 0x712 <spi_transmit>
	spi_transmit(addr);
     41c:	8c 2f       	mov	r24, r28
     41e:	79 d1       	rcall	.+754    	; 0x712 <spi_transmit>
	result = spi_receive();
     420:	7d d1       	rcall	.+762    	; 0x71c <spi_receive>
     422:	c8 2f       	mov	r28, r24
	
	spi_deselect();
     424:	74 d1       	rcall	.+744    	; 0x70e <spi_deselect>
	
	return result;
}
     426:	8c 2f       	mov	r24, r28
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <mcp2515_write>:

void mcp2515_write(char addr, char data)
{
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	d8 2f       	mov	r29, r24
     432:	c6 2f       	mov	r28, r22
	spi_select();
     434:	6a d1       	rcall	.+724    	; 0x70a <spi_select>
	
	spi_transmit(MCP_WRITE);
     436:	82 e0       	ldi	r24, 0x02	; 2
     438:	6c d1       	rcall	.+728    	; 0x712 <spi_transmit>
	spi_transmit(addr);
     43a:	8d 2f       	mov	r24, r29
     43c:	6a d1       	rcall	.+724    	; 0x712 <spi_transmit>
	spi_transmit(data);
     43e:	8c 2f       	mov	r24, r28
     440:	68 d1       	rcall	.+720    	; 0x712 <spi_transmit>
	
	spi_deselect();
     442:	65 d1       	rcall	.+714    	; 0x70e <spi_deselect>
	
}
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <mcp2515_request_to_send>:

void mcp2515_request_to_send(int reg)
{
     44a:	cf 93       	push	r28
     44c:	c8 2f       	mov	r28, r24
	spi_select();
     44e:	5d d1       	rcall	.+698    	; 0x70a <spi_select>
	
	spi_transmit(reg);
     450:	8c 2f       	mov	r24, r28
     452:	5f d1       	rcall	.+702    	; 0x712 <spi_transmit>
	
	spi_deselect();
     454:	5c d1       	rcall	.+696    	; 0x70e <spi_deselect>
}
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <mcp2515_bit_modify>:

void mcp2515_bit_modify(char addr, char mask_byte, char data)
{
     45a:	1f 93       	push	r17
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	18 2f       	mov	r17, r24
     462:	d6 2f       	mov	r29, r22
     464:	c4 2f       	mov	r28, r20
	spi_select();
     466:	51 d1       	rcall	.+674    	; 0x70a <spi_select>
	
	spi_transmit(MCP_BITMOD);
     468:	85 e0       	ldi	r24, 0x05	; 5
     46a:	53 d1       	rcall	.+678    	; 0x712 <spi_transmit>
	spi_transmit(addr);
     46c:	81 2f       	mov	r24, r17
     46e:	51 d1       	rcall	.+674    	; 0x712 <spi_transmit>
	spi_transmit(mask_byte);
     470:	8d 2f       	mov	r24, r29
     472:	4f d1       	rcall	.+670    	; 0x712 <spi_transmit>
	spi_transmit(data);
     474:	8c 2f       	mov	r24, r28
     476:	4d d1       	rcall	.+666    	; 0x712 <spi_transmit>
	
	spi_deselect();
     478:	4a d1       	rcall	.+660    	; 0x70e <spi_deselect>
}
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	08 95       	ret

00000482 <mcp2515_reset>:

void mcp2515_reset()
{
	spi_select();
     482:	43 d1       	rcall	.+646    	; 0x70a <spi_select>
	
	spi_transmit(MCP_RESET);
     484:	80 ec       	ldi	r24, 0xC0	; 192
     486:	45 d1       	rcall	.+650    	; 0x712 <spi_transmit>
	
	spi_deselect();
     488:	42 c1       	rjmp	.+644    	; 0x70e <spi_deselect>
     48a:	08 95       	ret

0000048c <mcp2515_read_status>:
}

char mcp2515_read_status()
{
     48c:	cf 93       	push	r28
	char output;
	spi_select();
     48e:	3d d1       	rcall	.+634    	; 0x70a <spi_select>
	spi_transmit(MCP_READ);
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	3f d1       	rcall	.+638    	; 0x712 <spi_transmit>
	spi_transmit(MCP_CANSTAT);
     494:	8e e0       	ldi	r24, 0x0E	; 14
     496:	3d d1       	rcall	.+634    	; 0x712 <spi_transmit>
	output = spi_receive();
     498:	41 d1       	rcall	.+642    	; 0x71c <spi_receive>
     49a:	c8 2f       	mov	r28, r24
	
	spi_deselect();
     49c:	38 d1       	rcall	.+624    	; 0x70e <spi_deselect>
	return output;
}
     49e:	8c 2f       	mov	r24, r28
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <mcp2515_init>:
#include "spi_control.h"
#include <stdio.h>

void mcp2515_init(){
	char status;
	spi_init();
     4a4:	3f d1       	rcall	.+638    	; 0x724 <spi_init>
	mcp2515_reset();
     4a6:	ed df       	rcall	.-38     	; 0x482 <mcp2515_reset>
	
	status = mcp2515_read_status();
     4a8:	f1 df       	rcall	.-30     	; 0x48c <mcp2515_read_status>
	if ((status & MODE_MASK) != MODE_CONFIG)
     4aa:	80 7e       	andi	r24, 0xE0	; 224
     4ac:	80 38       	cpi	r24, 0x80	; 128
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <mcp2515_init+0x12>
	{
		printf("MCP2515 is not in config mode!\n");
     4b0:	8e e1       	ldi	r24, 0x1E	; 30
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	b6 c4       	rjmp	.+2412   	; 0xe22 <puts>
     4b6:	08 95       	ret

000004b8 <motor_drive>:

	motor_drive(to_motor*2);
}

void motor_drive( char joystick_x )
{
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	1f 92       	push	r1
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
	// Set direction
	if(joystick_x < 0){
     4c2:	88 23       	and	r24, r24
     4c4:	14 f4       	brge	.+4      	; 0x4ca <motor_drive+0x12>
		PORTF &= ~(1 << PF3);
     4c6:	8b 98       	cbi	0x11, 3	; 17
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <motor_drive+0x14>
	}
	else{
		PORTF |= (1 << PF3);
     4ca:	8b 9a       	sbi	0x11, 3	; 17
	}
	// Set speed
	char motor_speed = (char)((abs((float)joystick_x)*150)/100);
     4cc:	28 2f       	mov	r18, r24
     4ce:	33 27       	eor	r19, r19
     4d0:	27 fd       	sbrc	r18, 7
     4d2:	30 95       	com	r19
     4d4:	33 23       	and	r19, r19
     4d6:	1c f4       	brge	.+6      	; 0x4de <motor_drive+0x26>
     4d8:	31 95       	neg	r19
     4da:	21 95       	neg	r18
     4dc:	31 09       	sbc	r19, r1
     4de:	46 e9       	ldi	r20, 0x96	; 150
     4e0:	42 9f       	mul	r20, r18
     4e2:	c0 01       	movw	r24, r0
     4e4:	43 9f       	mul	r20, r19
     4e6:	90 0d       	add	r25, r0
     4e8:	11 24       	eor	r1, r1
     4ea:	64 e6       	ldi	r22, 0x64	; 100
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	12 d4       	rcall	.+2084   	; 0xd14 <__divmodhi4>
	if (motor_speed > 50) motor_speed = 70;
     4f0:	63 33       	cpi	r22, 0x33	; 51
     4f2:	14 f4       	brge	.+4      	; 0x4f8 <motor_drive+0x40>
	}
	else{
		PORTF |= (1 << PF3);
	}
	// Set speed
	char motor_speed = (char)((abs((float)joystick_x)*150)/100);
     4f4:	69 83       	std	Y+1, r22	; 0x01
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <motor_drive+0x44>
	if (motor_speed > 50) motor_speed = 70;
     4f8:	86 e4       	ldi	r24, 0x46	; 70
     4fa:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_transmit(0x50, &motor_speed,1);
     4fc:	41 e0       	ldi	r20, 0x01	; 1
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	be 01       	movw	r22, r28
     502:	6f 5f       	subi	r22, 0xFF	; 255
     504:	7f 4f       	sbci	r23, 0xFF	; 255
     506:	80 e5       	ldi	r24, 0x50	; 80
     508:	52 df       	rcall	.-348    	; 0x3ae <i2c_transmit>
}
     50a:	0f 90       	pop	r0
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <reverse>:

uint8_t	reverse(uint8_t x)
{
	x = (((x & 0xaa) >> 1) | ((x & 0x55) << 1));
     512:	28 2f       	mov	r18, r24
     514:	25 75       	andi	r18, 0x55	; 85
     516:	22 0f       	add	r18, r18
     518:	98 2f       	mov	r25, r24
     51a:	9a 7a       	andi	r25, 0xAA	; 170
     51c:	96 95       	lsr	r25
     51e:	92 2b       	or	r25, r18
	x = (((x & 0xcc) >> 2) | ((x & 0x33) << 2));
     520:	29 2f       	mov	r18, r25
     522:	23 73       	andi	r18, 0x33	; 51
     524:	22 0f       	add	r18, r18
     526:	22 0f       	add	r18, r18
     528:	89 2f       	mov	r24, r25
     52a:	8c 7c       	andi	r24, 0xCC	; 204
     52c:	86 95       	lsr	r24
     52e:	86 95       	lsr	r24
     530:	82 2b       	or	r24, r18
	x = (((x & 0xf0) >> 4) | ((x & 0x0f) << 4));
	return x;
}
     532:	82 95       	swap	r24
     534:	08 95       	ret

00000536 <encoder_read>:
	
	ref_pos = encoder_read();
}

uint16_t encoder_read( void )
{
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
	uint8_t high,low;
	PORTF &= ~(1 << PF7); // !OE = 0
     53a:	8f 98       	cbi	0x11, 7	; 17
	PORTF &= ~(1 << PF5); // SET = 0 // For MSB
     53c:	8d 98       	cbi	0x11, 5	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     53e:	4a e6       	ldi	r20, 0x6A	; 106
     540:	4a 95       	dec	r20
     542:	f1 f7       	brne	.-4      	; 0x540 <encoder_read+0xa>
     544:	00 c0       	rjmp	.+0      	; 0x546 <encoder_read+0x10>
	_delay_us(20);
	high = PINK;
     546:	80 91 06 01 	lds	r24, 0x0106
	
	PORTF |= (1 << PF5);	//SET = 1 // For LSB
     54a:	8d 9a       	sbi	0x11, 5	; 17
     54c:	5a e6       	ldi	r21, 0x6A	; 106
     54e:	5a 95       	dec	r21
     550:	f1 f7       	brne	.-4      	; 0x54e <encoder_read+0x18>
     552:	00 c0       	rjmp	.+0      	; 0x554 <encoder_read+0x1e>
	_delay_us(20); 
	low = PINK;
     554:	d0 91 06 01 	lds	r29, 0x0106
	PORTF |= (1 << PF7); // !OE = 1
     558:	8f 9a       	sbi	0x11, 7	; 17
	
	high = reverse(high);
     55a:	db df       	rcall	.-74     	; 0x512 <reverse>
     55c:	c8 2f       	mov	r28, r24
	low = reverse(low);
     55e:	8d 2f       	mov	r24, r29
     560:	d8 df       	rcall	.-80     	; 0x512 <reverse>
	
	return (high << 8) + low;
     562:	2c 2f       	mov	r18, r28
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	32 2f       	mov	r19, r18
     568:	22 27       	eor	r18, r18
}
     56a:	a9 01       	movw	r20, r18
     56c:	48 0f       	add	r20, r24
     56e:	51 1d       	adc	r21, r1
     570:	ca 01       	movw	r24, r20
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <motor_init>:
uint8_t	reverse(uint8_t x);

void motor_init(void)
{
	
	i2c_init();
     578:	df de       	rcall	.-578    	; 0x338 <i2c_init>
	DDRF = 0xFF; // MJ1 output
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	80 bb       	out	0x10, r24	; 16
	DDRK = 0x00;
     57e:	10 92 07 01 	sts	0x0107, r1
	
	PORTF |= (1 << PF4); // Enable motor
     582:	8c 9a       	sbi	0x11, 4	; 17
	
	//Move to known reference point
	motor_drive(-50);
     584:	8e ec       	ldi	r24, 0xCE	; 206
     586:	98 df       	rcall	.-208    	; 0x4b8 <motor_drive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     588:	2f ef       	ldi	r18, 0xFF	; 255
     58a:	8d e2       	ldi	r24, 0x2D	; 45
     58c:	92 e2       	ldi	r25, 0x22	; 34
     58e:	21 50       	subi	r18, 0x01	; 1
     590:	80 40       	sbci	r24, 0x00	; 0
     592:	90 40       	sbci	r25, 0x00	; 0
     594:	e1 f7       	brne	.-8      	; 0x58e <motor_init+0x16>
     596:	00 c0       	rjmp	.+0      	; 0x598 <motor_init+0x20>
     598:	00 00       	nop
	_delay_ms(700);
	motor_drive(0);
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	8d df       	rcall	.-230    	; 0x4b8 <motor_drive>
	
	//Toggle reset encoder
	PORTF &= ~(1 << PF6);
     59e:	8e 98       	cbi	0x11, 6	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a0:	2a e1       	ldi	r18, 0x1A	; 26
     5a2:	2a 95       	dec	r18
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <motor_init+0x2a>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <motor_init+0x30>
	_delay_us(5);
	PORTF |= (1 << PF6);
     5a8:	8e 9a       	sbi	0x11, 6	; 17
	
	ref_pos = encoder_read();
     5aa:	c5 df       	rcall	.-118    	; 0x536 <encoder_read>
     5ac:	90 93 45 02 	sts	0x0245, r25
     5b0:	80 93 44 02 	sts	0x0244, r24
     5b4:	08 95       	ret

000005b6 <position_controller>:
	
	return (high << 8) + low;
}

void position_controller( char pos )
{
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	18 2f       	mov	r17, r24
	int16_t rotations = encoder_read();
     5c6:	b7 df       	rcall	.-146    	; 0x536 <encoder_read>
     5c8:	ec 01       	movw	r28, r24
	int16_t prefered_rotations = ref_pos + ( ( (int32_t)pos ) * 8000.0) / 255;
     5ca:	60 91 44 02 	lds	r22, 0x0244
     5ce:	70 91 45 02 	lds	r23, 0x0245
     5d2:	88 27       	eor	r24, r24
     5d4:	77 fd       	sbrc	r23, 7
     5d6:	80 95       	com	r24
     5d8:	98 2f       	mov	r25, r24
     5da:	85 d2       	rcall	.+1290   	; 0xae6 <__floatsisf>
     5dc:	6b 01       	movw	r12, r22
     5de:	7c 01       	movw	r14, r24
     5e0:	61 2f       	mov	r22, r17
     5e2:	77 27       	eor	r23, r23
     5e4:	67 fd       	sbrc	r22, 7
     5e6:	70 95       	com	r23
     5e8:	87 2f       	mov	r24, r23
     5ea:	97 2f       	mov	r25, r23
     5ec:	7c d2       	rcall	.+1272   	; 0xae6 <__floatsisf>
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	4a ef       	ldi	r20, 0xFA	; 250
     5f4:	55 e4       	ldi	r21, 0x45	; 69
     5f6:	2b d3       	rcall	.+1622   	; 0xc4e <__mulsf3>
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	4f e7       	ldi	r20, 0x7F	; 127
     5fe:	53 e4       	ldi	r21, 0x43	; 67
     600:	d7 d1       	rcall	.+942    	; 0x9b0 <__divsf3>
     602:	9b 01       	movw	r18, r22
     604:	ac 01       	movw	r20, r24
     606:	c7 01       	movw	r24, r14
     608:	b6 01       	movw	r22, r12
     60a:	6a d1       	rcall	.+724    	; 0x8e0 <__addsf3>
     60c:	39 d2       	rcall	.+1138   	; 0xa80 <__fixsfsi>
	int16_t error = -prefered_rotations + rotations;
     60e:	c6 1b       	sub	r28, r22
     610:	d7 0b       	sbc	r29, r23
	char to_motor = error >> 6;
     612:	ce 01       	movw	r24, r28
     614:	08 2e       	mov	r0, r24
     616:	89 2f       	mov	r24, r25
     618:	00 0c       	add	r0, r0
     61a:	88 1f       	adc	r24, r24
     61c:	99 0b       	sbc	r25, r25
     61e:	00 0c       	add	r0, r0
     620:	88 1f       	adc	r24, r24
     622:	99 1f       	adc	r25, r25

	motor_drive(to_motor*2);
     624:	88 0f       	add	r24, r24
     626:	48 df       	rcall	.-368    	; 0x4b8 <motor_drive>
}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	df 90       	pop	r13
     634:	cf 90       	pop	r12
     636:	08 95       	ret

00000638 <servo_init>:
}

int us_to_compare(float us)
{
	return ( (us / 20000.0 ) * TOP_VALUE );
}
     638:	e0 e8       	ldi	r30, 0x80	; 128
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	82 60       	ori	r24, 0x02	; 2
     640:	80 83       	st	Z, r24
     642:	a1 e8       	ldi	r26, 0x81	; 129
     644:	b0 e0       	ldi	r27, 0x00	; 0
     646:	8c 91       	ld	r24, X
     648:	88 61       	ori	r24, 0x18	; 24
     64a:	8c 93       	st	X, r24
     64c:	8c 91       	ld	r24, X
     64e:	82 60       	ori	r24, 0x02	; 2
     650:	8c 93       	st	X, r24
     652:	8c 91       	ld	r24, X
     654:	8a 7f       	andi	r24, 0xFA	; 250
     656:	8c 93       	st	X, r24
     658:	80 81       	ld	r24, Z
     65a:	80 68       	ori	r24, 0x80	; 128
     65c:	80 83       	st	Z, r24
     65e:	80 81       	ld	r24, Z
     660:	8f 7b       	andi	r24, 0xBF	; 191
     662:	80 83       	st	Z, r24
     664:	80 e4       	ldi	r24, 0x40	; 64
     666:	9c e9       	ldi	r25, 0x9C	; 156
     668:	90 93 87 00 	sts	0x0087, r25
     66c:	80 93 86 00 	sts	0x0086, r24
     670:	88 eb       	ldi	r24, 0xB8	; 184
     672:	9b e0       	ldi	r25, 0x0B	; 11
     674:	90 93 89 00 	sts	0x0089, r25
     678:	80 93 88 00 	sts	0x0088, r24
     67c:	25 9a       	sbi	0x04, 5	; 4
     67e:	08 95       	ret

00000680 <servo_write>:

void servo_write(float val)
{
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	6b 01       	movw	r12, r22
     68a:	7c 01       	movw	r14, r24
	if(val > 950.0 && val < 2050.0)
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e8       	ldi	r19, 0x80	; 128
     690:	4d e6       	ldi	r20, 0x6D	; 109
     692:	54 e4       	ldi	r21, 0x44	; 68
     694:	d8 d2       	rcall	.+1456   	; 0xc46 <__gesf2>
     696:	18 16       	cp	r1, r24
     698:	24 f5       	brge	.+72     	; 0x6e2 <servo_write+0x62>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e2       	ldi	r19, 0x20	; 32
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	55 e4       	ldi	r21, 0x45	; 69
     6a2:	c7 01       	movw	r24, r14
     6a4:	b6 01       	movw	r22, r12
     6a6:	80 d1       	rcall	.+768    	; 0x9a8 <__cmpsf2>
     6a8:	88 23       	and	r24, r24
     6aa:	dc f4       	brge	.+54     	; 0x6e2 <servo_write+0x62>
	DDRB |= (1 << PB5);
}

int us_to_compare(float us)
{
	return ( (us / 20000.0 ) * TOP_VALUE );
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e4       	ldi	r19, 0x40	; 64
     6b0:	4c e9       	ldi	r20, 0x9C	; 156
     6b2:	56 e4       	ldi	r21, 0x46	; 70
     6b4:	c7 01       	movw	r24, r14
     6b6:	b6 01       	movw	r22, r12
     6b8:	7b d1       	rcall	.+758    	; 0x9b0 <__divsf3>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	34 e2       	ldi	r19, 0x24	; 36
     6be:	44 e7       	ldi	r20, 0x74	; 116
     6c0:	5b e4       	ldi	r21, 0x4B	; 75
     6c2:	c5 d2       	rcall	.+1418   	; 0xc4e <__mulsf3>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	5e e3       	ldi	r21, 0x3E	; 62
     6cc:	c0 d2       	rcall	.+1408   	; 0xc4e <__mulsf3>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	48 e4       	ldi	r20, 0x48	; 72
     6d4:	52 e4       	ldi	r21, 0x42	; 66
     6d6:	6c d1       	rcall	.+728    	; 0x9b0 <__divsf3>
     6d8:	d3 d1       	rcall	.+934    	; 0xa80 <__fixsfsi>

void servo_write(float val)
{
	if(val > 950.0 && val < 2050.0)
	{
		OCR1A = us_to_compare(val);
     6da:	70 93 89 00 	sts	0x0089, r23
     6de:	60 93 88 00 	sts	0x0088, r22
	}
}
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	08 95       	ret

000006ec <init_solenoid>:
#include <util/delay.h>
#include "solenoid.h"

void init_solenoid(void)
{
	DDRC |= (1 << PC0);
     6ec:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= (1 << PC0);
     6ee:	40 9a       	sbi	0x08, 0	; 8
     6f0:	08 95       	ret

000006f2 <solenoid_shoot>:
}

void solenoid_shoot(void)
{
	PORTC &= ~(1 << PC0);
     6f2:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6f4:	2f e7       	ldi	r18, 0x7F	; 127
     6f6:	89 ea       	ldi	r24, 0xA9	; 169
     6f8:	93 e0       	ldi	r25, 0x03	; 3
     6fa:	21 50       	subi	r18, 0x01	; 1
     6fc:	80 40       	sbci	r24, 0x00	; 0
     6fe:	90 40       	sbci	r25, 0x00	; 0
     700:	e1 f7       	brne	.-8      	; 0x6fa <solenoid_shoot+0x8>
     702:	00 c0       	rjmp	.+0      	; 0x704 <solenoid_shoot+0x12>
     704:	00 00       	nop
	_delay_ms(75);
	PORTC |= (1 << PC0);
     706:	40 9a       	sbi	0x08, 0	; 8
     708:	08 95       	ret

0000070a <spi_select>:
#include "spi_control.h"
#include <stdio.h>

void spi_select()
{
	PORTB &= ~(1<<PB0);
     70a:	28 98       	cbi	0x05, 0	; 5
     70c:	08 95       	ret

0000070e <spi_deselect>:
}

void spi_deselect()
{
	PORTB |= (1<<PB0);
     70e:	28 9a       	sbi	0x05, 0	; 5
     710:	08 95       	ret

00000712 <spi_transmit>:


void spi_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     712:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     714:	0d b4       	in	r0, 0x2d	; 45
     716:	07 fe       	sbrs	r0, 7
     718:	fd cf       	rjmp	.-6      	; 0x714 <spi_transmit+0x2>
	;
}
     71a:	08 95       	ret

0000071c <spi_receive>:
	PORTB |= (1<<PB0);
}

char spi_receive()
{
	spi_transmit(0);
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	f9 df       	rcall	.-14     	; 0x712 <spi_transmit>
	return SPDR;
     720:	8e b5       	in	r24, 0x2e	; 46
}
     722:	08 95       	ret

00000724 <spi_init>:
}


void spi_init(){
	/* Set MOSI,SCK and SS output, all others input */
	DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<DD_SS);    
     724:	84 b1       	in	r24, 0x04	; 4
     726:	87 60       	ori	r24, 0x07	; 7
     728:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     72a:	81 e5       	ldi	r24, 0x51	; 81
     72c:	8c bd       	out	0x2c, r24	; 44
     72e:	08 95       	ret

00000730 <USART_transmit>:
	fdevopen(USART_transmit,USART_receive);
}

void USART_transmit(unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)))
     730:	e0 ec       	ldi	r30, 0xC0	; 192
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	90 81       	ld	r25, Z
     736:	95 ff       	sbrs	r25, 5
     738:	fd cf       	rjmp	.-6      	; 0x734 <USART_transmit+0x4>
		;
	UDR0 = data;
     73a:	80 93 c6 00 	sts	0x00C6, r24
     73e:	08 95       	ret

00000740 <USART_receive>:
	
}

unsigned char USART_receive (void){
	
	while( !(UCSR0A & (1<<RXC0)))
     740:	e0 ec       	ldi	r30, 0xC0	; 192
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	88 23       	and	r24, r24
     748:	ec f7       	brge	.-6      	; 0x744 <USART_receive+0x4>
		;
	return UDR0;
     74a:	80 91 c6 00 	lds	r24, 0x00C6
	
     74e:	08 95       	ret

00000750 <USART_init>:
#include "USART_driver.h"
#include <stdio.h>
void USART_init(unsigned int ubrr){

	UBRR0H = (unsigned char)(ubrr>>8);
     750:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;	
     754:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     758:	88 e1       	ldi	r24, 0x18	; 24
     75a:	80 93 c1 00 	sts	0x00C1, r24
	
	UCSR0C = (3<<UCSZ00); 
     75e:	86 e0       	ldi	r24, 0x06	; 6
     760:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(USART_transmit,USART_receive);
     764:	60 ea       	ldi	r22, 0xA0	; 160
     766:	73 e0       	ldi	r23, 0x03	; 3
     768:	88 e9       	ldi	r24, 0x98	; 152
     76a:	93 e0       	ldi	r25, 0x03	; 3
     76c:	fa c2       	rjmp	.+1524   	; 0xd62 <fdevopen>
     76e:	08 95       	ret

00000770 <check_and_report_goal>:
#include <stdlib.h>
#include "goal.h"
#include "driver/ADC.h"
#include "driver/can_com.h"

void check_and_report_goal( void ){
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	2a 97       	sbiw	r28, 0x0a	; 10
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
	int threshold = 10;
	static int recent_goal = 0;
	static int recent_goal_counter = 0;
	can_message_t goal_msg = {'g',0};
     784:	fe 01       	movw	r30, r28
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	8a e0       	ldi	r24, 0x0A	; 10
     78a:	df 01       	movw	r26, r30
     78c:	1d 92       	st	X+, r1
     78e:	8a 95       	dec	r24
     790:	e9 f7       	brne	.-6      	; 0x78c <check_and_report_goal+0x1c>
     792:	87 e6       	ldi	r24, 0x67	; 103
     794:	89 83       	std	Y+1, r24	; 0x01
	
	if (recent_goal == 0)
     796:	80 91 40 02 	lds	r24, 0x0240
     79a:	90 91 41 02 	lds	r25, 0x0241
     79e:	89 2b       	or	r24, r25
     7a0:	71 f4       	brne	.+28     	; 0x7be <check_and_report_goal+0x4e>
	{
		goal_msg.data[0] = ADC_read();
     7a2:	cd dc       	rcall	.-1638   	; 0x13e <ADC_read>
     7a4:	8b 83       	std	Y+3, r24	; 0x03
		if(goal_msg.data[0] < threshold)
     7a6:	8a 30       	cpi	r24, 0x0A	; 10
     7a8:	14 f5       	brge	.+68     	; 0x7ee <check_and_report_goal+0x7e>
		{
			recent_goal = 1;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	90 93 41 02 	sts	0x0241, r25
     7b2:	80 93 40 02 	sts	0x0240, r24
			can_message_send(&goal_msg);
     7b6:	ce 01       	movw	r24, r28
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	e1 dc       	rcall	.-1598   	; 0x17e <can_message_send>
     7bc:	18 c0       	rjmp	.+48     	; 0x7ee <check_and_report_goal+0x7e>
		}
	}
	else
	{
		recent_goal_counter += 1;
     7be:	80 91 3e 02 	lds	r24, 0x023E
     7c2:	90 91 3f 02 	lds	r25, 0x023F
     7c6:	01 96       	adiw	r24, 0x01	; 1
		if (recent_goal_counter > 1000/40)
     7c8:	8a 31       	cpi	r24, 0x1A	; 26
     7ca:	91 05       	cpc	r25, r1
     7cc:	2c f4       	brge	.+10     	; 0x7d8 <check_and_report_goal+0x68>
			can_message_send(&goal_msg);
		}
	}
	else
	{
		recent_goal_counter += 1;
     7ce:	90 93 3f 02 	sts	0x023F, r25
     7d2:	80 93 3e 02 	sts	0x023E, r24
     7d6:	0b c0       	rjmp	.+22     	; 0x7ee <check_and_report_goal+0x7e>
		if (recent_goal_counter > 1000/40)
		{
			recent_goal_counter = 0;
     7d8:	10 92 3f 02 	sts	0x023F, r1
     7dc:	10 92 3e 02 	sts	0x023E, r1
			if (ADC_read() > threshold){
     7e0:	ae dc       	rcall	.-1700   	; 0x13e <ADC_read>
     7e2:	8b 30       	cpi	r24, 0x0B	; 11
     7e4:	24 f0       	brlt	.+8      	; 0x7ee <check_and_report_goal+0x7e>
				recent_goal = 0;
     7e6:	10 92 41 02 	sts	0x0241, r1
     7ea:	10 92 40 02 	sts	0x0240, r1
			}
		}
	}
     7ee:	2a 96       	adiw	r28, 0x0a	; 10
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <handle_message>:
	}
}

 
void handle_message(can_message_t* message)
{
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	ec 01       	movw	r28, r24
	static int TOUCH_JOY_MODE = 0;
	switch (message->id)
     806:	88 81       	ld	r24, Y
     808:	80 37       	cpi	r24, 0x70	; 112
     80a:	71 f0       	breq	.+28     	; 0x828 <handle_message+0x28>
     80c:	34 f4       	brge	.+12     	; 0x81a <handle_message+0x1a>
     80e:	8a 36       	cpi	r24, 0x6A	; 106
     810:	71 f0       	breq	.+28     	; 0x82e <handle_message+0x2e>
     812:	8d 36       	cpi	r24, 0x6D	; 109
     814:	09 f4       	brne	.+2      	; 0x818 <handle_message+0x18>
     816:	42 c0       	rjmp	.+132    	; 0x89c <handle_message+0x9c>
     818:	4b c0       	rjmp	.+150    	; 0x8b0 <handle_message+0xb0>
     81a:	83 37       	cpi	r24, 0x73	; 115
     81c:	09 f4       	brne	.+2      	; 0x820 <handle_message+0x20>
     81e:	38 c0       	rjmp	.+112    	; 0x890 <handle_message+0x90>
     820:	84 37       	cpi	r24, 0x74	; 116
     822:	09 f4       	brne	.+2      	; 0x826 <handle_message+0x26>
     824:	37 c0       	rjmp	.+110    	; 0x894 <handle_message+0x94>
     826:	44 c0       	rjmp	.+136    	; 0x8b0 <handle_message+0xb0>
	{
		case 'p' :				// Print
			can_print(message);
     828:	ce 01       	movw	r24, r28
     82a:	32 dd       	rcall	.-1436   	; 0x290 <can_print>
			break;
     82c:	43 c0       	rjmp	.+134    	; 0x8b4 <handle_message+0xb4>
		case 'j' :
			if(TOUCH_JOY_MODE == 0){
     82e:	80 91 42 02 	lds	r24, 0x0242
     832:	90 91 43 02 	lds	r25, 0x0243
     836:	89 2b       	or	r24, r25
     838:	a9 f4       	brne	.+42     	; 0x864 <handle_message+0x64>
				servo_write( message->data[1] * 5.0 + 1450 );	//	Y - value
     83a:	6b 81       	ldd	r22, Y+3	; 0x03
     83c:	77 27       	eor	r23, r23
     83e:	67 fd       	sbrc	r22, 7
     840:	70 95       	com	r23
     842:	87 2f       	mov	r24, r23
     844:	97 2f       	mov	r25, r23
     846:	4f d1       	rcall	.+670    	; 0xae6 <__floatsisf>
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	40 ea       	ldi	r20, 0xA0	; 160
     84e:	50 e4       	ldi	r21, 0x40	; 64
     850:	fe d1       	rcall	.+1020   	; 0xc4e <__mulsf3>
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e4       	ldi	r19, 0x40	; 64
     856:	45 eb       	ldi	r20, 0xB5	; 181
     858:	54 e4       	ldi	r21, 0x44	; 68
     85a:	42 d0       	rcall	.+132    	; 0x8e0 <__addsf3>
     85c:	11 df       	rcall	.-478    	; 0x680 <servo_write>
				motor_drive( message->data[0] );
     85e:	8a 81       	ldd	r24, Y+2	; 0x02
     860:	2b de       	rcall	.-938    	; 0x4b8 <motor_drive>
     862:	28 c0       	rjmp	.+80     	; 0x8b4 <handle_message+0xb4>
			}
			else
			{
				servo_write( - message->data[0] * 5.0 + 1450 );	//	X - value
     864:	6a 81       	ldd	r22, Y+2	; 0x02
     866:	77 27       	eor	r23, r23
     868:	61 95       	neg	r22
     86a:	0c f4       	brge	.+2      	; 0x86e <handle_message+0x6e>
     86c:	70 95       	com	r23
     86e:	88 27       	eor	r24, r24
     870:	77 fd       	sbrc	r23, 7
     872:	80 95       	com	r24
     874:	98 2f       	mov	r25, r24
     876:	37 d1       	rcall	.+622    	; 0xae6 <__floatsisf>
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 ea       	ldi	r20, 0xA0	; 160
     87e:	50 e4       	ldi	r21, 0x40	; 64
     880:	e6 d1       	rcall	.+972    	; 0xc4e <__mulsf3>
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e4       	ldi	r19, 0x40	; 64
     886:	45 eb       	ldi	r20, 0xB5	; 181
     888:	54 e4       	ldi	r21, 0x44	; 68
     88a:	2a d0       	rcall	.+84     	; 0x8e0 <__addsf3>
     88c:	f9 de       	rcall	.-526    	; 0x680 <servo_write>
     88e:	12 c0       	rjmp	.+36     	; 0x8b4 <handle_message+0xb4>
			}
			break;
		case 's' :
			solenoid_shoot();
     890:	30 df       	rcall	.-416    	; 0x6f2 <solenoid_shoot>
			break;
     892:	10 c0       	rjmp	.+32     	; 0x8b4 <handle_message+0xb4>
		case 't' :	
			position_controller( -message->data[0] );				//	X - value
     894:	8a 81       	ldd	r24, Y+2	; 0x02
     896:	81 95       	neg	r24
     898:	8e de       	rcall	.-740    	; 0x5b6 <position_controller>
			break;
     89a:	0c c0       	rjmp	.+24     	; 0x8b4 <handle_message+0xb4>
			
		case 'm' : 
			TOUCH_JOY_MODE = message->data[0];
     89c:	8a 81       	ldd	r24, Y+2	; 0x02
     89e:	99 27       	eor	r25, r25
     8a0:	87 fd       	sbrc	r24, 7
     8a2:	90 95       	com	r25
     8a4:	90 93 43 02 	sts	0x0243, r25
     8a8:	80 93 42 02 	sts	0x0242, r24
			// Reset motor when new game with touch-slider
			motor_init();
     8ac:	65 de       	rcall	.-822    	; 0x578 <motor_init>
			break;
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <handle_message+0xb4>
			
		default:
			can_print(message);
     8b0:	ce 01       	movw	r24, r28
     8b2:	ee dc       	rcall	.-1572   	; 0x290 <can_print>
			break;
	}
}
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <main>:

void handle_message(can_message_t* message);

int main (void)
{
	can_init();
     8ba:	53 dc       	rcall	.-1882   	; 0x162 <can_init>
	servo_init();
     8bc:	bd de       	rcall	.-646    	; 0x638 <servo_init>
	init_ADC();
     8be:	33 dc       	rcall	.-1946   	; 0x126 <init_ADC>
	USART_init(MYUBRR);
     8c0:	87 e6       	ldi	r24, 0x67	; 103
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	45 df       	rcall	.-374    	; 0x750 <USART_init>
	motor_init();
     8c6:	58 de       	rcall	.-848    	; 0x578 <motor_init>
	init_solenoid();
     8c8:	11 df       	rcall	.-478    	; 0x6ec <init_solenoid>

	

	while (1)
	{
		if (can_get_message(&message) == 1)
     8ca:	86 e4       	ldi	r24, 0x46	; 70
     8cc:	92 e0       	ldi	r25, 0x02	; 2
     8ce:	ba dc       	rcall	.-1676   	; 0x244 <can_get_message>
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	19 f4       	brne	.+6      	; 0x8da <main+0x20>
		{
			handle_message(&message);
     8d4:	86 e4       	ldi	r24, 0x46	; 70
     8d6:	92 e0       	ldi	r25, 0x02	; 2
     8d8:	93 df       	rcall	.-218    	; 0x800 <handle_message>
		}
		check_and_report_goal();
     8da:	4a df       	rcall	.-364    	; 0x770 <check_and_report_goal>
	}
     8dc:	f6 cf       	rjmp	.-20     	; 0x8ca <main+0x10>

000008de <__subsf3>:
     8de:	50 58       	subi	r21, 0x80	; 128

000008e0 <__addsf3>:
     8e0:	bb 27       	eor	r27, r27
     8e2:	aa 27       	eor	r26, r26
     8e4:	0e d0       	rcall	.+28     	; 0x902 <__addsf3x>
     8e6:	75 c1       	rjmp	.+746    	; 0xbd2 <__fp_round>
     8e8:	66 d1       	rcall	.+716    	; 0xbb6 <__fp_pscA>
     8ea:	30 f0       	brcs	.+12     	; 0x8f8 <__addsf3+0x18>
     8ec:	6b d1       	rcall	.+726    	; 0xbc4 <__fp_pscB>
     8ee:	20 f0       	brcs	.+8      	; 0x8f8 <__addsf3+0x18>
     8f0:	31 f4       	brne	.+12     	; 0x8fe <__addsf3+0x1e>
     8f2:	9f 3f       	cpi	r25, 0xFF	; 255
     8f4:	11 f4       	brne	.+4      	; 0x8fa <__addsf3+0x1a>
     8f6:	1e f4       	brtc	.+6      	; 0x8fe <__addsf3+0x1e>
     8f8:	5b c1       	rjmp	.+694    	; 0xbb0 <__fp_nan>
     8fa:	0e f4       	brtc	.+2      	; 0x8fe <__addsf3+0x1e>
     8fc:	e0 95       	com	r30
     8fe:	e7 fb       	bst	r30, 7
     900:	51 c1       	rjmp	.+674    	; 0xba4 <__fp_inf>

00000902 <__addsf3x>:
     902:	e9 2f       	mov	r30, r25
     904:	77 d1       	rcall	.+750    	; 0xbf4 <__fp_split3>
     906:	80 f3       	brcs	.-32     	; 0x8e8 <__addsf3+0x8>
     908:	ba 17       	cp	r27, r26
     90a:	62 07       	cpc	r22, r18
     90c:	73 07       	cpc	r23, r19
     90e:	84 07       	cpc	r24, r20
     910:	95 07       	cpc	r25, r21
     912:	18 f0       	brcs	.+6      	; 0x91a <__addsf3x+0x18>
     914:	71 f4       	brne	.+28     	; 0x932 <__addsf3x+0x30>
     916:	9e f5       	brtc	.+102    	; 0x97e <__addsf3x+0x7c>
     918:	8f c1       	rjmp	.+798    	; 0xc38 <__fp_zero>
     91a:	0e f4       	brtc	.+2      	; 0x91e <__addsf3x+0x1c>
     91c:	e0 95       	com	r30
     91e:	0b 2e       	mov	r0, r27
     920:	ba 2f       	mov	r27, r26
     922:	a0 2d       	mov	r26, r0
     924:	0b 01       	movw	r0, r22
     926:	b9 01       	movw	r22, r18
     928:	90 01       	movw	r18, r0
     92a:	0c 01       	movw	r0, r24
     92c:	ca 01       	movw	r24, r20
     92e:	a0 01       	movw	r20, r0
     930:	11 24       	eor	r1, r1
     932:	ff 27       	eor	r31, r31
     934:	59 1b       	sub	r21, r25
     936:	99 f0       	breq	.+38     	; 0x95e <__addsf3x+0x5c>
     938:	59 3f       	cpi	r21, 0xF9	; 249
     93a:	50 f4       	brcc	.+20     	; 0x950 <__addsf3x+0x4e>
     93c:	50 3e       	cpi	r21, 0xE0	; 224
     93e:	68 f1       	brcs	.+90     	; 0x99a <__addsf3x+0x98>
     940:	1a 16       	cp	r1, r26
     942:	f0 40       	sbci	r31, 0x00	; 0
     944:	a2 2f       	mov	r26, r18
     946:	23 2f       	mov	r18, r19
     948:	34 2f       	mov	r19, r20
     94a:	44 27       	eor	r20, r20
     94c:	58 5f       	subi	r21, 0xF8	; 248
     94e:	f3 cf       	rjmp	.-26     	; 0x936 <__addsf3x+0x34>
     950:	46 95       	lsr	r20
     952:	37 95       	ror	r19
     954:	27 95       	ror	r18
     956:	a7 95       	ror	r26
     958:	f0 40       	sbci	r31, 0x00	; 0
     95a:	53 95       	inc	r21
     95c:	c9 f7       	brne	.-14     	; 0x950 <__addsf3x+0x4e>
     95e:	7e f4       	brtc	.+30     	; 0x97e <__addsf3x+0x7c>
     960:	1f 16       	cp	r1, r31
     962:	ba 0b       	sbc	r27, r26
     964:	62 0b       	sbc	r22, r18
     966:	73 0b       	sbc	r23, r19
     968:	84 0b       	sbc	r24, r20
     96a:	ba f0       	brmi	.+46     	; 0x99a <__addsf3x+0x98>
     96c:	91 50       	subi	r25, 0x01	; 1
     96e:	a1 f0       	breq	.+40     	; 0x998 <__addsf3x+0x96>
     970:	ff 0f       	add	r31, r31
     972:	bb 1f       	adc	r27, r27
     974:	66 1f       	adc	r22, r22
     976:	77 1f       	adc	r23, r23
     978:	88 1f       	adc	r24, r24
     97a:	c2 f7       	brpl	.-16     	; 0x96c <__addsf3x+0x6a>
     97c:	0e c0       	rjmp	.+28     	; 0x99a <__addsf3x+0x98>
     97e:	ba 0f       	add	r27, r26
     980:	62 1f       	adc	r22, r18
     982:	73 1f       	adc	r23, r19
     984:	84 1f       	adc	r24, r20
     986:	48 f4       	brcc	.+18     	; 0x99a <__addsf3x+0x98>
     988:	87 95       	ror	r24
     98a:	77 95       	ror	r23
     98c:	67 95       	ror	r22
     98e:	b7 95       	ror	r27
     990:	f7 95       	ror	r31
     992:	9e 3f       	cpi	r25, 0xFE	; 254
     994:	08 f0       	brcs	.+2      	; 0x998 <__addsf3x+0x96>
     996:	b3 cf       	rjmp	.-154    	; 0x8fe <__addsf3+0x1e>
     998:	93 95       	inc	r25
     99a:	88 0f       	add	r24, r24
     99c:	08 f0       	brcs	.+2      	; 0x9a0 <__addsf3x+0x9e>
     99e:	99 27       	eor	r25, r25
     9a0:	ee 0f       	add	r30, r30
     9a2:	97 95       	ror	r25
     9a4:	87 95       	ror	r24
     9a6:	08 95       	ret

000009a8 <__cmpsf2>:
     9a8:	d9 d0       	rcall	.+434    	; 0xb5c <__fp_cmp>
     9aa:	08 f4       	brcc	.+2      	; 0x9ae <__cmpsf2+0x6>
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	08 95       	ret

000009b0 <__divsf3>:
     9b0:	0c d0       	rcall	.+24     	; 0x9ca <__divsf3x>
     9b2:	0f c1       	rjmp	.+542    	; 0xbd2 <__fp_round>
     9b4:	07 d1       	rcall	.+526    	; 0xbc4 <__fp_pscB>
     9b6:	40 f0       	brcs	.+16     	; 0x9c8 <__divsf3+0x18>
     9b8:	fe d0       	rcall	.+508    	; 0xbb6 <__fp_pscA>
     9ba:	30 f0       	brcs	.+12     	; 0x9c8 <__divsf3+0x18>
     9bc:	21 f4       	brne	.+8      	; 0x9c6 <__divsf3+0x16>
     9be:	5f 3f       	cpi	r21, 0xFF	; 255
     9c0:	19 f0       	breq	.+6      	; 0x9c8 <__divsf3+0x18>
     9c2:	f0 c0       	rjmp	.+480    	; 0xba4 <__fp_inf>
     9c4:	51 11       	cpse	r21, r1
     9c6:	39 c1       	rjmp	.+626    	; 0xc3a <__fp_szero>
     9c8:	f3 c0       	rjmp	.+486    	; 0xbb0 <__fp_nan>

000009ca <__divsf3x>:
     9ca:	14 d1       	rcall	.+552    	; 0xbf4 <__fp_split3>
     9cc:	98 f3       	brcs	.-26     	; 0x9b4 <__divsf3+0x4>

000009ce <__divsf3_pse>:
     9ce:	99 23       	and	r25, r25
     9d0:	c9 f3       	breq	.-14     	; 0x9c4 <__divsf3+0x14>
     9d2:	55 23       	and	r21, r21
     9d4:	b1 f3       	breq	.-20     	; 0x9c2 <__divsf3+0x12>
     9d6:	95 1b       	sub	r25, r21
     9d8:	55 0b       	sbc	r21, r21
     9da:	bb 27       	eor	r27, r27
     9dc:	aa 27       	eor	r26, r26
     9de:	62 17       	cp	r22, r18
     9e0:	73 07       	cpc	r23, r19
     9e2:	84 07       	cpc	r24, r20
     9e4:	38 f0       	brcs	.+14     	; 0x9f4 <__divsf3_pse+0x26>
     9e6:	9f 5f       	subi	r25, 0xFF	; 255
     9e8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ea:	22 0f       	add	r18, r18
     9ec:	33 1f       	adc	r19, r19
     9ee:	44 1f       	adc	r20, r20
     9f0:	aa 1f       	adc	r26, r26
     9f2:	a9 f3       	breq	.-22     	; 0x9de <__divsf3_pse+0x10>
     9f4:	33 d0       	rcall	.+102    	; 0xa5c <__divsf3_pse+0x8e>
     9f6:	0e 2e       	mov	r0, r30
     9f8:	3a f0       	brmi	.+14     	; 0xa08 <__divsf3_pse+0x3a>
     9fa:	e0 e8       	ldi	r30, 0x80	; 128
     9fc:	30 d0       	rcall	.+96     	; 0xa5e <__divsf3_pse+0x90>
     9fe:	91 50       	subi	r25, 0x01	; 1
     a00:	50 40       	sbci	r21, 0x00	; 0
     a02:	e6 95       	lsr	r30
     a04:	00 1c       	adc	r0, r0
     a06:	ca f7       	brpl	.-14     	; 0x9fa <__divsf3_pse+0x2c>
     a08:	29 d0       	rcall	.+82     	; 0xa5c <__divsf3_pse+0x8e>
     a0a:	fe 2f       	mov	r31, r30
     a0c:	27 d0       	rcall	.+78     	; 0xa5c <__divsf3_pse+0x8e>
     a0e:	66 0f       	add	r22, r22
     a10:	77 1f       	adc	r23, r23
     a12:	88 1f       	adc	r24, r24
     a14:	bb 1f       	adc	r27, r27
     a16:	26 17       	cp	r18, r22
     a18:	37 07       	cpc	r19, r23
     a1a:	48 07       	cpc	r20, r24
     a1c:	ab 07       	cpc	r26, r27
     a1e:	b0 e8       	ldi	r27, 0x80	; 128
     a20:	09 f0       	breq	.+2      	; 0xa24 <__divsf3_pse+0x56>
     a22:	bb 0b       	sbc	r27, r27
     a24:	80 2d       	mov	r24, r0
     a26:	bf 01       	movw	r22, r30
     a28:	ff 27       	eor	r31, r31
     a2a:	93 58       	subi	r25, 0x83	; 131
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	2a f0       	brmi	.+10     	; 0xa3a <__divsf3_pse+0x6c>
     a30:	9e 3f       	cpi	r25, 0xFE	; 254
     a32:	51 05       	cpc	r21, r1
     a34:	68 f0       	brcs	.+26     	; 0xa50 <__divsf3_pse+0x82>
     a36:	b6 c0       	rjmp	.+364    	; 0xba4 <__fp_inf>
     a38:	00 c1       	rjmp	.+512    	; 0xc3a <__fp_szero>
     a3a:	5f 3f       	cpi	r21, 0xFF	; 255
     a3c:	ec f3       	brlt	.-6      	; 0xa38 <__divsf3_pse+0x6a>
     a3e:	98 3e       	cpi	r25, 0xE8	; 232
     a40:	dc f3       	brlt	.-10     	; 0xa38 <__divsf3_pse+0x6a>
     a42:	86 95       	lsr	r24
     a44:	77 95       	ror	r23
     a46:	67 95       	ror	r22
     a48:	b7 95       	ror	r27
     a4a:	f7 95       	ror	r31
     a4c:	9f 5f       	subi	r25, 0xFF	; 255
     a4e:	c9 f7       	brne	.-14     	; 0xa42 <__divsf3_pse+0x74>
     a50:	88 0f       	add	r24, r24
     a52:	91 1d       	adc	r25, r1
     a54:	96 95       	lsr	r25
     a56:	87 95       	ror	r24
     a58:	97 f9       	bld	r25, 7
     a5a:	08 95       	ret
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	66 0f       	add	r22, r22
     a60:	77 1f       	adc	r23, r23
     a62:	88 1f       	adc	r24, r24
     a64:	bb 1f       	adc	r27, r27
     a66:	62 17       	cp	r22, r18
     a68:	73 07       	cpc	r23, r19
     a6a:	84 07       	cpc	r24, r20
     a6c:	ba 07       	cpc	r27, r26
     a6e:	20 f0       	brcs	.+8      	; 0xa78 <__divsf3_pse+0xaa>
     a70:	62 1b       	sub	r22, r18
     a72:	73 0b       	sbc	r23, r19
     a74:	84 0b       	sbc	r24, r20
     a76:	ba 0b       	sbc	r27, r26
     a78:	ee 1f       	adc	r30, r30
     a7a:	88 f7       	brcc	.-30     	; 0xa5e <__divsf3_pse+0x90>
     a7c:	e0 95       	com	r30
     a7e:	08 95       	ret

00000a80 <__fixsfsi>:
     a80:	04 d0       	rcall	.+8      	; 0xa8a <__fixunssfsi>
     a82:	68 94       	set
     a84:	b1 11       	cpse	r27, r1
     a86:	d9 c0       	rjmp	.+434    	; 0xc3a <__fp_szero>
     a88:	08 95       	ret

00000a8a <__fixunssfsi>:
     a8a:	bc d0       	rcall	.+376    	; 0xc04 <__fp_splitA>
     a8c:	88 f0       	brcs	.+34     	; 0xab0 <__fixunssfsi+0x26>
     a8e:	9f 57       	subi	r25, 0x7F	; 127
     a90:	90 f0       	brcs	.+36     	; 0xab6 <__fixunssfsi+0x2c>
     a92:	b9 2f       	mov	r27, r25
     a94:	99 27       	eor	r25, r25
     a96:	b7 51       	subi	r27, 0x17	; 23
     a98:	a0 f0       	brcs	.+40     	; 0xac2 <__fixunssfsi+0x38>
     a9a:	d1 f0       	breq	.+52     	; 0xad0 <__fixunssfsi+0x46>
     a9c:	66 0f       	add	r22, r22
     a9e:	77 1f       	adc	r23, r23
     aa0:	88 1f       	adc	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	1a f0       	brmi	.+6      	; 0xaac <__fixunssfsi+0x22>
     aa6:	ba 95       	dec	r27
     aa8:	c9 f7       	brne	.-14     	; 0xa9c <__fixunssfsi+0x12>
     aaa:	12 c0       	rjmp	.+36     	; 0xad0 <__fixunssfsi+0x46>
     aac:	b1 30       	cpi	r27, 0x01	; 1
     aae:	81 f0       	breq	.+32     	; 0xad0 <__fixunssfsi+0x46>
     ab0:	c3 d0       	rcall	.+390    	; 0xc38 <__fp_zero>
     ab2:	b1 e0       	ldi	r27, 0x01	; 1
     ab4:	08 95       	ret
     ab6:	c0 c0       	rjmp	.+384    	; 0xc38 <__fp_zero>
     ab8:	67 2f       	mov	r22, r23
     aba:	78 2f       	mov	r23, r24
     abc:	88 27       	eor	r24, r24
     abe:	b8 5f       	subi	r27, 0xF8	; 248
     ac0:	39 f0       	breq	.+14     	; 0xad0 <__fixunssfsi+0x46>
     ac2:	b9 3f       	cpi	r27, 0xF9	; 249
     ac4:	cc f3       	brlt	.-14     	; 0xab8 <__fixunssfsi+0x2e>
     ac6:	86 95       	lsr	r24
     ac8:	77 95       	ror	r23
     aca:	67 95       	ror	r22
     acc:	b3 95       	inc	r27
     ace:	d9 f7       	brne	.-10     	; 0xac6 <__fixunssfsi+0x3c>
     ad0:	3e f4       	brtc	.+14     	; 0xae0 <__fixunssfsi+0x56>
     ad2:	90 95       	com	r25
     ad4:	80 95       	com	r24
     ad6:	70 95       	com	r23
     ad8:	61 95       	neg	r22
     ada:	7f 4f       	sbci	r23, 0xFF	; 255
     adc:	8f 4f       	sbci	r24, 0xFF	; 255
     ade:	9f 4f       	sbci	r25, 0xFF	; 255
     ae0:	08 95       	ret

00000ae2 <__floatunsisf>:
     ae2:	e8 94       	clt
     ae4:	09 c0       	rjmp	.+18     	; 0xaf8 <__floatsisf+0x12>

00000ae6 <__floatsisf>:
     ae6:	97 fb       	bst	r25, 7
     ae8:	3e f4       	brtc	.+14     	; 0xaf8 <__floatsisf+0x12>
     aea:	90 95       	com	r25
     aec:	80 95       	com	r24
     aee:	70 95       	com	r23
     af0:	61 95       	neg	r22
     af2:	7f 4f       	sbci	r23, 0xFF	; 255
     af4:	8f 4f       	sbci	r24, 0xFF	; 255
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
     af8:	99 23       	and	r25, r25
     afa:	a9 f0       	breq	.+42     	; 0xb26 <__floatsisf+0x40>
     afc:	f9 2f       	mov	r31, r25
     afe:	96 e9       	ldi	r25, 0x96	; 150
     b00:	bb 27       	eor	r27, r27
     b02:	93 95       	inc	r25
     b04:	f6 95       	lsr	r31
     b06:	87 95       	ror	r24
     b08:	77 95       	ror	r23
     b0a:	67 95       	ror	r22
     b0c:	b7 95       	ror	r27
     b0e:	f1 11       	cpse	r31, r1
     b10:	f8 cf       	rjmp	.-16     	; 0xb02 <__floatsisf+0x1c>
     b12:	fa f4       	brpl	.+62     	; 0xb52 <__floatsisf+0x6c>
     b14:	bb 0f       	add	r27, r27
     b16:	11 f4       	brne	.+4      	; 0xb1c <__floatsisf+0x36>
     b18:	60 ff       	sbrs	r22, 0
     b1a:	1b c0       	rjmp	.+54     	; 0xb52 <__floatsisf+0x6c>
     b1c:	6f 5f       	subi	r22, 0xFF	; 255
     b1e:	7f 4f       	sbci	r23, 0xFF	; 255
     b20:	8f 4f       	sbci	r24, 0xFF	; 255
     b22:	9f 4f       	sbci	r25, 0xFF	; 255
     b24:	16 c0       	rjmp	.+44     	; 0xb52 <__floatsisf+0x6c>
     b26:	88 23       	and	r24, r24
     b28:	11 f0       	breq	.+4      	; 0xb2e <__floatsisf+0x48>
     b2a:	96 e9       	ldi	r25, 0x96	; 150
     b2c:	11 c0       	rjmp	.+34     	; 0xb50 <__floatsisf+0x6a>
     b2e:	77 23       	and	r23, r23
     b30:	21 f0       	breq	.+8      	; 0xb3a <__floatsisf+0x54>
     b32:	9e e8       	ldi	r25, 0x8E	; 142
     b34:	87 2f       	mov	r24, r23
     b36:	76 2f       	mov	r23, r22
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <__floatsisf+0x5e>
     b3a:	66 23       	and	r22, r22
     b3c:	71 f0       	breq	.+28     	; 0xb5a <__floatsisf+0x74>
     b3e:	96 e8       	ldi	r25, 0x86	; 134
     b40:	86 2f       	mov	r24, r22
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	2a f0       	brmi	.+10     	; 0xb52 <__floatsisf+0x6c>
     b48:	9a 95       	dec	r25
     b4a:	66 0f       	add	r22, r22
     b4c:	77 1f       	adc	r23, r23
     b4e:	88 1f       	adc	r24, r24
     b50:	da f7       	brpl	.-10     	; 0xb48 <__floatsisf+0x62>
     b52:	88 0f       	add	r24, r24
     b54:	96 95       	lsr	r25
     b56:	87 95       	ror	r24
     b58:	97 f9       	bld	r25, 7
     b5a:	08 95       	ret

00000b5c <__fp_cmp>:
     b5c:	99 0f       	add	r25, r25
     b5e:	00 08       	sbc	r0, r0
     b60:	55 0f       	add	r21, r21
     b62:	aa 0b       	sbc	r26, r26
     b64:	e0 e8       	ldi	r30, 0x80	; 128
     b66:	fe ef       	ldi	r31, 0xFE	; 254
     b68:	16 16       	cp	r1, r22
     b6a:	17 06       	cpc	r1, r23
     b6c:	e8 07       	cpc	r30, r24
     b6e:	f9 07       	cpc	r31, r25
     b70:	c0 f0       	brcs	.+48     	; 0xba2 <__fp_cmp+0x46>
     b72:	12 16       	cp	r1, r18
     b74:	13 06       	cpc	r1, r19
     b76:	e4 07       	cpc	r30, r20
     b78:	f5 07       	cpc	r31, r21
     b7a:	98 f0       	brcs	.+38     	; 0xba2 <__fp_cmp+0x46>
     b7c:	62 1b       	sub	r22, r18
     b7e:	73 0b       	sbc	r23, r19
     b80:	84 0b       	sbc	r24, r20
     b82:	95 0b       	sbc	r25, r21
     b84:	39 f4       	brne	.+14     	; 0xb94 <__fp_cmp+0x38>
     b86:	0a 26       	eor	r0, r26
     b88:	61 f0       	breq	.+24     	; 0xba2 <__fp_cmp+0x46>
     b8a:	23 2b       	or	r18, r19
     b8c:	24 2b       	or	r18, r20
     b8e:	25 2b       	or	r18, r21
     b90:	21 f4       	brne	.+8      	; 0xb9a <__fp_cmp+0x3e>
     b92:	08 95       	ret
     b94:	0a 26       	eor	r0, r26
     b96:	09 f4       	brne	.+2      	; 0xb9a <__fp_cmp+0x3e>
     b98:	a1 40       	sbci	r26, 0x01	; 1
     b9a:	a6 95       	lsr	r26
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	81 1d       	adc	r24, r1
     ba0:	81 1d       	adc	r24, r1
     ba2:	08 95       	ret

00000ba4 <__fp_inf>:
     ba4:	97 f9       	bld	r25, 7
     ba6:	9f 67       	ori	r25, 0x7F	; 127
     ba8:	80 e8       	ldi	r24, 0x80	; 128
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	08 95       	ret

00000bb0 <__fp_nan>:
     bb0:	9f ef       	ldi	r25, 0xFF	; 255
     bb2:	80 ec       	ldi	r24, 0xC0	; 192
     bb4:	08 95       	ret

00000bb6 <__fp_pscA>:
     bb6:	00 24       	eor	r0, r0
     bb8:	0a 94       	dec	r0
     bba:	16 16       	cp	r1, r22
     bbc:	17 06       	cpc	r1, r23
     bbe:	18 06       	cpc	r1, r24
     bc0:	09 06       	cpc	r0, r25
     bc2:	08 95       	ret

00000bc4 <__fp_pscB>:
     bc4:	00 24       	eor	r0, r0
     bc6:	0a 94       	dec	r0
     bc8:	12 16       	cp	r1, r18
     bca:	13 06       	cpc	r1, r19
     bcc:	14 06       	cpc	r1, r20
     bce:	05 06       	cpc	r0, r21
     bd0:	08 95       	ret

00000bd2 <__fp_round>:
     bd2:	09 2e       	mov	r0, r25
     bd4:	03 94       	inc	r0
     bd6:	00 0c       	add	r0, r0
     bd8:	11 f4       	brne	.+4      	; 0xbde <__fp_round+0xc>
     bda:	88 23       	and	r24, r24
     bdc:	52 f0       	brmi	.+20     	; 0xbf2 <__fp_round+0x20>
     bde:	bb 0f       	add	r27, r27
     be0:	40 f4       	brcc	.+16     	; 0xbf2 <__fp_round+0x20>
     be2:	bf 2b       	or	r27, r31
     be4:	11 f4       	brne	.+4      	; 0xbea <__fp_round+0x18>
     be6:	60 ff       	sbrs	r22, 0
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <__fp_round+0x20>
     bea:	6f 5f       	subi	r22, 0xFF	; 255
     bec:	7f 4f       	sbci	r23, 0xFF	; 255
     bee:	8f 4f       	sbci	r24, 0xFF	; 255
     bf0:	9f 4f       	sbci	r25, 0xFF	; 255
     bf2:	08 95       	ret

00000bf4 <__fp_split3>:
     bf4:	57 fd       	sbrc	r21, 7
     bf6:	90 58       	subi	r25, 0x80	; 128
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	59 f0       	breq	.+22     	; 0xc14 <__fp_splitA+0x10>
     bfe:	5f 3f       	cpi	r21, 0xFF	; 255
     c00:	71 f0       	breq	.+28     	; 0xc1e <__fp_splitA+0x1a>
     c02:	47 95       	ror	r20

00000c04 <__fp_splitA>:
     c04:	88 0f       	add	r24, r24
     c06:	97 fb       	bst	r25, 7
     c08:	99 1f       	adc	r25, r25
     c0a:	61 f0       	breq	.+24     	; 0xc24 <__fp_splitA+0x20>
     c0c:	9f 3f       	cpi	r25, 0xFF	; 255
     c0e:	79 f0       	breq	.+30     	; 0xc2e <__fp_splitA+0x2a>
     c10:	87 95       	ror	r24
     c12:	08 95       	ret
     c14:	12 16       	cp	r1, r18
     c16:	13 06       	cpc	r1, r19
     c18:	14 06       	cpc	r1, r20
     c1a:	55 1f       	adc	r21, r21
     c1c:	f2 cf       	rjmp	.-28     	; 0xc02 <__fp_split3+0xe>
     c1e:	46 95       	lsr	r20
     c20:	f1 df       	rcall	.-30     	; 0xc04 <__fp_splitA>
     c22:	08 c0       	rjmp	.+16     	; 0xc34 <__fp_splitA+0x30>
     c24:	16 16       	cp	r1, r22
     c26:	17 06       	cpc	r1, r23
     c28:	18 06       	cpc	r1, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	f1 cf       	rjmp	.-30     	; 0xc10 <__fp_splitA+0xc>
     c2e:	86 95       	lsr	r24
     c30:	71 05       	cpc	r23, r1
     c32:	61 05       	cpc	r22, r1
     c34:	08 94       	sec
     c36:	08 95       	ret

00000c38 <__fp_zero>:
     c38:	e8 94       	clt

00000c3a <__fp_szero>:
     c3a:	bb 27       	eor	r27, r27
     c3c:	66 27       	eor	r22, r22
     c3e:	77 27       	eor	r23, r23
     c40:	cb 01       	movw	r24, r22
     c42:	97 f9       	bld	r25, 7
     c44:	08 95       	ret

00000c46 <__gesf2>:
     c46:	8a df       	rcall	.-236    	; 0xb5c <__fp_cmp>
     c48:	08 f4       	brcc	.+2      	; 0xc4c <__gesf2+0x6>
     c4a:	8f ef       	ldi	r24, 0xFF	; 255
     c4c:	08 95       	ret

00000c4e <__mulsf3>:
     c4e:	0b d0       	rcall	.+22     	; 0xc66 <__mulsf3x>
     c50:	c0 cf       	rjmp	.-128    	; 0xbd2 <__fp_round>
     c52:	b1 df       	rcall	.-158    	; 0xbb6 <__fp_pscA>
     c54:	28 f0       	brcs	.+10     	; 0xc60 <__mulsf3+0x12>
     c56:	b6 df       	rcall	.-148    	; 0xbc4 <__fp_pscB>
     c58:	18 f0       	brcs	.+6      	; 0xc60 <__mulsf3+0x12>
     c5a:	95 23       	and	r25, r21
     c5c:	09 f0       	breq	.+2      	; 0xc60 <__mulsf3+0x12>
     c5e:	a2 cf       	rjmp	.-188    	; 0xba4 <__fp_inf>
     c60:	a7 cf       	rjmp	.-178    	; 0xbb0 <__fp_nan>
     c62:	11 24       	eor	r1, r1
     c64:	ea cf       	rjmp	.-44     	; 0xc3a <__fp_szero>

00000c66 <__mulsf3x>:
     c66:	c6 df       	rcall	.-116    	; 0xbf4 <__fp_split3>
     c68:	a0 f3       	brcs	.-24     	; 0xc52 <__mulsf3+0x4>

00000c6a <__mulsf3_pse>:
     c6a:	95 9f       	mul	r25, r21
     c6c:	d1 f3       	breq	.-12     	; 0xc62 <__mulsf3+0x14>
     c6e:	95 0f       	add	r25, r21
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	55 1f       	adc	r21, r21
     c74:	62 9f       	mul	r22, r18
     c76:	f0 01       	movw	r30, r0
     c78:	72 9f       	mul	r23, r18
     c7a:	bb 27       	eor	r27, r27
     c7c:	f0 0d       	add	r31, r0
     c7e:	b1 1d       	adc	r27, r1
     c80:	63 9f       	mul	r22, r19
     c82:	aa 27       	eor	r26, r26
     c84:	f0 0d       	add	r31, r0
     c86:	b1 1d       	adc	r27, r1
     c88:	aa 1f       	adc	r26, r26
     c8a:	64 9f       	mul	r22, r20
     c8c:	66 27       	eor	r22, r22
     c8e:	b0 0d       	add	r27, r0
     c90:	a1 1d       	adc	r26, r1
     c92:	66 1f       	adc	r22, r22
     c94:	82 9f       	mul	r24, r18
     c96:	22 27       	eor	r18, r18
     c98:	b0 0d       	add	r27, r0
     c9a:	a1 1d       	adc	r26, r1
     c9c:	62 1f       	adc	r22, r18
     c9e:	73 9f       	mul	r23, r19
     ca0:	b0 0d       	add	r27, r0
     ca2:	a1 1d       	adc	r26, r1
     ca4:	62 1f       	adc	r22, r18
     ca6:	83 9f       	mul	r24, r19
     ca8:	a0 0d       	add	r26, r0
     caa:	61 1d       	adc	r22, r1
     cac:	22 1f       	adc	r18, r18
     cae:	74 9f       	mul	r23, r20
     cb0:	33 27       	eor	r19, r19
     cb2:	a0 0d       	add	r26, r0
     cb4:	61 1d       	adc	r22, r1
     cb6:	23 1f       	adc	r18, r19
     cb8:	84 9f       	mul	r24, r20
     cba:	60 0d       	add	r22, r0
     cbc:	21 1d       	adc	r18, r1
     cbe:	82 2f       	mov	r24, r18
     cc0:	76 2f       	mov	r23, r22
     cc2:	6a 2f       	mov	r22, r26
     cc4:	11 24       	eor	r1, r1
     cc6:	9f 57       	subi	r25, 0x7F	; 127
     cc8:	50 40       	sbci	r21, 0x00	; 0
     cca:	8a f0       	brmi	.+34     	; 0xcee <__mulsf3_pse+0x84>
     ccc:	e1 f0       	breq	.+56     	; 0xd06 <__mulsf3_pse+0x9c>
     cce:	88 23       	and	r24, r24
     cd0:	4a f0       	brmi	.+18     	; 0xce4 <__mulsf3_pse+0x7a>
     cd2:	ee 0f       	add	r30, r30
     cd4:	ff 1f       	adc	r31, r31
     cd6:	bb 1f       	adc	r27, r27
     cd8:	66 1f       	adc	r22, r22
     cda:	77 1f       	adc	r23, r23
     cdc:	88 1f       	adc	r24, r24
     cde:	91 50       	subi	r25, 0x01	; 1
     ce0:	50 40       	sbci	r21, 0x00	; 0
     ce2:	a9 f7       	brne	.-22     	; 0xcce <__mulsf3_pse+0x64>
     ce4:	9e 3f       	cpi	r25, 0xFE	; 254
     ce6:	51 05       	cpc	r21, r1
     ce8:	70 f0       	brcs	.+28     	; 0xd06 <__mulsf3_pse+0x9c>
     cea:	5c cf       	rjmp	.-328    	; 0xba4 <__fp_inf>
     cec:	a6 cf       	rjmp	.-180    	; 0xc3a <__fp_szero>
     cee:	5f 3f       	cpi	r21, 0xFF	; 255
     cf0:	ec f3       	brlt	.-6      	; 0xcec <__mulsf3_pse+0x82>
     cf2:	98 3e       	cpi	r25, 0xE8	; 232
     cf4:	dc f3       	brlt	.-10     	; 0xcec <__mulsf3_pse+0x82>
     cf6:	86 95       	lsr	r24
     cf8:	77 95       	ror	r23
     cfa:	67 95       	ror	r22
     cfc:	b7 95       	ror	r27
     cfe:	f7 95       	ror	r31
     d00:	e7 95       	ror	r30
     d02:	9f 5f       	subi	r25, 0xFF	; 255
     d04:	c1 f7       	brne	.-16     	; 0xcf6 <__mulsf3_pse+0x8c>
     d06:	fe 2b       	or	r31, r30
     d08:	88 0f       	add	r24, r24
     d0a:	91 1d       	adc	r25, r1
     d0c:	96 95       	lsr	r25
     d0e:	87 95       	ror	r24
     d10:	97 f9       	bld	r25, 7
     d12:	08 95       	ret

00000d14 <__divmodhi4>:
     d14:	97 fb       	bst	r25, 7
     d16:	07 2e       	mov	r0, r23
     d18:	16 f4       	brtc	.+4      	; 0xd1e <__divmodhi4+0xa>
     d1a:	00 94       	com	r0
     d1c:	06 d0       	rcall	.+12     	; 0xd2a <__divmodhi4_neg1>
     d1e:	77 fd       	sbrc	r23, 7
     d20:	08 d0       	rcall	.+16     	; 0xd32 <__divmodhi4_neg2>
     d22:	0b d0       	rcall	.+22     	; 0xd3a <__udivmodhi4>
     d24:	07 fc       	sbrc	r0, 7
     d26:	05 d0       	rcall	.+10     	; 0xd32 <__divmodhi4_neg2>
     d28:	3e f4       	brtc	.+14     	; 0xd38 <__divmodhi4_exit>

00000d2a <__divmodhi4_neg1>:
     d2a:	90 95       	com	r25
     d2c:	81 95       	neg	r24
     d2e:	9f 4f       	sbci	r25, 0xFF	; 255
     d30:	08 95       	ret

00000d32 <__divmodhi4_neg2>:
     d32:	70 95       	com	r23
     d34:	61 95       	neg	r22
     d36:	7f 4f       	sbci	r23, 0xFF	; 255

00000d38 <__divmodhi4_exit>:
     d38:	08 95       	ret

00000d3a <__udivmodhi4>:
     d3a:	aa 1b       	sub	r26, r26
     d3c:	bb 1b       	sub	r27, r27
     d3e:	51 e1       	ldi	r21, 0x11	; 17
     d40:	07 c0       	rjmp	.+14     	; 0xd50 <__udivmodhi4_ep>

00000d42 <__udivmodhi4_loop>:
     d42:	aa 1f       	adc	r26, r26
     d44:	bb 1f       	adc	r27, r27
     d46:	a6 17       	cp	r26, r22
     d48:	b7 07       	cpc	r27, r23
     d4a:	10 f0       	brcs	.+4      	; 0xd50 <__udivmodhi4_ep>
     d4c:	a6 1b       	sub	r26, r22
     d4e:	b7 0b       	sbc	r27, r23

00000d50 <__udivmodhi4_ep>:
     d50:	88 1f       	adc	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	5a 95       	dec	r21
     d56:	a9 f7       	brne	.-22     	; 0xd42 <__udivmodhi4_loop>
     d58:	80 95       	com	r24
     d5a:	90 95       	com	r25
     d5c:	bc 01       	movw	r22, r24
     d5e:	cd 01       	movw	r24, r26
     d60:	08 95       	ret

00000d62 <fdevopen>:
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	ec 01       	movw	r28, r24
     d6c:	8b 01       	movw	r16, r22
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	31 f4       	brne	.+12     	; 0xd7e <fdevopen+0x1c>
     d72:	61 15       	cp	r22, r1
     d74:	71 05       	cpc	r23, r1
     d76:	19 f4       	brne	.+6      	; 0xd7e <fdevopen+0x1c>
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	37 c0       	rjmp	.+110    	; 0xdec <fdevopen+0x8a>
     d7e:	6e e0       	ldi	r22, 0x0E	; 14
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	68 d2       	rcall	.+1232   	; 0x1258 <calloc>
     d88:	fc 01       	movw	r30, r24
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	a9 f3       	breq	.-22     	; 0xd78 <fdevopen+0x16>
     d8e:	80 e8       	ldi	r24, 0x80	; 128
     d90:	83 83       	std	Z+3, r24	; 0x03
     d92:	01 15       	cp	r16, r1
     d94:	11 05       	cpc	r17, r1
     d96:	71 f0       	breq	.+28     	; 0xdb4 <fdevopen+0x52>
     d98:	13 87       	std	Z+11, r17	; 0x0b
     d9a:	02 87       	std	Z+10, r16	; 0x0a
     d9c:	81 e8       	ldi	r24, 0x81	; 129
     d9e:	83 83       	std	Z+3, r24	; 0x03
     da0:	80 91 50 02 	lds	r24, 0x0250
     da4:	90 91 51 02 	lds	r25, 0x0251
     da8:	89 2b       	or	r24, r25
     daa:	21 f4       	brne	.+8      	; 0xdb4 <fdevopen+0x52>
     dac:	f0 93 51 02 	sts	0x0251, r31
     db0:	e0 93 50 02 	sts	0x0250, r30
     db4:	20 97       	sbiw	r28, 0x00	; 0
     db6:	c9 f0       	breq	.+50     	; 0xdea <fdevopen+0x88>
     db8:	d1 87       	std	Z+9, r29	; 0x09
     dba:	c0 87       	std	Z+8, r28	; 0x08
     dbc:	83 81       	ldd	r24, Z+3	; 0x03
     dbe:	82 60       	ori	r24, 0x02	; 2
     dc0:	83 83       	std	Z+3, r24	; 0x03
     dc2:	80 91 52 02 	lds	r24, 0x0252
     dc6:	90 91 53 02 	lds	r25, 0x0253
     dca:	89 2b       	or	r24, r25
     dcc:	71 f4       	brne	.+28     	; 0xdea <fdevopen+0x88>
     dce:	f0 93 53 02 	sts	0x0253, r31
     dd2:	e0 93 52 02 	sts	0x0252, r30
     dd6:	80 91 54 02 	lds	r24, 0x0254
     dda:	90 91 55 02 	lds	r25, 0x0255
     dde:	89 2b       	or	r24, r25
     de0:	21 f4       	brne	.+8      	; 0xdea <fdevopen+0x88>
     de2:	f0 93 55 02 	sts	0x0255, r31
     de6:	e0 93 54 02 	sts	0x0254, r30
     dea:	cf 01       	movw	r24, r30
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	08 95       	ret

00000df6 <printf>:
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	fe 01       	movw	r30, r28
     e00:	36 96       	adiw	r30, 0x06	; 6
     e02:	61 91       	ld	r22, Z+
     e04:	71 91       	ld	r23, Z+
     e06:	af 01       	movw	r20, r30
     e08:	80 91 52 02 	lds	r24, 0x0252
     e0c:	90 91 53 02 	lds	r25, 0x0253
     e10:	35 d0       	rcall	.+106    	; 0xe7c <vfprintf>
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <putchar>:
     e18:	60 91 52 02 	lds	r22, 0x0252
     e1c:	70 91 53 02 	lds	r23, 0x0253
     e20:	79 c3       	rjmp	.+1778   	; 0x1514 <fputc>

00000e22 <puts>:
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	e0 91 52 02 	lds	r30, 0x0252
     e2e:	f0 91 53 02 	lds	r31, 0x0253
     e32:	23 81       	ldd	r18, Z+3	; 0x03
     e34:	21 ff       	sbrs	r18, 1
     e36:	1b c0       	rjmp	.+54     	; 0xe6e <puts+0x4c>
     e38:	ec 01       	movw	r28, r24
     e3a:	00 e0       	ldi	r16, 0x00	; 0
     e3c:	10 e0       	ldi	r17, 0x00	; 0
     e3e:	89 91       	ld	r24, Y+
     e40:	60 91 52 02 	lds	r22, 0x0252
     e44:	70 91 53 02 	lds	r23, 0x0253
     e48:	db 01       	movw	r26, r22
     e4a:	18 96       	adiw	r26, 0x08	; 8
     e4c:	ed 91       	ld	r30, X+
     e4e:	fc 91       	ld	r31, X
     e50:	19 97       	sbiw	r26, 0x09	; 9
     e52:	88 23       	and	r24, r24
     e54:	31 f0       	breq	.+12     	; 0xe62 <puts+0x40>
     e56:	19 95       	eicall
     e58:	89 2b       	or	r24, r25
     e5a:	89 f3       	breq	.-30     	; 0xe3e <puts+0x1c>
     e5c:	0f ef       	ldi	r16, 0xFF	; 255
     e5e:	1f ef       	ldi	r17, 0xFF	; 255
     e60:	ee cf       	rjmp	.-36     	; 0xe3e <puts+0x1c>
     e62:	8a e0       	ldi	r24, 0x0A	; 10
     e64:	19 95       	eicall
     e66:	89 2b       	or	r24, r25
     e68:	11 f4       	brne	.+4      	; 0xe6e <puts+0x4c>
     e6a:	c8 01       	movw	r24, r16
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <puts+0x50>
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	9f ef       	ldi	r25, 0xFF	; 255
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	08 95       	ret

00000e7c <vfprintf>:
     e7c:	2f 92       	push	r2
     e7e:	3f 92       	push	r3
     e80:	4f 92       	push	r4
     e82:	5f 92       	push	r5
     e84:	6f 92       	push	r6
     e86:	7f 92       	push	r7
     e88:	8f 92       	push	r8
     e8a:	9f 92       	push	r9
     e8c:	af 92       	push	r10
     e8e:	bf 92       	push	r11
     e90:	cf 92       	push	r12
     e92:	df 92       	push	r13
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	2c 97       	sbiw	r28, 0x0c	; 12
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	7c 01       	movw	r14, r24
     eb2:	6b 01       	movw	r12, r22
     eb4:	8a 01       	movw	r16, r20
     eb6:	fc 01       	movw	r30, r24
     eb8:	17 82       	std	Z+7, r1	; 0x07
     eba:	16 82       	std	Z+6, r1	; 0x06
     ebc:	83 81       	ldd	r24, Z+3	; 0x03
     ebe:	81 ff       	sbrs	r24, 1
     ec0:	b0 c1       	rjmp	.+864    	; 0x1222 <vfprintf+0x3a6>
     ec2:	ce 01       	movw	r24, r28
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	4c 01       	movw	r8, r24
     ec8:	f7 01       	movw	r30, r14
     eca:	93 81       	ldd	r25, Z+3	; 0x03
     ecc:	f6 01       	movw	r30, r12
     ece:	93 fd       	sbrc	r25, 3
     ed0:	85 91       	lpm	r24, Z+
     ed2:	93 ff       	sbrs	r25, 3
     ed4:	81 91       	ld	r24, Z+
     ed6:	6f 01       	movw	r12, r30
     ed8:	88 23       	and	r24, r24
     eda:	09 f4       	brne	.+2      	; 0xede <vfprintf+0x62>
     edc:	9e c1       	rjmp	.+828    	; 0x121a <vfprintf+0x39e>
     ede:	85 32       	cpi	r24, 0x25	; 37
     ee0:	39 f4       	brne	.+14     	; 0xef0 <vfprintf+0x74>
     ee2:	93 fd       	sbrc	r25, 3
     ee4:	85 91       	lpm	r24, Z+
     ee6:	93 ff       	sbrs	r25, 3
     ee8:	81 91       	ld	r24, Z+
     eea:	6f 01       	movw	r12, r30
     eec:	85 32       	cpi	r24, 0x25	; 37
     eee:	21 f4       	brne	.+8      	; 0xef8 <vfprintf+0x7c>
     ef0:	b7 01       	movw	r22, r14
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0f d3       	rcall	.+1566   	; 0x1514 <fputc>
     ef6:	e8 cf       	rjmp	.-48     	; 0xec8 <vfprintf+0x4c>
     ef8:	51 2c       	mov	r5, r1
     efa:	31 2c       	mov	r3, r1
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	20 32       	cpi	r18, 0x20	; 32
     f00:	a0 f4       	brcc	.+40     	; 0xf2a <vfprintf+0xae>
     f02:	8b 32       	cpi	r24, 0x2B	; 43
     f04:	69 f0       	breq	.+26     	; 0xf20 <vfprintf+0xa4>
     f06:	30 f4       	brcc	.+12     	; 0xf14 <vfprintf+0x98>
     f08:	80 32       	cpi	r24, 0x20	; 32
     f0a:	59 f0       	breq	.+22     	; 0xf22 <vfprintf+0xa6>
     f0c:	83 32       	cpi	r24, 0x23	; 35
     f0e:	69 f4       	brne	.+26     	; 0xf2a <vfprintf+0xae>
     f10:	20 61       	ori	r18, 0x10	; 16
     f12:	2c c0       	rjmp	.+88     	; 0xf6c <vfprintf+0xf0>
     f14:	8d 32       	cpi	r24, 0x2D	; 45
     f16:	39 f0       	breq	.+14     	; 0xf26 <vfprintf+0xaa>
     f18:	80 33       	cpi	r24, 0x30	; 48
     f1a:	39 f4       	brne	.+14     	; 0xf2a <vfprintf+0xae>
     f1c:	21 60       	ori	r18, 0x01	; 1
     f1e:	26 c0       	rjmp	.+76     	; 0xf6c <vfprintf+0xf0>
     f20:	22 60       	ori	r18, 0x02	; 2
     f22:	24 60       	ori	r18, 0x04	; 4
     f24:	23 c0       	rjmp	.+70     	; 0xf6c <vfprintf+0xf0>
     f26:	28 60       	ori	r18, 0x08	; 8
     f28:	21 c0       	rjmp	.+66     	; 0xf6c <vfprintf+0xf0>
     f2a:	27 fd       	sbrc	r18, 7
     f2c:	27 c0       	rjmp	.+78     	; 0xf7c <vfprintf+0x100>
     f2e:	30 ed       	ldi	r19, 0xD0	; 208
     f30:	38 0f       	add	r19, r24
     f32:	3a 30       	cpi	r19, 0x0A	; 10
     f34:	78 f4       	brcc	.+30     	; 0xf54 <vfprintf+0xd8>
     f36:	26 ff       	sbrs	r18, 6
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <vfprintf+0xca>
     f3a:	fa e0       	ldi	r31, 0x0A	; 10
     f3c:	5f 9e       	mul	r5, r31
     f3e:	30 0d       	add	r19, r0
     f40:	11 24       	eor	r1, r1
     f42:	53 2e       	mov	r5, r19
     f44:	13 c0       	rjmp	.+38     	; 0xf6c <vfprintf+0xf0>
     f46:	8a e0       	ldi	r24, 0x0A	; 10
     f48:	38 9e       	mul	r3, r24
     f4a:	30 0d       	add	r19, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	33 2e       	mov	r3, r19
     f50:	20 62       	ori	r18, 0x20	; 32
     f52:	0c c0       	rjmp	.+24     	; 0xf6c <vfprintf+0xf0>
     f54:	8e 32       	cpi	r24, 0x2E	; 46
     f56:	21 f4       	brne	.+8      	; 0xf60 <vfprintf+0xe4>
     f58:	26 fd       	sbrc	r18, 6
     f5a:	5f c1       	rjmp	.+702    	; 0x121a <vfprintf+0x39e>
     f5c:	20 64       	ori	r18, 0x40	; 64
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <vfprintf+0xf0>
     f60:	8c 36       	cpi	r24, 0x6C	; 108
     f62:	11 f4       	brne	.+4      	; 0xf68 <vfprintf+0xec>
     f64:	20 68       	ori	r18, 0x80	; 128
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <vfprintf+0xf0>
     f68:	88 36       	cpi	r24, 0x68	; 104
     f6a:	41 f4       	brne	.+16     	; 0xf7c <vfprintf+0x100>
     f6c:	f6 01       	movw	r30, r12
     f6e:	93 fd       	sbrc	r25, 3
     f70:	85 91       	lpm	r24, Z+
     f72:	93 ff       	sbrs	r25, 3
     f74:	81 91       	ld	r24, Z+
     f76:	6f 01       	movw	r12, r30
     f78:	81 11       	cpse	r24, r1
     f7a:	c1 cf       	rjmp	.-126    	; 0xefe <vfprintf+0x82>
     f7c:	98 2f       	mov	r25, r24
     f7e:	9f 7d       	andi	r25, 0xDF	; 223
     f80:	95 54       	subi	r25, 0x45	; 69
     f82:	93 30       	cpi	r25, 0x03	; 3
     f84:	28 f4       	brcc	.+10     	; 0xf90 <vfprintf+0x114>
     f86:	0c 5f       	subi	r16, 0xFC	; 252
     f88:	1f 4f       	sbci	r17, 0xFF	; 255
     f8a:	ff e3       	ldi	r31, 0x3F	; 63
     f8c:	f9 83       	std	Y+1, r31	; 0x01
     f8e:	0d c0       	rjmp	.+26     	; 0xfaa <vfprintf+0x12e>
     f90:	83 36       	cpi	r24, 0x63	; 99
     f92:	31 f0       	breq	.+12     	; 0xfa0 <vfprintf+0x124>
     f94:	83 37       	cpi	r24, 0x73	; 115
     f96:	71 f0       	breq	.+28     	; 0xfb4 <vfprintf+0x138>
     f98:	83 35       	cpi	r24, 0x53	; 83
     f9a:	09 f0       	breq	.+2      	; 0xf9e <vfprintf+0x122>
     f9c:	57 c0       	rjmp	.+174    	; 0x104c <vfprintf+0x1d0>
     f9e:	21 c0       	rjmp	.+66     	; 0xfe2 <vfprintf+0x166>
     fa0:	f8 01       	movw	r30, r16
     fa2:	80 81       	ld	r24, Z
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	0e 5f       	subi	r16, 0xFE	; 254
     fa8:	1f 4f       	sbci	r17, 0xFF	; 255
     faa:	44 24       	eor	r4, r4
     fac:	43 94       	inc	r4
     fae:	51 2c       	mov	r5, r1
     fb0:	54 01       	movw	r10, r8
     fb2:	14 c0       	rjmp	.+40     	; 0xfdc <vfprintf+0x160>
     fb4:	38 01       	movw	r6, r16
     fb6:	f2 e0       	ldi	r31, 0x02	; 2
     fb8:	6f 0e       	add	r6, r31
     fba:	71 1c       	adc	r7, r1
     fbc:	f8 01       	movw	r30, r16
     fbe:	a0 80       	ld	r10, Z
     fc0:	b1 80       	ldd	r11, Z+1	; 0x01
     fc2:	26 ff       	sbrs	r18, 6
     fc4:	03 c0       	rjmp	.+6      	; 0xfcc <vfprintf+0x150>
     fc6:	65 2d       	mov	r22, r5
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <vfprintf+0x154>
     fcc:	6f ef       	ldi	r22, 0xFF	; 255
     fce:	7f ef       	ldi	r23, 0xFF	; 255
     fd0:	c5 01       	movw	r24, r10
     fd2:	2c 87       	std	Y+12, r18	; 0x0c
     fd4:	94 d2       	rcall	.+1320   	; 0x14fe <strnlen>
     fd6:	2c 01       	movw	r4, r24
     fd8:	83 01       	movw	r16, r6
     fda:	2c 85       	ldd	r18, Y+12	; 0x0c
     fdc:	2f 77       	andi	r18, 0x7F	; 127
     fde:	22 2e       	mov	r2, r18
     fe0:	16 c0       	rjmp	.+44     	; 0x100e <vfprintf+0x192>
     fe2:	38 01       	movw	r6, r16
     fe4:	f2 e0       	ldi	r31, 0x02	; 2
     fe6:	6f 0e       	add	r6, r31
     fe8:	71 1c       	adc	r7, r1
     fea:	f8 01       	movw	r30, r16
     fec:	a0 80       	ld	r10, Z
     fee:	b1 80       	ldd	r11, Z+1	; 0x01
     ff0:	26 ff       	sbrs	r18, 6
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <vfprintf+0x17e>
     ff4:	65 2d       	mov	r22, r5
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <vfprintf+0x182>
     ffa:	6f ef       	ldi	r22, 0xFF	; 255
     ffc:	7f ef       	ldi	r23, 0xFF	; 255
     ffe:	c5 01       	movw	r24, r10
    1000:	2c 87       	std	Y+12, r18	; 0x0c
    1002:	6b d2       	rcall	.+1238   	; 0x14da <strnlen_P>
    1004:	2c 01       	movw	r4, r24
    1006:	2c 85       	ldd	r18, Y+12	; 0x0c
    1008:	20 68       	ori	r18, 0x80	; 128
    100a:	22 2e       	mov	r2, r18
    100c:	83 01       	movw	r16, r6
    100e:	23 fc       	sbrc	r2, 3
    1010:	19 c0       	rjmp	.+50     	; 0x1044 <vfprintf+0x1c8>
    1012:	83 2d       	mov	r24, r3
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	48 16       	cp	r4, r24
    1018:	59 06       	cpc	r5, r25
    101a:	a0 f4       	brcc	.+40     	; 0x1044 <vfprintf+0x1c8>
    101c:	b7 01       	movw	r22, r14
    101e:	80 e2       	ldi	r24, 0x20	; 32
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	78 d2       	rcall	.+1264   	; 0x1514 <fputc>
    1024:	3a 94       	dec	r3
    1026:	f5 cf       	rjmp	.-22     	; 0x1012 <vfprintf+0x196>
    1028:	f5 01       	movw	r30, r10
    102a:	27 fc       	sbrc	r2, 7
    102c:	85 91       	lpm	r24, Z+
    102e:	27 fe       	sbrs	r2, 7
    1030:	81 91       	ld	r24, Z+
    1032:	5f 01       	movw	r10, r30
    1034:	b7 01       	movw	r22, r14
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	6d d2       	rcall	.+1242   	; 0x1514 <fputc>
    103a:	31 10       	cpse	r3, r1
    103c:	3a 94       	dec	r3
    103e:	f1 e0       	ldi	r31, 0x01	; 1
    1040:	4f 1a       	sub	r4, r31
    1042:	51 08       	sbc	r5, r1
    1044:	41 14       	cp	r4, r1
    1046:	51 04       	cpc	r5, r1
    1048:	79 f7       	brne	.-34     	; 0x1028 <vfprintf+0x1ac>
    104a:	de c0       	rjmp	.+444    	; 0x1208 <vfprintf+0x38c>
    104c:	84 36       	cpi	r24, 0x64	; 100
    104e:	11 f0       	breq	.+4      	; 0x1054 <vfprintf+0x1d8>
    1050:	89 36       	cpi	r24, 0x69	; 105
    1052:	31 f5       	brne	.+76     	; 0x10a0 <vfprintf+0x224>
    1054:	f8 01       	movw	r30, r16
    1056:	27 ff       	sbrs	r18, 7
    1058:	07 c0       	rjmp	.+14     	; 0x1068 <vfprintf+0x1ec>
    105a:	60 81       	ld	r22, Z
    105c:	71 81       	ldd	r23, Z+1	; 0x01
    105e:	82 81       	ldd	r24, Z+2	; 0x02
    1060:	93 81       	ldd	r25, Z+3	; 0x03
    1062:	0c 5f       	subi	r16, 0xFC	; 252
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
    1066:	08 c0       	rjmp	.+16     	; 0x1078 <vfprintf+0x1fc>
    1068:	60 81       	ld	r22, Z
    106a:	71 81       	ldd	r23, Z+1	; 0x01
    106c:	88 27       	eor	r24, r24
    106e:	77 fd       	sbrc	r23, 7
    1070:	80 95       	com	r24
    1072:	98 2f       	mov	r25, r24
    1074:	0e 5f       	subi	r16, 0xFE	; 254
    1076:	1f 4f       	sbci	r17, 0xFF	; 255
    1078:	2f 76       	andi	r18, 0x6F	; 111
    107a:	b2 2e       	mov	r11, r18
    107c:	97 ff       	sbrs	r25, 7
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <vfprintf+0x216>
    1080:	90 95       	com	r25
    1082:	80 95       	com	r24
    1084:	70 95       	com	r23
    1086:	61 95       	neg	r22
    1088:	7f 4f       	sbci	r23, 0xFF	; 255
    108a:	8f 4f       	sbci	r24, 0xFF	; 255
    108c:	9f 4f       	sbci	r25, 0xFF	; 255
    108e:	20 68       	ori	r18, 0x80	; 128
    1090:	b2 2e       	mov	r11, r18
    1092:	2a e0       	ldi	r18, 0x0A	; 10
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	a4 01       	movw	r20, r8
    1098:	6f d2       	rcall	.+1246   	; 0x1578 <__ultoa_invert>
    109a:	a8 2e       	mov	r10, r24
    109c:	a8 18       	sub	r10, r8
    109e:	43 c0       	rjmp	.+134    	; 0x1126 <vfprintf+0x2aa>
    10a0:	85 37       	cpi	r24, 0x75	; 117
    10a2:	29 f4       	brne	.+10     	; 0x10ae <vfprintf+0x232>
    10a4:	2f 7e       	andi	r18, 0xEF	; 239
    10a6:	b2 2e       	mov	r11, r18
    10a8:	2a e0       	ldi	r18, 0x0A	; 10
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	25 c0       	rjmp	.+74     	; 0x10f8 <vfprintf+0x27c>
    10ae:	f2 2f       	mov	r31, r18
    10b0:	f9 7f       	andi	r31, 0xF9	; 249
    10b2:	bf 2e       	mov	r11, r31
    10b4:	8f 36       	cpi	r24, 0x6F	; 111
    10b6:	c1 f0       	breq	.+48     	; 0x10e8 <vfprintf+0x26c>
    10b8:	18 f4       	brcc	.+6      	; 0x10c0 <vfprintf+0x244>
    10ba:	88 35       	cpi	r24, 0x58	; 88
    10bc:	79 f0       	breq	.+30     	; 0x10dc <vfprintf+0x260>
    10be:	ad c0       	rjmp	.+346    	; 0x121a <vfprintf+0x39e>
    10c0:	80 37       	cpi	r24, 0x70	; 112
    10c2:	19 f0       	breq	.+6      	; 0x10ca <vfprintf+0x24e>
    10c4:	88 37       	cpi	r24, 0x78	; 120
    10c6:	21 f0       	breq	.+8      	; 0x10d0 <vfprintf+0x254>
    10c8:	a8 c0       	rjmp	.+336    	; 0x121a <vfprintf+0x39e>
    10ca:	2f 2f       	mov	r18, r31
    10cc:	20 61       	ori	r18, 0x10	; 16
    10ce:	b2 2e       	mov	r11, r18
    10d0:	b4 fe       	sbrs	r11, 4
    10d2:	0d c0       	rjmp	.+26     	; 0x10ee <vfprintf+0x272>
    10d4:	8b 2d       	mov	r24, r11
    10d6:	84 60       	ori	r24, 0x04	; 4
    10d8:	b8 2e       	mov	r11, r24
    10da:	09 c0       	rjmp	.+18     	; 0x10ee <vfprintf+0x272>
    10dc:	24 ff       	sbrs	r18, 4
    10de:	0a c0       	rjmp	.+20     	; 0x10f4 <vfprintf+0x278>
    10e0:	9f 2f       	mov	r25, r31
    10e2:	96 60       	ori	r25, 0x06	; 6
    10e4:	b9 2e       	mov	r11, r25
    10e6:	06 c0       	rjmp	.+12     	; 0x10f4 <vfprintf+0x278>
    10e8:	28 e0       	ldi	r18, 0x08	; 8
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <vfprintf+0x27c>
    10ee:	20 e1       	ldi	r18, 0x10	; 16
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <vfprintf+0x27c>
    10f4:	20 e1       	ldi	r18, 0x10	; 16
    10f6:	32 e0       	ldi	r19, 0x02	; 2
    10f8:	f8 01       	movw	r30, r16
    10fa:	b7 fe       	sbrs	r11, 7
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <vfprintf+0x290>
    10fe:	60 81       	ld	r22, Z
    1100:	71 81       	ldd	r23, Z+1	; 0x01
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	93 81       	ldd	r25, Z+3	; 0x03
    1106:	0c 5f       	subi	r16, 0xFC	; 252
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	06 c0       	rjmp	.+12     	; 0x1118 <vfprintf+0x29c>
    110c:	60 81       	ld	r22, Z
    110e:	71 81       	ldd	r23, Z+1	; 0x01
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 5f       	subi	r16, 0xFE	; 254
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	a4 01       	movw	r20, r8
    111a:	2e d2       	rcall	.+1116   	; 0x1578 <__ultoa_invert>
    111c:	a8 2e       	mov	r10, r24
    111e:	a8 18       	sub	r10, r8
    1120:	fb 2d       	mov	r31, r11
    1122:	ff 77       	andi	r31, 0x7F	; 127
    1124:	bf 2e       	mov	r11, r31
    1126:	b6 fe       	sbrs	r11, 6
    1128:	0b c0       	rjmp	.+22     	; 0x1140 <vfprintf+0x2c4>
    112a:	2b 2d       	mov	r18, r11
    112c:	2e 7f       	andi	r18, 0xFE	; 254
    112e:	a5 14       	cp	r10, r5
    1130:	50 f4       	brcc	.+20     	; 0x1146 <vfprintf+0x2ca>
    1132:	b4 fe       	sbrs	r11, 4
    1134:	0a c0       	rjmp	.+20     	; 0x114a <vfprintf+0x2ce>
    1136:	b2 fc       	sbrc	r11, 2
    1138:	08 c0       	rjmp	.+16     	; 0x114a <vfprintf+0x2ce>
    113a:	2b 2d       	mov	r18, r11
    113c:	2e 7e       	andi	r18, 0xEE	; 238
    113e:	05 c0       	rjmp	.+10     	; 0x114a <vfprintf+0x2ce>
    1140:	7a 2c       	mov	r7, r10
    1142:	2b 2d       	mov	r18, r11
    1144:	03 c0       	rjmp	.+6      	; 0x114c <vfprintf+0x2d0>
    1146:	7a 2c       	mov	r7, r10
    1148:	01 c0       	rjmp	.+2      	; 0x114c <vfprintf+0x2d0>
    114a:	75 2c       	mov	r7, r5
    114c:	24 ff       	sbrs	r18, 4
    114e:	0d c0       	rjmp	.+26     	; 0x116a <vfprintf+0x2ee>
    1150:	fe 01       	movw	r30, r28
    1152:	ea 0d       	add	r30, r10
    1154:	f1 1d       	adc	r31, r1
    1156:	80 81       	ld	r24, Z
    1158:	80 33       	cpi	r24, 0x30	; 48
    115a:	11 f4       	brne	.+4      	; 0x1160 <vfprintf+0x2e4>
    115c:	29 7e       	andi	r18, 0xE9	; 233
    115e:	09 c0       	rjmp	.+18     	; 0x1172 <vfprintf+0x2f6>
    1160:	22 ff       	sbrs	r18, 2
    1162:	06 c0       	rjmp	.+12     	; 0x1170 <vfprintf+0x2f4>
    1164:	73 94       	inc	r7
    1166:	73 94       	inc	r7
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <vfprintf+0x2f6>
    116a:	82 2f       	mov	r24, r18
    116c:	86 78       	andi	r24, 0x86	; 134
    116e:	09 f0       	breq	.+2      	; 0x1172 <vfprintf+0x2f6>
    1170:	73 94       	inc	r7
    1172:	23 fd       	sbrc	r18, 3
    1174:	12 c0       	rjmp	.+36     	; 0x119a <vfprintf+0x31e>
    1176:	20 ff       	sbrs	r18, 0
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <vfprintf+0x30a>
    117a:	5a 2c       	mov	r5, r10
    117c:	73 14       	cp	r7, r3
    117e:	18 f4       	brcc	.+6      	; 0x1186 <vfprintf+0x30a>
    1180:	53 0c       	add	r5, r3
    1182:	57 18       	sub	r5, r7
    1184:	73 2c       	mov	r7, r3
    1186:	73 14       	cp	r7, r3
    1188:	60 f4       	brcc	.+24     	; 0x11a2 <vfprintf+0x326>
    118a:	b7 01       	movw	r22, r14
    118c:	80 e2       	ldi	r24, 0x20	; 32
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	2c 87       	std	Y+12, r18	; 0x0c
    1192:	c0 d1       	rcall	.+896    	; 0x1514 <fputc>
    1194:	73 94       	inc	r7
    1196:	2c 85       	ldd	r18, Y+12	; 0x0c
    1198:	f6 cf       	rjmp	.-20     	; 0x1186 <vfprintf+0x30a>
    119a:	73 14       	cp	r7, r3
    119c:	10 f4       	brcc	.+4      	; 0x11a2 <vfprintf+0x326>
    119e:	37 18       	sub	r3, r7
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <vfprintf+0x328>
    11a2:	31 2c       	mov	r3, r1
    11a4:	24 ff       	sbrs	r18, 4
    11a6:	11 c0       	rjmp	.+34     	; 0x11ca <vfprintf+0x34e>
    11a8:	b7 01       	movw	r22, r14
    11aa:	80 e3       	ldi	r24, 0x30	; 48
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	2c 87       	std	Y+12, r18	; 0x0c
    11b0:	b1 d1       	rcall	.+866    	; 0x1514 <fputc>
    11b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    11b4:	22 ff       	sbrs	r18, 2
    11b6:	16 c0       	rjmp	.+44     	; 0x11e4 <vfprintf+0x368>
    11b8:	21 ff       	sbrs	r18, 1
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <vfprintf+0x346>
    11bc:	88 e5       	ldi	r24, 0x58	; 88
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <vfprintf+0x34a>
    11c2:	88 e7       	ldi	r24, 0x78	; 120
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	b7 01       	movw	r22, r14
    11c8:	0c c0       	rjmp	.+24     	; 0x11e2 <vfprintf+0x366>
    11ca:	82 2f       	mov	r24, r18
    11cc:	86 78       	andi	r24, 0x86	; 134
    11ce:	51 f0       	breq	.+20     	; 0x11e4 <vfprintf+0x368>
    11d0:	21 fd       	sbrc	r18, 1
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <vfprintf+0x35c>
    11d4:	80 e2       	ldi	r24, 0x20	; 32
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <vfprintf+0x35e>
    11d8:	8b e2       	ldi	r24, 0x2B	; 43
    11da:	27 fd       	sbrc	r18, 7
    11dc:	8d e2       	ldi	r24, 0x2D	; 45
    11de:	b7 01       	movw	r22, r14
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	98 d1       	rcall	.+816    	; 0x1514 <fputc>
    11e4:	a5 14       	cp	r10, r5
    11e6:	30 f4       	brcc	.+12     	; 0x11f4 <vfprintf+0x378>
    11e8:	b7 01       	movw	r22, r14
    11ea:	80 e3       	ldi	r24, 0x30	; 48
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	92 d1       	rcall	.+804    	; 0x1514 <fputc>
    11f0:	5a 94       	dec	r5
    11f2:	f8 cf       	rjmp	.-16     	; 0x11e4 <vfprintf+0x368>
    11f4:	aa 94       	dec	r10
    11f6:	f4 01       	movw	r30, r8
    11f8:	ea 0d       	add	r30, r10
    11fa:	f1 1d       	adc	r31, r1
    11fc:	80 81       	ld	r24, Z
    11fe:	b7 01       	movw	r22, r14
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	88 d1       	rcall	.+784    	; 0x1514 <fputc>
    1204:	a1 10       	cpse	r10, r1
    1206:	f6 cf       	rjmp	.-20     	; 0x11f4 <vfprintf+0x378>
    1208:	33 20       	and	r3, r3
    120a:	09 f4       	brne	.+2      	; 0x120e <vfprintf+0x392>
    120c:	5d ce       	rjmp	.-838    	; 0xec8 <vfprintf+0x4c>
    120e:	b7 01       	movw	r22, r14
    1210:	80 e2       	ldi	r24, 0x20	; 32
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	7f d1       	rcall	.+766    	; 0x1514 <fputc>
    1216:	3a 94       	dec	r3
    1218:	f7 cf       	rjmp	.-18     	; 0x1208 <vfprintf+0x38c>
    121a:	f7 01       	movw	r30, r14
    121c:	86 81       	ldd	r24, Z+6	; 0x06
    121e:	97 81       	ldd	r25, Z+7	; 0x07
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <vfprintf+0x3aa>
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	9f ef       	ldi	r25, 0xFF	; 255
    1226:	2c 96       	adiw	r28, 0x0c	; 12
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	bf 90       	pop	r11
    1244:	af 90       	pop	r10
    1246:	9f 90       	pop	r9
    1248:	8f 90       	pop	r8
    124a:	7f 90       	pop	r7
    124c:	6f 90       	pop	r6
    124e:	5f 90       	pop	r5
    1250:	4f 90       	pop	r4
    1252:	3f 90       	pop	r3
    1254:	2f 90       	pop	r2
    1256:	08 95       	ret

00001258 <calloc>:
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	86 9f       	mul	r24, r22
    1262:	80 01       	movw	r16, r0
    1264:	87 9f       	mul	r24, r23
    1266:	10 0d       	add	r17, r0
    1268:	96 9f       	mul	r25, r22
    126a:	10 0d       	add	r17, r0
    126c:	11 24       	eor	r1, r1
    126e:	c8 01       	movw	r24, r16
    1270:	0d d0       	rcall	.+26     	; 0x128c <malloc>
    1272:	ec 01       	movw	r28, r24
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	21 f0       	breq	.+8      	; 0x1280 <calloc+0x28>
    1278:	a8 01       	movw	r20, r16
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	38 d1       	rcall	.+624    	; 0x14f0 <memset>
    1280:	ce 01       	movw	r24, r28
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	08 95       	ret

0000128c <malloc>:
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	82 30       	cpi	r24, 0x02	; 2
    1292:	91 05       	cpc	r25, r1
    1294:	10 f4       	brcc	.+4      	; 0x129a <malloc+0xe>
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	e0 91 58 02 	lds	r30, 0x0258
    129e:	f0 91 59 02 	lds	r31, 0x0259
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	a0 e0       	ldi	r26, 0x00	; 0
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	30 97       	sbiw	r30, 0x00	; 0
    12ac:	39 f1       	breq	.+78     	; 0x12fc <malloc+0x70>
    12ae:	40 81       	ld	r20, Z
    12b0:	51 81       	ldd	r21, Z+1	; 0x01
    12b2:	48 17       	cp	r20, r24
    12b4:	59 07       	cpc	r21, r25
    12b6:	b8 f0       	brcs	.+46     	; 0x12e6 <malloc+0x5a>
    12b8:	48 17       	cp	r20, r24
    12ba:	59 07       	cpc	r21, r25
    12bc:	71 f4       	brne	.+28     	; 0x12da <malloc+0x4e>
    12be:	82 81       	ldd	r24, Z+2	; 0x02
    12c0:	93 81       	ldd	r25, Z+3	; 0x03
    12c2:	10 97       	sbiw	r26, 0x00	; 0
    12c4:	29 f0       	breq	.+10     	; 0x12d0 <malloc+0x44>
    12c6:	13 96       	adiw	r26, 0x03	; 3
    12c8:	9c 93       	st	X, r25
    12ca:	8e 93       	st	-X, r24
    12cc:	12 97       	sbiw	r26, 0x02	; 2
    12ce:	2c c0       	rjmp	.+88     	; 0x1328 <malloc+0x9c>
    12d0:	90 93 59 02 	sts	0x0259, r25
    12d4:	80 93 58 02 	sts	0x0258, r24
    12d8:	27 c0       	rjmp	.+78     	; 0x1328 <malloc+0x9c>
    12da:	21 15       	cp	r18, r1
    12dc:	31 05       	cpc	r19, r1
    12de:	31 f0       	breq	.+12     	; 0x12ec <malloc+0x60>
    12e0:	42 17       	cp	r20, r18
    12e2:	53 07       	cpc	r21, r19
    12e4:	18 f0       	brcs	.+6      	; 0x12ec <malloc+0x60>
    12e6:	a9 01       	movw	r20, r18
    12e8:	db 01       	movw	r26, r22
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <malloc+0x62>
    12ec:	ef 01       	movw	r28, r30
    12ee:	9a 01       	movw	r18, r20
    12f0:	bd 01       	movw	r22, r26
    12f2:	df 01       	movw	r26, r30
    12f4:	02 80       	ldd	r0, Z+2	; 0x02
    12f6:	f3 81       	ldd	r31, Z+3	; 0x03
    12f8:	e0 2d       	mov	r30, r0
    12fa:	d7 cf       	rjmp	.-82     	; 0x12aa <malloc+0x1e>
    12fc:	21 15       	cp	r18, r1
    12fe:	31 05       	cpc	r19, r1
    1300:	f9 f0       	breq	.+62     	; 0x1340 <malloc+0xb4>
    1302:	28 1b       	sub	r18, r24
    1304:	39 0b       	sbc	r19, r25
    1306:	24 30       	cpi	r18, 0x04	; 4
    1308:	31 05       	cpc	r19, r1
    130a:	80 f4       	brcc	.+32     	; 0x132c <malloc+0xa0>
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	9b 81       	ldd	r25, Y+3	; 0x03
    1310:	61 15       	cp	r22, r1
    1312:	71 05       	cpc	r23, r1
    1314:	21 f0       	breq	.+8      	; 0x131e <malloc+0x92>
    1316:	fb 01       	movw	r30, r22
    1318:	93 83       	std	Z+3, r25	; 0x03
    131a:	82 83       	std	Z+2, r24	; 0x02
    131c:	04 c0       	rjmp	.+8      	; 0x1326 <malloc+0x9a>
    131e:	90 93 59 02 	sts	0x0259, r25
    1322:	80 93 58 02 	sts	0x0258, r24
    1326:	fe 01       	movw	r30, r28
    1328:	32 96       	adiw	r30, 0x02	; 2
    132a:	44 c0       	rjmp	.+136    	; 0x13b4 <malloc+0x128>
    132c:	fe 01       	movw	r30, r28
    132e:	e2 0f       	add	r30, r18
    1330:	f3 1f       	adc	r31, r19
    1332:	81 93       	st	Z+, r24
    1334:	91 93       	st	Z+, r25
    1336:	22 50       	subi	r18, 0x02	; 2
    1338:	31 09       	sbc	r19, r1
    133a:	39 83       	std	Y+1, r19	; 0x01
    133c:	28 83       	st	Y, r18
    133e:	3a c0       	rjmp	.+116    	; 0x13b4 <malloc+0x128>
    1340:	20 91 56 02 	lds	r18, 0x0256
    1344:	30 91 57 02 	lds	r19, 0x0257
    1348:	23 2b       	or	r18, r19
    134a:	41 f4       	brne	.+16     	; 0x135c <malloc+0xd0>
    134c:	20 91 02 02 	lds	r18, 0x0202
    1350:	30 91 03 02 	lds	r19, 0x0203
    1354:	30 93 57 02 	sts	0x0257, r19
    1358:	20 93 56 02 	sts	0x0256, r18
    135c:	20 91 00 02 	lds	r18, 0x0200
    1360:	30 91 01 02 	lds	r19, 0x0201
    1364:	21 15       	cp	r18, r1
    1366:	31 05       	cpc	r19, r1
    1368:	41 f4       	brne	.+16     	; 0x137a <malloc+0xee>
    136a:	2d b7       	in	r18, 0x3d	; 61
    136c:	3e b7       	in	r19, 0x3e	; 62
    136e:	40 91 04 02 	lds	r20, 0x0204
    1372:	50 91 05 02 	lds	r21, 0x0205
    1376:	24 1b       	sub	r18, r20
    1378:	35 0b       	sbc	r19, r21
    137a:	e0 91 56 02 	lds	r30, 0x0256
    137e:	f0 91 57 02 	lds	r31, 0x0257
    1382:	e2 17       	cp	r30, r18
    1384:	f3 07       	cpc	r31, r19
    1386:	a0 f4       	brcc	.+40     	; 0x13b0 <malloc+0x124>
    1388:	2e 1b       	sub	r18, r30
    138a:	3f 0b       	sbc	r19, r31
    138c:	28 17       	cp	r18, r24
    138e:	39 07       	cpc	r19, r25
    1390:	78 f0       	brcs	.+30     	; 0x13b0 <malloc+0x124>
    1392:	ac 01       	movw	r20, r24
    1394:	4e 5f       	subi	r20, 0xFE	; 254
    1396:	5f 4f       	sbci	r21, 0xFF	; 255
    1398:	24 17       	cp	r18, r20
    139a:	35 07       	cpc	r19, r21
    139c:	48 f0       	brcs	.+18     	; 0x13b0 <malloc+0x124>
    139e:	4e 0f       	add	r20, r30
    13a0:	5f 1f       	adc	r21, r31
    13a2:	50 93 57 02 	sts	0x0257, r21
    13a6:	40 93 56 02 	sts	0x0256, r20
    13aa:	81 93       	st	Z+, r24
    13ac:	91 93       	st	Z+, r25
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <malloc+0x128>
    13b0:	e0 e0       	ldi	r30, 0x00	; 0
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	cf 01       	movw	r24, r30
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	08 95       	ret

000013bc <free>:
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <free+0xa>
    13c4:	87 c0       	rjmp	.+270    	; 0x14d4 <free+0x118>
    13c6:	fc 01       	movw	r30, r24
    13c8:	32 97       	sbiw	r30, 0x02	; 2
    13ca:	13 82       	std	Z+3, r1	; 0x03
    13cc:	12 82       	std	Z+2, r1	; 0x02
    13ce:	c0 91 58 02 	lds	r28, 0x0258
    13d2:	d0 91 59 02 	lds	r29, 0x0259
    13d6:	20 97       	sbiw	r28, 0x00	; 0
    13d8:	81 f4       	brne	.+32     	; 0x13fa <free+0x3e>
    13da:	20 81       	ld	r18, Z
    13dc:	31 81       	ldd	r19, Z+1	; 0x01
    13de:	28 0f       	add	r18, r24
    13e0:	39 1f       	adc	r19, r25
    13e2:	80 91 56 02 	lds	r24, 0x0256
    13e6:	90 91 57 02 	lds	r25, 0x0257
    13ea:	82 17       	cp	r24, r18
    13ec:	93 07       	cpc	r25, r19
    13ee:	79 f5       	brne	.+94     	; 0x144e <free+0x92>
    13f0:	f0 93 57 02 	sts	0x0257, r31
    13f4:	e0 93 56 02 	sts	0x0256, r30
    13f8:	6d c0       	rjmp	.+218    	; 0x14d4 <free+0x118>
    13fa:	de 01       	movw	r26, r28
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	ae 17       	cp	r26, r30
    1402:	bf 07       	cpc	r27, r31
    1404:	50 f4       	brcc	.+20     	; 0x141a <free+0x5e>
    1406:	12 96       	adiw	r26, 0x02	; 2
    1408:	4d 91       	ld	r20, X+
    140a:	5c 91       	ld	r21, X
    140c:	13 97       	sbiw	r26, 0x03	; 3
    140e:	9d 01       	movw	r18, r26
    1410:	41 15       	cp	r20, r1
    1412:	51 05       	cpc	r21, r1
    1414:	09 f1       	breq	.+66     	; 0x1458 <free+0x9c>
    1416:	da 01       	movw	r26, r20
    1418:	f3 cf       	rjmp	.-26     	; 0x1400 <free+0x44>
    141a:	b3 83       	std	Z+3, r27	; 0x03
    141c:	a2 83       	std	Z+2, r26	; 0x02
    141e:	40 81       	ld	r20, Z
    1420:	51 81       	ldd	r21, Z+1	; 0x01
    1422:	84 0f       	add	r24, r20
    1424:	95 1f       	adc	r25, r21
    1426:	8a 17       	cp	r24, r26
    1428:	9b 07       	cpc	r25, r27
    142a:	71 f4       	brne	.+28     	; 0x1448 <free+0x8c>
    142c:	8d 91       	ld	r24, X+
    142e:	9c 91       	ld	r25, X
    1430:	11 97       	sbiw	r26, 0x01	; 1
    1432:	84 0f       	add	r24, r20
    1434:	95 1f       	adc	r25, r21
    1436:	02 96       	adiw	r24, 0x02	; 2
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	80 83       	st	Z, r24
    143c:	12 96       	adiw	r26, 0x02	; 2
    143e:	8d 91       	ld	r24, X+
    1440:	9c 91       	ld	r25, X
    1442:	13 97       	sbiw	r26, 0x03	; 3
    1444:	93 83       	std	Z+3, r25	; 0x03
    1446:	82 83       	std	Z+2, r24	; 0x02
    1448:	21 15       	cp	r18, r1
    144a:	31 05       	cpc	r19, r1
    144c:	29 f4       	brne	.+10     	; 0x1458 <free+0x9c>
    144e:	f0 93 59 02 	sts	0x0259, r31
    1452:	e0 93 58 02 	sts	0x0258, r30
    1456:	3e c0       	rjmp	.+124    	; 0x14d4 <free+0x118>
    1458:	d9 01       	movw	r26, r18
    145a:	13 96       	adiw	r26, 0x03	; 3
    145c:	fc 93       	st	X, r31
    145e:	ee 93       	st	-X, r30
    1460:	12 97       	sbiw	r26, 0x02	; 2
    1462:	4d 91       	ld	r20, X+
    1464:	5d 91       	ld	r21, X+
    1466:	a4 0f       	add	r26, r20
    1468:	b5 1f       	adc	r27, r21
    146a:	ea 17       	cp	r30, r26
    146c:	fb 07       	cpc	r31, r27
    146e:	79 f4       	brne	.+30     	; 0x148e <free+0xd2>
    1470:	80 81       	ld	r24, Z
    1472:	91 81       	ldd	r25, Z+1	; 0x01
    1474:	84 0f       	add	r24, r20
    1476:	95 1f       	adc	r25, r21
    1478:	02 96       	adiw	r24, 0x02	; 2
    147a:	d9 01       	movw	r26, r18
    147c:	11 96       	adiw	r26, 0x01	; 1
    147e:	9c 93       	st	X, r25
    1480:	8e 93       	st	-X, r24
    1482:	82 81       	ldd	r24, Z+2	; 0x02
    1484:	93 81       	ldd	r25, Z+3	; 0x03
    1486:	13 96       	adiw	r26, 0x03	; 3
    1488:	9c 93       	st	X, r25
    148a:	8e 93       	st	-X, r24
    148c:	12 97       	sbiw	r26, 0x02	; 2
    148e:	e0 e0       	ldi	r30, 0x00	; 0
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	9b 81       	ldd	r25, Y+3	; 0x03
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	19 f0       	breq	.+6      	; 0x14a0 <free+0xe4>
    149a:	fe 01       	movw	r30, r28
    149c:	ec 01       	movw	r28, r24
    149e:	f9 cf       	rjmp	.-14     	; 0x1492 <free+0xd6>
    14a0:	ce 01       	movw	r24, r28
    14a2:	02 96       	adiw	r24, 0x02	; 2
    14a4:	28 81       	ld	r18, Y
    14a6:	39 81       	ldd	r19, Y+1	; 0x01
    14a8:	82 0f       	add	r24, r18
    14aa:	93 1f       	adc	r25, r19
    14ac:	20 91 56 02 	lds	r18, 0x0256
    14b0:	30 91 57 02 	lds	r19, 0x0257
    14b4:	28 17       	cp	r18, r24
    14b6:	39 07       	cpc	r19, r25
    14b8:	69 f4       	brne	.+26     	; 0x14d4 <free+0x118>
    14ba:	30 97       	sbiw	r30, 0x00	; 0
    14bc:	29 f4       	brne	.+10     	; 0x14c8 <free+0x10c>
    14be:	10 92 59 02 	sts	0x0259, r1
    14c2:	10 92 58 02 	sts	0x0258, r1
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <free+0x110>
    14c8:	13 82       	std	Z+3, r1	; 0x03
    14ca:	12 82       	std	Z+2, r1	; 0x02
    14cc:	d0 93 57 02 	sts	0x0257, r29
    14d0:	c0 93 56 02 	sts	0x0256, r28
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	08 95       	ret

000014da <strnlen_P>:
    14da:	fc 01       	movw	r30, r24
    14dc:	05 90       	lpm	r0, Z+
    14de:	61 50       	subi	r22, 0x01	; 1
    14e0:	70 40       	sbci	r23, 0x00	; 0
    14e2:	01 10       	cpse	r0, r1
    14e4:	d8 f7       	brcc	.-10     	; 0x14dc <strnlen_P+0x2>
    14e6:	80 95       	com	r24
    14e8:	90 95       	com	r25
    14ea:	8e 0f       	add	r24, r30
    14ec:	9f 1f       	adc	r25, r31
    14ee:	08 95       	ret

000014f0 <memset>:
    14f0:	dc 01       	movw	r26, r24
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <memset+0x6>
    14f4:	6d 93       	st	X+, r22
    14f6:	41 50       	subi	r20, 0x01	; 1
    14f8:	50 40       	sbci	r21, 0x00	; 0
    14fa:	e0 f7       	brcc	.-8      	; 0x14f4 <memset+0x4>
    14fc:	08 95       	ret

000014fe <strnlen>:
    14fe:	fc 01       	movw	r30, r24
    1500:	61 50       	subi	r22, 0x01	; 1
    1502:	70 40       	sbci	r23, 0x00	; 0
    1504:	01 90       	ld	r0, Z+
    1506:	01 10       	cpse	r0, r1
    1508:	d8 f7       	brcc	.-10     	; 0x1500 <strnlen+0x2>
    150a:	80 95       	com	r24
    150c:	90 95       	com	r25
    150e:	8e 0f       	add	r24, r30
    1510:	9f 1f       	adc	r25, r31
    1512:	08 95       	ret

00001514 <fputc>:
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	18 2f       	mov	r17, r24
    151e:	09 2f       	mov	r16, r25
    1520:	eb 01       	movw	r28, r22
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	81 fd       	sbrc	r24, 1
    1526:	03 c0       	rjmp	.+6      	; 0x152e <fputc+0x1a>
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	9f ef       	ldi	r25, 0xFF	; 255
    152c:	20 c0       	rjmp	.+64     	; 0x156e <fputc+0x5a>
    152e:	82 ff       	sbrs	r24, 2
    1530:	10 c0       	rjmp	.+32     	; 0x1552 <fputc+0x3e>
    1532:	4e 81       	ldd	r20, Y+6	; 0x06
    1534:	5f 81       	ldd	r21, Y+7	; 0x07
    1536:	2c 81       	ldd	r18, Y+4	; 0x04
    1538:	3d 81       	ldd	r19, Y+5	; 0x05
    153a:	42 17       	cp	r20, r18
    153c:	53 07       	cpc	r21, r19
    153e:	7c f4       	brge	.+30     	; 0x155e <fputc+0x4a>
    1540:	e8 81       	ld	r30, Y
    1542:	f9 81       	ldd	r31, Y+1	; 0x01
    1544:	9f 01       	movw	r18, r30
    1546:	2f 5f       	subi	r18, 0xFF	; 255
    1548:	3f 4f       	sbci	r19, 0xFF	; 255
    154a:	39 83       	std	Y+1, r19	; 0x01
    154c:	28 83       	st	Y, r18
    154e:	10 83       	st	Z, r17
    1550:	06 c0       	rjmp	.+12     	; 0x155e <fputc+0x4a>
    1552:	e8 85       	ldd	r30, Y+8	; 0x08
    1554:	f9 85       	ldd	r31, Y+9	; 0x09
    1556:	81 2f       	mov	r24, r17
    1558:	19 95       	eicall
    155a:	89 2b       	or	r24, r25
    155c:	29 f7       	brne	.-54     	; 0x1528 <fputc+0x14>
    155e:	2e 81       	ldd	r18, Y+6	; 0x06
    1560:	3f 81       	ldd	r19, Y+7	; 0x07
    1562:	2f 5f       	subi	r18, 0xFF	; 255
    1564:	3f 4f       	sbci	r19, 0xFF	; 255
    1566:	3f 83       	std	Y+7, r19	; 0x07
    1568:	2e 83       	std	Y+6, r18	; 0x06
    156a:	81 2f       	mov	r24, r17
    156c:	90 2f       	mov	r25, r16
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	08 95       	ret

00001578 <__ultoa_invert>:
    1578:	fa 01       	movw	r30, r20
    157a:	aa 27       	eor	r26, r26
    157c:	28 30       	cpi	r18, 0x08	; 8
    157e:	51 f1       	breq	.+84     	; 0x15d4 <__ultoa_invert+0x5c>
    1580:	20 31       	cpi	r18, 0x10	; 16
    1582:	81 f1       	breq	.+96     	; 0x15e4 <__ultoa_invert+0x6c>
    1584:	e8 94       	clt
    1586:	6f 93       	push	r22
    1588:	6e 7f       	andi	r22, 0xFE	; 254
    158a:	6e 5f       	subi	r22, 0xFE	; 254
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	8f 4f       	sbci	r24, 0xFF	; 255
    1590:	9f 4f       	sbci	r25, 0xFF	; 255
    1592:	af 4f       	sbci	r26, 0xFF	; 255
    1594:	b1 e0       	ldi	r27, 0x01	; 1
    1596:	3e d0       	rcall	.+124    	; 0x1614 <__ultoa_invert+0x9c>
    1598:	b4 e0       	ldi	r27, 0x04	; 4
    159a:	3c d0       	rcall	.+120    	; 0x1614 <__ultoa_invert+0x9c>
    159c:	67 0f       	add	r22, r23
    159e:	78 1f       	adc	r23, r24
    15a0:	89 1f       	adc	r24, r25
    15a2:	9a 1f       	adc	r25, r26
    15a4:	a1 1d       	adc	r26, r1
    15a6:	68 0f       	add	r22, r24
    15a8:	79 1f       	adc	r23, r25
    15aa:	8a 1f       	adc	r24, r26
    15ac:	91 1d       	adc	r25, r1
    15ae:	a1 1d       	adc	r26, r1
    15b0:	6a 0f       	add	r22, r26
    15b2:	71 1d       	adc	r23, r1
    15b4:	81 1d       	adc	r24, r1
    15b6:	91 1d       	adc	r25, r1
    15b8:	a1 1d       	adc	r26, r1
    15ba:	20 d0       	rcall	.+64     	; 0x15fc <__ultoa_invert+0x84>
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <__ultoa_invert+0x48>
    15be:	68 94       	set
    15c0:	3f 91       	pop	r19
    15c2:	2a e0       	ldi	r18, 0x0A	; 10
    15c4:	26 9f       	mul	r18, r22
    15c6:	11 24       	eor	r1, r1
    15c8:	30 19       	sub	r19, r0
    15ca:	30 5d       	subi	r19, 0xD0	; 208
    15cc:	31 93       	st	Z+, r19
    15ce:	de f6       	brtc	.-74     	; 0x1586 <__ultoa_invert+0xe>
    15d0:	cf 01       	movw	r24, r30
    15d2:	08 95       	ret
    15d4:	46 2f       	mov	r20, r22
    15d6:	47 70       	andi	r20, 0x07	; 7
    15d8:	40 5d       	subi	r20, 0xD0	; 208
    15da:	41 93       	st	Z+, r20
    15dc:	b3 e0       	ldi	r27, 0x03	; 3
    15de:	0f d0       	rcall	.+30     	; 0x15fe <__ultoa_invert+0x86>
    15e0:	c9 f7       	brne	.-14     	; 0x15d4 <__ultoa_invert+0x5c>
    15e2:	f6 cf       	rjmp	.-20     	; 0x15d0 <__ultoa_invert+0x58>
    15e4:	46 2f       	mov	r20, r22
    15e6:	4f 70       	andi	r20, 0x0F	; 15
    15e8:	40 5d       	subi	r20, 0xD0	; 208
    15ea:	4a 33       	cpi	r20, 0x3A	; 58
    15ec:	18 f0       	brcs	.+6      	; 0x15f4 <__ultoa_invert+0x7c>
    15ee:	49 5d       	subi	r20, 0xD9	; 217
    15f0:	31 fd       	sbrc	r19, 1
    15f2:	40 52       	subi	r20, 0x20	; 32
    15f4:	41 93       	st	Z+, r20
    15f6:	02 d0       	rcall	.+4      	; 0x15fc <__ultoa_invert+0x84>
    15f8:	a9 f7       	brne	.-22     	; 0x15e4 <__ultoa_invert+0x6c>
    15fa:	ea cf       	rjmp	.-44     	; 0x15d0 <__ultoa_invert+0x58>
    15fc:	b4 e0       	ldi	r27, 0x04	; 4
    15fe:	a6 95       	lsr	r26
    1600:	97 95       	ror	r25
    1602:	87 95       	ror	r24
    1604:	77 95       	ror	r23
    1606:	67 95       	ror	r22
    1608:	ba 95       	dec	r27
    160a:	c9 f7       	brne	.-14     	; 0x15fe <__ultoa_invert+0x86>
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	61 05       	cpc	r22, r1
    1610:	71 05       	cpc	r23, r1
    1612:	08 95       	ret
    1614:	9b 01       	movw	r18, r22
    1616:	ac 01       	movw	r20, r24
    1618:	0a 2e       	mov	r0, r26
    161a:	06 94       	lsr	r0
    161c:	57 95       	ror	r21
    161e:	47 95       	ror	r20
    1620:	37 95       	ror	r19
    1622:	27 95       	ror	r18
    1624:	ba 95       	dec	r27
    1626:	c9 f7       	brne	.-14     	; 0x161a <__ultoa_invert+0xa2>
    1628:	62 0f       	add	r22, r18
    162a:	73 1f       	adc	r23, r19
    162c:	84 1f       	adc	r24, r20
    162e:	95 1f       	adc	r25, r21
    1630:	a0 1d       	adc	r26, r0
    1632:	08 95       	ret

00001634 <_exit>:
    1634:	f8 94       	cli

00001636 <__stop_program>:
    1636:	ff cf       	rjmp	.-2      	; 0x1636 <__stop_program>
